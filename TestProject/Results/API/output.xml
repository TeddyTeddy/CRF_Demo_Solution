<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0.3 (Python 3.7.4 on linux)" generated="20210731 21:37:21.278" rpa="false" schemaversion="2">
<suite id="s1" name="API" source="/home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/Tests/API">
<suite id="s1-s1" name="1-Reviewing-Users" source="/home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/Tests/API/1-Reviewing-Users.robot">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<arg>AND</arg>
<arg>Filter System Users By</arg>
<arg>username</arg>
<arg>\${SYSTEM_USERS_USERNAMES}</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:22.207" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:22.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:22.219" level="INFO">${pids} = 3269</msg>
<status status="PASS" starttime="20210731 21:37:22.203" endtime="20210731 21:37:22.219"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:22.224" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:22.220" endtime="20210731 21:37:22.224"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:22.226" level="INFO">${pids} = ['3269']</msg>
<status status="PASS" starttime="20210731 21:37:22.225" endtime="20210731 21:37:22.226"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3269</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:22.229" level="INFO">Running command 'kill 3269 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:22.226" endtime="20210731 21:37:22.230"/>
</kw>
<status status="PASS" starttime="20210731 21:37:22.226" endtime="20210731 21:37:22.230"/>
</iter>
<status status="PASS" starttime="20210731 21:37:22.226" endtime="20210731 21:37:22.230"/>
</for>
<status status="PASS" starttime="20210731 21:37:22.225" endtime="20210731 21:37:22.230"/>
</branch>
<status status="PASS" starttime="20210731 21:37:22.225" endtime="20210731 21:37:22.230"/>
</if>
<status status="PASS" starttime="20210731 21:37:22.202" endtime="20210731 21:37:22.230"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:22.232" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:22.231" endtime="20210731 21:37:22.232"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:22.232" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:22.232" endtime="20210731 21:37:22.233"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:22.233" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:22.233" endtime="20210731 21:37:22.233"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:22.234" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:22.233" endtime="20210731 21:37:22.234"/>
</kw>
<msg timestamp="20210731 21:37:22.234" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:22.232" endtime="20210731 21:37:22.234"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:22.238" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:22.234" endtime="20210731 21:37:22.248"/>
</kw>
<status status="PASS" starttime="20210731 21:37:22.231" endtime="20210731 21:37:22.249"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:22.251" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:22.250" endtime="20210731 21:37:22.259"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:23.761" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:22.260" endtime="20210731 21:37:23.761"/>
</kw>
<status status="PASS" starttime="20210731 21:37:22.249" endtime="20210731 21:37:23.761"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:23.763" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:23.763" endtime="20210731 21:37:23.763"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:23.763" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:23.763" endtime="20210731 21:37:23.763"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:23.764" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:23.763" endtime="20210731 21:37:23.764"/>
</kw>
<msg timestamp="20210731 21:37:23.764" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:23.762" endtime="20210731 21:37:23.764"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:23.766" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:23.764" endtime="20210731 21:37:23.767"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.762" endtime="20210731 21:37:23.767"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:23.767" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:23.768" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:23.767" endtime="20210731 21:37:23.768"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.767" endtime="20210731 21:37:23.768"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:23.769" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:23.769" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:23.768" endtime="20210731 21:37:23.769"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:23.769" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:23.769" endtime="20210731 21:37:23.769"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:23.770" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:23.770" endtime="20210731 21:37:23.770"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:23.770" endtime="20210731 21:37:23.771"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:23.772" endtime="20210731 21:37:23.772"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.770" endtime="20210731 21:37:23.772"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:23.772" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:23.772" endtime="20210731 21:37:23.772"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:23.773" endtime="20210731 21:37:23.774"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:23.774" endtime="20210731 21:37:23.774"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.772" endtime="20210731 21:37:23.774"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:23.774" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:23.774" endtime="20210731 21:37:23.775"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:23.775" endtime="20210731 21:37:23.776"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:23.776" endtime="20210731 21:37:23.776"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.774" endtime="20210731 21:37:23.776"/>
</iter>
<status status="PASS" starttime="20210731 21:37:23.769" endtime="20210731 21:37:23.776"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:23.777" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:23.776" endtime="20210731 21:37:23.777"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.768" endtime="20210731 21:37:23.777"/>
</kw>
<kw name="Filter System Users By">
<arg>username</arg>
<arg>\${SYSTEM_USERS_USERNAMES}</arg>
<doc>This keyword expects SYSTEM_USERS suite variable being present in the suite.
SYSTEM_USERS is a list of system users, each of which is a dictionary
An example of a system user:
{'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}
As you see, there are several keys such as username, firstname, lastname, phone and token.
This keyword filters by SYSTEM_USERS with a given key (e.g. username).
That is, all the usernames in SYSTEM_USERS are placed into a new list.
Then this keyword sets a suite variable with that new list. The name of the suite variable
is provided in DYNAMIC_VARIABLE_NAME variable.
Some example usages:
(1) gives all the usernames in SYSTEM_USERS_USERNAMES suite variable:
Filter System Users By username ${SYSTEM_USERS_USERNAMES}
(2) gives all lastnames in SYSTEM_USERS_LASTNAMES suite variable:
Filter System Users By lastname ${SYSTEM_USERS_LASTNAMES}</doc>
<kw name="Create List" library="BuiltIn">
<var>${list}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:23.778" level="INFO">${list} = []</msg>
<status status="PASS" starttime="20210731 21:37:23.777" endtime="20210731 21:37:23.778"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="Append To List" library="Collections">
<arg>${list}</arg>
<arg>${system_user}[${key}]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:23.778" endtime="20210731 21:37:23.778"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.778" endtime="20210731 21:37:23.778"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="Append To List" library="Collections">
<arg>${list}</arg>
<arg>${system_user}[${key}]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:23.779" endtime="20210731 21:37:23.779"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.778" endtime="20210731 21:37:23.779"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="Append To List" library="Collections">
<arg>${list}</arg>
<arg>${system_user}[${key}]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:23.779" endtime="20210731 21:37:23.780"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.779" endtime="20210731 21:37:23.780"/>
</iter>
<status status="PASS" starttime="20210731 21:37:23.778" endtime="20210731 21:37:23.780"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${DYNAMIC_VARIABLE_NAME}</arg>
<arg>${list}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:23.780" level="INFO">${SYSTEM_USERS_USERNAMES} = ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3']</msg>
<status status="PASS" starttime="20210731 21:37:23.780" endtime="20210731 21:37:23.780"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.777" endtime="20210731 21:37:23.780"/>
</kw>
<status status="PASS" starttime="20210731 21:37:22.202" endtime="20210731 21:37:23.781"/>
</kw>
<test id="s1-s1-t1" name="With No Token, Reading Users From API Should Return Error">
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:23.793" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:23.782" endtime="20210731 21:37:23.793"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20210731 21:37:23.794" level="FAIL">SUCCESS != FAILURE</msg>
<status status="FAIL" starttime="20210731 21:37:23.794" endtime="20210731 21:37:23.794"/>
</kw>
<doc>Given no token, when reading usernames from API, the api
must return FAILURE in its response status</doc>
<status status="FAIL" starttime="20210731 21:37:23.781" endtime="20210731 21:37:23.795">SUCCESS != FAILURE</status>
</test>
<test id="s1-s1-t2" name="With Invalid Token, Reading Users From API Should Return Error">
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=Invalid Token</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:23.797" level="INFO">${headers} = {'Token': 'Invalid Token'}</msg>
<status status="PASS" starttime="20210731 21:37:23.796" endtime="20210731 21:37:23.797"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:23.801" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:23.797" endtime="20210731 21:37:23.801"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20210731 21:37:23.802" level="FAIL">SUCCESS != FAILURE</msg>
<status status="FAIL" starttime="20210731 21:37:23.802" endtime="20210731 21:37:23.802"/>
</kw>
<doc>Given an invalid token, when reading usernames from API, the api
must return FAILURE in its response status</doc>
<status status="FAIL" starttime="20210731 21:37:23.795" endtime="20210731 21:37:23.802">SUCCESS != FAILURE</status>
</test>
<test id="s1-s1-t3" name="With Valid Token, Reading Users From API Matches With Users From DB">
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Reading Users From API Should Return All System Users' Usernames">
<arg>${system_user}</arg>
<doc>The system_user parameter is a dictionary. An example:
{'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}
This keyword uses the token of system_user to make a GET request.
It then expects that response status is SUCCESS and the response payload
contains usernames (i.e. SYSTEM_USERS_USERNAMES) read from the database.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${system_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:23.805" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:23.804" endtime="20210731 21:37:23.805"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:23.809" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:23.805" endtime="20210731 21:37:23.809"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:23.809" endtime="20210731 21:37:23.809"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${SYSTEM_USERS_USERNAMES}</arg>
<arg>${response}[payload]</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20210731 21:37:23.810" endtime="20210731 21:37:23.810"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.804" endtime="20210731 21:37:23.810"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.804" endtime="20210731 21:37:23.810"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Reading Users From API Should Return All System Users' Usernames">
<arg>${system_user}</arg>
<doc>The system_user parameter is a dictionary. An example:
{'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}
This keyword uses the token of system_user to make a GET request.
It then expects that response status is SUCCESS and the response payload
contains usernames (i.e. SYSTEM_USERS_USERNAMES) read from the database.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${system_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:23.811" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:23.811" endtime="20210731 21:37:23.811"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:23.817" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:23.811" endtime="20210731 21:37:23.817"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:23.817" endtime="20210731 21:37:23.818"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${SYSTEM_USERS_USERNAMES}</arg>
<arg>${response}[payload]</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20210731 21:37:23.818" endtime="20210731 21:37:23.818"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.810" endtime="20210731 21:37:23.818"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.810" endtime="20210731 21:37:23.818"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Reading Users From API Should Return All System Users' Usernames">
<arg>${system_user}</arg>
<doc>The system_user parameter is a dictionary. An example:
{'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}
This keyword uses the token of system_user to make a GET request.
It then expects that response status is SUCCESS and the response payload
contains usernames (i.e. SYSTEM_USERS_USERNAMES) read from the database.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${system_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:23.819" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:23.819" endtime="20210731 21:37:23.820"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:23.824" level="INFO">${response} = {'payload': ['SuperDuperUser1', 'SuperDuperUser2', 'SuperDuperUser3'], 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:23.820" endtime="20210731 21:37:23.824"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:23.825" endtime="20210731 21:37:23.825"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${SYSTEM_USERS_USERNAMES}</arg>
<arg>${response}[payload]</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20210731 21:37:23.825" endtime="20210731 21:37:23.826"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.819" endtime="20210731 21:37:23.826"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.819" endtime="20210731 21:37:23.826"/>
</iter>
<status status="PASS" starttime="20210731 21:37:23.803" endtime="20210731 21:37:23.826"/>
</for>
<doc>Valid token results in reading all users from the database regardless of the system_user
That is, as long as system_user has a valid token, it can retrive usernames from the API.</doc>
<status status="PASS" starttime="20210731 21:37:23.803" endtime="20210731 21:37:23.826"/>
</test>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:23.849" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:23.861" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:23.862" level="INFO">${pids} = 3292
3299
3306</msg>
<status status="PASS" starttime="20210731 21:37:23.827" endtime="20210731 21:37:23.862"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:23.863" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:23.862" endtime="20210731 21:37:23.863"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:23.864" level="INFO">${pids} = ['3292', '3299', '3306']</msg>
<status status="PASS" starttime="20210731 21:37:23.863" endtime="20210731 21:37:23.864"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3292</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:23.867" level="INFO">Running command 'kill 3292 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:23.864" endtime="20210731 21:37:23.868"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.864" endtime="20210731 21:37:23.868"/>
</iter>
<iter>
<var name="${pid}">3299</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:23.871" level="INFO">Running command 'kill 3299 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:23.868" endtime="20210731 21:37:23.871"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.868" endtime="20210731 21:37:23.871"/>
</iter>
<iter>
<var name="${pid}">3306</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:23.876" level="INFO">Running command 'kill 3306 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:23.872" endtime="20210731 21:37:23.877"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.872" endtime="20210731 21:37:23.877"/>
</iter>
<status status="PASS" starttime="20210731 21:37:23.864" endtime="20210731 21:37:23.877"/>
</for>
<status status="PASS" starttime="20210731 21:37:23.863" endtime="20210731 21:37:23.877"/>
</branch>
<status status="PASS" starttime="20210731 21:37:23.863" endtime="20210731 21:37:23.877"/>
</if>
<status status="PASS" starttime="20210731 21:37:23.827" endtime="20210731 21:37:23.877"/>
</kw>
<doc>This test suite contains test cases for CRF Demo API.
Documentation for the API can be found:
https://github.com/Interview-demoapp/Flasky
The acceptance criteria we verify here is
"1: As an API Consumer, I can review users registered in the system"
Definitions
(1) System User: The user, who is registered to the system under test
(2) API User: The user, who calls the API to fetch information (i.e. username) about the system user</doc>
<status status="FAIL" starttime="20210731 21:37:21.308" endtime="20210731 21:37:23.877"/>
</suite>
<suite id="s1-s2" name="2-Getting-Personal-Information" source="/home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/Tests/API/2-Getting-Personal-Information.robot">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:23.918" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:23.934" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:23.934" level="INFO">${pids} = 3339</msg>
<status status="PASS" starttime="20210731 21:37:23.914" endtime="20210731 21:37:23.934"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:23.935" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:23.935" endtime="20210731 21:37:23.935"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:23.936" level="INFO">${pids} = ['3339']</msg>
<status status="PASS" starttime="20210731 21:37:23.936" endtime="20210731 21:37:23.936"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3339</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:23.960" level="INFO">Running command 'kill 3339 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:23.937" endtime="20210731 21:37:23.960"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.937" endtime="20210731 21:37:23.961"/>
</iter>
<status status="PASS" starttime="20210731 21:37:23.937" endtime="20210731 21:37:23.961"/>
</for>
<status status="PASS" starttime="20210731 21:37:23.936" endtime="20210731 21:37:23.961"/>
</branch>
<status status="PASS" starttime="20210731 21:37:23.935" endtime="20210731 21:37:23.961"/>
</if>
<status status="PASS" starttime="20210731 21:37:23.913" endtime="20210731 21:37:23.961"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:23.963" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:23.962" endtime="20210731 21:37:23.963"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:23.963" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:23.963" endtime="20210731 21:37:23.963"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:23.964" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:23.964" endtime="20210731 21:37:23.964"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:23.964" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:23.964" endtime="20210731 21:37:23.964"/>
</kw>
<msg timestamp="20210731 21:37:23.965" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:23.963" endtime="20210731 21:37:23.965"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:23.969" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:23.965" endtime="20210731 21:37:23.971"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.962" endtime="20210731 21:37:23.971"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:23.973" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:23.972" endtime="20210731 21:37:23.977"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:25.478" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:23.978" endtime="20210731 21:37:25.479"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.972" endtime="20210731 21:37:25.479"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:25.480" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:25.480" endtime="20210731 21:37:25.480"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:25.481" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:25.480" endtime="20210731 21:37:25.481"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:25.482" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:25.481" endtime="20210731 21:37:25.482"/>
</kw>
<msg timestamp="20210731 21:37:25.482" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:25.480" endtime="20210731 21:37:25.482"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:25.483" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:25.482" endtime="20210731 21:37:25.483"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.479" endtime="20210731 21:37:25.483"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:25.484" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:25.484" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:25.484" endtime="20210731 21:37:25.484"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.483" endtime="20210731 21:37:25.484"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:25.485" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:25.485" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:25.485" endtime="20210731 21:37:25.485"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:25.486" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:25.485" endtime="20210731 21:37:25.486"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.486" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:25.486" endtime="20210731 21:37:25.486"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.487" endtime="20210731 21:37:25.487"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:25.488" endtime="20210731 21:37:25.488"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.486" endtime="20210731 21:37:25.488"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.488" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:25.488" endtime="20210731 21:37:25.488"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.489" endtime="20210731 21:37:25.490"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:25.490" endtime="20210731 21:37:25.490"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.488" endtime="20210731 21:37:25.490"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.491" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:25.490" endtime="20210731 21:37:25.491"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.491" endtime="20210731 21:37:25.492"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:25.492" endtime="20210731 21:37:25.492"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.490" endtime="20210731 21:37:25.492"/>
</iter>
<status status="PASS" starttime="20210731 21:37:25.486" endtime="20210731 21:37:25.492"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:25.493" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:25.492" endtime="20210731 21:37:25.493"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.484" endtime="20210731 21:37:25.493"/>
</kw>
<status status="PASS" starttime="20210731 21:37:23.912" endtime="20210731 21:37:25.493"/>
</kw>
<test id="s1-s2-t1" name="Fetching Personal Info Of System Users Without Token, API User Gets Error">
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="When Fetching Personal Info Of A System User Without A Token, API User Gets Error">
<arg>${system_user}[username]</arg>
<doc>If API user does not provide any Token in headers when making a GET request to /api/users/{username}
then user is supposed to get an error in the following form in the response body:
{
"message": "Token authentication required",
"status": "FAILURE"
}
This test case check that the message &amp; the status returned are correct</doc>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${username}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.500" level="INFO">${response} = {'message': 'Token authentication required', 'status': 'FAILURE'}</msg>
<status status="PASS" starttime="20210731 21:37:25.495" endtime="20210731 21:37:25.500"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.500" endtime="20210731 21:37:25.501"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>Token authentication required</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.501" endtime="20210731 21:37:25.501"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.494" endtime="20210731 21:37:25.501"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.494" endtime="20210731 21:37:25.501"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="When Fetching Personal Info Of A System User Without A Token, API User Gets Error">
<arg>${system_user}[username]</arg>
<doc>If API user does not provide any Token in headers when making a GET request to /api/users/{username}
then user is supposed to get an error in the following form in the response body:
{
"message": "Token authentication required",
"status": "FAILURE"
}
This test case check that the message &amp; the status returned are correct</doc>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${username}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.510" level="INFO">${response} = {'message': 'Token authentication required', 'status': 'FAILURE'}</msg>
<status status="PASS" starttime="20210731 21:37:25.502" endtime="20210731 21:37:25.510"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.510" endtime="20210731 21:37:25.510"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>Token authentication required</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.511" endtime="20210731 21:37:25.511"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.502" endtime="20210731 21:37:25.511"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.501" endtime="20210731 21:37:25.511"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="When Fetching Personal Info Of A System User Without A Token, API User Gets Error">
<arg>${system_user}[username]</arg>
<doc>If API user does not provide any Token in headers when making a GET request to /api/users/{username}
then user is supposed to get an error in the following form in the response body:
{
"message": "Token authentication required",
"status": "FAILURE"
}
This test case check that the message &amp; the status returned are correct</doc>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${username}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.516" level="INFO">${response} = {'message': 'Token authentication required', 'status': 'FAILURE'}</msg>
<status status="PASS" starttime="20210731 21:37:25.512" endtime="20210731 21:37:25.516"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.516" endtime="20210731 21:37:25.517"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>Token authentication required</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.517" endtime="20210731 21:37:25.517"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.511" endtime="20210731 21:37:25.517"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.511" endtime="20210731 21:37:25.517"/>
</iter>
<status status="PASS" starttime="20210731 21:37:25.494" endtime="20210731 21:37:25.517"/>
</for>
<doc>If a 3.rd party unknown user, who is not a system user with a valid token,
attempts to read personal information of system users without a token, then he will get an error.
The unknown user will receive the error regardless of which system user he queries.</doc>
<status status="PASS" starttime="20210731 21:37:25.493" endtime="20210731 21:37:25.518"/>
</test>
<test id="s1-s2-t2" name="Fetching Personal Info Of System Users With Invalid Token, API User Gets Error">
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="When Fetching Personal Info Of A System User With Invalid Token, API User Gets Error">
<arg>${system_user}[username]</arg>
<doc>Given an invalid token, when reading personal information of a system user
via GET request to /api/users/{username}, the api
must return the following in its response body:
{
"message": "Invalid Token",
"status": "FAILURE"
}</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=Invalid Token</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.520" level="INFO">${headers} = {'Token': 'Invalid Token'}</msg>
<status status="PASS" starttime="20210731 21:37:25.520" endtime="20210731 21:37:25.520"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${username}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.547" level="INFO">${response} = {'message': 'Invalid Token', 'status': 'FAILURE'}</msg>
<status status="PASS" starttime="20210731 21:37:25.520" endtime="20210731 21:37:25.547"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.547" endtime="20210731 21:37:25.547"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>Invalid Token</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.547" endtime="20210731 21:37:25.548"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.519" endtime="20210731 21:37:25.548"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.519" endtime="20210731 21:37:25.548"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="When Fetching Personal Info Of A System User With Invalid Token, API User Gets Error">
<arg>${system_user}[username]</arg>
<doc>Given an invalid token, when reading personal information of a system user
via GET request to /api/users/{username}, the api
must return the following in its response body:
{
"message": "Invalid Token",
"status": "FAILURE"
}</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=Invalid Token</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.549" level="INFO">${headers} = {'Token': 'Invalid Token'}</msg>
<status status="PASS" starttime="20210731 21:37:25.549" endtime="20210731 21:37:25.549"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${username}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.565" level="INFO">${response} = {'message': 'Invalid Token', 'status': 'FAILURE'}</msg>
<status status="PASS" starttime="20210731 21:37:25.549" endtime="20210731 21:37:25.565"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.565" endtime="20210731 21:37:25.565"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>Invalid Token</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.566" endtime="20210731 21:37:25.566"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.548" endtime="20210731 21:37:25.566"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.548" endtime="20210731 21:37:25.566"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="When Fetching Personal Info Of A System User With Invalid Token, API User Gets Error">
<arg>${system_user}[username]</arg>
<doc>Given an invalid token, when reading personal information of a system user
via GET request to /api/users/{username}, the api
must return the following in its response body:
{
"message": "Invalid Token",
"status": "FAILURE"
}</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=Invalid Token</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.567" level="INFO">${headers} = {'Token': 'Invalid Token'}</msg>
<status status="PASS" starttime="20210731 21:37:25.567" endtime="20210731 21:37:25.567"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${username}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.571" level="INFO">${response} = {'message': 'Invalid Token', 'status': 'FAILURE'}</msg>
<status status="PASS" starttime="20210731 21:37:25.567" endtime="20210731 21:37:25.572"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.572" endtime="20210731 21:37:25.572"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>Invalid Token</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.572" endtime="20210731 21:37:25.572"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.566" endtime="20210731 21:37:25.573"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.566" endtime="20210731 21:37:25.573"/>
</iter>
<status status="PASS" starttime="20210731 21:37:25.519" endtime="20210731 21:37:25.573"/>
</for>
<doc>If a 3.rd party unknown user, who is not a system user with a valid token,
attempts to read personal information of system users with an invalid token, then he will get an error.
The unknown user will receive the error regardless of which system user he queries.</doc>
<status status="PASS" starttime="20210731 21:37:25.518" endtime="20210731 21:37:25.573"/>
</test>
<test id="s1-s2-t3" name="Fetching Personal Info Of System User With Valid Token, API User Indeed Gets The Personal Info Of That System User">
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="Any API User With A Valid Token Can Fetch Personal Info Of All System Users">
<arg>${api_user}</arg>
<doc>Given an api_user example:
{'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}
We use the token of api_user as a request header.
We pick a system_user from SYSTEM_USERS in each FOR loop iteration.
And we query the personal information of that particular system_user using the api_user's token
Imagine we have three system users X, Y, Z. If api_user is X, then he can query the personal info of X, Y, Z
with his token using this keyword.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${api_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.575" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:25.575" endtime="20210731 21:37:25.575"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.580" level="INFO">${response} = {'message': 'retrieval succesful', 'payload': {'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124'}, 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:25.576" endtime="20210731 21:37:25.580"/>
</kw>
<kw name="Verify Response Contains Personal Info">
<arg>${system_user}</arg>
<arg>${response}</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.581" endtime="20210731 21:37:25.581"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>retrieval succesful</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.581" endtime="20210731 21:37:25.582"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][firstname]</arg>
<arg>${system_user}[firstname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.582" endtime="20210731 21:37:25.582"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][lastname]</arg>
<arg>${system_user}[lastname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.582" endtime="20210731 21:37:25.583"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][phone]</arg>
<arg>${system_user}[phone]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.583" endtime="20210731 21:37:25.583"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>username</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.583" endtime="20210731 21:37:25.584"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>password</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.584" endtime="20210731 21:37:25.584"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.580" endtime="20210731 21:37:25.584"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.575" endtime="20210731 21:37:25.584"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.590" level="INFO">${response} = {'message': 'retrieval succesful', 'payload': {'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563452'}, 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:25.585" endtime="20210731 21:37:25.590"/>
</kw>
<kw name="Verify Response Contains Personal Info">
<arg>${system_user}</arg>
<arg>${response}</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.591" endtime="20210731 21:37:25.591"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>retrieval succesful</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.591" endtime="20210731 21:37:25.592"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][firstname]</arg>
<arg>${system_user}[firstname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.592" endtime="20210731 21:37:25.592"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][lastname]</arg>
<arg>${system_user}[lastname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.592" endtime="20210731 21:37:25.593"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][phone]</arg>
<arg>${system_user}[phone]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.593" endtime="20210731 21:37:25.593"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>username</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.593" endtime="20210731 21:37:25.594"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>password</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.594" endtime="20210731 21:37:25.594"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.590" endtime="20210731 21:37:25.594"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.584" endtime="20210731 21:37:25.595"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.599" level="INFO">${response} = {'message': 'retrieval succesful', 'payload': {'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094677'}, 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:25.595" endtime="20210731 21:37:25.599"/>
</kw>
<kw name="Verify Response Contains Personal Info">
<arg>${system_user}</arg>
<arg>${response}</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.600" endtime="20210731 21:37:25.600"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>retrieval succesful</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.600" endtime="20210731 21:37:25.601"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][firstname]</arg>
<arg>${system_user}[firstname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.601" endtime="20210731 21:37:25.602"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][lastname]</arg>
<arg>${system_user}[lastname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.602" endtime="20210731 21:37:25.602"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][phone]</arg>
<arg>${system_user}[phone]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.602" endtime="20210731 21:37:25.603"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>username</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.603" endtime="20210731 21:37:25.603"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>password</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.603" endtime="20210731 21:37:25.603"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.599" endtime="20210731 21:37:25.603"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.595" endtime="20210731 21:37:25.604"/>
</iter>
<status status="PASS" starttime="20210731 21:37:25.575" endtime="20210731 21:37:25.604"/>
</for>
<status status="PASS" starttime="20210731 21:37:25.574" endtime="20210731 21:37:25.604"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.574" endtime="20210731 21:37:25.604"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="Any API User With A Valid Token Can Fetch Personal Info Of All System Users">
<arg>${api_user}</arg>
<doc>Given an api_user example:
{'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}
We use the token of api_user as a request header.
We pick a system_user from SYSTEM_USERS in each FOR loop iteration.
And we query the personal information of that particular system_user using the api_user's token
Imagine we have three system users X, Y, Z. If api_user is X, then he can query the personal info of X, Y, Z
with his token using this keyword.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${api_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.605" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:25.605" endtime="20210731 21:37:25.605"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.613" level="INFO">${response} = {'message': 'retrieval succesful', 'payload': {'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124'}, 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:25.606" endtime="20210731 21:37:25.613"/>
</kw>
<kw name="Verify Response Contains Personal Info">
<arg>${system_user}</arg>
<arg>${response}</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.614" endtime="20210731 21:37:25.614"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>retrieval succesful</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.614" endtime="20210731 21:37:25.626"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][firstname]</arg>
<arg>${system_user}[firstname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.626" endtime="20210731 21:37:25.627"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][lastname]</arg>
<arg>${system_user}[lastname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.627" endtime="20210731 21:37:25.627"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][phone]</arg>
<arg>${system_user}[phone]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.627" endtime="20210731 21:37:25.628"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>username</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.628" endtime="20210731 21:37:25.628"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>password</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.628" endtime="20210731 21:37:25.628"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.613" endtime="20210731 21:37:25.628"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.606" endtime="20210731 21:37:25.628"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.641" level="INFO">${response} = {'message': 'retrieval succesful', 'payload': {'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563452'}, 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:25.629" endtime="20210731 21:37:25.641"/>
</kw>
<kw name="Verify Response Contains Personal Info">
<arg>${system_user}</arg>
<arg>${response}</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.642" endtime="20210731 21:37:25.643"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>retrieval succesful</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.643" endtime="20210731 21:37:25.644"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][firstname]</arg>
<arg>${system_user}[firstname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.644" endtime="20210731 21:37:25.645"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][lastname]</arg>
<arg>${system_user}[lastname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.645" endtime="20210731 21:37:25.645"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][phone]</arg>
<arg>${system_user}[phone]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.646" endtime="20210731 21:37:25.646"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>username</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.646" endtime="20210731 21:37:25.647"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>password</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.647" endtime="20210731 21:37:25.647"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.641" endtime="20210731 21:37:25.648"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.629" endtime="20210731 21:37:25.648"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.654" level="INFO">${response} = {'message': 'retrieval succesful', 'payload': {'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094677'}, 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:25.648" endtime="20210731 21:37:25.654"/>
</kw>
<kw name="Verify Response Contains Personal Info">
<arg>${system_user}</arg>
<arg>${response}</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.655" endtime="20210731 21:37:25.655"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>retrieval succesful</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.656" endtime="20210731 21:37:25.656"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][firstname]</arg>
<arg>${system_user}[firstname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.656" endtime="20210731 21:37:25.656"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][lastname]</arg>
<arg>${system_user}[lastname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.657" endtime="20210731 21:37:25.657"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][phone]</arg>
<arg>${system_user}[phone]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.657" endtime="20210731 21:37:25.658"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>username</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.658" endtime="20210731 21:37:25.658"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>password</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.658" endtime="20210731 21:37:25.659"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.654" endtime="20210731 21:37:25.659"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.648" endtime="20210731 21:37:25.659"/>
</iter>
<status status="PASS" starttime="20210731 21:37:25.605" endtime="20210731 21:37:25.659"/>
</for>
<status status="PASS" starttime="20210731 21:37:25.604" endtime="20210731 21:37:25.659"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.604" endtime="20210731 21:37:25.659"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="Any API User With A Valid Token Can Fetch Personal Info Of All System Users">
<arg>${api_user}</arg>
<doc>Given an api_user example:
{'username': 'SuperDuperUser1', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124', 'token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}
We use the token of api_user as a request header.
We pick a system_user from SYSTEM_USERS in each FOR loop iteration.
And we query the personal information of that particular system_user using the api_user's token
Imagine we have three system users X, Y, Z. If api_user is X, then he can query the personal info of X, Y, Z
with his token using this keyword.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${api_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.660" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:25.660" endtime="20210731 21:37:25.660"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.665" level="INFO">${response} = {'message': 'retrieval succesful', 'payload': {'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627124'}, 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:25.661" endtime="20210731 21:37:25.666"/>
</kw>
<kw name="Verify Response Contains Personal Info">
<arg>${system_user}</arg>
<arg>${response}</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.666" endtime="20210731 21:37:25.667"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>retrieval succesful</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.667" endtime="20210731 21:37:25.667"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][firstname]</arg>
<arg>${system_user}[firstname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.667" endtime="20210731 21:37:25.668"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][lastname]</arg>
<arg>${system_user}[lastname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.668" endtime="20210731 21:37:25.668"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][phone]</arg>
<arg>${system_user}[phone]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.668" endtime="20210731 21:37:25.669"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>username</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.669" endtime="20210731 21:37:25.669"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>password</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.669" endtime="20210731 21:37:25.670"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.666" endtime="20210731 21:37:25.670"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.660" endtime="20210731 21:37:25.670"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.675" level="INFO">${response} = {'message': 'retrieval succesful', 'payload': {'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563452'}, 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:25.670" endtime="20210731 21:37:25.675"/>
</kw>
<kw name="Verify Response Contains Personal Info">
<arg>${system_user}</arg>
<arg>${response}</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.676" endtime="20210731 21:37:25.676"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>retrieval succesful</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.676" endtime="20210731 21:37:25.676"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][firstname]</arg>
<arg>${system_user}[firstname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.677" endtime="20210731 21:37:25.677"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][lastname]</arg>
<arg>${system_user}[lastname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.677" endtime="20210731 21:37:25.678"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][phone]</arg>
<arg>${system_user}[phone]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.678" endtime="20210731 21:37:25.678"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>username</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.678" endtime="20210731 21:37:25.679"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>password</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.679" endtime="20210731 21:37:25.679"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.675" endtime="20210731 21:37:25.679"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.670" endtime="20210731 21:37:25.679"/>
</iter>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.685" level="INFO">${response} = {'message': 'retrieval succesful', 'payload': {'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094677'}, 'status': 'SUCCESS'}</msg>
<status status="PASS" starttime="20210731 21:37:25.680" endtime="20210731 21:37:25.685"/>
</kw>
<kw name="Verify Response Contains Personal Info">
<arg>${system_user}</arg>
<arg>${response}</arg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>SUCCESS</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.686" endtime="20210731 21:37:25.686"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>retrieval succesful</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.687" endtime="20210731 21:37:25.687"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][firstname]</arg>
<arg>${system_user}[firstname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.687" endtime="20210731 21:37:25.687"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][lastname]</arg>
<arg>${system_user}[lastname]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.688" endtime="20210731 21:37:25.688"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[payload][phone]</arg>
<arg>${system_user}[phone]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20210731 21:37:25.688" endtime="20210731 21:37:25.689"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>username</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.689" endtime="20210731 21:37:25.689"/>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<arg>${response}[payload]</arg>
<arg>password</arg>
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:25.690" endtime="20210731 21:37:25.690"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.685" endtime="20210731 21:37:25.690"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.679" endtime="20210731 21:37:25.690"/>
</iter>
<status status="PASS" starttime="20210731 21:37:25.660" endtime="20210731 21:37:25.690"/>
</for>
<status status="PASS" starttime="20210731 21:37:25.659" endtime="20210731 21:37:25.690"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.659" endtime="20210731 21:37:25.690"/>
</iter>
<status status="PASS" starttime="20210731 21:37:25.574" endtime="20210731 21:37:25.691"/>
</for>
<doc>Imagine we have three system users X, Y, Z. This test case checks that
X, Y, Z can query the personal info of X, Y, Z with a their own respective keys.</doc>
<status status="PASS" starttime="20210731 21:37:25.573" endtime="20210731 21:37:25.691"/>
</test>
<test id="s1-s2-t4" name="Fetching Personal Info Of Non-Existing User With Valid Token, API User Gets Error">
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="When Fetching Personal Info Of Non-Existing User With Valid Token, API User Gets Error">
<arg>${api_user}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${api_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.694" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:25.693" endtime="20210731 21:37:25.694"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/non-existing-user</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.708" level="ERROR">HTTP error occurred: 500 Server Error: INTERNAL SERVER ERROR for url: http://0.0.0.0:8080/api/users/non-existing-user</msg>
<msg timestamp="20210731 21:37:25.709" level="FAIL">System under test has crashed with 5XX</msg>
<status status="FAIL" starttime="20210731 21:37:25.694" endtime="20210731 21:37:25.710"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" starttime="20210731 21:37:25.710" endtime="20210731 21:37:25.710"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>user does not exist</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" starttime="20210731 21:37:25.710" endtime="20210731 21:37:25.710"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:25.693" endtime="20210731 21:37:25.711"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:25.692" endtime="20210731 21:37:25.711"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="When Fetching Personal Info Of Non-Existing User With Valid Token, API User Gets Error">
<arg>${api_user}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${api_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.712" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:25.712" endtime="20210731 21:37:25.712"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/non-existing-user</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.718" level="ERROR">HTTP error occurred: 500 Server Error: INTERNAL SERVER ERROR for url: http://0.0.0.0:8080/api/users/non-existing-user</msg>
<msg timestamp="20210731 21:37:25.719" level="FAIL">System under test has crashed with 5XX</msg>
<status status="FAIL" starttime="20210731 21:37:25.713" endtime="20210731 21:37:25.719"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" starttime="20210731 21:37:25.720" endtime="20210731 21:37:25.720"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>user does not exist</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" starttime="20210731 21:37:25.720" endtime="20210731 21:37:25.720"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:25.711" endtime="20210731 21:37:25.721"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:25.711" endtime="20210731 21:37:25.721"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="When Fetching Personal Info Of Non-Existing User With Valid Token, API User Gets Error">
<arg>${api_user}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${api_user}[token]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:25.723" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:25.722" endtime="20210731 21:37:25.723"/>
</kw>
<kw name="GET" library="CRUD_Library">
<var>${response}</var>
<arg>/users/non-existing-user</arg>
<arg>headers=${headers}</arg>
<doc>Sends a GET request to the endpoint.</doc>
<msg timestamp="20210731 21:37:25.732" level="ERROR">HTTP error occurred: 500 Server Error: INTERNAL SERVER ERROR for url: http://0.0.0.0:8080/api/users/non-existing-user</msg>
<msg timestamp="20210731 21:37:25.733" level="FAIL">System under test has crashed with 5XX</msg>
<status status="FAIL" starttime="20210731 21:37:25.723" endtime="20210731 21:37:25.733"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[status]</arg>
<arg>FAILURE</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" starttime="20210731 21:37:25.733" endtime="20210731 21:37:25.735"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${response}[message]</arg>
<arg>user does not exist</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" starttime="20210731 21:37:25.737" endtime="20210731 21:37:25.738"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:25.722" endtime="20210731 21:37:25.738"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:25.721" endtime="20210731 21:37:25.738"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:25.692" endtime="20210731 21:37:25.738"/>
</for>
<doc>Imagine we have three system users X, Y, Z. Each of them wants to query personal
information of non-existing system user A. The system should return a response
having a message "user does not exist" with status FAILURE</doc>
<status status="FAIL" starttime="20210731 21:37:25.691" endtime="20210731 21:37:25.738">Several failures occurred:

1) System under test has crashed with 5XX

2) System under test has crashed with 5XX

3) System under test has crashed with 5XX</status>
</test>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:25.775" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:25.804" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:25.804" level="INFO">${pids} = 3362
3369
3429</msg>
<status status="PASS" starttime="20210731 21:37:25.740" endtime="20210731 21:37:25.804"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:25.806" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:25.805" endtime="20210731 21:37:25.806"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:25.807" level="INFO">${pids} = ['3362', '3369', '3429']</msg>
<status status="PASS" starttime="20210731 21:37:25.807" endtime="20210731 21:37:25.807"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3362</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:25.817" level="INFO">Running command 'kill 3362 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:25.807" endtime="20210731 21:37:25.818"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.807" endtime="20210731 21:37:25.818"/>
</iter>
<iter>
<var name="${pid}">3369</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:25.825" level="INFO">Running command 'kill 3369 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:25.821" endtime="20210731 21:37:25.825"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.819" endtime="20210731 21:37:25.826"/>
</iter>
<iter>
<var name="${pid}">3429</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:25.829" level="INFO">Running command 'kill 3429 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:25.826" endtime="20210731 21:37:25.830"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.826" endtime="20210731 21:37:25.830"/>
</iter>
<status status="PASS" starttime="20210731 21:37:25.807" endtime="20210731 21:37:25.830"/>
</for>
<status status="PASS" starttime="20210731 21:37:25.806" endtime="20210731 21:37:25.830"/>
</branch>
<status status="PASS" starttime="20210731 21:37:25.806" endtime="20210731 21:37:25.830"/>
</if>
<status status="PASS" starttime="20210731 21:37:25.739" endtime="20210731 21:37:25.830"/>
</kw>
<doc>This test suite contains test cases for CRF Demo API.
Documentation for the API can be found:
https://github.com/Interview-demoapp/Flasky
The acceptance criteria we verify here is
"2: As an API Consumer, if authenticated, I can get personal information of users"
Definitions
(1) System User: The user, who is registered to the system under test
(2) API User: The user, who calls the API to fetch personal information about the system user</doc>
<status status="FAIL" starttime="20210731 21:37:23.885" endtime="20210731 21:37:25.830"/>
</suite>
<suite id="s1-s3" name="3-Updating-Personal-Information" source="/home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/Tests/API/3-Updating-Personal-Information.robot">
<kw name="Import DataManager" library="Common" type="SETUP">
<kw name="Convert Suite Variables To Correct Types" library="Common">
<doc>This keyword is needed because parameters passed by command line
to robot (i.e. -v variable_name:value) are of string types.
In run command we pass 2 parameters to robot:
robot -d Results/ -v DATA_SET_LENGTH:100 -v USE_EXISTING_FORM_DATA_SET:True -v BROWSER:chromium -P CustomLibs Tests/
So, we have the following variables passed as strings:
- DATA_SET_LENGTH:100
- USE_EXISTING_FORM_DATA_SET:True
We need to convert:
- DATA_SET_LENGTH to int (i.e. integer)
- USE_EXISTING_FORM_DATA_SET to bool (i.e. boolean)
Later these values will be used while loading DataManager.robot resource.</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${DATA_SET_LENGTH}</var>
<arg>int($DATA_SET_LENGTH)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:25.858" level="INFO">${DATA_SET_LENGTH} = 100</msg>
<status status="PASS" starttime="20210731 21:37:25.857" endtime="20210731 21:37:25.858"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${USE_EXISTING_FORM_DATA_SET}</var>
<arg>$USE_EXISTING_FORM_DATA_SET=='True'</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:25.858" level="INFO">${USE_EXISTING_FORM_DATA_SET} = True</msg>
<status status="PASS" starttime="20210731 21:37:25.858" endtime="20210731 21:37:25.858"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${DATA_SET_LENGTH}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:25.859" level="INFO">${DATA_SET_LENGTH} = 100</msg>
<status status="PASS" starttime="20210731 21:37:25.858" endtime="20210731 21:37:25.859"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${USE_EXISTING_FORM_DATA_SET}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:25.859" level="INFO">${USE_EXISTING_FORM_DATA_SET} = True</msg>
<status status="PASS" starttime="20210731 21:37:25.859" endtime="20210731 21:37:25.859"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.857" endtime="20210731 21:37:25.859"/>
</kw>
<kw name="Import Resource" library="BuiltIn">
<arg>${EXECDIR}${/}Resources${/}DataManager.robot</arg>
<doc>Imports a resource file with the given path.</doc>
<status status="PASS" starttime="20210731 21:37:25.860" endtime="20210731 21:37:25.901"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.856" endtime="20210731 21:37:25.901"/>
</kw>
<test id="s1-s3-t1" name="With Each Valid Token, Updating Username Of Each System User With '' Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:25.921" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:25.933" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:25.933" level="INFO">${pids} = 3537</msg>
<status status="PASS" starttime="20210731 21:37:25.905" endtime="20210731 21:37:25.933"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:25.935" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:25.934" endtime="20210731 21:37:25.935"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:25.939" level="INFO">${pids} = ['3537']</msg>
<status status="PASS" starttime="20210731 21:37:25.938" endtime="20210731 21:37:25.939"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3537</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:25.955" level="INFO">Running command 'kill 3537 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:25.949" endtime="20210731 21:37:25.956"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.948" endtime="20210731 21:37:25.956"/>
</iter>
<status status="PASS" starttime="20210731 21:37:25.948" endtime="20210731 21:37:25.956"/>
</for>
<status status="PASS" starttime="20210731 21:37:25.937" endtime="20210731 21:37:25.956"/>
</branch>
<status status="PASS" starttime="20210731 21:37:25.936" endtime="20210731 21:37:25.956"/>
</if>
<status status="PASS" starttime="20210731 21:37:25.905" endtime="20210731 21:37:25.956"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:25.958" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:25.957" endtime="20210731 21:37:25.958"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:25.959" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:25.959" endtime="20210731 21:37:25.959"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:25.959" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:25.959" endtime="20210731 21:37:25.959"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:25.960" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:25.959" endtime="20210731 21:37:25.960"/>
</kw>
<msg timestamp="20210731 21:37:25.960" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:25.958" endtime="20210731 21:37:25.960"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:25.963" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:25.960" endtime="20210731 21:37:25.965"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.957" endtime="20210731 21:37:25.965"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:25.967" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:25.966" endtime="20210731 21:37:25.972"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:27.474" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:25.973" endtime="20210731 21:37:27.474"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.965" endtime="20210731 21:37:27.475"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:27.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:27.476" endtime="20210731 21:37:27.476"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:27.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:27.476" endtime="20210731 21:37:27.476"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:27.477" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:27.476" endtime="20210731 21:37:27.477"/>
</kw>
<msg timestamp="20210731 21:37:27.477" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:27.475" endtime="20210731 21:37:27.477"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:27.478" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:27.477" endtime="20210731 21:37:27.478"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.475" endtime="20210731 21:37:27.478"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:27.479" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:27.479" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:27.479" endtime="20210731 21:37:27.479"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.478" endtime="20210731 21:37:27.479"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:27.480" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:27.480" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:27.480" endtime="20210731 21:37:27.480"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:27.480" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:27.480" endtime="20210731 21:37:27.480"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:27.481" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:27.481" endtime="20210731 21:37:27.481"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:27.481" endtime="20210731 21:37:27.482"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:27.482" endtime="20210731 21:37:27.483"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.481" endtime="20210731 21:37:27.483"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:27.483" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:27.483" endtime="20210731 21:37:27.483"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:27.483" endtime="20210731 21:37:27.485"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:27.486" endtime="20210731 21:37:27.487"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.483" endtime="20210731 21:37:27.487"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:27.488" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:27.487" endtime="20210731 21:37:27.488"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:27.488" endtime="20210731 21:37:27.489"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:27.489" endtime="20210731 21:37:27.489"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.487" endtime="20210731 21:37:27.489"/>
</iter>
<status status="PASS" starttime="20210731 21:37:27.480" endtime="20210731 21:37:27.490"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:27.490" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:27.490" endtime="20210731 21:37:27.490"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.479" endtime="20210731 21:37:27.490"/>
</kw>
<status status="PASS" starttime="20210731 21:37:25.904" endtime="20210731 21:37:27.490"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:27.493" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:27.492" endtime="20210731 21:37:27.493"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:27.493" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210731 21:37:27.493" endtime="20210731 21:37:27.493"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:27.507" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:27.507" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:27.493" endtime="20210731 21:37:27.507"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:27.507" endtime="20210731 21:37:27.507"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:27.508" endtime="20210731 21:37:27.508"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:27.493" endtime="20210731 21:37:27.508"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:27.493" endtime="20210731 21:37:27.508"/>
</for>
<status status="FAIL" starttime="20210731 21:37:27.491" endtime="20210731 21:37:27.508"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:27.491" endtime="20210731 21:37:27.508"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:27.510" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:27.509" endtime="20210731 21:37:27.510"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:27.510" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210731 21:37:27.510" endtime="20210731 21:37:27.510"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:27.515" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:27.515" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:27.511" endtime="20210731 21:37:27.515"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:27.515" endtime="20210731 21:37:27.515"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:27.516" endtime="20210731 21:37:27.516"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:27.510" endtime="20210731 21:37:27.516"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:27.510" endtime="20210731 21:37:27.516"/>
</for>
<status status="FAIL" starttime="20210731 21:37:27.508" endtime="20210731 21:37:27.516"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:27.508" endtime="20210731 21:37:27.516"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:27.519" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:27.518" endtime="20210731 21:37:27.519"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:27.522" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210731 21:37:27.520" endtime="20210731 21:37:27.522"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:27.539" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:27.539" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:27.522" endtime="20210731 21:37:27.539"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:27.540" endtime="20210731 21:37:27.540"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:27.540" endtime="20210731 21:37:27.540"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:27.522" endtime="20210731 21:37:27.540"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:27.522" endtime="20210731 21:37:27.540"/>
</for>
<status status="FAIL" starttime="20210731 21:37:27.516" endtime="20210731 21:37:27.540"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:27.516" endtime="20210731 21:37:27.540"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:27.491" endtime="20210731 21:37:27.540"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:27.551" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:27.574" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:27.574" level="INFO">${pids} = 3565
3572
3577</msg>
<status status="PASS" starttime="20210731 21:37:27.541" endtime="20210731 21:37:27.574"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:27.575" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:27.575" endtime="20210731 21:37:27.575"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:27.576" level="INFO">${pids} = ['3565', '3572', '3577']</msg>
<status status="PASS" starttime="20210731 21:37:27.576" endtime="20210731 21:37:27.576"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3565</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:27.579" level="INFO">Running command 'kill 3565 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:27.577" endtime="20210731 21:37:27.580"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.576" endtime="20210731 21:37:27.580"/>
</iter>
<iter>
<var name="${pid}">3572</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:27.583" level="INFO">Running command 'kill 3572 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:27.580" endtime="20210731 21:37:27.583"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.580" endtime="20210731 21:37:27.583"/>
</iter>
<iter>
<var name="${pid}">3577</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:27.589" level="INFO">Running command 'kill 3577 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:27.584" endtime="20210731 21:37:27.589"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.583" endtime="20210731 21:37:27.590"/>
</iter>
<status status="PASS" starttime="20210731 21:37:27.576" endtime="20210731 21:37:27.590"/>
</for>
<status status="PASS" starttime="20210731 21:37:27.576" endtime="20210731 21:37:27.590"/>
</branch>
<status status="PASS" starttime="20210731 21:37:27.575" endtime="20210731 21:37:27.590"/>
</if>
<status status="PASS" starttime="20210731 21:37:27.541" endtime="20210731 21:37:27.590"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
username as such:
{
"username": ''
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:25.901" endtime="20210731 21:37:27.590">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t2" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤% Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:27.595" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:27.608" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:27.608" level="INFO">${pids} = 3639</msg>
<status status="PASS" starttime="20210731 21:37:27.593" endtime="20210731 21:37:27.608"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:27.609" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:27.609" endtime="20210731 21:37:27.609"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:27.610" level="INFO">${pids} = ['3639']</msg>
<status status="PASS" starttime="20210731 21:37:27.610" endtime="20210731 21:37:27.610"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3639</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:27.615" level="INFO">Running command 'kill 3639 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:27.611" endtime="20210731 21:37:27.615"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.611" endtime="20210731 21:37:27.615"/>
</iter>
<status status="PASS" starttime="20210731 21:37:27.611" endtime="20210731 21:37:27.615"/>
</for>
<status status="PASS" starttime="20210731 21:37:27.610" endtime="20210731 21:37:27.615"/>
</branch>
<status status="PASS" starttime="20210731 21:37:27.610" endtime="20210731 21:37:27.615"/>
</if>
<status status="PASS" starttime="20210731 21:37:27.592" endtime="20210731 21:37:27.616"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:27.617" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:27.616" endtime="20210731 21:37:27.617"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:27.619" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:27.618" endtime="20210731 21:37:27.619"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:27.621" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:27.619" endtime="20210731 21:37:27.621"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:27.622" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:27.622" endtime="20210731 21:37:27.623"/>
</kw>
<msg timestamp="20210731 21:37:27.623" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:27.617" endtime="20210731 21:37:27.623"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:27.630" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:27.623" endtime="20210731 21:37:27.634"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.616" endtime="20210731 21:37:27.634"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:27.637" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:27.636" endtime="20210731 21:37:27.663"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:29.165" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:27.664" endtime="20210731 21:37:29.165"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.635" endtime="20210731 21:37:29.166"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:29.168" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:29.167" endtime="20210731 21:37:29.168"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:29.169" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:29.168" endtime="20210731 21:37:29.169"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:29.170" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:29.169" endtime="20210731 21:37:29.170"/>
</kw>
<msg timestamp="20210731 21:37:29.170" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:29.167" endtime="20210731 21:37:29.170"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:29.171" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:29.170" endtime="20210731 21:37:29.171"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.166" endtime="20210731 21:37:29.171"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:29.172" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:29.172" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:29.172" endtime="20210731 21:37:29.172"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.171" endtime="20210731 21:37:29.172"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:29.173" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:29.173" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:29.173" endtime="20210731 21:37:29.173"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:29.174" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:29.173" endtime="20210731 21:37:29.174"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:29.175" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:29.174" endtime="20210731 21:37:29.175"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:29.175" endtime="20210731 21:37:29.176"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:29.176" endtime="20210731 21:37:29.176"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.174" endtime="20210731 21:37:29.176"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:29.177" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:29.176" endtime="20210731 21:37:29.177"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:29.177" endtime="20210731 21:37:29.178"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:29.178" endtime="20210731 21:37:29.178"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.176" endtime="20210731 21:37:29.178"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:29.179" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:29.178" endtime="20210731 21:37:29.179"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:29.179" endtime="20210731 21:37:29.180"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:29.180" endtime="20210731 21:37:29.180"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.178" endtime="20210731 21:37:29.180"/>
</iter>
<status status="PASS" starttime="20210731 21:37:29.174" endtime="20210731 21:37:29.180"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:29.181" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:29.180" endtime="20210731 21:37:29.181"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.172" endtime="20210731 21:37:29.181"/>
</kw>
<status status="PASS" starttime="20210731 21:37:27.592" endtime="20210731 21:37:29.181"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:29.183" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:29.182" endtime="20210731 21:37:29.183"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:29.183" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 21:37:29.183" endtime="20210731 21:37:29.183"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:29.195" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:29.195" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:29.184" endtime="20210731 21:37:29.195"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:29.195" endtime="20210731 21:37:29.195"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:29.195" endtime="20210731 21:37:29.196"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:29.183" endtime="20210731 21:37:29.196"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:29.183" endtime="20210731 21:37:29.196"/>
</for>
<status status="FAIL" starttime="20210731 21:37:29.182" endtime="20210731 21:37:29.196"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:29.182" endtime="20210731 21:37:29.196"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:29.197" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:29.197" endtime="20210731 21:37:29.197"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:29.198" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 21:37:29.197" endtime="20210731 21:37:29.198"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:29.202" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:29.203" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:29.198" endtime="20210731 21:37:29.203"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:29.203" endtime="20210731 21:37:29.203"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:29.203" endtime="20210731 21:37:29.203"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:29.198" endtime="20210731 21:37:29.203"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:29.198" endtime="20210731 21:37:29.203"/>
</for>
<status status="FAIL" starttime="20210731 21:37:29.196" endtime="20210731 21:37:29.203"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:29.196" endtime="20210731 21:37:29.204"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:29.205" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:29.204" endtime="20210731 21:37:29.205"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:29.205" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 21:37:29.205" endtime="20210731 21:37:29.205"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:29.213" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:29.213" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:29.206" endtime="20210731 21:37:29.213"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:29.213" endtime="20210731 21:37:29.214"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:29.214" endtime="20210731 21:37:29.214"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:29.206" endtime="20210731 21:37:29.214"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:29.206" endtime="20210731 21:37:29.214"/>
</for>
<status status="FAIL" starttime="20210731 21:37:29.204" endtime="20210731 21:37:29.214"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:29.204" endtime="20210731 21:37:29.214"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:29.181" endtime="20210731 21:37:29.214"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:29.224" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:29.235" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:29.235" level="INFO">${pids} = 3680
3687
3691</msg>
<status status="PASS" starttime="20210731 21:37:29.215" endtime="20210731 21:37:29.235"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:29.236" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:29.235" endtime="20210731 21:37:29.236"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:29.237" level="INFO">${pids} = ['3680', '3687', '3691']</msg>
<status status="PASS" starttime="20210731 21:37:29.237" endtime="20210731 21:37:29.237"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3680</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:29.254" level="INFO">Running command 'kill 3680 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:29.237" endtime="20210731 21:37:29.254"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.237" endtime="20210731 21:37:29.254"/>
</iter>
<iter>
<var name="${pid}">3687</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:29.259" level="INFO">Running command 'kill 3687 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:29.255" endtime="20210731 21:37:29.260"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.255" endtime="20210731 21:37:29.260"/>
</iter>
<iter>
<var name="${pid}">3691</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:29.265" level="INFO">Running command 'kill 3691 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:29.260" endtime="20210731 21:37:29.265"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.260" endtime="20210731 21:37:29.266"/>
</iter>
<status status="PASS" starttime="20210731 21:37:29.237" endtime="20210731 21:37:29.266"/>
</for>
<status status="PASS" starttime="20210731 21:37:29.236" endtime="20210731 21:37:29.266"/>
</branch>
<status status="PASS" starttime="20210731 21:37:29.236" endtime="20210731 21:37:29.266"/>
</if>
<status status="PASS" starttime="20210731 21:37:29.215" endtime="20210731 21:37:29.266"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:27.591" endtime="20210731 21:37:29.266">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t3" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%= Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:29.276" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:29.287" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:29.287" level="INFO">${pids} = 3833</msg>
<status status="PASS" starttime="20210731 21:37:29.271" endtime="20210731 21:37:29.287"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:29.288" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:29.287" endtime="20210731 21:37:29.288"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:29.289" level="INFO">${pids} = ['3833']</msg>
<status status="PASS" starttime="20210731 21:37:29.288" endtime="20210731 21:37:29.289"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3833</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:29.311" level="INFO">Running command 'kill 3833 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:29.289" endtime="20210731 21:37:29.311"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.289" endtime="20210731 21:37:29.311"/>
</iter>
<status status="PASS" starttime="20210731 21:37:29.289" endtime="20210731 21:37:29.311"/>
</for>
<status status="PASS" starttime="20210731 21:37:29.288" endtime="20210731 21:37:29.311"/>
</branch>
<status status="PASS" starttime="20210731 21:37:29.288" endtime="20210731 21:37:29.311"/>
</if>
<status status="PASS" starttime="20210731 21:37:29.269" endtime="20210731 21:37:29.312"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:29.313" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:29.313" endtime="20210731 21:37:29.313"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:29.314" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:29.314" endtime="20210731 21:37:29.314"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:29.315" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:29.314" endtime="20210731 21:37:29.315"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:29.315" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:29.315" endtime="20210731 21:37:29.315"/>
</kw>
<msg timestamp="20210731 21:37:29.315" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:29.313" endtime="20210731 21:37:29.315"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:29.324" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:29.316" endtime="20210731 21:37:29.326"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.312" endtime="20210731 21:37:29.326"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:29.328" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:29.327" endtime="20210731 21:37:29.332"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:30.834" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:29.333" endtime="20210731 21:37:30.834"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.327" endtime="20210731 21:37:30.834"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:30.836" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:30.835" endtime="20210731 21:37:30.836"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:30.836" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:30.836" endtime="20210731 21:37:30.836"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:30.837" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:30.836" endtime="20210731 21:37:30.837"/>
</kw>
<msg timestamp="20210731 21:37:30.837" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:30.835" endtime="20210731 21:37:30.837"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:30.837" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:30.837" endtime="20210731 21:37:30.838"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.834" endtime="20210731 21:37:30.838"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:30.839" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:30.839" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:30.839" endtime="20210731 21:37:30.839"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.838" endtime="20210731 21:37:30.839"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:30.840" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:30.840" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:30.840" endtime="20210731 21:37:30.840"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:30.841" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:30.840" endtime="20210731 21:37:30.841"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:30.842" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:30.841" endtime="20210731 21:37:30.842"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:30.842" endtime="20210731 21:37:30.843"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:30.843" endtime="20210731 21:37:30.843"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.841" endtime="20210731 21:37:30.843"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:30.844" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:30.843" endtime="20210731 21:37:30.844"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:30.844" endtime="20210731 21:37:30.845"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:30.845" endtime="20210731 21:37:30.845"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.843" endtime="20210731 21:37:30.845"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:30.846" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:30.846" endtime="20210731 21:37:30.846"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:30.846" endtime="20210731 21:37:30.847"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:30.847" endtime="20210731 21:37:30.848"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.846" endtime="20210731 21:37:30.848"/>
</iter>
<status status="PASS" starttime="20210731 21:37:30.841" endtime="20210731 21:37:30.848"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:30.848" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:30.848" endtime="20210731 21:37:30.848"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.839" endtime="20210731 21:37:30.848"/>
</kw>
<status status="PASS" starttime="20210731 21:37:29.268" endtime="20210731 21:37:30.849"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:30.850" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:30.850" endtime="20210731 21:37:30.850"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:30.851" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210731 21:37:30.850" endtime="20210731 21:37:30.851"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:30.863" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:30.864" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:30.851" endtime="20210731 21:37:30.864"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:30.864" endtime="20210731 21:37:30.864"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:30.864" endtime="20210731 21:37:30.864"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:30.851" endtime="20210731 21:37:30.864"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:30.851" endtime="20210731 21:37:30.864"/>
</for>
<status status="FAIL" starttime="20210731 21:37:30.849" endtime="20210731 21:37:30.865"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:30.849" endtime="20210731 21:37:30.865"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:30.866" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:30.866" endtime="20210731 21:37:30.866"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:30.867" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210731 21:37:30.866" endtime="20210731 21:37:30.867"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:30.872" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:30.872" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:30.867" endtime="20210731 21:37:30.872"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:30.873" endtime="20210731 21:37:30.873"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:30.873" endtime="20210731 21:37:30.873"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:30.867" endtime="20210731 21:37:30.873"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:30.867" endtime="20210731 21:37:30.873"/>
</for>
<status status="FAIL" starttime="20210731 21:37:30.865" endtime="20210731 21:37:30.873"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:30.865" endtime="20210731 21:37:30.873"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:30.874" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:30.874" endtime="20210731 21:37:30.875"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:30.876" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210731 21:37:30.875" endtime="20210731 21:37:30.876"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:30.882" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:30.882" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:30.876" endtime="20210731 21:37:30.882"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:30.882" endtime="20210731 21:37:30.882"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:30.882" endtime="20210731 21:37:30.882"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:30.876" endtime="20210731 21:37:30.882"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:30.876" endtime="20210731 21:37:30.882"/>
</for>
<status status="FAIL" starttime="20210731 21:37:30.873" endtime="20210731 21:37:30.883"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:30.873" endtime="20210731 21:37:30.883"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:30.849" endtime="20210731 21:37:30.883"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:30.895" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:30.908" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:30.908" level="INFO">${pids} = 3882
3893
3897</msg>
<status status="PASS" starttime="20210731 21:37:30.884" endtime="20210731 21:37:30.909"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:30.910" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:30.909" endtime="20210731 21:37:30.910"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:30.910" level="INFO">${pids} = ['3882', '3893', '3897']</msg>
<status status="PASS" starttime="20210731 21:37:30.910" endtime="20210731 21:37:30.911"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3882</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:30.914" level="INFO">Running command 'kill 3882 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:30.911" endtime="20210731 21:37:30.914"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.911" endtime="20210731 21:37:30.915"/>
</iter>
<iter>
<var name="${pid}">3893</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:30.918" level="INFO">Running command 'kill 3893 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:30.915" endtime="20210731 21:37:30.918"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.915" endtime="20210731 21:37:30.918"/>
</iter>
<iter>
<var name="${pid}">3897</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:30.922" level="INFO">Running command 'kill 3897 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:30.919" endtime="20210731 21:37:30.922"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.919" endtime="20210731 21:37:30.922"/>
</iter>
<status status="PASS" starttime="20210731 21:37:30.911" endtime="20210731 21:37:30.922"/>
</for>
<status status="PASS" starttime="20210731 21:37:30.910" endtime="20210731 21:37:30.922"/>
</branch>
<status status="PASS" starttime="20210731 21:37:30.910" endtime="20210731 21:37:30.923"/>
</if>
<status status="PASS" starttime="20210731 21:37:30.883" endtime="20210731 21:37:30.923"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%='
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:29.268" endtime="20210731 21:37:30.923">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t4" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%=!()=? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:30.929" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:30.942" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:30.942" level="INFO">${pids} = 3945</msg>
<status status="PASS" starttime="20210731 21:37:30.926" endtime="20210731 21:37:30.942"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:30.943" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:30.942" endtime="20210731 21:37:30.943"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:30.944" level="INFO">${pids} = ['3945']</msg>
<status status="PASS" starttime="20210731 21:37:30.944" endtime="20210731 21:37:30.944"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3945</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:30.949" level="INFO">Running command 'kill 3945 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:30.945" endtime="20210731 21:37:30.949"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.944" endtime="20210731 21:37:30.949"/>
</iter>
<status status="PASS" starttime="20210731 21:37:30.944" endtime="20210731 21:37:30.949"/>
</for>
<status status="PASS" starttime="20210731 21:37:30.944" endtime="20210731 21:37:30.949"/>
</branch>
<status status="PASS" starttime="20210731 21:37:30.943" endtime="20210731 21:37:30.949"/>
</if>
<status status="PASS" starttime="20210731 21:37:30.925" endtime="20210731 21:37:30.950"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:30.951" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:30.951" endtime="20210731 21:37:30.951"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:30.952" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:30.952" endtime="20210731 21:37:30.952"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:30.953" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:30.952" endtime="20210731 21:37:30.953"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:30.953" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:30.953" endtime="20210731 21:37:30.953"/>
</kw>
<msg timestamp="20210731 21:37:30.953" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:30.951" endtime="20210731 21:37:30.954"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:30.979" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:30.954" endtime="20210731 21:37:30.980"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.950" endtime="20210731 21:37:30.981"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:30.983" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:30.982" endtime="20210731 21:37:30.987"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:32.488" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:30.987" endtime="20210731 21:37:32.489"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.981" endtime="20210731 21:37:32.489"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:32.490" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:32.490" endtime="20210731 21:37:32.490"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:32.491" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:32.491" endtime="20210731 21:37:32.491"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:32.491" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:32.491" endtime="20210731 21:37:32.491"/>
</kw>
<msg timestamp="20210731 21:37:32.492" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:32.490" endtime="20210731 21:37:32.492"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:32.492" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:32.492" endtime="20210731 21:37:32.493"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.489" endtime="20210731 21:37:32.493"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:32.494" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:32.494" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:32.493" endtime="20210731 21:37:32.494"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.493" endtime="20210731 21:37:32.494"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:32.495" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:32.495" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:32.495" endtime="20210731 21:37:32.495"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:32.496" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:32.495" endtime="20210731 21:37:32.496"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:32.496" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:32.496" endtime="20210731 21:37:32.496"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:32.497" endtime="20210731 21:37:32.498"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:32.498" endtime="20210731 21:37:32.498"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.496" endtime="20210731 21:37:32.498"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:32.499" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:32.498" endtime="20210731 21:37:32.499"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:32.499" endtime="20210731 21:37:32.500"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:32.500" endtime="20210731 21:37:32.500"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.498" endtime="20210731 21:37:32.500"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:32.501" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:32.500" endtime="20210731 21:37:32.501"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:32.501" endtime="20210731 21:37:32.502"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:32.502" endtime="20210731 21:37:32.502"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.500" endtime="20210731 21:37:32.502"/>
</iter>
<status status="PASS" starttime="20210731 21:37:32.496" endtime="20210731 21:37:32.502"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:32.503" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:32.502" endtime="20210731 21:37:32.503"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.494" endtime="20210731 21:37:32.503"/>
</kw>
<status status="PASS" starttime="20210731 21:37:30.925" endtime="20210731 21:37:32.503"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:32.504" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:32.504" endtime="20210731 21:37:32.505"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:32.505" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210731 21:37:32.505" endtime="20210731 21:37:32.505"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:32.517" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:32.517" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:32.505" endtime="20210731 21:37:32.517"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:32.517" endtime="20210731 21:37:32.517"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:32.517" endtime="20210731 21:37:32.518"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:32.505" endtime="20210731 21:37:32.518"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:32.505" endtime="20210731 21:37:32.518"/>
</for>
<status status="FAIL" starttime="20210731 21:37:32.504" endtime="20210731 21:37:32.518"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:32.503" endtime="20210731 21:37:32.518"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:32.519" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:32.519" endtime="20210731 21:37:32.519"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:32.520" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210731 21:37:32.519" endtime="20210731 21:37:32.520"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:32.525" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:32.525" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:32.520" endtime="20210731 21:37:32.525"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:32.525" endtime="20210731 21:37:32.525"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:32.525" endtime="20210731 21:37:32.525"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:32.520" endtime="20210731 21:37:32.525"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:32.520" endtime="20210731 21:37:32.525"/>
</for>
<status status="FAIL" starttime="20210731 21:37:32.518" endtime="20210731 21:37:32.526"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:32.518" endtime="20210731 21:37:32.526"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:32.527" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:32.527" endtime="20210731 21:37:32.527"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:32.527" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210731 21:37:32.527" endtime="20210731 21:37:32.528"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:32.533" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:32.534" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:32.528" endtime="20210731 21:37:32.534"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:32.534" endtime="20210731 21:37:32.534"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:32.534" endtime="20210731 21:37:32.534"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:32.528" endtime="20210731 21:37:32.534"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:32.528" endtime="20210731 21:37:32.534"/>
</for>
<status status="FAIL" starttime="20210731 21:37:32.526" endtime="20210731 21:37:32.534"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:32.526" endtime="20210731 21:37:32.534"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:32.503" endtime="20210731 21:37:32.534"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:32.545" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:32.557" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:32.558" level="INFO">${pids} = 3969
3976
3981</msg>
<status status="PASS" starttime="20210731 21:37:32.536" endtime="20210731 21:37:32.558"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:32.559" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:32.558" endtime="20210731 21:37:32.559"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:32.560" level="INFO">${pids} = ['3969', '3976', '3981']</msg>
<status status="PASS" starttime="20210731 21:37:32.559" endtime="20210731 21:37:32.560"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">3969</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:32.564" level="INFO">Running command 'kill 3969 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:32.560" endtime="20210731 21:37:32.565"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.560" endtime="20210731 21:37:32.565"/>
</iter>
<iter>
<var name="${pid}">3976</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:32.568" level="INFO">Running command 'kill 3976 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:32.565" endtime="20210731 21:37:32.571"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.565" endtime="20210731 21:37:32.571"/>
</iter>
<iter>
<var name="${pid}">3981</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:32.575" level="INFO">Running command 'kill 3981 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:32.572" endtime="20210731 21:37:32.575"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.572" endtime="20210731 21:37:32.576"/>
</iter>
<status status="PASS" starttime="20210731 21:37:32.560" endtime="20210731 21:37:32.576"/>
</for>
<status status="PASS" starttime="20210731 21:37:32.559" endtime="20210731 21:37:32.576"/>
</branch>
<status status="PASS" starttime="20210731 21:37:32.559" endtime="20210731 21:37:32.576"/>
</if>
<status status="PASS" starttime="20210731 21:37:32.535" endtime="20210731 21:37:32.576"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%=!()=?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:30.924" endtime="20210731 21:37:32.576">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t5" name="With Each Valid Token, Updating Username Of Each System User With 1234567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:32.596" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:32.607" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:32.607" level="INFO">${pids} = 4034</msg>
<status status="PASS" starttime="20210731 21:37:32.579" endtime="20210731 21:37:32.607"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:32.608" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:32.607" endtime="20210731 21:37:32.608"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:32.609" level="INFO">${pids} = ['4034']</msg>
<status status="PASS" starttime="20210731 21:37:32.608" endtime="20210731 21:37:32.609"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4034</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:32.615" level="INFO">Running command 'kill 4034 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:32.609" endtime="20210731 21:37:32.623"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.609" endtime="20210731 21:37:32.623"/>
</iter>
<status status="PASS" starttime="20210731 21:37:32.609" endtime="20210731 21:37:32.623"/>
</for>
<status status="PASS" starttime="20210731 21:37:32.608" endtime="20210731 21:37:32.624"/>
</branch>
<status status="PASS" starttime="20210731 21:37:32.608" endtime="20210731 21:37:32.624"/>
</if>
<status status="PASS" starttime="20210731 21:37:32.578" endtime="20210731 21:37:32.624"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:32.625" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:32.625" endtime="20210731 21:37:32.625"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:32.626" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:32.626" endtime="20210731 21:37:32.626"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:32.627" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:32.626" endtime="20210731 21:37:32.627"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:32.627" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:32.627" endtime="20210731 21:37:32.627"/>
</kw>
<msg timestamp="20210731 21:37:32.627" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:32.626" endtime="20210731 21:37:32.627"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:32.644" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:32.628" endtime="20210731 21:37:32.646"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.624" endtime="20210731 21:37:32.646"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:32.648" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:32.647" endtime="20210731 21:37:32.652"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:34.153" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:32.652" endtime="20210731 21:37:34.153"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.646" endtime="20210731 21:37:34.153"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:34.155" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:34.155" endtime="20210731 21:37:34.155"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:34.155" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:34.155" endtime="20210731 21:37:34.155"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:34.156" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:34.155" endtime="20210731 21:37:34.156"/>
</kw>
<msg timestamp="20210731 21:37:34.156" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:34.154" endtime="20210731 21:37:34.156"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:34.157" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:34.156" endtime="20210731 21:37:34.157"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.154" endtime="20210731 21:37:34.157"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:34.158" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:34.158" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:34.158" endtime="20210731 21:37:34.159"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.157" endtime="20210731 21:37:34.159"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:34.160" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:34.160" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:34.159" endtime="20210731 21:37:34.160"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:34.160" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:34.160" endtime="20210731 21:37:34.160"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:34.161" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:34.161" endtime="20210731 21:37:34.161"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:34.161" endtime="20210731 21:37:34.162"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:34.162" endtime="20210731 21:37:34.162"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.161" endtime="20210731 21:37:34.163"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:34.163" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:34.163" endtime="20210731 21:37:34.163"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:34.163" endtime="20210731 21:37:34.164"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:34.164" endtime="20210731 21:37:34.165"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.163" endtime="20210731 21:37:34.165"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:34.165" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:34.165" endtime="20210731 21:37:34.165"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:34.165" endtime="20210731 21:37:34.166"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:34.166" endtime="20210731 21:37:34.167"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.165" endtime="20210731 21:37:34.167"/>
</iter>
<status status="PASS" starttime="20210731 21:37:34.160" endtime="20210731 21:37:34.167"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:34.167" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:34.167" endtime="20210731 21:37:34.167"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.159" endtime="20210731 21:37:34.168"/>
</kw>
<status status="PASS" starttime="20210731 21:37:32.578" endtime="20210731 21:37:34.168"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:34.170" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:34.169" endtime="20210731 21:37:34.170"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:34.170" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210731 21:37:34.170" endtime="20210731 21:37:34.170"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:34.181" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:34.181" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:34.170" endtime="20210731 21:37:34.181"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:34.182" endtime="20210731 21:37:34.182"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:34.182" endtime="20210731 21:37:34.182"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:34.170" endtime="20210731 21:37:34.182"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:34.170" endtime="20210731 21:37:34.182"/>
</for>
<status status="FAIL" starttime="20210731 21:37:34.168" endtime="20210731 21:37:34.182"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:34.168" endtime="20210731 21:37:34.182"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:34.184" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:34.183" endtime="20210731 21:37:34.184"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:34.184" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210731 21:37:34.184" endtime="20210731 21:37:34.184"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:34.189" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:34.190" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:34.185" endtime="20210731 21:37:34.190"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:34.190" endtime="20210731 21:37:34.190"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:34.190" endtime="20210731 21:37:34.190"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:34.184" endtime="20210731 21:37:34.190"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:34.184" endtime="20210731 21:37:34.190"/>
</for>
<status status="FAIL" starttime="20210731 21:37:34.183" endtime="20210731 21:37:34.190"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:34.182" endtime="20210731 21:37:34.190"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:34.192" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:34.191" endtime="20210731 21:37:34.192"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:34.192" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210731 21:37:34.192" endtime="20210731 21:37:34.192"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:34.198" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:34.198" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:34.193" endtime="20210731 21:37:34.198"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:34.198" endtime="20210731 21:37:34.198"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:34.199" endtime="20210731 21:37:34.199"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:34.192" endtime="20210731 21:37:34.199"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:34.192" endtime="20210731 21:37:34.199"/>
</for>
<status status="FAIL" starttime="20210731 21:37:34.191" endtime="20210731 21:37:34.199"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:34.190" endtime="20210731 21:37:34.199"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:34.168" endtime="20210731 21:37:34.199"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:34.209" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:34.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:34.219" level="INFO">${pids} = 4058
4065
4069</msg>
<status status="PASS" starttime="20210731 21:37:34.200" endtime="20210731 21:37:34.219"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:34.221" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:34.220" endtime="20210731 21:37:34.221"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:34.222" level="INFO">${pids} = ['4058', '4065', '4069']</msg>
<status status="PASS" starttime="20210731 21:37:34.222" endtime="20210731 21:37:34.222"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4058</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:34.227" level="INFO">Running command 'kill 4058 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:34.222" endtime="20210731 21:37:34.227"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.222" endtime="20210731 21:37:34.228"/>
</iter>
<iter>
<var name="${pid}">4065</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:34.232" level="INFO">Running command 'kill 4065 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:34.228" endtime="20210731 21:37:34.234"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.228" endtime="20210731 21:37:34.235"/>
</iter>
<iter>
<var name="${pid}">4069</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:34.238" level="INFO">Running command 'kill 4069 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:34.235" endtime="20210731 21:37:34.239"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.235" endtime="20210731 21:37:34.239"/>
</iter>
<status status="PASS" starttime="20210731 21:37:34.222" endtime="20210731 21:37:34.239"/>
</for>
<status status="PASS" starttime="20210731 21:37:34.221" endtime="20210731 21:37:34.239"/>
</branch>
<status status="PASS" starttime="20210731 21:37:34.221" endtime="20210731 21:37:34.239"/>
</if>
<status status="PASS" starttime="20210731 21:37:34.200" endtime="20210731 21:37:34.239"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '1234567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:32.577" endtime="20210731 21:37:34.239">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t6" name="With Each Valid Token, Updating Username Of Each System User With 12345678 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:34.244" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:34.271" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:34.271" level="INFO">${pids} = 4098</msg>
<status status="PASS" starttime="20210731 21:37:34.242" endtime="20210731 21:37:34.271"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:34.272" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:34.271" endtime="20210731 21:37:34.272"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:34.273" level="INFO">${pids} = ['4098']</msg>
<status status="PASS" starttime="20210731 21:37:34.272" endtime="20210731 21:37:34.273"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4098</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:34.277" level="INFO">Running command 'kill 4098 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:34.273" endtime="20210731 21:37:34.278"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.273" endtime="20210731 21:37:34.278"/>
</iter>
<status status="PASS" starttime="20210731 21:37:34.273" endtime="20210731 21:37:34.278"/>
</for>
<status status="PASS" starttime="20210731 21:37:34.272" endtime="20210731 21:37:34.278"/>
</branch>
<status status="PASS" starttime="20210731 21:37:34.272" endtime="20210731 21:37:34.278"/>
</if>
<status status="PASS" starttime="20210731 21:37:34.241" endtime="20210731 21:37:34.278"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:34.280" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:34.279" endtime="20210731 21:37:34.280"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:34.280" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:34.280" endtime="20210731 21:37:34.280"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:34.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:34.281" endtime="20210731 21:37:34.281"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:34.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:34.281" endtime="20210731 21:37:34.281"/>
</kw>
<msg timestamp="20210731 21:37:34.282" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:34.280" endtime="20210731 21:37:34.282"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:34.307" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:34.282" endtime="20210731 21:37:34.309"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.279" endtime="20210731 21:37:34.310"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:34.312" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:34.311" endtime="20210731 21:37:34.316"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:35.817" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:34.316" endtime="20210731 21:37:35.817"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.310" endtime="20210731 21:37:35.817"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:35.819" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:35.818" endtime="20210731 21:37:35.819"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:35.819" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:35.819" endtime="20210731 21:37:35.819"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:35.820" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:35.819" endtime="20210731 21:37:35.820"/>
</kw>
<msg timestamp="20210731 21:37:35.820" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:35.818" endtime="20210731 21:37:35.820"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:35.820" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:35.820" endtime="20210731 21:37:35.821"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.818" endtime="20210731 21:37:35.821"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:35.822" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:35.822" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:35.821" endtime="20210731 21:37:35.822"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.821" endtime="20210731 21:37:35.822"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:35.823" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:35.823" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:35.823" endtime="20210731 21:37:35.823"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:35.823" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:35.823" endtime="20210731 21:37:35.823"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:35.824" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:35.824" endtime="20210731 21:37:35.824"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:35.824" endtime="20210731 21:37:35.825"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:35.825" endtime="20210731 21:37:35.826"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.824" endtime="20210731 21:37:35.826"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:35.826" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:35.826" endtime="20210731 21:37:35.826"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:35.826" endtime="20210731 21:37:35.827"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:35.827" endtime="20210731 21:37:35.827"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.826" endtime="20210731 21:37:35.828"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:35.828" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:35.828" endtime="20210731 21:37:35.828"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:35.828" endtime="20210731 21:37:35.829"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:35.829" endtime="20210731 21:37:35.830"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.828" endtime="20210731 21:37:35.830"/>
</iter>
<status status="PASS" starttime="20210731 21:37:35.824" endtime="20210731 21:37:35.830"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:35.830" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:35.830" endtime="20210731 21:37:35.830"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.822" endtime="20210731 21:37:35.830"/>
</kw>
<status status="PASS" starttime="20210731 21:37:34.241" endtime="20210731 21:37:35.831"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:35.832" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:35.832" endtime="20210731 21:37:35.832"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:35.833" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210731 21:37:35.832" endtime="20210731 21:37:35.833"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:35.844" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:35.844" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:35.833" endtime="20210731 21:37:35.844"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:35.844" endtime="20210731 21:37:35.844"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:35.845" endtime="20210731 21:37:35.845"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:35.833" endtime="20210731 21:37:35.845"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:35.833" endtime="20210731 21:37:35.845"/>
</for>
<status status="FAIL" starttime="20210731 21:37:35.831" endtime="20210731 21:37:35.845"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:35.831" endtime="20210731 21:37:35.845"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:35.846" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:35.846" endtime="20210731 21:37:35.846"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:35.847" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210731 21:37:35.846" endtime="20210731 21:37:35.847"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:35.852" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:35.852" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:35.847" endtime="20210731 21:37:35.852"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:35.852" endtime="20210731 21:37:35.852"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:35.852" endtime="20210731 21:37:35.852"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:35.847" endtime="20210731 21:37:35.852"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:35.847" endtime="20210731 21:37:35.852"/>
</for>
<status status="FAIL" starttime="20210731 21:37:35.845" endtime="20210731 21:37:35.853"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:35.845" endtime="20210731 21:37:35.853"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:35.854" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:35.854" endtime="20210731 21:37:35.854"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:35.854" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210731 21:37:35.854" endtime="20210731 21:37:35.854"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:35.861" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:35.861" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:35.855" endtime="20210731 21:37:35.862"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:35.862" endtime="20210731 21:37:35.862"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:35.862" endtime="20210731 21:37:35.862"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:35.855" endtime="20210731 21:37:35.862"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:35.855" endtime="20210731 21:37:35.862"/>
</for>
<status status="FAIL" starttime="20210731 21:37:35.853" endtime="20210731 21:37:35.862"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:35.853" endtime="20210731 21:37:35.862"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:35.831" endtime="20210731 21:37:35.862"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:35.875" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:35.885" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:35.885" level="INFO">${pids} = 4121
4128
4132</msg>
<status status="PASS" starttime="20210731 21:37:35.864" endtime="20210731 21:37:35.885"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:35.887" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:35.886" endtime="20210731 21:37:35.887"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:35.888" level="INFO">${pids} = ['4121', '4128', '4132']</msg>
<status status="PASS" starttime="20210731 21:37:35.887" endtime="20210731 21:37:35.888"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4121</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:35.898" level="INFO">Running command 'kill 4121 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:35.888" endtime="20210731 21:37:35.899"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.888" endtime="20210731 21:37:35.899"/>
</iter>
<iter>
<var name="${pid}">4128</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:35.905" level="INFO">Running command 'kill 4128 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:35.899" endtime="20210731 21:37:35.906"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.899" endtime="20210731 21:37:35.906"/>
</iter>
<iter>
<var name="${pid}">4132</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:35.911" level="INFO">Running command 'kill 4132 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:35.906" endtime="20210731 21:37:35.912"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.906" endtime="20210731 21:37:35.912"/>
</iter>
<status status="PASS" starttime="20210731 21:37:35.888" endtime="20210731 21:37:35.912"/>
</for>
<status status="PASS" starttime="20210731 21:37:35.887" endtime="20210731 21:37:35.912"/>
</branch>
<status status="PASS" starttime="20210731 21:37:35.887" endtime="20210731 21:37:35.912"/>
</if>
<status status="PASS" starttime="20210731 21:37:35.863" endtime="20210731 21:37:35.912"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:34.240" endtime="20210731 21:37:35.912">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t7" name="With Each Valid Token, Updating Username Of Each System User With 12345678912345 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:35.925" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:35.946" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:35.947" level="INFO">${pids} = 4161</msg>
<status status="PASS" starttime="20210731 21:37:35.915" endtime="20210731 21:37:35.947"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:35.948" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:35.947" endtime="20210731 21:37:35.948"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:35.949" level="INFO">${pids} = ['4161']</msg>
<status status="PASS" starttime="20210731 21:37:35.948" endtime="20210731 21:37:35.949"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4161</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:35.958" level="INFO">Running command 'kill 4161 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:35.949" endtime="20210731 21:37:35.958"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.949" endtime="20210731 21:37:35.959"/>
</iter>
<status status="PASS" starttime="20210731 21:37:35.949" endtime="20210731 21:37:35.959"/>
</for>
<status status="PASS" starttime="20210731 21:37:35.948" endtime="20210731 21:37:35.959"/>
</branch>
<status status="PASS" starttime="20210731 21:37:35.948" endtime="20210731 21:37:35.959"/>
</if>
<status status="PASS" starttime="20210731 21:37:35.914" endtime="20210731 21:37:35.959"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:35.961" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:35.960" endtime="20210731 21:37:35.961"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:35.961" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:35.961" endtime="20210731 21:37:35.962"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:35.962" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:35.962" endtime="20210731 21:37:35.962"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:35.962" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:35.962" endtime="20210731 21:37:35.962"/>
</kw>
<msg timestamp="20210731 21:37:35.963" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:35.961" endtime="20210731 21:37:35.963"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:35.966" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:35.963" endtime="20210731 21:37:35.967"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.959" endtime="20210731 21:37:35.968"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:35.969" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:35.969" endtime="20210731 21:37:35.973"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:37.474" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:35.974" endtime="20210731 21:37:37.475"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.968" endtime="20210731 21:37:37.475"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:37.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:37.476" endtime="20210731 21:37:37.476"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:37.477" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:37.477" endtime="20210731 21:37:37.477"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:37.477" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:37.477" endtime="20210731 21:37:37.477"/>
</kw>
<msg timestamp="20210731 21:37:37.478" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:37.476" endtime="20210731 21:37:37.478"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:37.478" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:37.478" endtime="20210731 21:37:37.479"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.475" endtime="20210731 21:37:37.479"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:37.479" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:37.480" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:37.479" endtime="20210731 21:37:37.480"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.479" endtime="20210731 21:37:37.480"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:37.481" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:37.481" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:37.480" endtime="20210731 21:37:37.481"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:37.482" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:37.481" endtime="20210731 21:37:37.482"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:37.482" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:37.482" endtime="20210731 21:37:37.482"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:37.483" endtime="20210731 21:37:37.484"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:37.484" endtime="20210731 21:37:37.484"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.482" endtime="20210731 21:37:37.484"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:37.485" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:37.484" endtime="20210731 21:37:37.485"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:37.485" endtime="20210731 21:37:37.486"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:37.486" endtime="20210731 21:37:37.486"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.484" endtime="20210731 21:37:37.486"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:37.487" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:37.487" endtime="20210731 21:37:37.487"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:37.487" endtime="20210731 21:37:37.488"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:37.488" endtime="20210731 21:37:37.489"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.487" endtime="20210731 21:37:37.489"/>
</iter>
<status status="PASS" starttime="20210731 21:37:37.482" endtime="20210731 21:37:37.489"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:37.490" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:37.489" endtime="20210731 21:37:37.490"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.480" endtime="20210731 21:37:37.490"/>
</kw>
<status status="PASS" starttime="20210731 21:37:35.914" endtime="20210731 21:37:37.490"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:37.492" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:37.491" endtime="20210731 21:37:37.492"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:37.492" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210731 21:37:37.492" endtime="20210731 21:37:37.492"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:37.507" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:37.507" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:37.493" endtime="20210731 21:37:37.507"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:37.507" endtime="20210731 21:37:37.507"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:37.507" endtime="20210731 21:37:37.507"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:37.492" endtime="20210731 21:37:37.507"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:37.492" endtime="20210731 21:37:37.507"/>
</for>
<status status="FAIL" starttime="20210731 21:37:37.491" endtime="20210731 21:37:37.508"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:37.490" endtime="20210731 21:37:37.508"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:37.509" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:37.508" endtime="20210731 21:37:37.509"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:37.509" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210731 21:37:37.509" endtime="20210731 21:37:37.510"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:37.514" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:37.514" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:37.510" endtime="20210731 21:37:37.514"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:37.514" endtime="20210731 21:37:37.514"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:37.515" endtime="20210731 21:37:37.515"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:37.510" endtime="20210731 21:37:37.515"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:37.510" endtime="20210731 21:37:37.515"/>
</for>
<status status="FAIL" starttime="20210731 21:37:37.508" endtime="20210731 21:37:37.515"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:37.508" endtime="20210731 21:37:37.515"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:37.516" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:37.516" endtime="20210731 21:37:37.516"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:37.517" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210731 21:37:37.516" endtime="20210731 21:37:37.517"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:37.530" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:37.531" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:37.517" endtime="20210731 21:37:37.531"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:37.531" endtime="20210731 21:37:37.531"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:37.531" endtime="20210731 21:37:37.531"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:37.517" endtime="20210731 21:37:37.531"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:37.517" endtime="20210731 21:37:37.531"/>
</for>
<status status="FAIL" starttime="20210731 21:37:37.515" endtime="20210731 21:37:37.532"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:37.515" endtime="20210731 21:37:37.532"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:37.490" endtime="20210731 21:37:37.532"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:37.537" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:37.548" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:37.548" level="INFO">${pids} = 4184
4191
4202</msg>
<status status="PASS" starttime="20210731 21:37:37.534" endtime="20210731 21:37:37.548"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:37.549" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:37.548" endtime="20210731 21:37:37.549"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:37.550" level="INFO">${pids} = ['4184', '4191', '4202']</msg>
<status status="PASS" starttime="20210731 21:37:37.550" endtime="20210731 21:37:37.550"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4184</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:37.555" level="INFO">Running command 'kill 4184 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:37.551" endtime="20210731 21:37:37.555"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.551" endtime="20210731 21:37:37.555"/>
</iter>
<iter>
<var name="${pid}">4191</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:37.559" level="INFO">Running command 'kill 4191 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:37.556" endtime="20210731 21:37:37.559"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.555" endtime="20210731 21:37:37.559"/>
</iter>
<iter>
<var name="${pid}">4202</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:37.563" level="INFO">Running command 'kill 4202 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:37.560" endtime="20210731 21:37:37.563"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.560" endtime="20210731 21:37:37.563"/>
</iter>
<status status="PASS" starttime="20210731 21:37:37.551" endtime="20210731 21:37:37.563"/>
</for>
<status status="PASS" starttime="20210731 21:37:37.550" endtime="20210731 21:37:37.563"/>
</branch>
<status status="PASS" starttime="20210731 21:37:37.549" endtime="20210731 21:37:37.563"/>
</if>
<status status="PASS" starttime="20210731 21:37:37.532" endtime="20210731 21:37:37.563"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678912345'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:35.913" endtime="20210731 21:37:37.564">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t8" name="With Each Valid Token, Updating Username Of Each System User With abcdefg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:37.578" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:37.593" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:37.594" level="INFO">${pids} = 4231</msg>
<status status="PASS" starttime="20210731 21:37:37.566" endtime="20210731 21:37:37.594"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:37.595" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:37.594" endtime="20210731 21:37:37.595"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:37.596" level="INFO">${pids} = ['4231']</msg>
<status status="PASS" starttime="20210731 21:37:37.595" endtime="20210731 21:37:37.596"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4231</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:37.606" level="INFO">Running command 'kill 4231 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:37.596" endtime="20210731 21:37:37.606"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.596" endtime="20210731 21:37:37.606"/>
</iter>
<status status="PASS" starttime="20210731 21:37:37.596" endtime="20210731 21:37:37.606"/>
</for>
<status status="PASS" starttime="20210731 21:37:37.595" endtime="20210731 21:37:37.606"/>
</branch>
<status status="PASS" starttime="20210731 21:37:37.595" endtime="20210731 21:37:37.606"/>
</if>
<status status="PASS" starttime="20210731 21:37:37.566" endtime="20210731 21:37:37.607"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:37.608" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:37.608" endtime="20210731 21:37:37.608"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:37.609" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:37.609" endtime="20210731 21:37:37.609"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:37.609" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:37.609" endtime="20210731 21:37:37.609"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:37.610" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:37.610" endtime="20210731 21:37:37.610"/>
</kw>
<msg timestamp="20210731 21:37:37.610" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:37.608" endtime="20210731 21:37:37.610"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:37.630" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:37.610" endtime="20210731 21:37:37.632"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.607" endtime="20210731 21:37:37.632"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:37.634" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:37.633" endtime="20210731 21:37:37.638"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:39.139" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:37.639" endtime="20210731 21:37:39.139"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.633" endtime="20210731 21:37:39.140"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:39.141" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:39.141" endtime="20210731 21:37:39.141"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:39.142" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:39.141" endtime="20210731 21:37:39.142"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:39.142" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:39.142" endtime="20210731 21:37:39.142"/>
</kw>
<msg timestamp="20210731 21:37:39.142" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:39.140" endtime="20210731 21:37:39.142"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:39.143" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:39.143" endtime="20210731 21:37:39.144"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.140" endtime="20210731 21:37:39.144"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:39.144" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:39.144" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:39.144" endtime="20210731 21:37:39.145"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.144" endtime="20210731 21:37:39.145"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:39.146" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:39.146" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:39.145" endtime="20210731 21:37:39.146"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:39.146" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:39.146" endtime="20210731 21:37:39.146"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:39.147" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:39.147" endtime="20210731 21:37:39.147"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:39.147" endtime="20210731 21:37:39.148"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:39.148" endtime="20210731 21:37:39.148"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.147" endtime="20210731 21:37:39.149"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:39.149" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:39.149" endtime="20210731 21:37:39.149"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:39.149" endtime="20210731 21:37:39.150"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:39.150" endtime="20210731 21:37:39.150"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.149" endtime="20210731 21:37:39.150"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:39.151" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:39.151" endtime="20210731 21:37:39.151"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:39.151" endtime="20210731 21:37:39.152"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:39.152" endtime="20210731 21:37:39.152"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.151" endtime="20210731 21:37:39.152"/>
</iter>
<status status="PASS" starttime="20210731 21:37:39.146" endtime="20210731 21:37:39.153"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:39.153" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:39.153" endtime="20210731 21:37:39.153"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.145" endtime="20210731 21:37:39.153"/>
</kw>
<status status="PASS" starttime="20210731 21:37:37.565" endtime="20210731 21:37:39.153"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:39.155" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:39.154" endtime="20210731 21:37:39.155"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:39.155" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 21:37:39.155" endtime="20210731 21:37:39.155"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:39.167" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:39.167" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:39.156" endtime="20210731 21:37:39.167"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:39.167" endtime="20210731 21:37:39.167"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:39.168" endtime="20210731 21:37:39.168"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:39.156" endtime="20210731 21:37:39.168"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:39.156" endtime="20210731 21:37:39.168"/>
</for>
<status status="FAIL" starttime="20210731 21:37:39.154" endtime="20210731 21:37:39.168"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:39.154" endtime="20210731 21:37:39.168"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:39.169" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:39.169" endtime="20210731 21:37:39.169"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:39.170" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 21:37:39.169" endtime="20210731 21:37:39.170"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:39.175" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:39.175" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:39.170" endtime="20210731 21:37:39.175"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:39.176" endtime="20210731 21:37:39.176"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:39.176" endtime="20210731 21:37:39.176"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:39.170" endtime="20210731 21:37:39.176"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:39.170" endtime="20210731 21:37:39.176"/>
</for>
<status status="FAIL" starttime="20210731 21:37:39.168" endtime="20210731 21:37:39.176"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:39.168" endtime="20210731 21:37:39.176"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:39.178" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:39.177" endtime="20210731 21:37:39.178"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:39.178" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 21:37:39.178" endtime="20210731 21:37:39.178"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:39.184" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:39.184" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:39.179" endtime="20210731 21:37:39.184"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:39.184" endtime="20210731 21:37:39.185"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:39.185" endtime="20210731 21:37:39.185"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:39.178" endtime="20210731 21:37:39.185"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:39.178" endtime="20210731 21:37:39.185"/>
</for>
<status status="FAIL" starttime="20210731 21:37:39.176" endtime="20210731 21:37:39.193"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:39.176" endtime="20210731 21:37:39.193"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:39.154" endtime="20210731 21:37:39.193"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:39.198" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:39.209" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:39.209" level="INFO">${pids} = 4254
4261
4265</msg>
<status status="PASS" starttime="20210731 21:37:39.195" endtime="20210731 21:37:39.209"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:39.210" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:39.210" endtime="20210731 21:37:39.211"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:39.211" level="INFO">${pids} = ['4254', '4261', '4265']</msg>
<status status="PASS" starttime="20210731 21:37:39.211" endtime="20210731 21:37:39.211"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4254</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:39.216" level="INFO">Running command 'kill 4254 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:39.212" endtime="20210731 21:37:39.217"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.212" endtime="20210731 21:37:39.217"/>
</iter>
<iter>
<var name="${pid}">4261</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:39.220" level="INFO">Running command 'kill 4261 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:39.217" endtime="20210731 21:37:39.221"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.217" endtime="20210731 21:37:39.221"/>
</iter>
<iter>
<var name="${pid}">4265</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:39.224" level="INFO">Running command 'kill 4265 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:39.221" endtime="20210731 21:37:39.224"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.221" endtime="20210731 21:37:39.224"/>
</iter>
<status status="PASS" starttime="20210731 21:37:39.212" endtime="20210731 21:37:39.225"/>
</for>
<status status="PASS" starttime="20210731 21:37:39.211" endtime="20210731 21:37:39.225"/>
</branch>
<status status="PASS" starttime="20210731 21:37:39.211" endtime="20210731 21:37:39.225"/>
</if>
<status status="PASS" starttime="20210731 21:37:39.194" endtime="20210731 21:37:39.225"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:37.564" endtime="20210731 21:37:39.225">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t9" name="With Each Valid Token, Updating Username Of Each System User With abcdefgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:39.253" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:39.263" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:39.263" level="INFO">${pids} = 4295</msg>
<status status="PASS" starttime="20210731 21:37:39.229" endtime="20210731 21:37:39.263"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:39.264" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:39.264" endtime="20210731 21:37:39.264"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:39.265" level="INFO">${pids} = ['4295']</msg>
<status status="PASS" starttime="20210731 21:37:39.265" endtime="20210731 21:37:39.265"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4295</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:39.274" level="INFO">Running command 'kill 4295 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:39.266" endtime="20210731 21:37:39.274"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.265" endtime="20210731 21:37:39.274"/>
</iter>
<status status="PASS" starttime="20210731 21:37:39.265" endtime="20210731 21:37:39.274"/>
</for>
<status status="PASS" starttime="20210731 21:37:39.265" endtime="20210731 21:37:39.274"/>
</branch>
<status status="PASS" starttime="20210731 21:37:39.264" endtime="20210731 21:37:39.274"/>
</if>
<status status="PASS" starttime="20210731 21:37:39.228" endtime="20210731 21:37:39.275"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:39.276" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:39.276" endtime="20210731 21:37:39.276"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:39.277" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:39.276" endtime="20210731 21:37:39.277"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:39.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:39.277" endtime="20210731 21:37:39.281"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:39.282" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:39.282" endtime="20210731 21:37:39.282"/>
</kw>
<msg timestamp="20210731 21:37:39.283" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:39.276" endtime="20210731 21:37:39.283"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:39.294" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:39.283" endtime="20210731 21:37:39.296"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.275" endtime="20210731 21:37:39.296"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:39.298" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:39.297" endtime="20210731 21:37:39.302"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:40.804" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:39.303" endtime="20210731 21:37:40.804"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.297" endtime="20210731 21:37:40.804"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:40.806" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:40.805" endtime="20210731 21:37:40.806"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:40.806" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:40.806" endtime="20210731 21:37:40.806"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:40.806" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:40.806" endtime="20210731 21:37:40.807"/>
</kw>
<msg timestamp="20210731 21:37:40.807" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:40.805" endtime="20210731 21:37:40.807"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:40.807" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:40.807" endtime="20210731 21:37:40.808"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.804" endtime="20210731 21:37:40.808"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:40.808" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:40.808" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:40.808" endtime="20210731 21:37:40.809"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.808" endtime="20210731 21:37:40.809"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:40.810" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:40.810" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:40.809" endtime="20210731 21:37:40.810"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:40.810" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:40.810" endtime="20210731 21:37:40.810"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:40.811" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:40.811" endtime="20210731 21:37:40.811"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:40.811" endtime="20210731 21:37:40.812"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:40.812" endtime="20210731 21:37:40.812"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.811" endtime="20210731 21:37:40.812"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:40.813" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:40.813" endtime="20210731 21:37:40.813"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:40.813" endtime="20210731 21:37:40.814"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:40.814" endtime="20210731 21:37:40.814"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.812" endtime="20210731 21:37:40.814"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:40.815" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:40.815" endtime="20210731 21:37:40.815"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:40.815" endtime="20210731 21:37:40.816"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:40.816" endtime="20210731 21:37:40.816"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.814" endtime="20210731 21:37:40.816"/>
</iter>
<status status="PASS" starttime="20210731 21:37:40.810" endtime="20210731 21:37:40.816"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:40.817" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:40.816" endtime="20210731 21:37:40.817"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.809" endtime="20210731 21:37:40.817"/>
</kw>
<status status="PASS" starttime="20210731 21:37:39.227" endtime="20210731 21:37:40.817"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:40.818" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:40.818" endtime="20210731 21:37:40.819"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:40.819" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 21:37:40.819" endtime="20210731 21:37:40.819"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:40.830" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:40.830" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:40.819" endtime="20210731 21:37:40.830"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:40.830" endtime="20210731 21:37:40.830"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:40.831" endtime="20210731 21:37:40.831"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:40.819" endtime="20210731 21:37:40.831"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:40.819" endtime="20210731 21:37:40.831"/>
</for>
<status status="FAIL" starttime="20210731 21:37:40.818" endtime="20210731 21:37:40.831"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:40.818" endtime="20210731 21:37:40.831"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:40.832" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:40.832" endtime="20210731 21:37:40.832"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:40.833" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 21:37:40.832" endtime="20210731 21:37:40.833"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:40.837" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:40.838" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:40.833" endtime="20210731 21:37:40.838"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:40.839" endtime="20210731 21:37:40.839"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:40.839" endtime="20210731 21:37:40.839"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:40.833" endtime="20210731 21:37:40.839"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:40.833" endtime="20210731 21:37:40.839"/>
</for>
<status status="FAIL" starttime="20210731 21:37:40.831" endtime="20210731 21:37:40.839"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:40.831" endtime="20210731 21:37:40.839"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:40.840" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:40.840" endtime="20210731 21:37:40.840"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:40.841" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 21:37:40.841" endtime="20210731 21:37:40.841"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:40.846" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:40.847" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:40.841" endtime="20210731 21:37:40.847"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:40.847" endtime="20210731 21:37:40.847"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:40.847" endtime="20210731 21:37:40.847"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:40.841" endtime="20210731 21:37:40.847"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:40.841" endtime="20210731 21:37:40.847"/>
</for>
<status status="FAIL" starttime="20210731 21:37:40.839" endtime="20210731 21:37:40.847"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:40.839" endtime="20210731 21:37:40.847"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:40.817" endtime="20210731 21:37:40.847"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:40.858" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:40.869" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:40.869" level="INFO">${pids} = 4318
4325
4329</msg>
<status status="PASS" starttime="20210731 21:37:40.849" endtime="20210731 21:37:40.869"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:40.870" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:40.869" endtime="20210731 21:37:40.870"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:40.871" level="INFO">${pids} = ['4318', '4325', '4329']</msg>
<status status="PASS" starttime="20210731 21:37:40.870" endtime="20210731 21:37:40.871"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4318</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:40.875" level="INFO">Running command 'kill 4318 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:40.871" endtime="20210731 21:37:40.875"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.871" endtime="20210731 21:37:40.875"/>
</iter>
<iter>
<var name="${pid}">4325</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:40.880" level="INFO">Running command 'kill 4325 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:40.876" endtime="20210731 21:37:40.882"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.875" endtime="20210731 21:37:40.882"/>
</iter>
<iter>
<var name="${pid}">4329</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:40.886" level="INFO">Running command 'kill 4329 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:40.882" endtime="20210731 21:37:40.886"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.882" endtime="20210731 21:37:40.886"/>
</iter>
<status status="PASS" starttime="20210731 21:37:40.871" endtime="20210731 21:37:40.886"/>
</for>
<status status="PASS" starttime="20210731 21:37:40.870" endtime="20210731 21:37:40.886"/>
</branch>
<status status="PASS" starttime="20210731 21:37:40.870" endtime="20210731 21:37:40.886"/>
</if>
<status status="PASS" starttime="20210731 21:37:40.848" endtime="20210731 21:37:40.887"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:39.226" endtime="20210731 21:37:40.887">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t10" name="With Each Valid Token, Updating Username Of Each System User With abcdefghijklmnprstop Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:40.892" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:40.914" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:40.914" level="INFO">${pids} = 4364</msg>
<status status="PASS" starttime="20210731 21:37:40.889" endtime="20210731 21:37:40.914"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:40.915" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:40.915" endtime="20210731 21:37:40.915"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:40.916" level="INFO">${pids} = ['4364']</msg>
<status status="PASS" starttime="20210731 21:37:40.916" endtime="20210731 21:37:40.916"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4364</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:40.922" level="INFO">Running command 'kill 4364 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:40.917" endtime="20210731 21:37:40.922"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.917" endtime="20210731 21:37:40.922"/>
</iter>
<status status="PASS" starttime="20210731 21:37:40.916" endtime="20210731 21:37:40.922"/>
</for>
<status status="PASS" starttime="20210731 21:37:40.916" endtime="20210731 21:37:40.922"/>
</branch>
<status status="PASS" starttime="20210731 21:37:40.915" endtime="20210731 21:37:40.922"/>
</if>
<status status="PASS" starttime="20210731 21:37:40.889" endtime="20210731 21:37:40.923"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:40.924" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:40.924" endtime="20210731 21:37:40.924"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:40.925" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:40.925" endtime="20210731 21:37:40.925"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:40.925" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:40.925" endtime="20210731 21:37:40.925"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:40.926" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:40.926" endtime="20210731 21:37:40.926"/>
</kw>
<msg timestamp="20210731 21:37:40.926" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:40.924" endtime="20210731 21:37:40.926"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:40.931" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:40.927" endtime="20210731 21:37:40.950"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.923" endtime="20210731 21:37:40.950"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:40.952" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:40.951" endtime="20210731 21:37:40.957"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:42.458" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:40.957" endtime="20210731 21:37:42.458"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.951" endtime="20210731 21:37:42.458"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:42.460" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:42.460" endtime="20210731 21:37:42.460"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:42.460" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:42.460" endtime="20210731 21:37:42.460"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:42.461" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:42.461" endtime="20210731 21:37:42.461"/>
</kw>
<msg timestamp="20210731 21:37:42.461" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:42.459" endtime="20210731 21:37:42.461"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:42.462" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:42.462" endtime="20210731 21:37:42.462"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.459" endtime="20210731 21:37:42.463"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:42.463" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:42.463" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:42.463" endtime="20210731 21:37:42.464"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.463" endtime="20210731 21:37:42.464"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:42.465" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:42.465" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:42.464" endtime="20210731 21:37:42.465"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:42.465" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:42.465" endtime="20210731 21:37:42.465"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:42.466" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:42.466" endtime="20210731 21:37:42.466"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:42.467" endtime="20210731 21:37:42.468"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:42.468" endtime="20210731 21:37:42.468"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.466" endtime="20210731 21:37:42.468"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:42.469" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:42.468" endtime="20210731 21:37:42.469"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:42.469" endtime="20210731 21:37:42.470"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:42.470" endtime="20210731 21:37:42.470"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.468" endtime="20210731 21:37:42.470"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:42.471" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:42.470" endtime="20210731 21:37:42.471"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:42.471" endtime="20210731 21:37:42.472"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:42.472" endtime="20210731 21:37:42.472"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.470" endtime="20210731 21:37:42.472"/>
</iter>
<status status="PASS" starttime="20210731 21:37:42.466" endtime="20210731 21:37:42.472"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:42.473" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:42.472" endtime="20210731 21:37:42.473"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.464" endtime="20210731 21:37:42.473"/>
</kw>
<status status="PASS" starttime="20210731 21:37:40.888" endtime="20210731 21:37:42.473"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:42.475" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:42.474" endtime="20210731 21:37:42.475"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:42.476" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210731 21:37:42.475" endtime="20210731 21:37:42.476"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:42.487" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:42.488" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:42.476" endtime="20210731 21:37:42.488"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:42.488" endtime="20210731 21:37:42.488"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:42.488" endtime="20210731 21:37:42.488"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:42.476" endtime="20210731 21:37:42.488"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:42.476" endtime="20210731 21:37:42.488"/>
</for>
<status status="FAIL" starttime="20210731 21:37:42.474" endtime="20210731 21:37:42.489"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:42.474" endtime="20210731 21:37:42.489"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:42.490" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:42.490" endtime="20210731 21:37:42.490"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:42.491" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210731 21:37:42.490" endtime="20210731 21:37:42.491"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:42.496" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:42.496" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:42.491" endtime="20210731 21:37:42.496"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:42.496" endtime="20210731 21:37:42.496"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:42.497" endtime="20210731 21:37:42.497"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:42.491" endtime="20210731 21:37:42.497"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:42.491" endtime="20210731 21:37:42.497"/>
</for>
<status status="FAIL" starttime="20210731 21:37:42.489" endtime="20210731 21:37:42.497"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:42.489" endtime="20210731 21:37:42.497"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:42.498" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:42.498" endtime="20210731 21:37:42.498"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:42.499" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210731 21:37:42.498" endtime="20210731 21:37:42.499"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:42.505" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:42.506" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:42.499" endtime="20210731 21:37:42.506"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:42.506" endtime="20210731 21:37:42.506"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:42.506" endtime="20210731 21:37:42.506"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:42.499" endtime="20210731 21:37:42.506"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:42.499" endtime="20210731 21:37:42.506"/>
</for>
<status status="FAIL" starttime="20210731 21:37:42.497" endtime="20210731 21:37:42.506"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:42.497" endtime="20210731 21:37:42.506"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:42.474" endtime="20210731 21:37:42.507"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:42.519" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:42.530" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:42.530" level="INFO">${pids} = 4388
4395
4400</msg>
<status status="PASS" starttime="20210731 21:37:42.508" endtime="20210731 21:37:42.530"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:42.531" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:42.531" endtime="20210731 21:37:42.531"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:42.532" level="INFO">${pids} = ['4388', '4395', '4400']</msg>
<status status="PASS" starttime="20210731 21:37:42.532" endtime="20210731 21:37:42.532"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4388</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:42.536" level="INFO">Running command 'kill 4388 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:42.533" endtime="20210731 21:37:42.537"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.533" endtime="20210731 21:37:42.537"/>
</iter>
<iter>
<var name="${pid}">4395</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:42.540" level="INFO">Running command 'kill 4395 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:42.538" endtime="20210731 21:37:42.541"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.537" endtime="20210731 21:37:42.541"/>
</iter>
<iter>
<var name="${pid}">4400</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:42.544" level="INFO">Running command 'kill 4400 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:42.541" endtime="20210731 21:37:42.545"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.541" endtime="20210731 21:37:42.545"/>
</iter>
<status status="PASS" starttime="20210731 21:37:42.532" endtime="20210731 21:37:42.545"/>
</for>
<status status="PASS" starttime="20210731 21:37:42.532" endtime="20210731 21:37:42.545"/>
</branch>
<status status="PASS" starttime="20210731 21:37:42.531" endtime="20210731 21:37:42.545"/>
</if>
<status status="PASS" starttime="20210731 21:37:42.507" endtime="20210731 21:37:42.545"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefghijklmnprstop'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:40.887" endtime="20210731 21:37:42.546">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t11" name="With Each Valid Token, Updating Username Of Each System User With hakan12 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:42.564" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:42.577" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:42.577" level="INFO">${pids} = 4429</msg>
<status status="PASS" starttime="20210731 21:37:42.548" endtime="20210731 21:37:42.577"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:42.578" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:42.577" endtime="20210731 21:37:42.578"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:42.579" level="INFO">${pids} = ['4429']</msg>
<status status="PASS" starttime="20210731 21:37:42.578" endtime="20210731 21:37:42.579"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4429</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:42.584" level="INFO">Running command 'kill 4429 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:42.579" endtime="20210731 21:37:42.585"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.579" endtime="20210731 21:37:42.585"/>
</iter>
<status status="PASS" starttime="20210731 21:37:42.579" endtime="20210731 21:37:42.585"/>
</for>
<status status="PASS" starttime="20210731 21:37:42.578" endtime="20210731 21:37:42.585"/>
</branch>
<status status="PASS" starttime="20210731 21:37:42.578" endtime="20210731 21:37:42.585"/>
</if>
<status status="PASS" starttime="20210731 21:37:42.548" endtime="20210731 21:37:42.585"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:42.587" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:42.586" endtime="20210731 21:37:42.587"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:42.587" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:42.587" endtime="20210731 21:37:42.588"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:42.588" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:42.588" endtime="20210731 21:37:42.588"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:42.589" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:42.588" endtime="20210731 21:37:42.589"/>
</kw>
<msg timestamp="20210731 21:37:42.589" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:42.587" endtime="20210731 21:37:42.589"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:42.607" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:42.589" endtime="20210731 21:37:42.609"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.586" endtime="20210731 21:37:42.609"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:42.611" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:42.610" endtime="20210731 21:37:42.615"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:44.116" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:42.615" endtime="20210731 21:37:44.116"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.609" endtime="20210731 21:37:44.116"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:44.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:44.117" endtime="20210731 21:37:44.118"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:44.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:44.118" endtime="20210731 21:37:44.118"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:44.119" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:44.118" endtime="20210731 21:37:44.119"/>
</kw>
<msg timestamp="20210731 21:37:44.119" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:44.117" endtime="20210731 21:37:44.119"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:44.120" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:44.119" endtime="20210731 21:37:44.120"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.117" endtime="20210731 21:37:44.120"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:44.121" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:44.121" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:44.121" endtime="20210731 21:37:44.121"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.120" endtime="20210731 21:37:44.121"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:44.122" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:44.122" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:44.122" endtime="20210731 21:37:44.122"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:44.123" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:44.123" endtime="20210731 21:37:44.123"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:44.124" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:44.123" endtime="20210731 21:37:44.124"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:44.124" endtime="20210731 21:37:44.125"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:44.125" endtime="20210731 21:37:44.125"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.123" endtime="20210731 21:37:44.125"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:44.126" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:44.125" endtime="20210731 21:37:44.126"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:44.126" endtime="20210731 21:37:44.127"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:44.127" endtime="20210731 21:37:44.127"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.125" endtime="20210731 21:37:44.127"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:44.128" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:44.127" endtime="20210731 21:37:44.128"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:44.128" endtime="20210731 21:37:44.129"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:44.129" endtime="20210731 21:37:44.129"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.127" endtime="20210731 21:37:44.129"/>
</iter>
<status status="PASS" starttime="20210731 21:37:44.123" endtime="20210731 21:37:44.129"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:44.130" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:44.129" endtime="20210731 21:37:44.130"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.121" endtime="20210731 21:37:44.130"/>
</kw>
<status status="PASS" starttime="20210731 21:37:42.547" endtime="20210731 21:37:44.130"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:44.131" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:44.131" endtime="20210731 21:37:44.131"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:44.132" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210731 21:37:44.132" endtime="20210731 21:37:44.132"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:44.144" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:44.144" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:44.132" endtime="20210731 21:37:44.144"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:44.144" endtime="20210731 21:37:44.145"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:44.145" endtime="20210731 21:37:44.145"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:44.132" endtime="20210731 21:37:44.145"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:44.132" endtime="20210731 21:37:44.145"/>
</for>
<status status="FAIL" starttime="20210731 21:37:44.131" endtime="20210731 21:37:44.145"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:44.130" endtime="20210731 21:37:44.145"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:44.146" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:44.146" endtime="20210731 21:37:44.146"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:44.147" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210731 21:37:44.147" endtime="20210731 21:37:44.147"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:44.152" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:44.152" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:44.147" endtime="20210731 21:37:44.152"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:44.153" endtime="20210731 21:37:44.153"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:44.153" endtime="20210731 21:37:44.153"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:44.147" endtime="20210731 21:37:44.153"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:44.147" endtime="20210731 21:37:44.153"/>
</for>
<status status="FAIL" starttime="20210731 21:37:44.145" endtime="20210731 21:37:44.153"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:44.145" endtime="20210731 21:37:44.153"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:44.154" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:44.154" endtime="20210731 21:37:44.154"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:44.155" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210731 21:37:44.155" endtime="20210731 21:37:44.155"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:44.161" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:44.161" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:44.155" endtime="20210731 21:37:44.161"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:44.161" endtime="20210731 21:37:44.161"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:44.162" endtime="20210731 21:37:44.162"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:44.155" endtime="20210731 21:37:44.162"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:44.155" endtime="20210731 21:37:44.162"/>
</for>
<status status="FAIL" starttime="20210731 21:37:44.153" endtime="20210731 21:37:44.162"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:44.153" endtime="20210731 21:37:44.170"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:44.130" endtime="20210731 21:37:44.170"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:44.175" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:44.186" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:44.186" level="INFO">${pids} = 4452
4459
4463</msg>
<status status="PASS" starttime="20210731 21:37:44.172" endtime="20210731 21:37:44.186"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:44.188" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:44.187" endtime="20210731 21:37:44.188"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:44.189" level="INFO">${pids} = ['4452', '4459', '4463']</msg>
<status status="PASS" starttime="20210731 21:37:44.188" endtime="20210731 21:37:44.189"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4452</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:44.203" level="INFO">Running command 'kill 4452 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:44.189" endtime="20210731 21:37:44.203"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.189" endtime="20210731 21:37:44.204"/>
</iter>
<iter>
<var name="${pid}">4459</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:44.208" level="INFO">Running command 'kill 4459 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:44.204" endtime="20210731 21:37:44.210"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.204" endtime="20210731 21:37:44.210"/>
</iter>
<iter>
<var name="${pid}">4463</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:44.213" level="INFO">Running command 'kill 4463 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:44.210" endtime="20210731 21:37:44.214"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.210" endtime="20210731 21:37:44.214"/>
</iter>
<status status="PASS" starttime="20210731 21:37:44.189" endtime="20210731 21:37:44.214"/>
</for>
<status status="PASS" starttime="20210731 21:37:44.188" endtime="20210731 21:37:44.214"/>
</branch>
<status status="PASS" starttime="20210731 21:37:44.188" endtime="20210731 21:37:44.214"/>
</if>
<status status="PASS" starttime="20210731 21:37:44.171" endtime="20210731 21:37:44.214"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan12'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:42.546" endtime="20210731 21:37:44.215">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t12" name="With Each Valid Token, Updating Username Of Each System User With hakan123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:44.225" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:44.236" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:44.236" level="INFO">${pids} = 4496</msg>
<status status="PASS" starttime="20210731 21:37:44.217" endtime="20210731 21:37:44.236"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:44.237" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:44.236" endtime="20210731 21:37:44.237"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:44.238" level="INFO">${pids} = ['4496']</msg>
<status status="PASS" starttime="20210731 21:37:44.238" endtime="20210731 21:37:44.238"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4496</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:44.243" level="INFO">Running command 'kill 4496 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:44.239" endtime="20210731 21:37:44.244"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.239" endtime="20210731 21:37:44.244"/>
</iter>
<status status="PASS" starttime="20210731 21:37:44.238" endtime="20210731 21:37:44.244"/>
</for>
<status status="PASS" starttime="20210731 21:37:44.238" endtime="20210731 21:37:44.244"/>
</branch>
<status status="PASS" starttime="20210731 21:37:44.237" endtime="20210731 21:37:44.244"/>
</if>
<status status="PASS" starttime="20210731 21:37:44.217" endtime="20210731 21:37:44.244"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:44.246" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:44.245" endtime="20210731 21:37:44.246"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:44.247" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:44.246" endtime="20210731 21:37:44.247"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:44.247" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:44.247" endtime="20210731 21:37:44.247"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:44.248" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:44.247" endtime="20210731 21:37:44.248"/>
</kw>
<msg timestamp="20210731 21:37:44.248" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:44.246" endtime="20210731 21:37:44.248"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:44.272" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:44.248" endtime="20210731 21:37:44.274"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.245" endtime="20210731 21:37:44.275"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:44.276" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:44.276" endtime="20210731 21:37:44.280"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:45.782" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:44.281" endtime="20210731 21:37:45.782"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.275" endtime="20210731 21:37:45.782"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:45.784" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:45.783" endtime="20210731 21:37:45.784"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:45.784" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:45.784" endtime="20210731 21:37:45.784"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:45.785" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:45.784" endtime="20210731 21:37:45.785"/>
</kw>
<msg timestamp="20210731 21:37:45.785" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:45.783" endtime="20210731 21:37:45.785"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:45.786" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:45.785" endtime="20210731 21:37:45.786"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.782" endtime="20210731 21:37:45.786"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:45.787" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:45.787" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:45.787" endtime="20210731 21:37:45.787"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.786" endtime="20210731 21:37:45.787"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:45.788" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:45.788" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:45.788" endtime="20210731 21:37:45.788"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:45.789" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:45.789" endtime="20210731 21:37:45.789"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:45.790" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:45.789" endtime="20210731 21:37:45.790"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:45.790" endtime="20210731 21:37:45.791"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:45.791" endtime="20210731 21:37:45.791"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.789" endtime="20210731 21:37:45.791"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:45.792" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:45.791" endtime="20210731 21:37:45.792"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:45.792" endtime="20210731 21:37:45.793"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:45.793" endtime="20210731 21:37:45.793"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.791" endtime="20210731 21:37:45.793"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:45.794" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:45.793" endtime="20210731 21:37:45.794"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:45.794" endtime="20210731 21:37:45.795"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:45.795" endtime="20210731 21:37:45.795"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.793" endtime="20210731 21:37:45.795"/>
</iter>
<status status="PASS" starttime="20210731 21:37:45.789" endtime="20210731 21:37:45.795"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:45.796" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:45.795" endtime="20210731 21:37:45.796"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.787" endtime="20210731 21:37:45.796"/>
</kw>
<status status="PASS" starttime="20210731 21:37:44.216" endtime="20210731 21:37:45.796"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:45.798" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:45.797" endtime="20210731 21:37:45.798"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:45.798" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210731 21:37:45.798" endtime="20210731 21:37:45.798"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:45.809" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:45.809" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:45.799" endtime="20210731 21:37:45.810"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:45.810" endtime="20210731 21:37:45.810"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:45.810" endtime="20210731 21:37:45.810"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:45.798" endtime="20210731 21:37:45.810"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:45.798" endtime="20210731 21:37:45.810"/>
</for>
<status status="FAIL" starttime="20210731 21:37:45.797" endtime="20210731 21:37:45.810"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:45.797" endtime="20210731 21:37:45.810"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:45.812" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:45.811" endtime="20210731 21:37:45.812"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:45.812" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210731 21:37:45.812" endtime="20210731 21:37:45.812"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:45.817" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:45.818" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:45.813" endtime="20210731 21:37:45.818"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:45.818" endtime="20210731 21:37:45.818"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:45.818" endtime="20210731 21:37:45.818"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:45.813" endtime="20210731 21:37:45.818"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:45.812" endtime="20210731 21:37:45.818"/>
</for>
<status status="FAIL" starttime="20210731 21:37:45.811" endtime="20210731 21:37:45.818"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:45.811" endtime="20210731 21:37:45.818"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:45.820" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:45.819" endtime="20210731 21:37:45.820"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:45.820" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210731 21:37:45.820" endtime="20210731 21:37:45.820"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:45.838" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:45.838" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:45.821" endtime="20210731 21:37:45.838"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:45.838" endtime="20210731 21:37:45.838"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:45.838" endtime="20210731 21:37:45.838"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:45.820" endtime="20210731 21:37:45.839"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:45.820" endtime="20210731 21:37:45.839"/>
</for>
<status status="FAIL" starttime="20210731 21:37:45.819" endtime="20210731 21:37:45.839"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:45.818" endtime="20210731 21:37:45.839"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:45.796" endtime="20210731 21:37:45.839"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:45.844" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:45.857" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:45.857" level="INFO">${pids} = 4519
4526
4530</msg>
<status status="PASS" starttime="20210731 21:37:45.840" endtime="20210731 21:37:45.857"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:45.858" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:45.857" endtime="20210731 21:37:45.858"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:45.859" level="INFO">${pids} = ['4519', '4526', '4530']</msg>
<status status="PASS" starttime="20210731 21:37:45.858" endtime="20210731 21:37:45.859"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4519</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:45.862" level="INFO">Running command 'kill 4519 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:45.859" endtime="20210731 21:37:45.863"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.859" endtime="20210731 21:37:45.863"/>
</iter>
<iter>
<var name="${pid}">4526</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:45.866" level="INFO">Running command 'kill 4526 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:45.863" endtime="20210731 21:37:45.868"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.863" endtime="20210731 21:37:45.868"/>
</iter>
<iter>
<var name="${pid}">4530</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:45.872" level="INFO">Running command 'kill 4530 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:45.869" endtime="20210731 21:37:45.873"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.869" endtime="20210731 21:37:45.873"/>
</iter>
<status status="PASS" starttime="20210731 21:37:45.859" endtime="20210731 21:37:45.873"/>
</for>
<status status="PASS" starttime="20210731 21:37:45.858" endtime="20210731 21:37:45.873"/>
</branch>
<status status="PASS" starttime="20210731 21:37:45.858" endtime="20210731 21:37:45.873"/>
</if>
<status status="PASS" starttime="20210731 21:37:45.840" endtime="20210731 21:37:45.874"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:44.215" endtime="20210731 21:37:45.874">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t13" name="With Each Valid Token, Updating Username Of Each System User With hakan123456789123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:45.889" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:45.906" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:45.907" level="INFO">${pids} = 4563</msg>
<status status="PASS" starttime="20210731 21:37:45.877" endtime="20210731 21:37:45.907"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:45.908" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:45.907" endtime="20210731 21:37:45.908"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:45.909" level="INFO">${pids} = ['4563']</msg>
<status status="PASS" starttime="20210731 21:37:45.908" endtime="20210731 21:37:45.909"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4563</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:45.931" level="INFO">Running command 'kill 4563 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:45.909" endtime="20210731 21:37:45.932"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.909" endtime="20210731 21:37:45.932"/>
</iter>
<status status="PASS" starttime="20210731 21:37:45.909" endtime="20210731 21:37:45.932"/>
</for>
<status status="PASS" starttime="20210731 21:37:45.908" endtime="20210731 21:37:45.932"/>
</branch>
<status status="PASS" starttime="20210731 21:37:45.908" endtime="20210731 21:37:45.932"/>
</if>
<status status="PASS" starttime="20210731 21:37:45.876" endtime="20210731 21:37:45.932"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:45.934" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:45.933" endtime="20210731 21:37:45.934"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:45.935" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:45.935" endtime="20210731 21:37:45.935"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:45.935" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:45.935" endtime="20210731 21:37:45.935"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:45.936" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:45.936" endtime="20210731 21:37:45.936"/>
</kw>
<msg timestamp="20210731 21:37:45.936" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:45.934" endtime="20210731 21:37:45.936"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:45.945" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:45.936" endtime="20210731 21:37:45.948"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.933" endtime="20210731 21:37:45.949"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:45.950" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:45.950" endtime="20210731 21:37:45.955"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:47.456" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:45.955" endtime="20210731 21:37:47.456"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.949" endtime="20210731 21:37:47.457"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:47.458" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:47.458" endtime="20210731 21:37:47.458"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:47.459" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:47.458" endtime="20210731 21:37:47.459"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:47.459" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:47.459" endtime="20210731 21:37:47.459"/>
</kw>
<msg timestamp="20210731 21:37:47.460" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:47.457" endtime="20210731 21:37:47.460"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:47.460" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:47.460" endtime="20210731 21:37:47.461"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.457" endtime="20210731 21:37:47.461"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:47.461" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:47.461" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:47.461" endtime="20210731 21:37:47.462"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.461" endtime="20210731 21:37:47.462"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:47.463" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:47.463" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:47.462" endtime="20210731 21:37:47.463"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:47.463" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:47.463" endtime="20210731 21:37:47.463"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:47.464" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:47.464" endtime="20210731 21:37:47.464"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:47.464" endtime="20210731 21:37:47.466"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:47.466" endtime="20210731 21:37:47.466"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.464" endtime="20210731 21:37:47.466"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:47.467" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:47.466" endtime="20210731 21:37:47.467"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:47.467" endtime="20210731 21:37:47.468"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:47.468" endtime="20210731 21:37:47.468"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.466" endtime="20210731 21:37:47.468"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:47.469" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:47.468" endtime="20210731 21:37:47.469"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:47.469" endtime="20210731 21:37:47.470"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:47.470" endtime="20210731 21:37:47.470"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.468" endtime="20210731 21:37:47.470"/>
</iter>
<status status="PASS" starttime="20210731 21:37:47.464" endtime="20210731 21:37:47.470"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:47.471" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:47.471" endtime="20210731 21:37:47.471"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.462" endtime="20210731 21:37:47.471"/>
</kw>
<status status="PASS" starttime="20210731 21:37:45.876" endtime="20210731 21:37:47.471"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:47.473" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:47.472" endtime="20210731 21:37:47.473"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:47.473" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210731 21:37:47.473" endtime="20210731 21:37:47.473"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:47.486" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:47.486" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:47.474" endtime="20210731 21:37:47.487"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:47.487" endtime="20210731 21:37:47.487"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:47.487" endtime="20210731 21:37:47.487"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:47.474" endtime="20210731 21:37:47.487"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:47.473" endtime="20210731 21:37:47.487"/>
</for>
<status status="FAIL" starttime="20210731 21:37:47.472" endtime="20210731 21:37:47.487"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:47.472" endtime="20210731 21:37:47.487"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:47.489" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:47.488" endtime="20210731 21:37:47.489"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:47.490" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210731 21:37:47.489" endtime="20210731 21:37:47.490"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:47.495" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:47.495" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:47.490" endtime="20210731 21:37:47.495"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:47.495" endtime="20210731 21:37:47.495"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:47.495" endtime="20210731 21:37:47.496"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:47.490" endtime="20210731 21:37:47.496"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:47.490" endtime="20210731 21:37:47.496"/>
</for>
<status status="FAIL" starttime="20210731 21:37:47.488" endtime="20210731 21:37:47.496"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:47.487" endtime="20210731 21:37:47.496"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:47.497" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:47.497" endtime="20210731 21:37:47.497"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:47.498" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210731 21:37:47.497" endtime="20210731 21:37:47.498"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:47.514" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:47.514" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:47.498" endtime="20210731 21:37:47.514"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:47.515" endtime="20210731 21:37:47.515"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:47.515" endtime="20210731 21:37:47.515"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:47.498" endtime="20210731 21:37:47.515"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:47.498" endtime="20210731 21:37:47.515"/>
</for>
<status status="FAIL" starttime="20210731 21:37:47.496" endtime="20210731 21:37:47.515"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:47.496" endtime="20210731 21:37:47.516"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:47.471" endtime="20210731 21:37:47.516"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:47.521" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:47.534" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:47.534" level="INFO">${pids} = 4586
4593
4599</msg>
<status status="PASS" starttime="20210731 21:37:47.517" endtime="20210731 21:37:47.534"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:47.535" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:47.535" endtime="20210731 21:37:47.535"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:47.536" level="INFO">${pids} = ['4586', '4593', '4599']</msg>
<status status="PASS" starttime="20210731 21:37:47.536" endtime="20210731 21:37:47.536"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4586</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:47.540" level="INFO">Running command 'kill 4586 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:47.537" endtime="20210731 21:37:47.540"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.537" endtime="20210731 21:37:47.540"/>
</iter>
<iter>
<var name="${pid}">4593</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:47.544" level="INFO">Running command 'kill 4593 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:47.541" endtime="20210731 21:37:47.544"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.541" endtime="20210731 21:37:47.544"/>
</iter>
<iter>
<var name="${pid}">4599</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:47.552" level="INFO">Running command 'kill 4599 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:47.545" endtime="20210731 21:37:47.552"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.544" endtime="20210731 21:37:47.552"/>
</iter>
<status status="PASS" starttime="20210731 21:37:47.536" endtime="20210731 21:37:47.552"/>
</for>
<status status="PASS" starttime="20210731 21:37:47.536" endtime="20210731 21:37:47.553"/>
</branch>
<status status="PASS" starttime="20210731 21:37:47.536" endtime="20210731 21:37:47.553"/>
</if>
<status status="PASS" starttime="20210731 21:37:47.516" endtime="20210731 21:37:47.553"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan123456789123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:45.875" endtime="20210731 21:37:47.560">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t14" name="With Each Valid Token, Updating Username Of Each System User With #¤%123! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:47.568" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:47.587" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:47.587" level="INFO">${pids} = 4629</msg>
<status status="PASS" starttime="20210731 21:37:47.563" endtime="20210731 21:37:47.587"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:47.588" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:47.587" endtime="20210731 21:37:47.588"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:47.588" level="INFO">${pids} = ['4629']</msg>
<status status="PASS" starttime="20210731 21:37:47.588" endtime="20210731 21:37:47.589"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4629</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:47.592" level="INFO">Running command 'kill 4629 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:47.589" endtime="20210731 21:37:47.593"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.589" endtime="20210731 21:37:47.594"/>
</iter>
<status status="PASS" starttime="20210731 21:37:47.589" endtime="20210731 21:37:47.594"/>
</for>
<status status="PASS" starttime="20210731 21:37:47.588" endtime="20210731 21:37:47.594"/>
</branch>
<status status="PASS" starttime="20210731 21:37:47.588" endtime="20210731 21:37:47.594"/>
</if>
<status status="PASS" starttime="20210731 21:37:47.563" endtime="20210731 21:37:47.594"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:47.596" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:47.595" endtime="20210731 21:37:47.596"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:47.597" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:47.596" endtime="20210731 21:37:47.597"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:47.597" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:47.597" endtime="20210731 21:37:47.597"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:47.598" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:47.598" endtime="20210731 21:37:47.598"/>
</kw>
<msg timestamp="20210731 21:37:47.598" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:47.596" endtime="20210731 21:37:47.598"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:47.602" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:47.598" endtime="20210731 21:37:47.603"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.595" endtime="20210731 21:37:47.604"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:47.605" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:47.605" endtime="20210731 21:37:47.609"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:49.110" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:47.610" endtime="20210731 21:37:49.111"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.604" endtime="20210731 21:37:49.111"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:49.112" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:49.112" endtime="20210731 21:37:49.112"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:49.113" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:49.113" endtime="20210731 21:37:49.113"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:49.114" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:49.113" endtime="20210731 21:37:49.114"/>
</kw>
<msg timestamp="20210731 21:37:49.114" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:49.112" endtime="20210731 21:37:49.114"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:49.114" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:49.114" endtime="20210731 21:37:49.115"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.111" endtime="20210731 21:37:49.115"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:49.116" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:49.116" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:49.115" endtime="20210731 21:37:49.116"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.115" endtime="20210731 21:37:49.116"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:49.117" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:49.117" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:49.116" endtime="20210731 21:37:49.117"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:49.118" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:49.118" endtime="20210731 21:37:49.118"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:49.119" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:49.118" endtime="20210731 21:37:49.119"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:49.119" endtime="20210731 21:37:49.120"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:49.120" endtime="20210731 21:37:49.120"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.118" endtime="20210731 21:37:49.120"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:49.120" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:49.120" endtime="20210731 21:37:49.120"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:49.121" endtime="20210731 21:37:49.121"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:49.122" endtime="20210731 21:37:49.122"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.120" endtime="20210731 21:37:49.122"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:49.122" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:49.122" endtime="20210731 21:37:49.122"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:49.122" endtime="20210731 21:37:49.123"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:49.123" endtime="20210731 21:37:49.124"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.122" endtime="20210731 21:37:49.124"/>
</iter>
<status status="PASS" starttime="20210731 21:37:49.118" endtime="20210731 21:37:49.124"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:49.124" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:49.124" endtime="20210731 21:37:49.124"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.116" endtime="20210731 21:37:49.125"/>
</kw>
<status status="PASS" starttime="20210731 21:37:47.562" endtime="20210731 21:37:49.125"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:49.126" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:49.126" endtime="20210731 21:37:49.126"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:49.126" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210731 21:37:49.126" endtime="20210731 21:37:49.127"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:49.137" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:49.138" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:49.127" endtime="20210731 21:37:49.138"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:49.138" endtime="20210731 21:37:49.138"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:49.138" endtime="20210731 21:37:49.138"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:49.127" endtime="20210731 21:37:49.138"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:49.127" endtime="20210731 21:37:49.139"/>
</for>
<status status="FAIL" starttime="20210731 21:37:49.125" endtime="20210731 21:37:49.139"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:49.125" endtime="20210731 21:37:49.139"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:49.140" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:49.140" endtime="20210731 21:37:49.140"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:49.141" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210731 21:37:49.140" endtime="20210731 21:37:49.141"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:49.146" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:49.146" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:49.141" endtime="20210731 21:37:49.146"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:49.146" endtime="20210731 21:37:49.146"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:49.146" endtime="20210731 21:37:49.146"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:49.141" endtime="20210731 21:37:49.147"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:49.141" endtime="20210731 21:37:49.147"/>
</for>
<status status="FAIL" starttime="20210731 21:37:49.139" endtime="20210731 21:37:49.147"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:49.139" endtime="20210731 21:37:49.147"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:49.148" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:49.148" endtime="20210731 21:37:49.148"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:49.149" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210731 21:37:49.148" endtime="20210731 21:37:49.149"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:49.155" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:49.156" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:49.149" endtime="20210731 21:37:49.156"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:49.156" endtime="20210731 21:37:49.156"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:49.156" endtime="20210731 21:37:49.156"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:49.149" endtime="20210731 21:37:49.156"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:49.149" endtime="20210731 21:37:49.156"/>
</for>
<status status="FAIL" starttime="20210731 21:37:49.147" endtime="20210731 21:37:49.156"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:49.147" endtime="20210731 21:37:49.157"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:49.125" endtime="20210731 21:37:49.157"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:49.170" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:49.181" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:49.182" level="INFO">${pids} = 4656
4663
4667</msg>
<status status="PASS" starttime="20210731 21:37:49.158" endtime="20210731 21:37:49.182"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:49.183" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:49.182" endtime="20210731 21:37:49.183"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:49.184" level="INFO">${pids} = ['4656', '4663', '4667']</msg>
<status status="PASS" starttime="20210731 21:37:49.183" endtime="20210731 21:37:49.184"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4656</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:49.187" level="INFO">Running command 'kill 4656 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:49.184" endtime="20210731 21:37:49.188"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.184" endtime="20210731 21:37:49.188"/>
</iter>
<iter>
<var name="${pid}">4663</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:49.192" level="INFO">Running command 'kill 4663 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:49.189" endtime="20210731 21:37:49.192"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.188" endtime="20210731 21:37:49.192"/>
</iter>
<iter>
<var name="${pid}">4667</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:49.196" level="INFO">Running command 'kill 4667 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:49.193" endtime="20210731 21:37:49.196"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.192" endtime="20210731 21:37:49.196"/>
</iter>
<status status="PASS" starttime="20210731 21:37:49.184" endtime="20210731 21:37:49.196"/>
</for>
<status status="PASS" starttime="20210731 21:37:49.183" endtime="20210731 21:37:49.196"/>
</branch>
<status status="PASS" starttime="20210731 21:37:49.183" endtime="20210731 21:37:49.197"/>
</if>
<status status="PASS" starttime="20210731 21:37:49.157" endtime="20210731 21:37:49.197"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:47.561" endtime="20210731 21:37:49.197">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t15" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp; Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:49.203" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:49.226" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:49.226" level="INFO">${pids} = 4696</msg>
<status status="PASS" starttime="20210731 21:37:49.200" endtime="20210731 21:37:49.226"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:49.227" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:49.226" endtime="20210731 21:37:49.227"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:49.228" level="INFO">${pids} = ['4696']</msg>
<status status="PASS" starttime="20210731 21:37:49.228" endtime="20210731 21:37:49.228"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4696</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:49.232" level="INFO">Running command 'kill 4696 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:49.228" endtime="20210731 21:37:49.232"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.228" endtime="20210731 21:37:49.232"/>
</iter>
<status status="PASS" starttime="20210731 21:37:49.228" endtime="20210731 21:37:49.232"/>
</for>
<status status="PASS" starttime="20210731 21:37:49.227" endtime="20210731 21:37:49.232"/>
</branch>
<status status="PASS" starttime="20210731 21:37:49.227" endtime="20210731 21:37:49.233"/>
</if>
<status status="PASS" starttime="20210731 21:37:49.199" endtime="20210731 21:37:49.233"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:49.235" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:49.234" endtime="20210731 21:37:49.235"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:49.235" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:49.235" endtime="20210731 21:37:49.235"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:49.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:49.236" endtime="20210731 21:37:49.236"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:49.237" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:49.236" endtime="20210731 21:37:49.237"/>
</kw>
<msg timestamp="20210731 21:37:49.237" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:49.235" endtime="20210731 21:37:49.237"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:49.267" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:49.237" endtime="20210731 21:37:49.270"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.233" endtime="20210731 21:37:49.271"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:49.272" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:49.272" endtime="20210731 21:37:49.277"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:50.778" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:49.277" endtime="20210731 21:37:50.778"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.271" endtime="20210731 21:37:50.779"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:50.780" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:50.780" endtime="20210731 21:37:50.780"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:50.781" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:50.780" endtime="20210731 21:37:50.781"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:50.781" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:50.781" endtime="20210731 21:37:50.781"/>
</kw>
<msg timestamp="20210731 21:37:50.781" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:50.779" endtime="20210731 21:37:50.781"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:50.782" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:50.782" endtime="20210731 21:37:50.782"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.779" endtime="20210731 21:37:50.783"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:50.783" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:50.783" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:50.783" endtime="20210731 21:37:50.784"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.783" endtime="20210731 21:37:50.784"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:50.785" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:50.785" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:50.784" endtime="20210731 21:37:50.785"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:50.786" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:50.786" endtime="20210731 21:37:50.786"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:50.787" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:50.786" endtime="20210731 21:37:50.787"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:50.787" endtime="20210731 21:37:50.788"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:50.788" endtime="20210731 21:37:50.788"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.786" endtime="20210731 21:37:50.788"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:50.789" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:50.788" endtime="20210731 21:37:50.789"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:50.789" endtime="20210731 21:37:50.790"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:50.790" endtime="20210731 21:37:50.790"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.788" endtime="20210731 21:37:50.790"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:50.791" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:50.790" endtime="20210731 21:37:50.791"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:50.791" endtime="20210731 21:37:50.792"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:50.792" endtime="20210731 21:37:50.792"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.790" endtime="20210731 21:37:50.792"/>
</iter>
<status status="PASS" starttime="20210731 21:37:50.786" endtime="20210731 21:37:50.792"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:50.793" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:50.793" endtime="20210731 21:37:50.793"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.784" endtime="20210731 21:37:50.793"/>
</kw>
<status status="PASS" starttime="20210731 21:37:49.199" endtime="20210731 21:37:50.793"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:50.795" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:50.794" endtime="20210731 21:37:50.795"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:50.795" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210731 21:37:50.795" endtime="20210731 21:37:50.795"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:50.808" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:50.809" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:50.796" endtime="20210731 21:37:50.809"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:50.809" endtime="20210731 21:37:50.809"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:50.809" endtime="20210731 21:37:50.809"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:50.796" endtime="20210731 21:37:50.809"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:50.796" endtime="20210731 21:37:50.809"/>
</for>
<status status="FAIL" starttime="20210731 21:37:50.794" endtime="20210731 21:37:50.810"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:50.794" endtime="20210731 21:37:50.810"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:50.812" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:50.812" endtime="20210731 21:37:50.812"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:50.813" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210731 21:37:50.812" endtime="20210731 21:37:50.813"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:50.819" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:50.819" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:50.813" endtime="20210731 21:37:50.819"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:50.819" endtime="20210731 21:37:50.819"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:50.819" endtime="20210731 21:37:50.819"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:50.813" endtime="20210731 21:37:50.819"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:50.813" endtime="20210731 21:37:50.819"/>
</for>
<status status="FAIL" starttime="20210731 21:37:50.810" endtime="20210731 21:37:50.820"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:50.810" endtime="20210731 21:37:50.820"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:50.821" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:50.821" endtime="20210731 21:37:50.821"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:50.822" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210731 21:37:50.821" endtime="20210731 21:37:50.822"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:50.836" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:50.837" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:50.822" endtime="20210731 21:37:50.837"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:50.837" endtime="20210731 21:37:50.837"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:50.837" endtime="20210731 21:37:50.837"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:50.822" endtime="20210731 21:37:50.837"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:50.822" endtime="20210731 21:37:50.837"/>
</for>
<status status="FAIL" starttime="20210731 21:37:50.820" endtime="20210731 21:37:50.838"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:50.820" endtime="20210731 21:37:50.838"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:50.794" endtime="20210731 21:37:50.838"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:50.843" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:50.858" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:50.858" level="INFO">${pids} = 4719
4726
4731</msg>
<status status="PASS" starttime="20210731 21:37:50.840" endtime="20210731 21:37:50.858"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:50.859" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:50.858" endtime="20210731 21:37:50.859"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:50.859" level="INFO">${pids} = ['4719', '4726', '4731']</msg>
<status status="PASS" starttime="20210731 21:37:50.859" endtime="20210731 21:37:50.860"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4719</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:50.873" level="INFO">Running command 'kill 4719 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:50.860" endtime="20210731 21:37:50.874"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.860" endtime="20210731 21:37:50.874"/>
</iter>
<iter>
<var name="${pid}">4726</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:50.877" level="INFO">Running command 'kill 4726 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:50.875" endtime="20210731 21:37:50.878"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.874" endtime="20210731 21:37:50.878"/>
</iter>
<iter>
<var name="${pid}">4731</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:50.881" level="INFO">Running command 'kill 4731 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:50.878" endtime="20210731 21:37:50.881"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.878" endtime="20210731 21:37:50.882"/>
</iter>
<status status="PASS" starttime="20210731 21:37:50.860" endtime="20210731 21:37:50.882"/>
</for>
<status status="PASS" starttime="20210731 21:37:50.859" endtime="20210731 21:37:50.882"/>
</branch>
<status status="PASS" starttime="20210731 21:37:50.859" endtime="20210731 21:37:50.882"/>
</if>
<status status="PASS" starttime="20210731 21:37:50.838" endtime="20210731 21:37:50.882"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:49.198" endtime="20210731 21:37:50.882">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t16" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp;7683##()=?@#¤%&amp;34567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:50.891" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:50.902" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:50.903" level="INFO">${pids} = 4760</msg>
<status status="PASS" starttime="20210731 21:37:50.884" endtime="20210731 21:37:50.903"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:50.904" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:50.903" endtime="20210731 21:37:50.904"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:50.905" level="INFO">${pids} = ['4760']</msg>
<status status="PASS" starttime="20210731 21:37:50.904" endtime="20210731 21:37:50.905"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4760</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:50.919" level="INFO">Running command 'kill 4760 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:50.905" endtime="20210731 21:37:50.920"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.905" endtime="20210731 21:37:50.920"/>
</iter>
<status status="PASS" starttime="20210731 21:37:50.905" endtime="20210731 21:37:50.920"/>
</for>
<status status="PASS" starttime="20210731 21:37:50.904" endtime="20210731 21:37:50.920"/>
</branch>
<status status="PASS" starttime="20210731 21:37:50.904" endtime="20210731 21:37:50.920"/>
</if>
<status status="PASS" starttime="20210731 21:37:50.884" endtime="20210731 21:37:50.921"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:50.922" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:50.922" endtime="20210731 21:37:50.922"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:50.923" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:50.923" endtime="20210731 21:37:50.923"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:50.924" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:50.924" endtime="20210731 21:37:50.924"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:50.924" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:50.924" endtime="20210731 21:37:50.924"/>
</kw>
<msg timestamp="20210731 21:37:50.925" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:50.922" endtime="20210731 21:37:50.925"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:50.928" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:50.925" endtime="20210731 21:37:50.930"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.921" endtime="20210731 21:37:50.931"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:50.932" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:50.932" endtime="20210731 21:37:50.964"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:52.466" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:50.964" endtime="20210731 21:37:52.466"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.931" endtime="20210731 21:37:52.466"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:52.468" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:52.467" endtime="20210731 21:37:52.468"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:52.468" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:52.468" endtime="20210731 21:37:52.468"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:52.469" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:52.468" endtime="20210731 21:37:52.469"/>
</kw>
<msg timestamp="20210731 21:37:52.469" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:52.467" endtime="20210731 21:37:52.469"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:52.470" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:52.469" endtime="20210731 21:37:52.470"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.467" endtime="20210731 21:37:52.470"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:52.471" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:52.471" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:52.471" endtime="20210731 21:37:52.471"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.470" endtime="20210731 21:37:52.471"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:52.472" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:52.472" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:52.472" endtime="20210731 21:37:52.472"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:52.473" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:52.473" endtime="20210731 21:37:52.473"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:52.474" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:52.473" endtime="20210731 21:37:52.474"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:52.474" endtime="20210731 21:37:52.475"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:52.475" endtime="20210731 21:37:52.475"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.473" endtime="20210731 21:37:52.475"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:52.476" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:52.475" endtime="20210731 21:37:52.476"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:52.476" endtime="20210731 21:37:52.477"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:52.477" endtime="20210731 21:37:52.477"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.475" endtime="20210731 21:37:52.477"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:52.478" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:52.478" endtime="20210731 21:37:52.478"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:52.478" endtime="20210731 21:37:52.479"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:52.479" endtime="20210731 21:37:52.479"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.477" endtime="20210731 21:37:52.479"/>
</iter>
<status status="PASS" starttime="20210731 21:37:52.473" endtime="20210731 21:37:52.479"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:52.480" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:52.480" endtime="20210731 21:37:52.480"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.471" endtime="20210731 21:37:52.480"/>
</kw>
<status status="PASS" starttime="20210731 21:37:50.884" endtime="20210731 21:37:52.480"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:52.482" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:52.481" endtime="20210731 21:37:52.482"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:52.482" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 21:37:52.482" endtime="20210731 21:37:52.482"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:52.497" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:52.498" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:52.483" endtime="20210731 21:37:52.498"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:52.498" endtime="20210731 21:37:52.498"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:52.498" endtime="20210731 21:37:52.498"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:52.483" endtime="20210731 21:37:52.498"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:52.482" endtime="20210731 21:37:52.498"/>
</for>
<status status="FAIL" starttime="20210731 21:37:52.481" endtime="20210731 21:37:52.499"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:52.481" endtime="20210731 21:37:52.499"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:52.500" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:52.500" endtime="20210731 21:37:52.500"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:52.501" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 21:37:52.500" endtime="20210731 21:37:52.501"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:52.506" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:52.506" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:52.501" endtime="20210731 21:37:52.506"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:52.506" endtime="20210731 21:37:52.506"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:52.506" endtime="20210731 21:37:52.506"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:52.501" endtime="20210731 21:37:52.507"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:52.501" endtime="20210731 21:37:52.507"/>
</for>
<status status="FAIL" starttime="20210731 21:37:52.499" endtime="20210731 21:37:52.507"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:52.499" endtime="20210731 21:37:52.507"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:52.508" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:52.508" endtime="20210731 21:37:52.508"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:52.509" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 21:37:52.508" endtime="20210731 21:37:52.509"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:52.520" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:52.520" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:52.509" endtime="20210731 21:37:52.520"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:52.521" endtime="20210731 21:37:52.521"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:52.521" endtime="20210731 21:37:52.521"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:52.509" endtime="20210731 21:37:52.521"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:52.509" endtime="20210731 21:37:52.521"/>
</for>
<status status="FAIL" starttime="20210731 21:37:52.507" endtime="20210731 21:37:52.521"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:52.507" endtime="20210731 21:37:52.522"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:52.480" endtime="20210731 21:37:52.522"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:52.530" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:52.546" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:52.546" level="INFO">${pids} = 4783
4790
4795</msg>
<status status="PASS" starttime="20210731 21:37:52.523" endtime="20210731 21:37:52.546"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:52.548" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:52.547" endtime="20210731 21:37:52.548"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:52.548" level="INFO">${pids} = ['4783', '4790', '4795']</msg>
<status status="PASS" starttime="20210731 21:37:52.548" endtime="20210731 21:37:52.548"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4783</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:52.553" level="INFO">Running command 'kill 4783 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:52.549" endtime="20210731 21:37:52.553"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.549" endtime="20210731 21:37:52.553"/>
</iter>
<iter>
<var name="${pid}">4790</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:52.570" level="INFO">Running command 'kill 4790 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:52.554" endtime="20210731 21:37:52.571"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.554" endtime="20210731 21:37:52.571"/>
</iter>
<iter>
<var name="${pid}">4795</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:52.575" level="INFO">Running command 'kill 4795 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:52.572" endtime="20210731 21:37:52.576"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.572" endtime="20210731 21:37:52.576"/>
</iter>
<status status="PASS" starttime="20210731 21:37:52.548" endtime="20210731 21:37:52.576"/>
</for>
<status status="PASS" starttime="20210731 21:37:52.548" endtime="20210731 21:37:52.576"/>
</branch>
<status status="PASS" starttime="20210731 21:37:52.548" endtime="20210731 21:37:52.576"/>
</if>
<status status="PASS" starttime="20210731 21:37:52.522" endtime="20210731 21:37:52.576"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;7683##()=?@#¤%&amp;34567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:50.883" endtime="20210731 21:37:52.576">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t17" name="With Each Valid Token, Updating Username Of Each System User With #¤123ab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:52.581" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:52.594" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:52.594" level="INFO">${pids} = 4832</msg>
<status status="PASS" starttime="20210731 21:37:52.579" endtime="20210731 21:37:52.594"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:52.595" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:52.595" endtime="20210731 21:37:52.595"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:52.596" level="INFO">${pids} = ['4832']</msg>
<status status="PASS" starttime="20210731 21:37:52.596" endtime="20210731 21:37:52.596"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4832</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:52.600" level="INFO">Running command 'kill 4832 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:52.597" endtime="20210731 21:37:52.600"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.597" endtime="20210731 21:37:52.600"/>
</iter>
<status status="PASS" starttime="20210731 21:37:52.596" endtime="20210731 21:37:52.600"/>
</for>
<status status="PASS" starttime="20210731 21:37:52.596" endtime="20210731 21:37:52.600"/>
</branch>
<status status="PASS" starttime="20210731 21:37:52.595" endtime="20210731 21:37:52.600"/>
</if>
<status status="PASS" starttime="20210731 21:37:52.578" endtime="20210731 21:37:52.601"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:52.602" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:52.602" endtime="20210731 21:37:52.602"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:52.603" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:52.603" endtime="20210731 21:37:52.603"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:52.604" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:52.603" endtime="20210731 21:37:52.604"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:52.604" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:52.604" endtime="20210731 21:37:52.604"/>
</kw>
<msg timestamp="20210731 21:37:52.604" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:52.602" endtime="20210731 21:37:52.604"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:52.611" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:52.605" endtime="20210731 21:37:52.612"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.601" endtime="20210731 21:37:52.613"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:52.614" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:52.614" endtime="20210731 21:37:52.619"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:54.120" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:52.619" endtime="20210731 21:37:54.120"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.613" endtime="20210731 21:37:54.121"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:54.122" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:54.122" endtime="20210731 21:37:54.122"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:54.123" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:54.122" endtime="20210731 21:37:54.123"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:54.123" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:54.123" endtime="20210731 21:37:54.123"/>
</kw>
<msg timestamp="20210731 21:37:54.123" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:54.121" endtime="20210731 21:37:54.123"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:54.124" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:54.124" endtime="20210731 21:37:54.124"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.121" endtime="20210731 21:37:54.125"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:54.125" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:54.125" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:54.125" endtime="20210731 21:37:54.126"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.125" endtime="20210731 21:37:54.126"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:54.127" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:54.127" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:54.126" endtime="20210731 21:37:54.127"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:54.128" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:54.127" endtime="20210731 21:37:54.128"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:54.128" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:54.128" endtime="20210731 21:37:54.128"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:54.129" endtime="20210731 21:37:54.130"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:54.130" endtime="20210731 21:37:54.130"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.128" endtime="20210731 21:37:54.130"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:54.131" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:54.130" endtime="20210731 21:37:54.131"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:54.131" endtime="20210731 21:37:54.132"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:54.132" endtime="20210731 21:37:54.132"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.130" endtime="20210731 21:37:54.132"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:54.133" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:54.132" endtime="20210731 21:37:54.133"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:54.133" endtime="20210731 21:37:54.134"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:54.134" endtime="20210731 21:37:54.134"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.132" endtime="20210731 21:37:54.134"/>
</iter>
<status status="PASS" starttime="20210731 21:37:54.128" endtime="20210731 21:37:54.134"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:54.135" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:54.135" endtime="20210731 21:37:54.135"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.126" endtime="20210731 21:37:54.135"/>
</kw>
<status status="PASS" starttime="20210731 21:37:52.578" endtime="20210731 21:37:54.135"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:54.137" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:54.137" endtime="20210731 21:37:54.137"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:54.138" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210731 21:37:54.137" endtime="20210731 21:37:54.138"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:54.153" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:54.153" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:54.138" endtime="20210731 21:37:54.153"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:54.153" endtime="20210731 21:37:54.154"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:54.154" endtime="20210731 21:37:54.154"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:54.138" endtime="20210731 21:37:54.154"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:54.138" endtime="20210731 21:37:54.154"/>
</for>
<status status="FAIL" starttime="20210731 21:37:54.136" endtime="20210731 21:37:54.154"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:54.136" endtime="20210731 21:37:54.154"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:54.155" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:54.155" endtime="20210731 21:37:54.155"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:54.156" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210731 21:37:54.156" endtime="20210731 21:37:54.156"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:54.161" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:54.161" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:54.156" endtime="20210731 21:37:54.161"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:54.161" endtime="20210731 21:37:54.161"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:54.161" endtime="20210731 21:37:54.161"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:54.156" endtime="20210731 21:37:54.161"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:54.156" endtime="20210731 21:37:54.161"/>
</for>
<status status="FAIL" starttime="20210731 21:37:54.154" endtime="20210731 21:37:54.161"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:54.154" endtime="20210731 21:37:54.161"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:54.163" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:54.162" endtime="20210731 21:37:54.163"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:54.163" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210731 21:37:54.163" endtime="20210731 21:37:54.163"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:54.176" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:54.176" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:54.164" endtime="20210731 21:37:54.177"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:54.177" endtime="20210731 21:37:54.177"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:54.177" endtime="20210731 21:37:54.177"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:54.164" endtime="20210731 21:37:54.177"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:54.164" endtime="20210731 21:37:54.177"/>
</for>
<status status="FAIL" starttime="20210731 21:37:54.162" endtime="20210731 21:37:54.178"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:54.162" endtime="20210731 21:37:54.178"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:54.136" endtime="20210731 21:37:54.178"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:54.182" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:54.196" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:54.196" level="INFO">${pids} = 4855
4862
4866</msg>
<status status="PASS" starttime="20210731 21:37:54.179" endtime="20210731 21:37:54.196"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:54.197" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:54.196" endtime="20210731 21:37:54.197"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:54.198" level="INFO">${pids} = ['4855', '4862', '4866']</msg>
<status status="PASS" starttime="20210731 21:37:54.197" endtime="20210731 21:37:54.198"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4855</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:54.201" level="INFO">Running command 'kill 4855 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:54.198" endtime="20210731 21:37:54.202"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.198" endtime="20210731 21:37:54.202"/>
</iter>
<iter>
<var name="${pid}">4862</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:54.206" level="INFO">Running command 'kill 4862 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:54.202" endtime="20210731 21:37:54.207"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.202" endtime="20210731 21:37:54.207"/>
</iter>
<iter>
<var name="${pid}">4866</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:54.211" level="INFO">Running command 'kill 4866 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:54.207" endtime="20210731 21:37:54.211"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.207" endtime="20210731 21:37:54.211"/>
</iter>
<status status="PASS" starttime="20210731 21:37:54.198" endtime="20210731 21:37:54.211"/>
</for>
<status status="PASS" starttime="20210731 21:37:54.197" endtime="20210731 21:37:54.212"/>
</branch>
<status status="PASS" starttime="20210731 21:37:54.197" endtime="20210731 21:37:54.212"/>
</if>
<status status="PASS" starttime="20210731 21:37:54.178" endtime="20210731 21:37:54.212"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤123ab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:52.577" endtime="20210731 21:37:54.212">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t18" name="With Each Valid Token, Updating Username Of Each System User With #¤123abc Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:54.236" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:54.250" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:54.250" level="INFO">${pids} = 4895</msg>
<status status="PASS" starttime="20210731 21:37:54.223" endtime="20210731 21:37:54.250"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:54.251" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:54.250" endtime="20210731 21:37:54.251"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:54.252" level="INFO">${pids} = ['4895']</msg>
<status status="PASS" starttime="20210731 21:37:54.252" endtime="20210731 21:37:54.252"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4895</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:54.275" level="INFO">Running command 'kill 4895 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:54.252" endtime="20210731 21:37:54.276"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.252" endtime="20210731 21:37:54.276"/>
</iter>
<status status="PASS" starttime="20210731 21:37:54.252" endtime="20210731 21:37:54.276"/>
</for>
<status status="PASS" starttime="20210731 21:37:54.251" endtime="20210731 21:37:54.276"/>
</branch>
<status status="PASS" starttime="20210731 21:37:54.251" endtime="20210731 21:37:54.276"/>
</if>
<status status="PASS" starttime="20210731 21:37:54.223" endtime="20210731 21:37:54.277"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:54.279" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:54.278" endtime="20210731 21:37:54.279"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:54.280" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:54.279" endtime="20210731 21:37:54.280"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:54.280" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:54.280" endtime="20210731 21:37:54.281"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:54.281" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:54.281" endtime="20210731 21:37:54.281"/>
</kw>
<msg timestamp="20210731 21:37:54.281" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:54.279" endtime="20210731 21:37:54.282"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:54.285" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:54.282" endtime="20210731 21:37:54.286"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.277" endtime="20210731 21:37:54.287"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:54.288" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:54.288" endtime="20210731 21:37:54.293"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:55.794" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:54.293" endtime="20210731 21:37:55.794"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.287" endtime="20210731 21:37:55.795"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:55.796" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:55.796" endtime="20210731 21:37:55.796"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:55.797" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:55.796" endtime="20210731 21:37:55.797"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:55.797" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:55.797" endtime="20210731 21:37:55.797"/>
</kw>
<msg timestamp="20210731 21:37:55.797" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:55.795" endtime="20210731 21:37:55.797"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:55.798" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:55.798" endtime="20210731 21:37:55.798"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.795" endtime="20210731 21:37:55.798"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:55.799" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:55.799" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:55.799" endtime="20210731 21:37:55.799"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.799" endtime="20210731 21:37:55.799"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:55.800" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:55.801" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:55.800" endtime="20210731 21:37:55.801"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:55.801" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:55.801" endtime="20210731 21:37:55.801"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:55.802" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:55.801" endtime="20210731 21:37:55.802"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:55.802" endtime="20210731 21:37:55.803"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:55.803" endtime="20210731 21:37:55.803"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.801" endtime="20210731 21:37:55.803"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:55.804" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:55.803" endtime="20210731 21:37:55.804"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:55.804" endtime="20210731 21:37:55.805"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:55.805" endtime="20210731 21:37:55.805"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.803" endtime="20210731 21:37:55.805"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:55.806" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:55.805" endtime="20210731 21:37:55.806"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:55.806" endtime="20210731 21:37:55.806"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:55.807" endtime="20210731 21:37:55.807"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.805" endtime="20210731 21:37:55.807"/>
</iter>
<status status="PASS" starttime="20210731 21:37:55.801" endtime="20210731 21:37:55.807"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:55.807" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:55.807" endtime="20210731 21:37:55.808"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.800" endtime="20210731 21:37:55.808"/>
</kw>
<status status="PASS" starttime="20210731 21:37:54.222" endtime="20210731 21:37:55.808"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:55.809" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:55.809" endtime="20210731 21:37:55.809"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:55.810" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210731 21:37:55.809" endtime="20210731 21:37:55.810"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:55.820" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:55.821" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:55.810" endtime="20210731 21:37:55.821"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:55.821" endtime="20210731 21:37:55.821"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:55.821" endtime="20210731 21:37:55.822"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:55.810" endtime="20210731 21:37:55.822"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:55.810" endtime="20210731 21:37:55.822"/>
</for>
<status status="FAIL" starttime="20210731 21:37:55.808" endtime="20210731 21:37:55.822"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:55.808" endtime="20210731 21:37:55.822"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:55.823" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:55.823" endtime="20210731 21:37:55.823"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:55.824" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210731 21:37:55.823" endtime="20210731 21:37:55.824"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:55.828" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:55.828" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:55.824" endtime="20210731 21:37:55.828"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:55.828" endtime="20210731 21:37:55.829"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:55.829" endtime="20210731 21:37:55.829"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:55.824" endtime="20210731 21:37:55.829"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:55.824" endtime="20210731 21:37:55.829"/>
</for>
<status status="FAIL" starttime="20210731 21:37:55.822" endtime="20210731 21:37:55.829"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:55.822" endtime="20210731 21:37:55.829"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:55.830" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:55.830" endtime="20210731 21:37:55.830"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:55.831" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210731 21:37:55.830" endtime="20210731 21:37:55.831"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:55.836" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:55.837" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:55.831" endtime="20210731 21:37:55.837"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:55.838" endtime="20210731 21:37:55.838"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:55.838" endtime="20210731 21:37:55.838"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:55.831" endtime="20210731 21:37:55.838"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:55.831" endtime="20210731 21:37:55.839"/>
</for>
<status status="FAIL" starttime="20210731 21:37:55.829" endtime="20210731 21:37:55.839"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:55.829" endtime="20210731 21:37:55.839"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:55.808" endtime="20210731 21:37:55.839"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:55.852" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:55.863" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:55.863" level="INFO">${pids} = 4919
4926
4931</msg>
<status status="PASS" starttime="20210731 21:37:55.848" endtime="20210731 21:37:55.863"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:55.864" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:55.863" endtime="20210731 21:37:55.864"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:55.865" level="INFO">${pids} = ['4919', '4926', '4931']</msg>
<status status="PASS" starttime="20210731 21:37:55.865" endtime="20210731 21:37:55.865"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4919</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:55.870" level="INFO">Running command 'kill 4919 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:55.866" endtime="20210731 21:37:55.871"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.865" endtime="20210731 21:37:55.871"/>
</iter>
<iter>
<var name="${pid}">4926</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:55.875" level="INFO">Running command 'kill 4926 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:55.871" endtime="20210731 21:37:55.877"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.871" endtime="20210731 21:37:55.877"/>
</iter>
<iter>
<var name="${pid}">4931</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:55.880" level="INFO">Running command 'kill 4931 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:55.877" endtime="20210731 21:37:55.881"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.877" endtime="20210731 21:37:55.881"/>
</iter>
<status status="PASS" starttime="20210731 21:37:55.865" endtime="20210731 21:37:55.881"/>
</for>
<status status="PASS" starttime="20210731 21:37:55.864" endtime="20210731 21:37:55.881"/>
</branch>
<status status="PASS" starttime="20210731 21:37:55.864" endtime="20210731 21:37:55.881"/>
</if>
<status status="PASS" starttime="20210731 21:37:55.840" endtime="20210731 21:37:55.881"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤123abc'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:54.213" endtime="20210731 21:37:55.882">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t19" name="With Each Valid Token, Updating Username Of Each System User With #¤/&amp;¤!!123abc456hjk Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:55.898" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:55.918" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:55.918" level="INFO">${pids} = 4960</msg>
<status status="PASS" starttime="20210731 21:37:55.884" endtime="20210731 21:37:55.918"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:55.920" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:55.919" endtime="20210731 21:37:55.920"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:55.921" level="INFO">${pids} = ['4960']</msg>
<status status="PASS" starttime="20210731 21:37:55.920" endtime="20210731 21:37:55.921"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4960</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:55.936" level="INFO">Running command 'kill 4960 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:55.922" endtime="20210731 21:37:55.936"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.921" endtime="20210731 21:37:55.936"/>
</iter>
<status status="PASS" starttime="20210731 21:37:55.921" endtime="20210731 21:37:55.936"/>
</for>
<status status="PASS" starttime="20210731 21:37:55.920" endtime="20210731 21:37:55.937"/>
</branch>
<status status="PASS" starttime="20210731 21:37:55.920" endtime="20210731 21:37:55.937"/>
</if>
<status status="PASS" starttime="20210731 21:37:55.884" endtime="20210731 21:37:55.937"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:55.939" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:55.938" endtime="20210731 21:37:55.939"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:55.939" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:55.939" endtime="20210731 21:37:55.939"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:55.940" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:55.940" endtime="20210731 21:37:55.940"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:55.940" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:55.940" endtime="20210731 21:37:55.940"/>
</kw>
<msg timestamp="20210731 21:37:55.941" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:55.939" endtime="20210731 21:37:55.941"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:55.951" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:55.941" endtime="20210731 21:37:55.954"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.938" endtime="20210731 21:37:55.954"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:55.956" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:55.955" endtime="20210731 21:37:55.960"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:57.461" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:55.960" endtime="20210731 21:37:57.461"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.954" endtime="20210731 21:37:57.462"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:57.463" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:57.463" endtime="20210731 21:37:57.463"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:57.463" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:57.463" endtime="20210731 21:37:57.464"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:57.464" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:57.464" endtime="20210731 21:37:57.464"/>
</kw>
<msg timestamp="20210731 21:37:57.464" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:57.462" endtime="20210731 21:37:57.464"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:57.465" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:57.464" endtime="20210731 21:37:57.465"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.462" endtime="20210731 21:37:57.465"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:57.466" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:57.466" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:57.466" endtime="20210731 21:37:57.466"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.466" endtime="20210731 21:37:57.466"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:57.467" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:57.468" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:57.467" endtime="20210731 21:37:57.468"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:57.468" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:57.468" endtime="20210731 21:37:57.468"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:57.469" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:57.468" endtime="20210731 21:37:57.469"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:57.469" endtime="20210731 21:37:57.470"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:57.470" endtime="20210731 21:37:57.470"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.468" endtime="20210731 21:37:57.470"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:57.471" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:57.471" endtime="20210731 21:37:57.471"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:57.471" endtime="20210731 21:37:57.472"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:57.472" endtime="20210731 21:37:57.472"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.470" endtime="20210731 21:37:57.472"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:57.473" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:57.472" endtime="20210731 21:37:57.473"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:57.473" endtime="20210731 21:37:57.474"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:57.474" endtime="20210731 21:37:57.474"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.472" endtime="20210731 21:37:57.474"/>
</iter>
<status status="PASS" starttime="20210731 21:37:57.468" endtime="20210731 21:37:57.474"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:57.475" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:57.474" endtime="20210731 21:37:57.475"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.467" endtime="20210731 21:37:57.475"/>
</kw>
<status status="PASS" starttime="20210731 21:37:55.883" endtime="20210731 21:37:57.475"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:57.476" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:57.476" endtime="20210731 21:37:57.476"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:57.477" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 21:37:57.477" endtime="20210731 21:37:57.477"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:57.488" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:57.489" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:57.477" endtime="20210731 21:37:57.489"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:57.489" endtime="20210731 21:37:57.489"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:57.489" endtime="20210731 21:37:57.489"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:57.477" endtime="20210731 21:37:57.489"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:57.477" endtime="20210731 21:37:57.489"/>
</for>
<status status="FAIL" starttime="20210731 21:37:57.476" endtime="20210731 21:37:57.490"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:57.475" endtime="20210731 21:37:57.490"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:57.491" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:57.491" endtime="20210731 21:37:57.491"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:57.491" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 21:37:57.491" endtime="20210731 21:37:57.492"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:57.496" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:57.497" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:57.492" endtime="20210731 21:37:57.497"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:57.497" endtime="20210731 21:37:57.497"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:57.497" endtime="20210731 21:37:57.497"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:57.492" endtime="20210731 21:37:57.497"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:57.492" endtime="20210731 21:37:57.497"/>
</for>
<status status="FAIL" starttime="20210731 21:37:57.490" endtime="20210731 21:37:57.497"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:57.490" endtime="20210731 21:37:57.497"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:57.499" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:57.498" endtime="20210731 21:37:57.499"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:57.499" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 21:37:57.499" endtime="20210731 21:37:57.499"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:57.504" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:57.506" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:57.500" endtime="20210731 21:37:57.506"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:57.506" endtime="20210731 21:37:57.506"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:57.506" endtime="20210731 21:37:57.506"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:57.499" endtime="20210731 21:37:57.506"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:57.499" endtime="20210731 21:37:57.506"/>
</for>
<status status="FAIL" starttime="20210731 21:37:57.498" endtime="20210731 21:37:57.506"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:57.498" endtime="20210731 21:37:57.506"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:57.475" endtime="20210731 21:37:57.506"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:57.525" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:57.536" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:57.537" level="INFO">${pids} = 4983
4990
4995</msg>
<status status="PASS" starttime="20210731 21:37:57.521" endtime="20210731 21:37:57.549"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:57.552" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:57.551" endtime="20210731 21:37:57.552"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:57.553" level="INFO">${pids} = ['4983', '4990', '4995']</msg>
<status status="PASS" starttime="20210731 21:37:57.553" endtime="20210731 21:37:57.554"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">4983</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:57.557" level="INFO">Running command 'kill 4983 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:57.554" endtime="20210731 21:37:57.558"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.554" endtime="20210731 21:37:57.558"/>
</iter>
<iter>
<var name="${pid}">4990</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:57.562" level="INFO">Running command 'kill 4990 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:57.558" endtime="20210731 21:37:57.562"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.558" endtime="20210731 21:37:57.562"/>
</iter>
<iter>
<var name="${pid}">4995</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:57.567" level="INFO">Running command 'kill 4995 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:57.563" endtime="20210731 21:37:57.567"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.562" endtime="20210731 21:37:57.567"/>
</iter>
<status status="PASS" starttime="20210731 21:37:57.554" endtime="20210731 21:37:57.567"/>
</for>
<status status="PASS" starttime="20210731 21:37:57.553" endtime="20210731 21:37:57.567"/>
</branch>
<status status="PASS" starttime="20210731 21:37:57.553" endtime="20210731 21:37:57.568"/>
</if>
<status status="PASS" starttime="20210731 21:37:57.507" endtime="20210731 21:37:57.568"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/&amp;¤!!123abc456hjk'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:55.882" endtime="20210731 21:37:57.568">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t20" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:57.574" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:57.589" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:57.589" level="INFO">${pids} = 5024</msg>
<status status="PASS" starttime="20210731 21:37:57.571" endtime="20210731 21:37:57.589"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:57.590" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:57.590" endtime="20210731 21:37:57.590"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:57.591" level="INFO">${pids} = ['5024']</msg>
<status status="PASS" starttime="20210731 21:37:57.591" endtime="20210731 21:37:57.591"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5024</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:57.595" level="INFO">Running command 'kill 5024 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:57.592" endtime="20210731 21:37:57.599"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.592" endtime="20210731 21:37:57.599"/>
</iter>
<status status="PASS" starttime="20210731 21:37:57.591" endtime="20210731 21:37:57.599"/>
</for>
<status status="PASS" starttime="20210731 21:37:57.591" endtime="20210731 21:37:57.599"/>
</branch>
<status status="PASS" starttime="20210731 21:37:57.591" endtime="20210731 21:37:57.600"/>
</if>
<status status="PASS" starttime="20210731 21:37:57.571" endtime="20210731 21:37:57.600"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:57.601" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:57.601" endtime="20210731 21:37:57.601"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:57.602" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:57.602" endtime="20210731 21:37:57.602"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:57.603" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:57.603" endtime="20210731 21:37:57.603"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:57.603" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:57.603" endtime="20210731 21:37:57.603"/>
</kw>
<msg timestamp="20210731 21:37:57.604" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:57.602" endtime="20210731 21:37:57.604"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:57.607" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:57.604" endtime="20210731 21:37:57.609"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.600" endtime="20210731 21:37:57.610"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:57.611" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:57.610" endtime="20210731 21:37:57.626"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:37:59.127" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:57.627" endtime="20210731 21:37:59.128"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.610" endtime="20210731 21:37:59.128"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:59.130" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:59.129" endtime="20210731 21:37:59.130"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:59.130" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:59.130" endtime="20210731 21:37:59.130"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:59.131" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:59.130" endtime="20210731 21:37:59.131"/>
</kw>
<msg timestamp="20210731 21:37:59.131" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:59.129" endtime="20210731 21:37:59.131"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:37:59.132" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:37:59.131" endtime="20210731 21:37:59.132"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.128" endtime="20210731 21:37:59.132"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:37:59.133" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:37:59.133" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:37:59.133" endtime="20210731 21:37:59.133"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.132" endtime="20210731 21:37:59.134"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:37:59.135" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:37:59.135" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:37:59.134" endtime="20210731 21:37:59.135"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:37:59.135" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:37:59.135" endtime="20210731 21:37:59.135"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:59.136" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:59.136" endtime="20210731 21:37:59.136"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:59.136" endtime="20210731 21:37:59.137"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:59.137" endtime="20210731 21:37:59.138"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.136" endtime="20210731 21:37:59.138"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:59.138" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:59.138" endtime="20210731 21:37:59.138"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:59.139" endtime="20210731 21:37:59.139"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:59.140" endtime="20210731 21:37:59.140"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.138" endtime="20210731 21:37:59.140"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:59.141" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:37:59.140" endtime="20210731 21:37:59.141"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:37:59.141" endtime="20210731 21:37:59.142"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:37:59.142" endtime="20210731 21:37:59.142"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.140" endtime="20210731 21:37:59.142"/>
</iter>
<status status="PASS" starttime="20210731 21:37:59.135" endtime="20210731 21:37:59.142"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:37:59.143" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:37:59.142" endtime="20210731 21:37:59.143"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.134" endtime="20210731 21:37:59.143"/>
</kw>
<status status="PASS" starttime="20210731 21:37:57.570" endtime="20210731 21:37:59.143"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:59.145" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:37:59.144" endtime="20210731 21:37:59.145"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:59.145" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210731 21:37:59.145" endtime="20210731 21:37:59.145"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:59.158" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:59.158" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:59.146" endtime="20210731 21:37:59.158"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:59.158" endtime="20210731 21:37:59.158"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:59.159" endtime="20210731 21:37:59.159"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:59.146" endtime="20210731 21:37:59.159"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:59.145" endtime="20210731 21:37:59.159"/>
</for>
<status status="FAIL" starttime="20210731 21:37:59.144" endtime="20210731 21:37:59.159"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:59.144" endtime="20210731 21:37:59.159"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:59.160" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:37:59.160" endtime="20210731 21:37:59.160"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:59.161" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210731 21:37:59.161" endtime="20210731 21:37:59.161"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:59.166" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:59.166" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:59.161" endtime="20210731 21:37:59.166"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:59.166" endtime="20210731 21:37:59.167"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:59.167" endtime="20210731 21:37:59.167"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:59.161" endtime="20210731 21:37:59.167"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:59.161" endtime="20210731 21:37:59.167"/>
</for>
<status status="FAIL" starttime="20210731 21:37:59.159" endtime="20210731 21:37:59.167"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:59.159" endtime="20210731 21:37:59.167"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:59.168" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:37:59.168" endtime="20210731 21:37:59.169"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:37:59.169" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210731 21:37:59.169" endtime="20210731 21:37:59.169"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:37:59.188" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:37:59.188" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:37:59.170" endtime="20210731 21:37:59.188"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:37:59.188" endtime="20210731 21:37:59.188"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:37:59.189" endtime="20210731 21:37:59.189"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:59.170" endtime="20210731 21:37:59.189"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:59.169" endtime="20210731 21:37:59.189"/>
</for>
<status status="FAIL" starttime="20210731 21:37:59.167" endtime="20210731 21:37:59.189"/>
</kw>
<status status="FAIL" starttime="20210731 21:37:59.167" endtime="20210731 21:37:59.189"/>
</iter>
<status status="FAIL" starttime="20210731 21:37:59.143" endtime="20210731 21:37:59.189"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:59.195" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:59.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:59.219" level="INFO">${pids} = 5047
5054
5058</msg>
<status status="PASS" starttime="20210731 21:37:59.191" endtime="20210731 21:37:59.219"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:59.220" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:59.219" endtime="20210731 21:37:59.220"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:59.221" level="INFO">${pids} = ['5047', '5054', '5058']</msg>
<status status="PASS" starttime="20210731 21:37:59.220" endtime="20210731 21:37:59.221"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5047</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:59.225" level="INFO">Running command 'kill 5047 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:59.221" endtime="20210731 21:37:59.225"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.221" endtime="20210731 21:37:59.226"/>
</iter>
<iter>
<var name="${pid}">5054</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:59.229" level="INFO">Running command 'kill 5054 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:59.226" endtime="20210731 21:37:59.229"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.226" endtime="20210731 21:37:59.229"/>
</iter>
<iter>
<var name="${pid}">5058</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:59.234" level="INFO">Running command 'kill 5058 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:59.230" endtime="20210731 21:37:59.234"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.230" endtime="20210731 21:37:59.234"/>
</iter>
<status status="PASS" starttime="20210731 21:37:59.221" endtime="20210731 21:37:59.234"/>
</for>
<status status="PASS" starttime="20210731 21:37:59.220" endtime="20210731 21:37:59.235"/>
</branch>
<status status="PASS" starttime="20210731 21:37:59.220" endtime="20210731 21:37:59.235"/>
</if>
<status status="PASS" starttime="20210731 21:37:59.190" endtime="20210731 21:37:59.235"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:57.569" endtime="20210731 21:37:59.235">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t21" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:37:59.242" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:37:59.255" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:37:59.255" level="INFO">${pids} = 5087</msg>
<status status="PASS" starttime="20210731 21:37:59.238" endtime="20210731 21:37:59.255"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:59.256" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:37:59.256" endtime="20210731 21:37:59.256"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:37:59.257" level="INFO">${pids} = ['5087']</msg>
<status status="PASS" starttime="20210731 21:37:59.257" endtime="20210731 21:37:59.257"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5087</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:59.261" level="INFO">Running command 'kill 5087 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:59.258" endtime="20210731 21:37:59.261"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.258" endtime="20210731 21:37:59.261"/>
</iter>
<status status="PASS" starttime="20210731 21:37:59.257" endtime="20210731 21:37:59.261"/>
</for>
<status status="PASS" starttime="20210731 21:37:59.257" endtime="20210731 21:37:59.262"/>
</branch>
<status status="PASS" starttime="20210731 21:37:59.256" endtime="20210731 21:37:59.262"/>
</if>
<status status="PASS" starttime="20210731 21:37:59.238" endtime="20210731 21:37:59.262"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:59.263" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:59.263" endtime="20210731 21:37:59.263"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:59.264" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:37:59.264" endtime="20210731 21:37:59.264"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:37:59.265" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:37:59.264" endtime="20210731 21:37:59.265"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:37:59.265" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:59.265" endtime="20210731 21:37:59.265"/>
</kw>
<msg timestamp="20210731 21:37:59.266" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:37:59.263" endtime="20210731 21:37:59.266"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:37:59.272" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:37:59.266" endtime="20210731 21:37:59.274"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.262" endtime="20210731 21:37:59.275"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:37:59.276" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:37:59.276" endtime="20210731 21:37:59.280"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:00.781" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:37:59.280" endtime="20210731 21:38:00.782"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.275" endtime="20210731 21:38:00.782"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:00.784" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:00.783" endtime="20210731 21:38:00.784"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:00.784" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:00.784" endtime="20210731 21:38:00.784"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:00.785" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:00.785" endtime="20210731 21:38:00.785"/>
</kw>
<msg timestamp="20210731 21:38:00.786" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:00.783" endtime="20210731 21:38:00.786"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:00.786" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:00.786" endtime="20210731 21:38:00.787"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.782" endtime="20210731 21:38:00.787"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:00.788" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:00.788" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:00.788" endtime="20210731 21:38:00.788"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.787" endtime="20210731 21:38:00.789"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:00.790" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:00.790" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:00.789" endtime="20210731 21:38:00.790"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:00.791" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:00.790" endtime="20210731 21:38:00.791"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:00.791" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:00.791" endtime="20210731 21:38:00.792"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:00.792" endtime="20210731 21:38:00.793"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:00.793" endtime="20210731 21:38:00.793"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.791" endtime="20210731 21:38:00.793"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:00.794" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:00.794" endtime="20210731 21:38:00.794"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:00.794" endtime="20210731 21:38:00.795"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:00.795" endtime="20210731 21:38:00.795"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.793" endtime="20210731 21:38:00.795"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:00.796" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:00.796" endtime="20210731 21:38:00.796"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:00.796" endtime="20210731 21:38:00.797"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:00.797" endtime="20210731 21:38:00.798"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.795" endtime="20210731 21:38:00.798"/>
</iter>
<status status="PASS" starttime="20210731 21:38:00.791" endtime="20210731 21:38:00.798"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:00.798" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:00.798" endtime="20210731 21:38:00.798"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.789" endtime="20210731 21:38:00.799"/>
</kw>
<status status="PASS" starttime="20210731 21:37:59.237" endtime="20210731 21:38:00.799"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:00.801" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:00.800" endtime="20210731 21:38:00.801"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:00.802" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210731 21:38:00.801" endtime="20210731 21:38:00.802"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:00.814" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:00.814" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:00.803" endtime="20210731 21:38:00.814"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:00.815" endtime="20210731 21:38:00.815"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:00.815" endtime="20210731 21:38:00.815"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:00.802" endtime="20210731 21:38:00.815"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:00.802" endtime="20210731 21:38:00.815"/>
</for>
<status status="FAIL" starttime="20210731 21:38:00.799" endtime="20210731 21:38:00.815"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:00.799" endtime="20210731 21:38:00.815"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:00.817" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:00.816" endtime="20210731 21:38:00.817"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:00.818" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210731 21:38:00.817" endtime="20210731 21:38:00.818"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:00.823" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:00.823" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:00.818" endtime="20210731 21:38:00.824"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:00.824" endtime="20210731 21:38:00.824"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:00.824" endtime="20210731 21:38:00.824"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:00.818" endtime="20210731 21:38:00.824"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:00.818" endtime="20210731 21:38:00.824"/>
</for>
<status status="FAIL" starttime="20210731 21:38:00.816" endtime="20210731 21:38:00.824"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:00.816" endtime="20210731 21:38:00.824"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:00.827" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:00.826" endtime="20210731 21:38:00.827"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:00.828" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210731 21:38:00.827" endtime="20210731 21:38:00.828"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:00.846" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:00.847" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:00.829" endtime="20210731 21:38:00.847"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:00.847" endtime="20210731 21:38:00.847"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:00.847" endtime="20210731 21:38:00.847"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:00.828" endtime="20210731 21:38:00.847"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:00.828" endtime="20210731 21:38:00.847"/>
</for>
<status status="FAIL" starttime="20210731 21:38:00.825" endtime="20210731 21:38:00.847"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:00.825" endtime="20210731 21:38:00.848"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:00.799" endtime="20210731 21:38:00.848"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:00.853" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:00.865" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:00.865" level="INFO">${pids} = 5110
5117
5121</msg>
<status status="PASS" starttime="20210731 21:38:00.849" endtime="20210731 21:38:00.865"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:00.866" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:00.865" endtime="20210731 21:38:00.866"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:00.867" level="INFO">${pids} = ['5110', '5117', '5121']</msg>
<status status="PASS" starttime="20210731 21:38:00.866" endtime="20210731 21:38:00.867"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5110</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:00.871" level="INFO">Running command 'kill 5110 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:00.867" endtime="20210731 21:38:00.871"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.867" endtime="20210731 21:38:00.871"/>
</iter>
<iter>
<var name="${pid}">5117</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:00.875" level="INFO">Running command 'kill 5117 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:00.872" endtime="20210731 21:38:00.878"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.872" endtime="20210731 21:38:00.878"/>
</iter>
<iter>
<var name="${pid}">5121</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:00.892" level="INFO">Running command 'kill 5121 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:00.887" endtime="20210731 21:38:00.892"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.878" endtime="20210731 21:38:00.892"/>
</iter>
<status status="PASS" starttime="20210731 21:38:00.867" endtime="20210731 21:38:00.892"/>
</for>
<status status="PASS" starttime="20210731 21:38:00.866" endtime="20210731 21:38:00.892"/>
</branch>
<status status="PASS" starttime="20210731 21:38:00.866" endtime="20210731 21:38:00.892"/>
</if>
<status status="PASS" starttime="20210731 21:38:00.848" endtime="20210731 21:38:00.893"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:37:59.236" endtime="20210731 21:38:00.893">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t22" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g()=&amp;%¤fghjklQWERTY Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:00.921" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:00.936" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:00.936" level="INFO">${pids} = 5150</msg>
<status status="PASS" starttime="20210731 21:38:00.895" endtime="20210731 21:38:00.936"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:00.938" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:00.937" endtime="20210731 21:38:00.938"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:00.939" level="INFO">${pids} = ['5150']</msg>
<status status="PASS" starttime="20210731 21:38:00.938" endtime="20210731 21:38:00.939"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5150</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:00.964" level="INFO">Running command 'kill 5150 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:00.939" endtime="20210731 21:38:00.965"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.939" endtime="20210731 21:38:00.965"/>
</iter>
<status status="PASS" starttime="20210731 21:38:00.939" endtime="20210731 21:38:00.965"/>
</for>
<status status="PASS" starttime="20210731 21:38:00.938" endtime="20210731 21:38:00.965"/>
</branch>
<status status="PASS" starttime="20210731 21:38:00.938" endtime="20210731 21:38:00.965"/>
</if>
<status status="PASS" starttime="20210731 21:38:00.895" endtime="20210731 21:38:00.966"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:00.968" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:00.967" endtime="20210731 21:38:00.968"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:00.968" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:00.968" endtime="20210731 21:38:00.968"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:00.969" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:00.969" endtime="20210731 21:38:00.969"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:00.970" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:00.969" endtime="20210731 21:38:00.970"/>
</kw>
<msg timestamp="20210731 21:38:00.970" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:00.968" endtime="20210731 21:38:00.970"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:00.973" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:00.970" endtime="20210731 21:38:00.975"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.966" endtime="20210731 21:38:00.976"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:00.977" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:00.977" endtime="20210731 21:38:00.982"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:02.483" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:00.983" endtime="20210731 21:38:02.484"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.976" endtime="20210731 21:38:02.484"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:02.485" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:02.485" endtime="20210731 21:38:02.485"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:02.486" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:02.486" endtime="20210731 21:38:02.486"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:02.486" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:02.486" endtime="20210731 21:38:02.486"/>
</kw>
<msg timestamp="20210731 21:38:02.487" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:02.485" endtime="20210731 21:38:02.487"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:02.487" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:02.487" endtime="20210731 21:38:02.488"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.484" endtime="20210731 21:38:02.488"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:02.488" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:02.488" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:02.488" endtime="20210731 21:38:02.489"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.488" endtime="20210731 21:38:02.489"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:02.490" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:02.490" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:02.489" endtime="20210731 21:38:02.490"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:02.490" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:02.490" endtime="20210731 21:38:02.490"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:02.491" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:02.491" endtime="20210731 21:38:02.491"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:02.491" endtime="20210731 21:38:02.492"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:02.492" endtime="20210731 21:38:02.492"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.490" endtime="20210731 21:38:02.492"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:02.493" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:02.493" endtime="20210731 21:38:02.493"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:02.493" endtime="20210731 21:38:02.494"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:02.494" endtime="20210731 21:38:02.494"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.492" endtime="20210731 21:38:02.494"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:02.495" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:02.495" endtime="20210731 21:38:02.495"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:02.495" endtime="20210731 21:38:02.496"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:02.496" endtime="20210731 21:38:02.496"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.494" endtime="20210731 21:38:02.496"/>
</iter>
<status status="PASS" starttime="20210731 21:38:02.490" endtime="20210731 21:38:02.496"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:02.497" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:02.497" endtime="20210731 21:38:02.497"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.489" endtime="20210731 21:38:02.497"/>
</kw>
<status status="PASS" starttime="20210731 21:38:00.895" endtime="20210731 21:38:02.497"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:02.499" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:02.498" endtime="20210731 21:38:02.499"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:02.499" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 21:38:02.499" endtime="20210731 21:38:02.499"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:02.512" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:02.512" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:02.500" endtime="20210731 21:38:02.512"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:02.512" endtime="20210731 21:38:02.512"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:02.513" endtime="20210731 21:38:02.513"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:02.499" endtime="20210731 21:38:02.513"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:02.499" endtime="20210731 21:38:02.513"/>
</for>
<status status="FAIL" starttime="20210731 21:38:02.498" endtime="20210731 21:38:02.513"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:02.498" endtime="20210731 21:38:02.513"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:02.514" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:02.514" endtime="20210731 21:38:02.514"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:02.515" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 21:38:02.514" endtime="20210731 21:38:02.515"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:02.523" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:02.524" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:02.515" endtime="20210731 21:38:02.524"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:02.524" endtime="20210731 21:38:02.524"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:02.524" endtime="20210731 21:38:02.524"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:02.515" endtime="20210731 21:38:02.524"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:02.515" endtime="20210731 21:38:02.524"/>
</for>
<status status="FAIL" starttime="20210731 21:38:02.513" endtime="20210731 21:38:02.525"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:02.513" endtime="20210731 21:38:02.525"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:02.527" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:02.527" endtime="20210731 21:38:02.527"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:02.537" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 21:38:02.527" endtime="20210731 21:38:02.538"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:02.543" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:02.543" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:02.538" endtime="20210731 21:38:02.543"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:02.543" endtime="20210731 21:38:02.543"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:02.543" endtime="20210731 21:38:02.543"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:02.538" endtime="20210731 21:38:02.543"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:02.538" endtime="20210731 21:38:02.543"/>
</for>
<status status="FAIL" starttime="20210731 21:38:02.525" endtime="20210731 21:38:02.544"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:02.525" endtime="20210731 21:38:02.544"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:02.497" endtime="20210731 21:38:02.544"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:02.548" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:02.570" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:02.570" level="INFO">${pids} = 5173
5180
5186</msg>
<status status="PASS" starttime="20210731 21:38:02.545" endtime="20210731 21:38:02.570"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:02.572" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:02.571" endtime="20210731 21:38:02.572"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:02.572" level="INFO">${pids} = ['5173', '5180', '5186']</msg>
<status status="PASS" starttime="20210731 21:38:02.572" endtime="20210731 21:38:02.572"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5173</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:02.576" level="INFO">Running command 'kill 5173 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:02.573" endtime="20210731 21:38:02.576"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.573" endtime="20210731 21:38:02.576"/>
</iter>
<iter>
<var name="${pid}">5180</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:02.580" level="INFO">Running command 'kill 5180 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:02.577" endtime="20210731 21:38:02.582"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.577" endtime="20210731 21:38:02.582"/>
</iter>
<iter>
<var name="${pid}">5186</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:02.585" level="INFO">Running command 'kill 5186 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:02.582" endtime="20210731 21:38:02.585"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.582" endtime="20210731 21:38:02.586"/>
</iter>
<status status="PASS" starttime="20210731 21:38:02.572" endtime="20210731 21:38:02.586"/>
</for>
<status status="PASS" starttime="20210731 21:38:02.572" endtime="20210731 21:38:02.586"/>
</branch>
<status status="PASS" starttime="20210731 21:38:02.572" endtime="20210731 21:38:02.586"/>
</if>
<status status="PASS" starttime="20210731 21:38:02.544" endtime="20210731 21:38:02.586"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g()=&amp;%¤fghjklQWERTY'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:00.894" endtime="20210731 21:38:02.586">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t23" name="With Each Valid Token, Updating Username Of Each System User With !# &amp;/¤% Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:02.592" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:02.606" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:02.606" level="INFO">${pids} = 5215</msg>
<status status="PASS" starttime="20210731 21:38:02.589" endtime="20210731 21:38:02.606"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:02.608" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:02.607" endtime="20210731 21:38:02.608"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:02.608" level="INFO">${pids} = ['5215']</msg>
<status status="PASS" starttime="20210731 21:38:02.608" endtime="20210731 21:38:02.609"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5215</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:02.612" level="INFO">Running command 'kill 5215 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:02.609" endtime="20210731 21:38:02.612"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.609" endtime="20210731 21:38:02.613"/>
</iter>
<status status="PASS" starttime="20210731 21:38:02.609" endtime="20210731 21:38:02.613"/>
</for>
<status status="PASS" starttime="20210731 21:38:02.608" endtime="20210731 21:38:02.613"/>
</branch>
<status status="PASS" starttime="20210731 21:38:02.608" endtime="20210731 21:38:02.613"/>
</if>
<status status="PASS" starttime="20210731 21:38:02.588" endtime="20210731 21:38:02.613"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:02.615" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:02.614" endtime="20210731 21:38:02.615"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:02.616" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:02.615" endtime="20210731 21:38:02.616"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:02.616" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:02.616" endtime="20210731 21:38:02.616"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:02.617" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:02.616" endtime="20210731 21:38:02.617"/>
</kw>
<msg timestamp="20210731 21:38:02.617" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:02.615" endtime="20210731 21:38:02.617"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:02.625" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:02.617" endtime="20210731 21:38:02.627"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.614" endtime="20210731 21:38:02.627"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:02.629" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:02.628" endtime="20210731 21:38:02.633"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:04.134" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:02.633" endtime="20210731 21:38:04.135"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.627" endtime="20210731 21:38:04.135"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:04.136" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:04.136" endtime="20210731 21:38:04.136"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:04.137" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:04.136" endtime="20210731 21:38:04.137"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:04.137" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:04.137" endtime="20210731 21:38:04.137"/>
</kw>
<msg timestamp="20210731 21:38:04.137" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:04.136" endtime="20210731 21:38:04.138"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:04.138" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:04.138" endtime="20210731 21:38:04.139"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.135" endtime="20210731 21:38:04.139"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:04.139" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:04.139" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:04.139" endtime="20210731 21:38:04.140"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.139" endtime="20210731 21:38:04.140"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:04.141" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:04.141" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:04.140" endtime="20210731 21:38:04.141"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:04.141" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:04.141" endtime="20210731 21:38:04.141"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:04.142" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:04.142" endtime="20210731 21:38:04.142"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:04.142" endtime="20210731 21:38:04.143"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:04.143" endtime="20210731 21:38:04.144"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.142" endtime="20210731 21:38:04.144"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:04.144" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:04.144" endtime="20210731 21:38:04.144"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:04.144" endtime="20210731 21:38:04.145"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:04.145" endtime="20210731 21:38:04.145"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.144" endtime="20210731 21:38:04.145"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:04.146" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:04.146" endtime="20210731 21:38:04.146"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:04.146" endtime="20210731 21:38:04.147"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:04.147" endtime="20210731 21:38:04.147"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.146" endtime="20210731 21:38:04.147"/>
</iter>
<status status="PASS" starttime="20210731 21:38:04.141" endtime="20210731 21:38:04.147"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:04.148" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:04.147" endtime="20210731 21:38:04.148"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.140" endtime="20210731 21:38:04.148"/>
</kw>
<status status="PASS" starttime="20210731 21:38:02.588" endtime="20210731 21:38:04.148"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:04.150" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:04.149" endtime="20210731 21:38:04.150"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:04.150" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 21:38:04.150" endtime="20210731 21:38:04.150"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:04.163" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:04.164" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:04.151" endtime="20210731 21:38:04.164"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:04.164" endtime="20210731 21:38:04.164"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:04.164" endtime="20210731 21:38:04.164"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:04.150" endtime="20210731 21:38:04.164"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:04.150" endtime="20210731 21:38:04.164"/>
</for>
<status status="FAIL" starttime="20210731 21:38:04.149" endtime="20210731 21:38:04.164"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:04.149" endtime="20210731 21:38:04.164"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:04.166" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:04.165" endtime="20210731 21:38:04.166"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:04.166" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 21:38:04.166" endtime="20210731 21:38:04.166"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:04.171" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:04.171" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:04.167" endtime="20210731 21:38:04.171"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:04.172" endtime="20210731 21:38:04.172"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:04.172" endtime="20210731 21:38:04.172"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:04.167" endtime="20210731 21:38:04.172"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:04.166" endtime="20210731 21:38:04.172"/>
</for>
<status status="FAIL" starttime="20210731 21:38:04.165" endtime="20210731 21:38:04.172"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:04.165" endtime="20210731 21:38:04.172"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:04.173" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:04.173" endtime="20210731 21:38:04.174"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:04.174" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210731 21:38:04.174" endtime="20210731 21:38:04.174"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:04.183" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:04.183" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:04.174" endtime="20210731 21:38:04.183"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:04.183" endtime="20210731 21:38:04.183"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:04.183" endtime="20210731 21:38:04.183"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:04.174" endtime="20210731 21:38:04.184"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:04.174" endtime="20210731 21:38:04.184"/>
</for>
<status status="FAIL" starttime="20210731 21:38:04.172" endtime="20210731 21:38:04.184"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:04.172" endtime="20210731 21:38:04.184"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:04.148" endtime="20210731 21:38:04.184"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:04.203" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:04.214" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:04.214" level="INFO">${pids} = 5238
5245
5249</msg>
<status status="PASS" starttime="20210731 21:38:04.185" endtime="20210731 21:38:04.214"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:04.215" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:04.215" endtime="20210731 21:38:04.215"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:04.216" level="INFO">${pids} = ['5238', '5245', '5249']</msg>
<status status="PASS" starttime="20210731 21:38:04.216" endtime="20210731 21:38:04.216"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5238</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:04.220" level="INFO">Running command 'kill 5238 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:04.216" endtime="20210731 21:38:04.220"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.216" endtime="20210731 21:38:04.220"/>
</iter>
<iter>
<var name="${pid}">5245</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:04.223" level="INFO">Running command 'kill 5245 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:04.220" endtime="20210731 21:38:04.224"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.220" endtime="20210731 21:38:04.224"/>
</iter>
<iter>
<var name="${pid}">5249</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:04.240" level="INFO">Running command 'kill 5249 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:04.225" endtime="20210731 21:38:04.240"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.224" endtime="20210731 21:38:04.240"/>
</iter>
<status status="PASS" starttime="20210731 21:38:04.216" endtime="20210731 21:38:04.240"/>
</for>
<status status="PASS" starttime="20210731 21:38:04.215" endtime="20210731 21:38:04.240"/>
</branch>
<status status="PASS" starttime="20210731 21:38:04.215" endtime="20210731 21:38:04.240"/>
</if>
<status status="PASS" starttime="20210731 21:38:04.184" endtime="20210731 21:38:04.241"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!# &amp;/¤%'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:02.587" endtime="20210731 21:38:04.241">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t24" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤ = Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:04.246" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:04.259" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:04.259" level="INFO">${pids} = 5278</msg>
<status status="PASS" starttime="20210731 21:38:04.243" endtime="20210731 21:38:04.259"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:04.260" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:04.260" endtime="20210731 21:38:04.260"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:04.261" level="INFO">${pids} = ['5278']</msg>
<status status="PASS" starttime="20210731 21:38:04.261" endtime="20210731 21:38:04.261"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5278</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:04.265" level="INFO">Running command 'kill 5278 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:04.262" endtime="20210731 21:38:04.265"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.262" endtime="20210731 21:38:04.265"/>
</iter>
<status status="PASS" starttime="20210731 21:38:04.261" endtime="20210731 21:38:04.265"/>
</for>
<status status="PASS" starttime="20210731 21:38:04.261" endtime="20210731 21:38:04.265"/>
</branch>
<status status="PASS" starttime="20210731 21:38:04.261" endtime="20210731 21:38:04.265"/>
</if>
<status status="PASS" starttime="20210731 21:38:04.243" endtime="20210731 21:38:04.266"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:04.267" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:04.266" endtime="20210731 21:38:04.267"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:04.268" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:04.267" endtime="20210731 21:38:04.268"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:04.268" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:04.268" endtime="20210731 21:38:04.268"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:04.269" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:04.268" endtime="20210731 21:38:04.269"/>
</kw>
<msg timestamp="20210731 21:38:04.269" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:04.267" endtime="20210731 21:38:04.269"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:04.276" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:04.269" endtime="20210731 21:38:04.299"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.266" endtime="20210731 21:38:04.299"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:04.301" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:04.300" endtime="20210731 21:38:04.311"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:05.813" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:04.312" endtime="20210731 21:38:05.813"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.300" endtime="20210731 21:38:05.814"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:05.815" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:05.815" endtime="20210731 21:38:05.815"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:05.816" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:05.815" endtime="20210731 21:38:05.816"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:05.816" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:05.816" endtime="20210731 21:38:05.816"/>
</kw>
<msg timestamp="20210731 21:38:05.817" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:05.814" endtime="20210731 21:38:05.817"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:05.817" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:05.817" endtime="20210731 21:38:05.818"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.814" endtime="20210731 21:38:05.818"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:05.818" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:05.818" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:05.818" endtime="20210731 21:38:05.819"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.818" endtime="20210731 21:38:05.819"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:05.819" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:05.820" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:05.819" endtime="20210731 21:38:05.820"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:05.820" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:05.820" endtime="20210731 21:38:05.820"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:05.821" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:05.820" endtime="20210731 21:38:05.821"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:05.821" endtime="20210731 21:38:05.822"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:05.822" endtime="20210731 21:38:05.822"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.820" endtime="20210731 21:38:05.822"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:05.823" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:05.823" endtime="20210731 21:38:05.823"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:05.823" endtime="20210731 21:38:05.824"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:05.824" endtime="20210731 21:38:05.824"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.822" endtime="20210731 21:38:05.824"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:05.825" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:05.825" endtime="20210731 21:38:05.825"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:05.825" endtime="20210731 21:38:05.826"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:05.826" endtime="20210731 21:38:05.826"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.824" endtime="20210731 21:38:05.826"/>
</iter>
<status status="PASS" starttime="20210731 21:38:05.820" endtime="20210731 21:38:05.826"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:05.827" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:05.827" endtime="20210731 21:38:05.827"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.819" endtime="20210731 21:38:05.827"/>
</kw>
<status status="PASS" starttime="20210731 21:38:04.242" endtime="20210731 21:38:05.827"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:05.829" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:05.828" endtime="20210731 21:38:05.829"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:05.829" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210731 21:38:05.829" endtime="20210731 21:38:05.829"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:05.840" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:05.840" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:05.830" endtime="20210731 21:38:05.840"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:05.840" endtime="20210731 21:38:05.840"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:05.840" endtime="20210731 21:38:05.841"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:05.829" endtime="20210731 21:38:05.841"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:05.829" endtime="20210731 21:38:05.841"/>
</for>
<status status="FAIL" starttime="20210731 21:38:05.828" endtime="20210731 21:38:05.841"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:05.828" endtime="20210731 21:38:05.841"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:05.842" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:05.842" endtime="20210731 21:38:05.842"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:05.843" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210731 21:38:05.842" endtime="20210731 21:38:05.843"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:05.847" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:05.848" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:05.843" endtime="20210731 21:38:05.848"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:05.848" endtime="20210731 21:38:05.848"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:05.848" endtime="20210731 21:38:05.848"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:05.843" endtime="20210731 21:38:05.848"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:05.843" endtime="20210731 21:38:05.848"/>
</for>
<status status="FAIL" starttime="20210731 21:38:05.841" endtime="20210731 21:38:05.848"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:05.841" endtime="20210731 21:38:05.848"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:05.850" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:05.849" endtime="20210731 21:38:05.850"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:05.850" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210731 21:38:05.850" endtime="20210731 21:38:05.850"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:05.855" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:05.855" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:05.851" endtime="20210731 21:38:05.855"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:05.855" endtime="20210731 21:38:05.855"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:05.855" endtime="20210731 21:38:05.855"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:05.850" endtime="20210731 21:38:05.855"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:05.850" endtime="20210731 21:38:05.855"/>
</for>
<status status="FAIL" starttime="20210731 21:38:05.848" endtime="20210731 21:38:05.856"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:05.848" endtime="20210731 21:38:05.856"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:05.827" endtime="20210731 21:38:05.856"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:05.861" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:05.877" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:05.877" level="INFO">${pids} = 5301
5308
5312</msg>
<status status="PASS" starttime="20210731 21:38:05.856" endtime="20210731 21:38:05.877"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:05.878" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:05.878" endtime="20210731 21:38:05.878"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:05.879" level="INFO">${pids} = ['5301', '5308', '5312']</msg>
<status status="PASS" starttime="20210731 21:38:05.879" endtime="20210731 21:38:05.879"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5301</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:05.883" level="INFO">Running command 'kill 5301 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:05.880" endtime="20210731 21:38:05.884"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.880" endtime="20210731 21:38:05.884"/>
</iter>
<iter>
<var name="${pid}">5308</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:05.888" level="INFO">Running command 'kill 5308 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:05.884" endtime="20210731 21:38:05.889"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.884" endtime="20210731 21:38:05.889"/>
</iter>
<iter>
<var name="${pid}">5312</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:05.905" level="INFO">Running command 'kill 5312 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:05.889" endtime="20210731 21:38:05.906"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.889" endtime="20210731 21:38:05.906"/>
</iter>
<status status="PASS" starttime="20210731 21:38:05.879" endtime="20210731 21:38:05.906"/>
</for>
<status status="PASS" starttime="20210731 21:38:05.879" endtime="20210731 21:38:05.906"/>
</branch>
<status status="PASS" starttime="20210731 21:38:05.879" endtime="20210731 21:38:05.906"/>
</if>
<status status="PASS" starttime="20210731 21:38:05.856" endtime="20210731 21:38:05.906"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤ ='
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:04.242" endtime="20210731 21:38:05.906">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t25" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%= ()=? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:05.911" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:05.928" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:05.928" level="INFO">${pids} = 5341</msg>
<status status="PASS" starttime="20210731 21:38:05.909" endtime="20210731 21:38:05.928"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:05.929" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:05.928" endtime="20210731 21:38:05.929"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:05.930" level="INFO">${pids} = ['5341']</msg>
<status status="PASS" starttime="20210731 21:38:05.930" endtime="20210731 21:38:05.930"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5341</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:05.933" level="INFO">Running command 'kill 5341 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:05.930" endtime="20210731 21:38:05.934"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.930" endtime="20210731 21:38:05.934"/>
</iter>
<status status="PASS" starttime="20210731 21:38:05.930" endtime="20210731 21:38:05.934"/>
</for>
<status status="PASS" starttime="20210731 21:38:05.929" endtime="20210731 21:38:05.934"/>
</branch>
<status status="PASS" starttime="20210731 21:38:05.929" endtime="20210731 21:38:05.935"/>
</if>
<status status="PASS" starttime="20210731 21:38:05.908" endtime="20210731 21:38:05.935"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:05.937" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:05.936" endtime="20210731 21:38:05.938"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:05.938" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:05.938" endtime="20210731 21:38:05.938"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:05.939" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:05.939" endtime="20210731 21:38:05.939"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:05.939" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:05.939" endtime="20210731 21:38:05.939"/>
</kw>
<msg timestamp="20210731 21:38:05.940" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:05.938" endtime="20210731 21:38:05.940"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:05.965" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:05.940" endtime="20210731 21:38:05.967"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.935" endtime="20210731 21:38:05.968"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:05.969" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:05.968" endtime="20210731 21:38:05.973"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:07.475" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:05.973" endtime="20210731 21:38:07.475"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.968" endtime="20210731 21:38:07.475"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:07.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:07.476" endtime="20210731 21:38:07.476"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:07.477" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:07.476" endtime="20210731 21:38:07.477"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:07.477" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:07.477" endtime="20210731 21:38:07.477"/>
</kw>
<msg timestamp="20210731 21:38:07.478" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:07.476" endtime="20210731 21:38:07.478"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:07.478" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:07.478" endtime="20210731 21:38:07.479"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.475" endtime="20210731 21:38:07.479"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:07.479" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:07.479" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:07.479" endtime="20210731 21:38:07.480"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.479" endtime="20210731 21:38:07.480"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:07.480" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:07.480" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:07.480" endtime="20210731 21:38:07.480"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:07.481" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:07.481" endtime="20210731 21:38:07.481"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:07.482" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:07.481" endtime="20210731 21:38:07.482"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:07.482" endtime="20210731 21:38:07.483"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:07.483" endtime="20210731 21:38:07.483"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.481" endtime="20210731 21:38:07.483"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:07.483" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:07.483" endtime="20210731 21:38:07.484"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:07.484" endtime="20210731 21:38:07.485"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:07.485" endtime="20210731 21:38:07.485"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.483" endtime="20210731 21:38:07.485"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:07.485" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:07.485" endtime="20210731 21:38:07.485"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:07.486" endtime="20210731 21:38:07.486"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:07.487" endtime="20210731 21:38:07.487"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.485" endtime="20210731 21:38:07.487"/>
</iter>
<status status="PASS" starttime="20210731 21:38:07.481" endtime="20210731 21:38:07.487"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:07.487" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:07.487" endtime="20210731 21:38:07.487"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.480" endtime="20210731 21:38:07.488"/>
</kw>
<status status="PASS" starttime="20210731 21:38:05.908" endtime="20210731 21:38:07.488"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:07.489" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:07.489" endtime="20210731 21:38:07.489"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:07.490" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210731 21:38:07.489" endtime="20210731 21:38:07.490"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:07.500" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:07.501" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:07.490" endtime="20210731 21:38:07.501"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:07.501" endtime="20210731 21:38:07.501"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:07.501" endtime="20210731 21:38:07.501"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:07.490" endtime="20210731 21:38:07.501"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:07.490" endtime="20210731 21:38:07.501"/>
</for>
<status status="FAIL" starttime="20210731 21:38:07.488" endtime="20210731 21:38:07.501"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:07.488" endtime="20210731 21:38:07.502"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:07.503" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:07.502" endtime="20210731 21:38:07.503"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:07.503" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210731 21:38:07.503" endtime="20210731 21:38:07.503"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:07.509" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:07.509" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:07.504" endtime="20210731 21:38:07.509"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:07.510" endtime="20210731 21:38:07.510"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:07.510" endtime="20210731 21:38:07.510"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:07.504" endtime="20210731 21:38:07.510"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:07.503" endtime="20210731 21:38:07.510"/>
</for>
<status status="FAIL" starttime="20210731 21:38:07.502" endtime="20210731 21:38:07.510"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:07.502" endtime="20210731 21:38:07.510"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:07.511" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:07.511" endtime="20210731 21:38:07.511"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:07.512" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210731 21:38:07.511" endtime="20210731 21:38:07.512"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:07.517" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:07.517" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:07.512" endtime="20210731 21:38:07.517"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:07.518" endtime="20210731 21:38:07.519"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:07.519" endtime="20210731 21:38:07.519"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:07.512" endtime="20210731 21:38:07.519"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:07.512" endtime="20210731 21:38:07.519"/>
</for>
<status status="FAIL" starttime="20210731 21:38:07.510" endtime="20210731 21:38:07.520"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:07.510" endtime="20210731 21:38:07.520"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:07.488" endtime="20210731 21:38:07.520"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:07.532" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:07.543" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:07.543" level="INFO">${pids} = 5364
5371
5376</msg>
<status status="PASS" starttime="20210731 21:38:07.528" endtime="20210731 21:38:07.543"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:07.544" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:07.543" endtime="20210731 21:38:07.544"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:07.545" level="INFO">${pids} = ['5364', '5371', '5376']</msg>
<status status="PASS" starttime="20210731 21:38:07.544" endtime="20210731 21:38:07.545"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5364</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:07.551" level="INFO">Running command 'kill 5364 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:07.545" endtime="20210731 21:38:07.551"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.545" endtime="20210731 21:38:07.551"/>
</iter>
<iter>
<var name="${pid}">5371</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:07.564" level="INFO">Running command 'kill 5371 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:07.552" endtime="20210731 21:38:07.565"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.552" endtime="20210731 21:38:07.565"/>
</iter>
<iter>
<var name="${pid}">5376</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:07.568" level="INFO">Running command 'kill 5376 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:07.565" endtime="20210731 21:38:07.569"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.565" endtime="20210731 21:38:07.569"/>
</iter>
<status status="PASS" starttime="20210731 21:38:07.545" endtime="20210731 21:38:07.569"/>
</for>
<status status="PASS" starttime="20210731 21:38:07.544" endtime="20210731 21:38:07.569"/>
</branch>
<status status="PASS" starttime="20210731 21:38:07.544" endtime="20210731 21:38:07.569"/>
</if>
<status status="PASS" starttime="20210731 21:38:07.520" endtime="20210731 21:38:07.569"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%= ()=?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:05.907" endtime="20210731 21:38:07.570">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t26" name="With Each Valid Token, Updating Username Of Each System User With 1234 67 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:07.575" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:07.586" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:07.586" level="INFO">${pids} = 5405</msg>
<status status="PASS" starttime="20210731 21:38:07.572" endtime="20210731 21:38:07.586"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:07.587" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:07.587" endtime="20210731 21:38:07.587"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:07.588" level="INFO">${pids} = ['5405']</msg>
<status status="PASS" starttime="20210731 21:38:07.588" endtime="20210731 21:38:07.588"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5405</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:07.592" level="INFO">Running command 'kill 5405 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:07.589" endtime="20210731 21:38:07.592"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.588" endtime="20210731 21:38:07.592"/>
</iter>
<status status="PASS" starttime="20210731 21:38:07.588" endtime="20210731 21:38:07.592"/>
</for>
<status status="PASS" starttime="20210731 21:38:07.588" endtime="20210731 21:38:07.592"/>
</branch>
<status status="PASS" starttime="20210731 21:38:07.587" endtime="20210731 21:38:07.592"/>
</if>
<status status="PASS" starttime="20210731 21:38:07.571" endtime="20210731 21:38:07.593"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:07.594" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:07.594" endtime="20210731 21:38:07.594"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:07.595" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:07.595" endtime="20210731 21:38:07.595"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:07.595" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:07.595" endtime="20210731 21:38:07.595"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:07.596" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:07.595" endtime="20210731 21:38:07.596"/>
</kw>
<msg timestamp="20210731 21:38:07.596" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:07.594" endtime="20210731 21:38:07.596"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:07.624" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:07.597" endtime="20210731 21:38:07.627"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.593" endtime="20210731 21:38:07.627"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:07.629" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:07.628" endtime="20210731 21:38:07.633"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:09.134" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:07.634" endtime="20210731 21:38:09.134"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.627" endtime="20210731 21:38:09.135"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:09.136" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:09.136" endtime="20210731 21:38:09.136"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:09.137" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:09.137" endtime="20210731 21:38:09.137"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:09.137" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:09.137" endtime="20210731 21:38:09.137"/>
</kw>
<msg timestamp="20210731 21:38:09.138" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:09.136" endtime="20210731 21:38:09.138"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:09.138" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:09.138" endtime="20210731 21:38:09.139"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.135" endtime="20210731 21:38:09.139"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:09.140" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:09.140" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:09.140" endtime="20210731 21:38:09.140"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.139" endtime="20210731 21:38:09.140"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:09.141" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:09.141" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:09.141" endtime="20210731 21:38:09.141"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:09.141" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:09.141" endtime="20210731 21:38:09.141"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:09.142" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:09.142" endtime="20210731 21:38:09.142"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:09.143" endtime="20210731 21:38:09.143"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:09.144" endtime="20210731 21:38:09.144"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.142" endtime="20210731 21:38:09.144"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:09.144" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:09.144" endtime="20210731 21:38:09.144"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:09.145" endtime="20210731 21:38:09.146"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:09.146" endtime="20210731 21:38:09.146"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.144" endtime="20210731 21:38:09.146"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:09.147" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:09.146" endtime="20210731 21:38:09.147"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:09.147" endtime="20210731 21:38:09.148"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:09.148" endtime="20210731 21:38:09.148"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.146" endtime="20210731 21:38:09.148"/>
</iter>
<status status="PASS" starttime="20210731 21:38:09.142" endtime="20210731 21:38:09.148"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:09.149" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:09.148" endtime="20210731 21:38:09.149"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.140" endtime="20210731 21:38:09.149"/>
</kw>
<status status="PASS" starttime="20210731 21:38:07.571" endtime="20210731 21:38:09.149"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:09.151" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:09.150" endtime="20210731 21:38:09.151"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:09.151" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210731 21:38:09.151" endtime="20210731 21:38:09.151"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:09.163" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:09.163" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:09.152" endtime="20210731 21:38:09.163"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:09.164" endtime="20210731 21:38:09.164"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:09.164" endtime="20210731 21:38:09.164"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:09.152" endtime="20210731 21:38:09.164"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:09.151" endtime="20210731 21:38:09.164"/>
</for>
<status status="FAIL" starttime="20210731 21:38:09.150" endtime="20210731 21:38:09.164"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:09.150" endtime="20210731 21:38:09.164"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:09.166" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:09.165" endtime="20210731 21:38:09.166"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:09.167" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210731 21:38:09.166" endtime="20210731 21:38:09.167"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:09.172" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:09.172" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:09.167" endtime="20210731 21:38:09.172"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:09.172" endtime="20210731 21:38:09.172"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:09.172" endtime="20210731 21:38:09.172"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:09.167" endtime="20210731 21:38:09.173"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:09.167" endtime="20210731 21:38:09.173"/>
</for>
<status status="FAIL" starttime="20210731 21:38:09.164" endtime="20210731 21:38:09.173"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:09.164" endtime="20210731 21:38:09.173"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:09.174" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:09.174" endtime="20210731 21:38:09.174"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:09.175" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210731 21:38:09.174" endtime="20210731 21:38:09.175"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:09.180" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:09.181" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:09.175" endtime="20210731 21:38:09.181"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:09.181" endtime="20210731 21:38:09.181"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:09.181" endtime="20210731 21:38:09.181"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:09.175" endtime="20210731 21:38:09.181"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:09.175" endtime="20210731 21:38:09.181"/>
</for>
<status status="FAIL" starttime="20210731 21:38:09.173" endtime="20210731 21:38:09.181"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:09.173" endtime="20210731 21:38:09.181"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:09.149" endtime="20210731 21:38:09.182"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:09.196" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:09.206" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:09.207" level="INFO">${pids} = 5428
5435
5439</msg>
<status status="PASS" starttime="20210731 21:38:09.182" endtime="20210731 21:38:09.207"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:09.208" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:09.207" endtime="20210731 21:38:09.208"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:09.208" level="INFO">${pids} = ['5428', '5435', '5439']</msg>
<status status="PASS" starttime="20210731 21:38:09.208" endtime="20210731 21:38:09.208"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5428</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:09.219" level="INFO">Running command 'kill 5428 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:09.209" endtime="20210731 21:38:09.220"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.209" endtime="20210731 21:38:09.220"/>
</iter>
<iter>
<var name="${pid}">5435</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:09.225" level="INFO">Running command 'kill 5435 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:09.220" endtime="20210731 21:38:09.226"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.220" endtime="20210731 21:38:09.226"/>
</iter>
<iter>
<var name="${pid}">5439</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:09.229" level="INFO">Running command 'kill 5439 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:09.226" endtime="20210731 21:38:09.229"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.226" endtime="20210731 21:38:09.230"/>
</iter>
<status status="PASS" starttime="20210731 21:38:09.209" endtime="20210731 21:38:09.230"/>
</for>
<status status="PASS" starttime="20210731 21:38:09.208" endtime="20210731 21:38:09.230"/>
</branch>
<status status="PASS" starttime="20210731 21:38:09.208" endtime="20210731 21:38:09.230"/>
</if>
<status status="PASS" starttime="20210731 21:38:09.182" endtime="20210731 21:38:09.230"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '1234 67'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:07.570" endtime="20210731 21:38:09.230">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t27" name="With Each Valid Token, Updating Username Of Each System User With 123456 8 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:09.235" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:09.247" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:09.247" level="INFO">${pids} = 5468</msg>
<status status="PASS" starttime="20210731 21:38:09.232" endtime="20210731 21:38:09.247"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:09.248" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:09.247" endtime="20210731 21:38:09.248"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:09.248" level="INFO">${pids} = ['5468']</msg>
<status status="PASS" starttime="20210731 21:38:09.248" endtime="20210731 21:38:09.249"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5468</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:09.252" level="INFO">Running command 'kill 5468 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:09.249" endtime="20210731 21:38:09.253"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.249" endtime="20210731 21:38:09.253"/>
</iter>
<status status="PASS" starttime="20210731 21:38:09.249" endtime="20210731 21:38:09.253"/>
</for>
<status status="PASS" starttime="20210731 21:38:09.248" endtime="20210731 21:38:09.253"/>
</branch>
<status status="PASS" starttime="20210731 21:38:09.248" endtime="20210731 21:38:09.253"/>
</if>
<status status="PASS" starttime="20210731 21:38:09.232" endtime="20210731 21:38:09.253"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:09.254" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:09.254" endtime="20210731 21:38:09.254"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:09.255" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:09.255" endtime="20210731 21:38:09.255"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:09.256" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:09.256" endtime="20210731 21:38:09.256"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:09.256" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:09.256" endtime="20210731 21:38:09.256"/>
</kw>
<msg timestamp="20210731 21:38:09.257" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:09.255" endtime="20210731 21:38:09.257"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:09.271" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:09.257" endtime="20210731 21:38:09.287"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.253" endtime="20210731 21:38:09.288"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:09.290" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:09.289" endtime="20210731 21:38:09.294"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:10.795" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:09.294" endtime="20210731 21:38:10.795"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.288" endtime="20210731 21:38:10.795"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:10.797" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:10.797" endtime="20210731 21:38:10.797"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:10.797" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:10.797" endtime="20210731 21:38:10.797"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:10.798" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:10.798" endtime="20210731 21:38:10.798"/>
</kw>
<msg timestamp="20210731 21:38:10.798" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:10.796" endtime="20210731 21:38:10.798"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:10.799" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:10.798" endtime="20210731 21:38:10.799"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.796" endtime="20210731 21:38:10.799"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:10.800" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:10.800" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:10.800" endtime="20210731 21:38:10.800"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.799" endtime="20210731 21:38:10.800"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:10.801" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:10.801" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:10.801" endtime="20210731 21:38:10.801"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:10.801" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:10.801" endtime="20210731 21:38:10.802"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:10.802" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:10.802" endtime="20210731 21:38:10.802"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:10.802" endtime="20210731 21:38:10.803"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:10.803" endtime="20210731 21:38:10.804"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.802" endtime="20210731 21:38:10.804"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:10.804" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:10.804" endtime="20210731 21:38:10.804"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:10.804" endtime="20210731 21:38:10.805"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:10.805" endtime="20210731 21:38:10.805"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.804" endtime="20210731 21:38:10.805"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:10.806" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:10.806" endtime="20210731 21:38:10.806"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:10.806" endtime="20210731 21:38:10.807"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:10.807" endtime="20210731 21:38:10.807"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.806" endtime="20210731 21:38:10.807"/>
</iter>
<status status="PASS" starttime="20210731 21:38:10.802" endtime="20210731 21:38:10.807"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:10.808" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:10.807" endtime="20210731 21:38:10.808"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.800" endtime="20210731 21:38:10.808"/>
</kw>
<status status="PASS" starttime="20210731 21:38:09.232" endtime="20210731 21:38:10.808"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:10.809" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:10.809" endtime="20210731 21:38:10.809"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:10.810" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210731 21:38:10.810" endtime="20210731 21:38:10.810"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:10.820" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:10.821" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:10.810" endtime="20210731 21:38:10.821"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:10.821" endtime="20210731 21:38:10.821"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:10.821" endtime="20210731 21:38:10.821"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:10.810" endtime="20210731 21:38:10.821"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:10.810" endtime="20210731 21:38:10.821"/>
</for>
<status status="FAIL" starttime="20210731 21:38:10.809" endtime="20210731 21:38:10.821"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:10.808" endtime="20210731 21:38:10.821"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:10.823" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:10.822" endtime="20210731 21:38:10.823"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:10.823" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210731 21:38:10.823" endtime="20210731 21:38:10.823"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:10.828" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:10.828" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:10.824" endtime="20210731 21:38:10.828"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:10.828" endtime="20210731 21:38:10.828"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:10.829" endtime="20210731 21:38:10.829"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:10.824" endtime="20210731 21:38:10.829"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:10.823" endtime="20210731 21:38:10.829"/>
</for>
<status status="FAIL" starttime="20210731 21:38:10.822" endtime="20210731 21:38:10.829"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:10.822" endtime="20210731 21:38:10.829"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:10.830" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:10.830" endtime="20210731 21:38:10.830"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:10.831" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210731 21:38:10.830" endtime="20210731 21:38:10.831"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:10.835" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:10.836" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:10.831" endtime="20210731 21:38:10.836"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:10.836" endtime="20210731 21:38:10.836"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:10.836" endtime="20210731 21:38:10.836"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:10.831" endtime="20210731 21:38:10.837"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:10.831" endtime="20210731 21:38:10.837"/>
</for>
<status status="FAIL" starttime="20210731 21:38:10.829" endtime="20210731 21:38:10.837"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:10.829" endtime="20210731 21:38:10.837"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:10.808" endtime="20210731 21:38:10.837"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:10.852" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:10.886" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:10.886" level="INFO">${pids} = 5491
5498
5502</msg>
<status status="PASS" starttime="20210731 21:38:10.838" endtime="20210731 21:38:10.886"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:10.887" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:10.886" endtime="20210731 21:38:10.887"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:10.888" level="INFO">${pids} = ['5491', '5498', '5502']</msg>
<status status="PASS" starttime="20210731 21:38:10.887" endtime="20210731 21:38:10.888"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5491</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:10.897" level="INFO">Running command 'kill 5491 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:10.888" endtime="20210731 21:38:10.898"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.888" endtime="20210731 21:38:10.898"/>
</iter>
<iter>
<var name="${pid}">5498</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:10.908" level="INFO">Running command 'kill 5498 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:10.899" endtime="20210731 21:38:10.909"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.898" endtime="20210731 21:38:10.909"/>
</iter>
<iter>
<var name="${pid}">5502</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:10.913" level="INFO">Running command 'kill 5502 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:10.910" endtime="20210731 21:38:10.914"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.909" endtime="20210731 21:38:10.914"/>
</iter>
<status status="PASS" starttime="20210731 21:38:10.888" endtime="20210731 21:38:10.914"/>
</for>
<status status="PASS" starttime="20210731 21:38:10.887" endtime="20210731 21:38:10.914"/>
</branch>
<status status="PASS" starttime="20210731 21:38:10.887" endtime="20210731 21:38:10.914"/>
</if>
<status status="PASS" starttime="20210731 21:38:10.837" endtime="20210731 21:38:10.914"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '123456 8'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:09.231" endtime="20210731 21:38:10.914">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t28" name="With Each Valid Token, Updating Username Of Each System User With 12345678 12345 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:10.923" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:10.937" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:10.937" level="INFO">${pids} = 5531</msg>
<status status="PASS" starttime="20210731 21:38:10.917" endtime="20210731 21:38:10.937"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:10.938" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:10.938" endtime="20210731 21:38:10.938"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:10.939" level="INFO">${pids} = ['5531']</msg>
<status status="PASS" starttime="20210731 21:38:10.939" endtime="20210731 21:38:10.939"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5531</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:10.955" level="INFO">Running command 'kill 5531 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:10.940" endtime="20210731 21:38:10.974"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.940" endtime="20210731 21:38:10.974"/>
</iter>
<status status="PASS" starttime="20210731 21:38:10.939" endtime="20210731 21:38:10.974"/>
</for>
<status status="PASS" starttime="20210731 21:38:10.939" endtime="20210731 21:38:10.974"/>
</branch>
<status status="PASS" starttime="20210731 21:38:10.938" endtime="20210731 21:38:10.974"/>
</if>
<status status="PASS" starttime="20210731 21:38:10.916" endtime="20210731 21:38:10.974"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:10.976" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:10.975" endtime="20210731 21:38:10.976"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:10.977" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:10.976" endtime="20210731 21:38:10.977"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:10.977" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:10.977" endtime="20210731 21:38:10.977"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:10.978" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:10.977" endtime="20210731 21:38:10.978"/>
</kw>
<msg timestamp="20210731 21:38:10.978" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:10.976" endtime="20210731 21:38:10.978"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:10.989" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:10.978" endtime="20210731 21:38:10.992"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.975" endtime="20210731 21:38:10.992"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:10.994" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:10.993" endtime="20210731 21:38:10.998"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:12.499" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:10.998" endtime="20210731 21:38:12.499"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.992" endtime="20210731 21:38:12.499"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:12.501" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:12.500" endtime="20210731 21:38:12.501"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:12.501" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:12.501" endtime="20210731 21:38:12.501"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:12.502" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:12.502" endtime="20210731 21:38:12.502"/>
</kw>
<msg timestamp="20210731 21:38:12.502" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:12.500" endtime="20210731 21:38:12.502"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:12.503" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:12.502" endtime="20210731 21:38:12.503"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.500" endtime="20210731 21:38:12.503"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:12.504" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:12.504" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:12.504" endtime="20210731 21:38:12.504"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.503" endtime="20210731 21:38:12.504"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:12.505" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:12.505" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:12.505" endtime="20210731 21:38:12.505"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:12.506" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:12.505" endtime="20210731 21:38:12.506"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:12.506" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:12.506" endtime="20210731 21:38:12.507"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:12.507" endtime="20210731 21:38:12.508"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:12.508" endtime="20210731 21:38:12.508"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.506" endtime="20210731 21:38:12.508"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:12.508" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:12.508" endtime="20210731 21:38:12.508"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:12.509" endtime="20210731 21:38:12.509"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:12.510" endtime="20210731 21:38:12.510"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.508" endtime="20210731 21:38:12.510"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:12.510" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:12.510" endtime="20210731 21:38:12.510"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:12.511" endtime="20210731 21:38:12.511"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:12.512" endtime="20210731 21:38:12.512"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.510" endtime="20210731 21:38:12.512"/>
</iter>
<status status="PASS" starttime="20210731 21:38:12.506" endtime="20210731 21:38:12.512"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:12.512" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:12.512" endtime="20210731 21:38:12.513"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.504" endtime="20210731 21:38:12.513"/>
</kw>
<status status="PASS" starttime="20210731 21:38:10.916" endtime="20210731 21:38:12.513"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:12.514" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:12.514" endtime="20210731 21:38:12.514"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:12.515" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210731 21:38:12.515" endtime="20210731 21:38:12.515"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:12.528" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:12.528" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:12.515" endtime="20210731 21:38:12.528"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:12.528" endtime="20210731 21:38:12.528"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:12.528" endtime="20210731 21:38:12.528"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:12.515" endtime="20210731 21:38:12.528"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:12.515" endtime="20210731 21:38:12.529"/>
</for>
<status status="FAIL" starttime="20210731 21:38:12.513" endtime="20210731 21:38:12.529"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:12.513" endtime="20210731 21:38:12.529"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:12.530" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:12.530" endtime="20210731 21:38:12.530"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:12.531" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210731 21:38:12.530" endtime="20210731 21:38:12.531"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:12.536" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:12.536" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:12.531" endtime="20210731 21:38:12.537"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:12.537" endtime="20210731 21:38:12.537"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:12.537" endtime="20210731 21:38:12.537"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:12.531" endtime="20210731 21:38:12.537"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:12.531" endtime="20210731 21:38:12.537"/>
</for>
<status status="FAIL" starttime="20210731 21:38:12.529" endtime="20210731 21:38:12.537"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:12.529" endtime="20210731 21:38:12.537"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:12.539" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:12.538" endtime="20210731 21:38:12.539"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:12.539" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210731 21:38:12.539" endtime="20210731 21:38:12.539"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:12.556" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:12.557" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:12.540" endtime="20210731 21:38:12.557"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:12.557" endtime="20210731 21:38:12.557"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:12.557" endtime="20210731 21:38:12.557"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:12.540" endtime="20210731 21:38:12.557"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:12.539" endtime="20210731 21:38:12.557"/>
</for>
<status status="FAIL" starttime="20210731 21:38:12.538" endtime="20210731 21:38:12.557"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:12.537" endtime="20210731 21:38:12.557"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:12.513" endtime="20210731 21:38:12.557"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:12.561" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:12.572" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:12.572" level="INFO">${pids} = 5554
5561
5566</msg>
<status status="PASS" starttime="20210731 21:38:12.558" endtime="20210731 21:38:12.573"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:12.574" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:12.573" endtime="20210731 21:38:12.574"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:12.574" level="INFO">${pids} = ['5554', '5561', '5566']</msg>
<status status="PASS" starttime="20210731 21:38:12.574" endtime="20210731 21:38:12.574"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5554</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:12.588" level="INFO">Running command 'kill 5554 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:12.576" endtime="20210731 21:38:12.588"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.575" endtime="20210731 21:38:12.588"/>
</iter>
<iter>
<var name="${pid}">5561</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:12.592" level="INFO">Running command 'kill 5561 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:12.589" endtime="20210731 21:38:12.593"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.589" endtime="20210731 21:38:12.593"/>
</iter>
<iter>
<var name="${pid}">5566</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:12.597" level="INFO">Running command 'kill 5566 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:12.594" endtime="20210731 21:38:12.597"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.594" endtime="20210731 21:38:12.597"/>
</iter>
<status status="PASS" starttime="20210731 21:38:12.575" endtime="20210731 21:38:12.597"/>
</for>
<status status="PASS" starttime="20210731 21:38:12.574" endtime="20210731 21:38:12.597"/>
</branch>
<status status="PASS" starttime="20210731 21:38:12.574" endtime="20210731 21:38:12.598"/>
</if>
<status status="PASS" starttime="20210731 21:38:12.558" endtime="20210731 21:38:12.598"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678 12345'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:10.915" endtime="20210731 21:38:12.598">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t29" name="With Each Valid Token, Updating Username Of Each System User With abcd fg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:12.604" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:12.616" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:12.616" level="INFO">${pids} = 5595</msg>
<status status="PASS" starttime="20210731 21:38:12.601" endtime="20210731 21:38:12.616"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:12.617" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:12.617" endtime="20210731 21:38:12.617"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:12.618" level="INFO">${pids} = ['5595']</msg>
<status status="PASS" starttime="20210731 21:38:12.618" endtime="20210731 21:38:12.618"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5595</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:12.643" level="INFO">Running command 'kill 5595 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:12.619" endtime="20210731 21:38:12.643"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.618" endtime="20210731 21:38:12.644"/>
</iter>
<status status="PASS" starttime="20210731 21:38:12.618" endtime="20210731 21:38:12.644"/>
</for>
<status status="PASS" starttime="20210731 21:38:12.618" endtime="20210731 21:38:12.644"/>
</branch>
<status status="PASS" starttime="20210731 21:38:12.617" endtime="20210731 21:38:12.644"/>
</if>
<status status="PASS" starttime="20210731 21:38:12.600" endtime="20210731 21:38:12.644"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:12.645" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:12.645" endtime="20210731 21:38:12.645"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:12.646" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:12.646" endtime="20210731 21:38:12.646"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:12.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:12.646" endtime="20210731 21:38:12.647"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:12.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:12.647" endtime="20210731 21:38:12.647"/>
</kw>
<msg timestamp="20210731 21:38:12.648" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:12.646" endtime="20210731 21:38:12.648"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:12.652" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:12.648" endtime="20210731 21:38:12.654"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.644" endtime="20210731 21:38:12.654"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:12.656" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:12.655" endtime="20210731 21:38:12.660"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:14.161" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:12.660" endtime="20210731 21:38:14.162"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.655" endtime="20210731 21:38:14.162"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:14.163" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:14.163" endtime="20210731 21:38:14.163"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:14.164" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:14.164" endtime="20210731 21:38:14.164"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:14.164" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:14.164" endtime="20210731 21:38:14.164"/>
</kw>
<msg timestamp="20210731 21:38:14.165" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:14.163" endtime="20210731 21:38:14.165"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:14.165" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:14.165" endtime="20210731 21:38:14.166"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.162" endtime="20210731 21:38:14.166"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:14.166" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:14.166" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:14.166" endtime="20210731 21:38:14.167"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.166" endtime="20210731 21:38:14.167"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:14.168" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:14.168" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:14.167" endtime="20210731 21:38:14.168"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:14.168" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:14.168" endtime="20210731 21:38:14.168"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:14.169" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:14.169" endtime="20210731 21:38:14.169"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:14.169" endtime="20210731 21:38:14.170"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:14.170" endtime="20210731 21:38:14.171"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.169" endtime="20210731 21:38:14.171"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:14.171" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:14.171" endtime="20210731 21:38:14.171"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:14.171" endtime="20210731 21:38:14.172"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:14.172" endtime="20210731 21:38:14.172"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.171" endtime="20210731 21:38:14.173"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:14.173" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:14.173" endtime="20210731 21:38:14.173"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:14.173" endtime="20210731 21:38:14.174"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:14.174" endtime="20210731 21:38:14.174"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.173" endtime="20210731 21:38:14.175"/>
</iter>
<status status="PASS" starttime="20210731 21:38:14.168" endtime="20210731 21:38:14.175"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:14.175" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:14.175" endtime="20210731 21:38:14.175"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.167" endtime="20210731 21:38:14.175"/>
</kw>
<status status="PASS" starttime="20210731 21:38:12.599" endtime="20210731 21:38:14.175"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:14.177" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:14.176" endtime="20210731 21:38:14.177"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:14.178" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210731 21:38:14.177" endtime="20210731 21:38:14.178"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:14.190" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:14.190" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:14.178" endtime="20210731 21:38:14.190"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:14.191" endtime="20210731 21:38:14.191"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:14.191" endtime="20210731 21:38:14.191"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:14.178" endtime="20210731 21:38:14.191"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:14.178" endtime="20210731 21:38:14.191"/>
</for>
<status status="FAIL" starttime="20210731 21:38:14.176" endtime="20210731 21:38:14.191"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:14.176" endtime="20210731 21:38:14.191"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:14.193" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:14.192" endtime="20210731 21:38:14.193"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:14.193" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210731 21:38:14.193" endtime="20210731 21:38:14.193"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:14.198" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:14.198" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:14.194" endtime="20210731 21:38:14.198"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:14.198" endtime="20210731 21:38:14.198"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:14.199" endtime="20210731 21:38:14.199"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:14.193" endtime="20210731 21:38:14.199"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:14.193" endtime="20210731 21:38:14.199"/>
</for>
<status status="FAIL" starttime="20210731 21:38:14.191" endtime="20210731 21:38:14.199"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:14.191" endtime="20210731 21:38:14.199"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:14.200" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:14.200" endtime="20210731 21:38:14.200"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:14.201" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210731 21:38:14.200" endtime="20210731 21:38:14.201"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:14.213" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:14.213" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:14.202" endtime="20210731 21:38:14.213"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:14.214" endtime="20210731 21:38:14.214"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:14.214" endtime="20210731 21:38:14.214"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:14.202" endtime="20210731 21:38:14.214"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:14.201" endtime="20210731 21:38:14.214"/>
</for>
<status status="FAIL" starttime="20210731 21:38:14.199" endtime="20210731 21:38:14.214"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:14.199" endtime="20210731 21:38:14.214"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:14.176" endtime="20210731 21:38:14.214"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:14.223" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:14.234" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:14.234" level="INFO">${pids} = 5618
5625
5629</msg>
<status status="PASS" starttime="20210731 21:38:14.215" endtime="20210731 21:38:14.234"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:14.235" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:14.234" endtime="20210731 21:38:14.235"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:14.236" level="INFO">${pids} = ['5618', '5625', '5629']</msg>
<status status="PASS" starttime="20210731 21:38:14.236" endtime="20210731 21:38:14.236"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5618</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:14.240" level="INFO">Running command 'kill 5618 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:14.237" endtime="20210731 21:38:14.241"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.237" endtime="20210731 21:38:14.241"/>
</iter>
<iter>
<var name="${pid}">5625</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:14.244" level="INFO">Running command 'kill 5625 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:14.241" endtime="20210731 21:38:14.245"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.241" endtime="20210731 21:38:14.245"/>
</iter>
<iter>
<var name="${pid}">5629</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:14.248" level="INFO">Running command 'kill 5629 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:14.245" endtime="20210731 21:38:14.249"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.245" endtime="20210731 21:38:14.249"/>
</iter>
<status status="PASS" starttime="20210731 21:38:14.236" endtime="20210731 21:38:14.249"/>
</for>
<status status="PASS" starttime="20210731 21:38:14.236" endtime="20210731 21:38:14.249"/>
</branch>
<status status="PASS" starttime="20210731 21:38:14.235" endtime="20210731 21:38:14.249"/>
</if>
<status status="PASS" starttime="20210731 21:38:14.215" endtime="20210731 21:38:14.249"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcd fg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:12.599" endtime="20210731 21:38:14.249">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t30" name="With Each Valid Token, Updating Username Of Each System User With ab defgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:14.275" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:14.293" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:14.293" level="INFO">${pids} = 5658</msg>
<status status="PASS" starttime="20210731 21:38:14.252" endtime="20210731 21:38:14.293"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:14.294" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:14.293" endtime="20210731 21:38:14.294"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:14.295" level="INFO">${pids} = ['5658']</msg>
<status status="PASS" starttime="20210731 21:38:14.294" endtime="20210731 21:38:14.295"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5658</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:14.309" level="INFO">Running command 'kill 5658 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:14.295" endtime="20210731 21:38:14.310"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.295" endtime="20210731 21:38:14.310"/>
</iter>
<status status="PASS" starttime="20210731 21:38:14.295" endtime="20210731 21:38:14.310"/>
</for>
<status status="PASS" starttime="20210731 21:38:14.294" endtime="20210731 21:38:14.310"/>
</branch>
<status status="PASS" starttime="20210731 21:38:14.294" endtime="20210731 21:38:14.310"/>
</if>
<status status="PASS" starttime="20210731 21:38:14.251" endtime="20210731 21:38:14.311"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:14.312" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:14.312" endtime="20210731 21:38:14.312"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:14.313" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:14.313" endtime="20210731 21:38:14.313"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:14.314" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:14.313" endtime="20210731 21:38:14.314"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:14.314" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:14.314" endtime="20210731 21:38:14.314"/>
</kw>
<msg timestamp="20210731 21:38:14.314" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:14.313" endtime="20210731 21:38:14.315"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:14.318" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:14.315" endtime="20210731 21:38:14.320"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.311" endtime="20210731 21:38:14.320"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:14.322" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:14.321" endtime="20210731 21:38:14.326"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:15.828" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:14.327" endtime="20210731 21:38:15.829"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.320" endtime="20210731 21:38:15.829"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:15.830" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:15.830" endtime="20210731 21:38:15.830"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:15.831" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:15.831" endtime="20210731 21:38:15.831"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:15.831" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:15.831" endtime="20210731 21:38:15.831"/>
</kw>
<msg timestamp="20210731 21:38:15.832" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:15.830" endtime="20210731 21:38:15.832"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:15.832" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:15.832" endtime="20210731 21:38:15.833"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.829" endtime="20210731 21:38:15.833"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:15.834" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:15.834" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:15.833" endtime="20210731 21:38:15.834"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.833" endtime="20210731 21:38:15.834"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:15.835" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:15.835" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:15.834" endtime="20210731 21:38:15.835"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:15.836" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:15.835" endtime="20210731 21:38:15.836"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:15.837" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:15.837" endtime="20210731 21:38:15.837"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:15.837" endtime="20210731 21:38:15.838"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:15.838" endtime="20210731 21:38:15.839"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.836" endtime="20210731 21:38:15.839"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:15.839" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:15.839" endtime="20210731 21:38:15.839"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:15.839" endtime="20210731 21:38:15.840"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:15.840" endtime="20210731 21:38:15.840"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.839" endtime="20210731 21:38:15.840"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:15.841" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:15.841" endtime="20210731 21:38:15.841"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:15.841" endtime="20210731 21:38:15.842"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:15.842" endtime="20210731 21:38:15.842"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.841" endtime="20210731 21:38:15.842"/>
</iter>
<status status="PASS" starttime="20210731 21:38:15.836" endtime="20210731 21:38:15.842"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:15.843" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:15.842" endtime="20210731 21:38:15.843"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.834" endtime="20210731 21:38:15.843"/>
</kw>
<status status="PASS" starttime="20210731 21:38:14.251" endtime="20210731 21:38:15.843"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:15.845" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:15.844" endtime="20210731 21:38:15.845"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:15.845" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210731 21:38:15.845" endtime="20210731 21:38:15.845"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:15.858" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:15.858" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:15.845" endtime="20210731 21:38:15.858"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:15.859" endtime="20210731 21:38:15.859"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:15.859" endtime="20210731 21:38:15.859"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:15.845" endtime="20210731 21:38:15.859"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:15.845" endtime="20210731 21:38:15.859"/>
</for>
<status status="FAIL" starttime="20210731 21:38:15.844" endtime="20210731 21:38:15.859"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:15.844" endtime="20210731 21:38:15.859"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:15.860" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:15.860" endtime="20210731 21:38:15.860"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:15.861" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210731 21:38:15.860" endtime="20210731 21:38:15.861"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:15.865" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:15.866" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:15.861" endtime="20210731 21:38:15.866"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:15.866" endtime="20210731 21:38:15.866"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:15.866" endtime="20210731 21:38:15.866"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:15.861" endtime="20210731 21:38:15.866"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:15.861" endtime="20210731 21:38:15.866"/>
</for>
<status status="FAIL" starttime="20210731 21:38:15.859" endtime="20210731 21:38:15.866"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:15.859" endtime="20210731 21:38:15.866"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:15.868" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:15.867" endtime="20210731 21:38:15.868"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:15.868" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210731 21:38:15.868" endtime="20210731 21:38:15.868"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:15.882" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:15.883" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:15.869" endtime="20210731 21:38:15.883"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:15.883" endtime="20210731 21:38:15.883"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:15.883" endtime="20210731 21:38:15.883"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:15.868" endtime="20210731 21:38:15.883"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:15.868" endtime="20210731 21:38:15.883"/>
</for>
<status status="FAIL" starttime="20210731 21:38:15.867" endtime="20210731 21:38:15.883"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:15.867" endtime="20210731 21:38:15.883"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:15.843" endtime="20210731 21:38:15.883"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:15.888" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:15.899" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:15.899" level="INFO">${pids} = 5681
5688
5693</msg>
<status status="PASS" starttime="20210731 21:38:15.884" endtime="20210731 21:38:15.899"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:15.900" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:15.899" endtime="20210731 21:38:15.900"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:15.901" level="INFO">${pids} = ['5681', '5688', '5693']</msg>
<status status="PASS" starttime="20210731 21:38:15.900" endtime="20210731 21:38:15.901"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5681</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:15.909" level="INFO">Running command 'kill 5681 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:15.901" endtime="20210731 21:38:15.910"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.901" endtime="20210731 21:38:15.910"/>
</iter>
<iter>
<var name="${pid}">5688</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:15.914" level="INFO">Running command 'kill 5688 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:15.911" endtime="20210731 21:38:15.916"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.910" endtime="20210731 21:38:15.916"/>
</iter>
<iter>
<var name="${pid}">5693</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:15.922" level="INFO">Running command 'kill 5693 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:15.917" endtime="20210731 21:38:15.923"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.916" endtime="20210731 21:38:15.923"/>
</iter>
<status status="PASS" starttime="20210731 21:38:15.901" endtime="20210731 21:38:15.923"/>
</for>
<status status="PASS" starttime="20210731 21:38:15.900" endtime="20210731 21:38:15.923"/>
</branch>
<status status="PASS" starttime="20210731 21:38:15.900" endtime="20210731 21:38:15.923"/>
</if>
<status status="PASS" starttime="20210731 21:38:15.884" endtime="20210731 21:38:15.923"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'ab defgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:14.250" endtime="20210731 21:38:15.926">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t31" name="With Each Valid Token, Updating Username Of Each System User With abcdefghijklmnp stop Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:15.942" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:15.954" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:15.954" level="INFO">${pids} = 5722</msg>
<status status="PASS" starttime="20210731 21:38:15.933" endtime="20210731 21:38:15.954"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:15.955" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:15.954" endtime="20210731 21:38:15.955"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:15.956" level="INFO">${pids} = ['5722']</msg>
<status status="PASS" starttime="20210731 21:38:15.955" endtime="20210731 21:38:15.956"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5722</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:15.959" level="INFO">Running command 'kill 5722 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:15.956" endtime="20210731 21:38:15.959"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.956" endtime="20210731 21:38:15.960"/>
</iter>
<status status="PASS" starttime="20210731 21:38:15.956" endtime="20210731 21:38:15.960"/>
</for>
<status status="PASS" starttime="20210731 21:38:15.955" endtime="20210731 21:38:15.960"/>
</branch>
<status status="PASS" starttime="20210731 21:38:15.955" endtime="20210731 21:38:15.960"/>
</if>
<status status="PASS" starttime="20210731 21:38:15.933" endtime="20210731 21:38:15.960"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:15.962" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:15.961" endtime="20210731 21:38:15.962"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:15.962" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:15.962" endtime="20210731 21:38:15.963"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:15.963" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:15.963" endtime="20210731 21:38:15.963"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:15.963" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:15.963" endtime="20210731 21:38:15.963"/>
</kw>
<msg timestamp="20210731 21:38:15.964" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:15.962" endtime="20210731 21:38:15.964"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:15.993" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:15.964" endtime="20210731 21:38:15.994"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.960" endtime="20210731 21:38:15.995"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:15.996" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:15.996" endtime="20210731 21:38:16.000"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:17.502" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:16.001" endtime="20210731 21:38:17.502"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.995" endtime="20210731 21:38:17.503"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:17.506" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:17.504" endtime="20210731 21:38:17.506"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:17.507" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:17.507" endtime="20210731 21:38:17.507"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:17.508" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:17.507" endtime="20210731 21:38:17.508"/>
</kw>
<msg timestamp="20210731 21:38:17.508" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:17.503" endtime="20210731 21:38:17.508"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:17.508" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:17.508" endtime="20210731 21:38:17.509"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.503" endtime="20210731 21:38:17.509"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:17.510" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:17.510" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:17.509" endtime="20210731 21:38:17.510"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.509" endtime="20210731 21:38:17.510"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:17.511" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:17.511" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:17.510" endtime="20210731 21:38:17.511"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:17.511" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:17.511" endtime="20210731 21:38:17.511"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:17.512" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:17.511" endtime="20210731 21:38:17.512"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:17.512" endtime="20210731 21:38:17.513"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:17.513" endtime="20210731 21:38:17.513"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.511" endtime="20210731 21:38:17.513"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:17.514" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:17.514" endtime="20210731 21:38:17.514"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:17.514" endtime="20210731 21:38:17.515"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:17.515" endtime="20210731 21:38:17.515"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.513" endtime="20210731 21:38:17.515"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:17.516" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:17.515" endtime="20210731 21:38:17.516"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:17.516" endtime="20210731 21:38:17.517"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:17.517" endtime="20210731 21:38:17.518"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.515" endtime="20210731 21:38:17.518"/>
</iter>
<status status="PASS" starttime="20210731 21:38:17.511" endtime="20210731 21:38:17.518"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:17.518" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:17.518" endtime="20210731 21:38:17.518"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.510" endtime="20210731 21:38:17.519"/>
</kw>
<status status="PASS" starttime="20210731 21:38:15.932" endtime="20210731 21:38:17.519"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:17.522" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:17.520" endtime="20210731 21:38:17.522"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:17.523" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210731 21:38:17.522" endtime="20210731 21:38:17.523"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:17.540" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:17.540" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:17.524" endtime="20210731 21:38:17.540"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:17.540" endtime="20210731 21:38:17.541"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:17.541" endtime="20210731 21:38:17.541"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:17.524" endtime="20210731 21:38:17.541"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:17.523" endtime="20210731 21:38:17.541"/>
</for>
<status status="FAIL" starttime="20210731 21:38:17.519" endtime="20210731 21:38:17.541"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:17.519" endtime="20210731 21:38:17.541"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:17.542" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:17.542" endtime="20210731 21:38:17.542"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:17.543" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210731 21:38:17.542" endtime="20210731 21:38:17.543"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:17.547" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:17.548" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:17.543" endtime="20210731 21:38:17.548"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:17.548" endtime="20210731 21:38:17.548"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:17.548" endtime="20210731 21:38:17.548"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:17.543" endtime="20210731 21:38:17.548"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:17.543" endtime="20210731 21:38:17.548"/>
</for>
<status status="FAIL" starttime="20210731 21:38:17.541" endtime="20210731 21:38:17.548"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:17.541" endtime="20210731 21:38:17.549"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:17.552" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:17.551" endtime="20210731 21:38:17.552"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:17.563" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210731 21:38:17.552" endtime="20210731 21:38:17.563"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:17.568" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:17.569" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:17.564" endtime="20210731 21:38:17.569"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:17.569" endtime="20210731 21:38:17.569"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:17.570" endtime="20210731 21:38:17.570"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:17.563" endtime="20210731 21:38:17.570"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:17.563" endtime="20210731 21:38:17.570"/>
</for>
<status status="FAIL" starttime="20210731 21:38:17.549" endtime="20210731 21:38:17.571"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:17.549" endtime="20210731 21:38:17.571"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:17.519" endtime="20210731 21:38:17.571"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:17.576" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:17.597" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:17.597" level="INFO">${pids} = 5745
5752
5757</msg>
<status status="PASS" starttime="20210731 21:38:17.572" endtime="20210731 21:38:17.597"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:17.598" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:17.598" endtime="20210731 21:38:17.598"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:17.599" level="INFO">${pids} = ['5745', '5752', '5757']</msg>
<status status="PASS" starttime="20210731 21:38:17.599" endtime="20210731 21:38:17.599"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5745</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:17.605" level="INFO">Running command 'kill 5745 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:17.600" endtime="20210731 21:38:17.606"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.599" endtime="20210731 21:38:17.606"/>
</iter>
<iter>
<var name="${pid}">5752</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:17.610" level="INFO">Running command 'kill 5752 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:17.607" endtime="20210731 21:38:17.610"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.606" endtime="20210731 21:38:17.610"/>
</iter>
<iter>
<var name="${pid}">5757</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:17.614" level="INFO">Running command 'kill 5757 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:17.611" endtime="20210731 21:38:17.615"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.611" endtime="20210731 21:38:17.615"/>
</iter>
<status status="PASS" starttime="20210731 21:38:17.599" endtime="20210731 21:38:17.615"/>
</for>
<status status="PASS" starttime="20210731 21:38:17.599" endtime="20210731 21:38:17.615"/>
</branch>
<status status="PASS" starttime="20210731 21:38:17.599" endtime="20210731 21:38:17.615"/>
</if>
<status status="PASS" starttime="20210731 21:38:17.572" endtime="20210731 21:38:17.615"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefghijklmnp stop'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:15.927" endtime="20210731 21:38:17.616">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t32" name="With Each Valid Token, Updating Username Of Each System User With haka 12 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:17.623" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:17.636" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:17.636" level="INFO">${pids} = 5786</msg>
<status status="PASS" starttime="20210731 21:38:17.618" endtime="20210731 21:38:17.636"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:17.639" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:17.637" endtime="20210731 21:38:17.639"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:17.640" level="INFO">${pids} = ['5786']</msg>
<status status="PASS" starttime="20210731 21:38:17.640" endtime="20210731 21:38:17.640"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5786</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:17.645" level="INFO">Running command 'kill 5786 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:17.641" endtime="20210731 21:38:17.646"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.641" endtime="20210731 21:38:17.646"/>
</iter>
<status status="PASS" starttime="20210731 21:38:17.640" endtime="20210731 21:38:17.646"/>
</for>
<status status="PASS" starttime="20210731 21:38:17.639" endtime="20210731 21:38:17.646"/>
</branch>
<status status="PASS" starttime="20210731 21:38:17.639" endtime="20210731 21:38:17.647"/>
</if>
<status status="PASS" starttime="20210731 21:38:17.618" endtime="20210731 21:38:17.647"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:17.648" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:17.648" endtime="20210731 21:38:17.648"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:17.649" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:17.649" endtime="20210731 21:38:17.649"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:17.650" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:17.649" endtime="20210731 21:38:17.650"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:17.650" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:17.650" endtime="20210731 21:38:17.650"/>
</kw>
<msg timestamp="20210731 21:38:17.651" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:17.648" endtime="20210731 21:38:17.651"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:17.656" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:17.651" endtime="20210731 21:38:17.658"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.647" endtime="20210731 21:38:17.658"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:17.659" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:17.659" endtime="20210731 21:38:17.686"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:19.188" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:17.687" endtime="20210731 21:38:19.188"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.658" endtime="20210731 21:38:19.189"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:19.191" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:19.190" endtime="20210731 21:38:19.191"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:19.191" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:19.191" endtime="20210731 21:38:19.191"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:19.191" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:19.191" endtime="20210731 21:38:19.191"/>
</kw>
<msg timestamp="20210731 21:38:19.192" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:19.189" endtime="20210731 21:38:19.192"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:19.192" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:19.192" endtime="20210731 21:38:19.193"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.189" endtime="20210731 21:38:19.193"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:19.193" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:19.193" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:19.193" endtime="20210731 21:38:19.194"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.193" endtime="20210731 21:38:19.194"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:19.194" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:19.195" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:19.194" endtime="20210731 21:38:19.195"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:19.195" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:19.195" endtime="20210731 21:38:19.195"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:19.196" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:19.195" endtime="20210731 21:38:19.196"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:19.196" endtime="20210731 21:38:19.197"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:19.197" endtime="20210731 21:38:19.197"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.195" endtime="20210731 21:38:19.197"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:19.198" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:19.197" endtime="20210731 21:38:19.198"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:19.198" endtime="20210731 21:38:19.199"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:19.199" endtime="20210731 21:38:19.199"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.197" endtime="20210731 21:38:19.199"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:19.199" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:19.199" endtime="20210731 21:38:19.199"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:19.200" endtime="20210731 21:38:19.200"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:19.201" endtime="20210731 21:38:19.201"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.199" endtime="20210731 21:38:19.201"/>
</iter>
<status status="PASS" starttime="20210731 21:38:19.195" endtime="20210731 21:38:19.201"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:19.201" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:19.201" endtime="20210731 21:38:19.202"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.194" endtime="20210731 21:38:19.202"/>
</kw>
<status status="PASS" starttime="20210731 21:38:17.617" endtime="20210731 21:38:19.202"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:19.203" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:19.203" endtime="20210731 21:38:19.203"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:19.204" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210731 21:38:19.203" endtime="20210731 21:38:19.204"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:19.217" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:19.217" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:19.204" endtime="20210731 21:38:19.217"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:19.218" endtime="20210731 21:38:19.218"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:19.218" endtime="20210731 21:38:19.218"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:19.204" endtime="20210731 21:38:19.218"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:19.204" endtime="20210731 21:38:19.218"/>
</for>
<status status="FAIL" starttime="20210731 21:38:19.202" endtime="20210731 21:38:19.218"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:19.202" endtime="20210731 21:38:19.218"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:19.220" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:19.219" endtime="20210731 21:38:19.220"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:19.220" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210731 21:38:19.220" endtime="20210731 21:38:19.220"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:19.225" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:19.225" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:19.221" endtime="20210731 21:38:19.226"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:19.226" endtime="20210731 21:38:19.226"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:19.226" endtime="20210731 21:38:19.226"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:19.221" endtime="20210731 21:38:19.226"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:19.220" endtime="20210731 21:38:19.226"/>
</for>
<status status="FAIL" starttime="20210731 21:38:19.218" endtime="20210731 21:38:19.226"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:19.218" endtime="20210731 21:38:19.226"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:19.228" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:19.227" endtime="20210731 21:38:19.228"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:19.228" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210731 21:38:19.228" endtime="20210731 21:38:19.228"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:19.242" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:19.242" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:19.229" endtime="20210731 21:38:19.242"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:19.242" endtime="20210731 21:38:19.242"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:19.242" endtime="20210731 21:38:19.242"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:19.228" endtime="20210731 21:38:19.242"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:19.228" endtime="20210731 21:38:19.242"/>
</for>
<status status="FAIL" starttime="20210731 21:38:19.226" endtime="20210731 21:38:19.243"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:19.226" endtime="20210731 21:38:19.243"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:19.202" endtime="20210731 21:38:19.243"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:19.247" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:19.259" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:19.259" level="INFO">${pids} = 5809
5816
5820</msg>
<status status="PASS" starttime="20210731 21:38:19.244" endtime="20210731 21:38:19.259"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:19.260" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:19.259" endtime="20210731 21:38:19.260"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:19.261" level="INFO">${pids} = ['5809', '5816', '5820']</msg>
<status status="PASS" starttime="20210731 21:38:19.260" endtime="20210731 21:38:19.261"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5809</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:19.266" level="INFO">Running command 'kill 5809 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:19.261" endtime="20210731 21:38:19.266"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.261" endtime="20210731 21:38:19.266"/>
</iter>
<iter>
<var name="${pid}">5816</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:19.270" level="INFO">Running command 'kill 5816 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:19.267" endtime="20210731 21:38:19.271"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.267" endtime="20210731 21:38:19.271"/>
</iter>
<iter>
<var name="${pid}">5820</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:19.276" level="INFO">Running command 'kill 5820 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:19.271" endtime="20210731 21:38:19.276"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.271" endtime="20210731 21:38:19.277"/>
</iter>
<status status="PASS" starttime="20210731 21:38:19.261" endtime="20210731 21:38:19.277"/>
</for>
<status status="PASS" starttime="20210731 21:38:19.260" endtime="20210731 21:38:19.277"/>
</branch>
<status status="PASS" starttime="20210731 21:38:19.260" endtime="20210731 21:38:19.277"/>
</if>
<status status="PASS" starttime="20210731 21:38:19.243" endtime="20210731 21:38:19.277"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 12'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:17.616" endtime="20210731 21:38:19.277">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t33" name="With Each Valid Token, Updating Username Of Each System User With haka 123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:19.297" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:19.308" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:19.308" level="INFO">${pids} = 5850</msg>
<status status="PASS" starttime="20210731 21:38:19.280" endtime="20210731 21:38:19.308"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:19.310" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:19.309" endtime="20210731 21:38:19.310"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:19.310" level="INFO">${pids} = ['5850']</msg>
<status status="PASS" starttime="20210731 21:38:19.310" endtime="20210731 21:38:19.310"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5850</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:19.340" level="INFO">Running command 'kill 5850 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:19.311" endtime="20210731 21:38:19.340"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.311" endtime="20210731 21:38:19.341"/>
</iter>
<status status="PASS" starttime="20210731 21:38:19.310" endtime="20210731 21:38:19.341"/>
</for>
<status status="PASS" starttime="20210731 21:38:19.310" endtime="20210731 21:38:19.341"/>
</branch>
<status status="PASS" starttime="20210731 21:38:19.310" endtime="20210731 21:38:19.341"/>
</if>
<status status="PASS" starttime="20210731 21:38:19.279" endtime="20210731 21:38:19.341"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:19.343" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:19.342" endtime="20210731 21:38:19.343"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:19.343" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:19.343" endtime="20210731 21:38:19.343"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:19.344" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:19.343" endtime="20210731 21:38:19.344"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:19.344" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:19.344" endtime="20210731 21:38:19.344"/>
</kw>
<msg timestamp="20210731 21:38:19.345" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:19.343" endtime="20210731 21:38:19.345"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:19.348" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:19.345" endtime="20210731 21:38:19.350"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.341" endtime="20210731 21:38:19.350"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:19.352" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:19.351" endtime="20210731 21:38:19.357"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:20.858" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:19.357" endtime="20210731 21:38:20.858"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.351" endtime="20210731 21:38:20.858"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:20.860" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:20.860" endtime="20210731 21:38:20.860"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:20.861" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:20.860" endtime="20210731 21:38:20.861"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:20.861" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:20.861" endtime="20210731 21:38:20.861"/>
</kw>
<msg timestamp="20210731 21:38:20.862" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:20.859" endtime="20210731 21:38:20.862"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:20.862" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:20.862" endtime="20210731 21:38:20.862"/>
</kw>
<status status="PASS" starttime="20210731 21:38:20.859" endtime="20210731 21:38:20.863"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:20.863" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:20.863" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:20.863" endtime="20210731 21:38:20.864"/>
</kw>
<status status="PASS" starttime="20210731 21:38:20.863" endtime="20210731 21:38:20.864"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:20.864" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:20.865" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:20.864" endtime="20210731 21:38:20.865"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:20.865" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:20.865" endtime="20210731 21:38:20.865"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:20.866" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:20.865" endtime="20210731 21:38:20.866"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:20.866" endtime="20210731 21:38:20.867"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:20.867" endtime="20210731 21:38:20.867"/>
</kw>
<status status="PASS" starttime="20210731 21:38:20.865" endtime="20210731 21:38:20.867"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:20.868" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:20.867" endtime="20210731 21:38:20.868"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:20.868" endtime="20210731 21:38:20.869"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:20.869" endtime="20210731 21:38:20.869"/>
</kw>
<status status="PASS" starttime="20210731 21:38:20.867" endtime="20210731 21:38:20.869"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:20.870" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:20.870" endtime="20210731 21:38:20.870"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:20.870" endtime="20210731 21:38:20.871"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:20.871" endtime="20210731 21:38:20.871"/>
</kw>
<status status="PASS" starttime="20210731 21:38:20.869" endtime="20210731 21:38:20.871"/>
</iter>
<status status="PASS" starttime="20210731 21:38:20.865" endtime="20210731 21:38:20.871"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:20.872" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:20.872" endtime="20210731 21:38:20.872"/>
</kw>
<status status="PASS" starttime="20210731 21:38:20.864" endtime="20210731 21:38:20.872"/>
</kw>
<status status="PASS" starttime="20210731 21:38:19.279" endtime="20210731 21:38:20.872"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:20.874" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:20.873" endtime="20210731 21:38:20.874"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:20.874" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210731 21:38:20.874" endtime="20210731 21:38:20.874"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:20.886" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:20.886" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:20.875" endtime="20210731 21:38:20.887"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:20.887" endtime="20210731 21:38:20.887"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:20.887" endtime="20210731 21:38:20.887"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:20.875" endtime="20210731 21:38:20.887"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:20.874" endtime="20210731 21:38:20.887"/>
</for>
<status status="FAIL" starttime="20210731 21:38:20.873" endtime="20210731 21:38:20.887"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:20.873" endtime="20210731 21:38:20.888"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:20.889" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:20.888" endtime="20210731 21:38:20.889"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:20.889" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210731 21:38:20.889" endtime="20210731 21:38:20.889"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:20.894" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:20.894" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:20.890" endtime="20210731 21:38:20.894"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:20.895" endtime="20210731 21:38:20.895"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:20.895" endtime="20210731 21:38:20.895"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:20.890" endtime="20210731 21:38:20.895"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:20.889" endtime="20210731 21:38:20.895"/>
</for>
<status status="FAIL" starttime="20210731 21:38:20.888" endtime="20210731 21:38:20.895"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:20.888" endtime="20210731 21:38:20.895"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:20.897" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:20.896" endtime="20210731 21:38:20.897"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:20.897" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210731 21:38:20.897" endtime="20210731 21:38:20.897"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:20.905" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:20.905" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:20.898" endtime="20210731 21:38:20.913"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:20.913" endtime="20210731 21:38:20.913"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:20.914" endtime="20210731 21:38:20.914"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:20.898" endtime="20210731 21:38:20.914"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:20.897" endtime="20210731 21:38:20.914"/>
</for>
<status status="FAIL" starttime="20210731 21:38:20.895" endtime="20210731 21:38:20.914"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:20.895" endtime="20210731 21:38:20.914"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:20.873" endtime="20210731 21:38:20.914"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:20.918" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:20.936" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:20.936" level="INFO">${pids} = 5873
5880
5884</msg>
<status status="PASS" starttime="20210731 21:38:20.915" endtime="20210731 21:38:20.936"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:20.937" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:20.937" endtime="20210731 21:38:20.937"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:20.938" level="INFO">${pids} = ['5873', '5880', '5884']</msg>
<status status="PASS" starttime="20210731 21:38:20.938" endtime="20210731 21:38:20.938"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5873</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:20.950" level="INFO">Running command 'kill 5873 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:20.939" endtime="20210731 21:38:20.951"/>
</kw>
<status status="PASS" starttime="20210731 21:38:20.938" endtime="20210731 21:38:20.951"/>
</iter>
<iter>
<var name="${pid}">5880</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:20.955" level="INFO">Running command 'kill 5880 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:20.952" endtime="20210731 21:38:20.956"/>
</kw>
<status status="PASS" starttime="20210731 21:38:20.952" endtime="20210731 21:38:20.956"/>
</iter>
<iter>
<var name="${pid}">5884</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:20.960" level="INFO">Running command 'kill 5884 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:20.956" endtime="20210731 21:38:20.961"/>
</kw>
<status status="PASS" starttime="20210731 21:38:20.956" endtime="20210731 21:38:20.961"/>
</iter>
<status status="PASS" starttime="20210731 21:38:20.938" endtime="20210731 21:38:20.961"/>
</for>
<status status="PASS" starttime="20210731 21:38:20.938" endtime="20210731 21:38:20.961"/>
</branch>
<status status="PASS" starttime="20210731 21:38:20.937" endtime="20210731 21:38:20.961"/>
</if>
<status status="PASS" starttime="20210731 21:38:20.915" endtime="20210731 21:38:20.961"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:19.278" endtime="20210731 21:38:20.961">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t34" name="With Each Valid Token, Updating Username Of Each System User With haka 123456789123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:20.971" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:20.983" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:20.983" level="INFO">${pids} = 5913</msg>
<status status="PASS" starttime="20210731 21:38:20.964" endtime="20210731 21:38:20.983"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:20.984" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:20.984" endtime="20210731 21:38:20.984"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:20.986" level="INFO">${pids} = ['5913']</msg>
<status status="PASS" starttime="20210731 21:38:20.985" endtime="20210731 21:38:20.986"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5913</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:21.013" level="INFO">Running command 'kill 5913 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:20.986" endtime="20210731 21:38:21.014"/>
</kw>
<status status="PASS" starttime="20210731 21:38:20.986" endtime="20210731 21:38:21.014"/>
</iter>
<status status="PASS" starttime="20210731 21:38:20.986" endtime="20210731 21:38:21.015"/>
</for>
<status status="PASS" starttime="20210731 21:38:20.985" endtime="20210731 21:38:21.015"/>
</branch>
<status status="PASS" starttime="20210731 21:38:20.985" endtime="20210731 21:38:21.015"/>
</if>
<status status="PASS" starttime="20210731 21:38:20.963" endtime="20210731 21:38:21.015"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:21.016" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:21.016" endtime="20210731 21:38:21.016"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:21.017" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:21.017" endtime="20210731 21:38:21.017"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:21.018" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:21.017" endtime="20210731 21:38:21.018"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:21.018" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:21.018" endtime="20210731 21:38:21.018"/>
</kw>
<msg timestamp="20210731 21:38:21.019" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:21.017" endtime="20210731 21:38:21.019"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:21.033" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:21.019" endtime="20210731 21:38:21.034"/>
</kw>
<status status="PASS" starttime="20210731 21:38:21.015" endtime="20210731 21:38:21.035"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:21.036" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:21.036" endtime="20210731 21:38:21.041"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:22.542" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:21.041" endtime="20210731 21:38:22.543"/>
</kw>
<status status="PASS" starttime="20210731 21:38:21.035" endtime="20210731 21:38:22.543"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:22.544" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:22.544" endtime="20210731 21:38:22.544"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:22.544" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:22.544" endtime="20210731 21:38:22.544"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:22.545" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:22.545" endtime="20210731 21:38:22.545"/>
</kw>
<msg timestamp="20210731 21:38:22.545" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:22.543" endtime="20210731 21:38:22.545"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:22.546" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:22.545" endtime="20210731 21:38:22.546"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.543" endtime="20210731 21:38:22.546"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:22.547" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:22.547" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:22.547" endtime="20210731 21:38:22.547"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.546" endtime="20210731 21:38:22.547"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:22.548" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:22.548" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:22.548" endtime="20210731 21:38:22.548"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:22.548" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:22.548" endtime="20210731 21:38:22.548"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:22.549" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:22.549" endtime="20210731 21:38:22.549"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:22.549" endtime="20210731 21:38:22.550"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:22.550" endtime="20210731 21:38:22.551"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.549" endtime="20210731 21:38:22.551"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:22.551" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:22.551" endtime="20210731 21:38:22.551"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:22.551" endtime="20210731 21:38:22.552"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:22.553" endtime="20210731 21:38:22.554"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.551" endtime="20210731 21:38:22.554"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:22.556" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:22.555" endtime="20210731 21:38:22.556"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:22.556" endtime="20210731 21:38:22.557"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:22.557" endtime="20210731 21:38:22.558"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.554" endtime="20210731 21:38:22.558"/>
</iter>
<status status="PASS" starttime="20210731 21:38:22.548" endtime="20210731 21:38:22.558"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:22.558" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:22.558" endtime="20210731 21:38:22.558"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.547" endtime="20210731 21:38:22.559"/>
</kw>
<status status="PASS" starttime="20210731 21:38:20.963" endtime="20210731 21:38:22.559"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:22.560" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:22.560" endtime="20210731 21:38:22.560"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:22.560" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210731 21:38:22.560" endtime="20210731 21:38:22.561"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:22.573" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:22.573" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:22.561" endtime="20210731 21:38:22.574"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:22.574" endtime="20210731 21:38:22.574"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:22.574" endtime="20210731 21:38:22.574"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:22.561" endtime="20210731 21:38:22.574"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:22.561" endtime="20210731 21:38:22.574"/>
</for>
<status status="FAIL" starttime="20210731 21:38:22.559" endtime="20210731 21:38:22.574"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:22.559" endtime="20210731 21:38:22.574"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:22.576" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:22.575" endtime="20210731 21:38:22.576"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:22.576" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210731 21:38:22.576" endtime="20210731 21:38:22.576"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:22.581" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:22.581" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:22.576" endtime="20210731 21:38:22.581"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:22.582" endtime="20210731 21:38:22.582"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:22.582" endtime="20210731 21:38:22.582"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:22.576" endtime="20210731 21:38:22.582"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:22.576" endtime="20210731 21:38:22.582"/>
</for>
<status status="FAIL" starttime="20210731 21:38:22.575" endtime="20210731 21:38:22.582"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:22.574" endtime="20210731 21:38:22.582"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:22.583" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:22.583" endtime="20210731 21:38:22.583"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:22.584" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210731 21:38:22.583" endtime="20210731 21:38:22.584"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:22.593" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:22.593" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:22.584" endtime="20210731 21:38:22.593"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:22.593" endtime="20210731 21:38:22.600"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:22.601" endtime="20210731 21:38:22.601"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:22.584" endtime="20210731 21:38:22.601"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:22.584" endtime="20210731 21:38:22.601"/>
</for>
<status status="FAIL" starttime="20210731 21:38:22.582" endtime="20210731 21:38:22.601"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:22.582" endtime="20210731 21:38:22.601"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:22.559" endtime="20210731 21:38:22.601"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:22.608" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:22.620" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:22.621" level="INFO">${pids} = 5938
5945
5950</msg>
<status status="PASS" starttime="20210731 21:38:22.602" endtime="20210731 21:38:22.621"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:22.622" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:22.621" endtime="20210731 21:38:22.622"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:22.622" level="INFO">${pids} = ['5938', '5945', '5950']</msg>
<status status="PASS" starttime="20210731 21:38:22.622" endtime="20210731 21:38:22.623"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5938</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:22.626" level="INFO">Running command 'kill 5938 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:22.623" endtime="20210731 21:38:22.627"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.623" endtime="20210731 21:38:22.627"/>
</iter>
<iter>
<var name="${pid}">5945</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:22.631" level="INFO">Running command 'kill 5945 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:22.628" endtime="20210731 21:38:22.634"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.627" endtime="20210731 21:38:22.634"/>
</iter>
<iter>
<var name="${pid}">5950</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:22.639" level="INFO">Running command 'kill 5950 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:22.634" endtime="20210731 21:38:22.640"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.634" endtime="20210731 21:38:22.640"/>
</iter>
<status status="PASS" starttime="20210731 21:38:22.623" endtime="20210731 21:38:22.640"/>
</for>
<status status="PASS" starttime="20210731 21:38:22.622" endtime="20210731 21:38:22.640"/>
</branch>
<status status="PASS" starttime="20210731 21:38:22.622" endtime="20210731 21:38:22.640"/>
</if>
<status status="PASS" starttime="20210731 21:38:22.602" endtime="20210731 21:38:22.640"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 123456789123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:20.962" endtime="20210731 21:38:22.640">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t35" name="With Each Valid Token, Updating Username Of Each System User With #¤% 23! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:22.653" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:22.678" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:22.678" level="INFO">${pids} = 5979</msg>
<status status="PASS" starttime="20210731 21:38:22.643" endtime="20210731 21:38:22.678"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:22.679" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:22.679" endtime="20210731 21:38:22.679"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:22.680" level="INFO">${pids} = ['5979']</msg>
<status status="PASS" starttime="20210731 21:38:22.680" endtime="20210731 21:38:22.680"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">5979</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:22.691" level="INFO">Running command 'kill 5979 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:22.681" endtime="20210731 21:38:22.692"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.680" endtime="20210731 21:38:22.692"/>
</iter>
<status status="PASS" starttime="20210731 21:38:22.680" endtime="20210731 21:38:22.692"/>
</for>
<status status="PASS" starttime="20210731 21:38:22.680" endtime="20210731 21:38:22.692"/>
</branch>
<status status="PASS" starttime="20210731 21:38:22.679" endtime="20210731 21:38:22.692"/>
</if>
<status status="PASS" starttime="20210731 21:38:22.642" endtime="20210731 21:38:22.693"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:22.694" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:22.694" endtime="20210731 21:38:22.694"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:22.695" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:22.695" endtime="20210731 21:38:22.695"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:22.696" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:22.695" endtime="20210731 21:38:22.696"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:22.696" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:22.696" endtime="20210731 21:38:22.696"/>
</kw>
<msg timestamp="20210731 21:38:22.696" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:22.694" endtime="20210731 21:38:22.697"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:22.700" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:22.697" endtime="20210731 21:38:22.702"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.693" endtime="20210731 21:38:22.702"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:22.704" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:22.703" endtime="20210731 21:38:22.708"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:24.209" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:22.709" endtime="20210731 21:38:24.210"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.702" endtime="20210731 21:38:24.210"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:24.211" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:24.211" endtime="20210731 21:38:24.211"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:24.212" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:24.211" endtime="20210731 21:38:24.212"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:24.212" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:24.212" endtime="20210731 21:38:24.212"/>
</kw>
<msg timestamp="20210731 21:38:24.213" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:24.211" endtime="20210731 21:38:24.213"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:24.213" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:24.213" endtime="20210731 21:38:24.214"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.210" endtime="20210731 21:38:24.214"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:24.214" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:24.214" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:24.214" endtime="20210731 21:38:24.215"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.214" endtime="20210731 21:38:24.215"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:24.215" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:24.216" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:24.215" endtime="20210731 21:38:24.216"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:24.216" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:24.216" endtime="20210731 21:38:24.216"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:24.217" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:24.216" endtime="20210731 21:38:24.217"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:24.217" endtime="20210731 21:38:24.218"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:24.218" endtime="20210731 21:38:24.218"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.216" endtime="20210731 21:38:24.218"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:24.219" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:24.219" endtime="20210731 21:38:24.219"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:24.219" endtime="20210731 21:38:24.220"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:24.220" endtime="20210731 21:38:24.220"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.218" endtime="20210731 21:38:24.220"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:24.221" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:24.221" endtime="20210731 21:38:24.221"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:24.221" endtime="20210731 21:38:24.222"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:24.222" endtime="20210731 21:38:24.222"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.220" endtime="20210731 21:38:24.222"/>
</iter>
<status status="PASS" starttime="20210731 21:38:24.216" endtime="20210731 21:38:24.222"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:24.223" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:24.222" endtime="20210731 21:38:24.223"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.215" endtime="20210731 21:38:24.223"/>
</kw>
<status status="PASS" starttime="20210731 21:38:22.642" endtime="20210731 21:38:24.223"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:24.225" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:24.224" endtime="20210731 21:38:24.225"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:24.225" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210731 21:38:24.225" endtime="20210731 21:38:24.225"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:24.237" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:24.237" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:24.225" endtime="20210731 21:38:24.237"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:24.237" endtime="20210731 21:38:24.237"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:24.238" endtime="20210731 21:38:24.238"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:24.225" endtime="20210731 21:38:24.238"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:24.225" endtime="20210731 21:38:24.238"/>
</for>
<status status="FAIL" starttime="20210731 21:38:24.224" endtime="20210731 21:38:24.238"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:24.223" endtime="20210731 21:38:24.238"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:24.240" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:24.239" endtime="20210731 21:38:24.240"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:24.240" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210731 21:38:24.240" endtime="20210731 21:38:24.240"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:24.245" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:24.245" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:24.240" endtime="20210731 21:38:24.245"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:24.245" endtime="20210731 21:38:24.245"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:24.245" endtime="20210731 21:38:24.245"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:24.240" endtime="20210731 21:38:24.246"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:24.240" endtime="20210731 21:38:24.246"/>
</for>
<status status="FAIL" starttime="20210731 21:38:24.238" endtime="20210731 21:38:24.246"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:24.238" endtime="20210731 21:38:24.246"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:24.247" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:24.247" endtime="20210731 21:38:24.247"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:24.248" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210731 21:38:24.247" endtime="20210731 21:38:24.248"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:24.255" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:24.255" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:24.248" endtime="20210731 21:38:24.255"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:24.256" endtime="20210731 21:38:24.256"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:24.256" endtime="20210731 21:38:24.256"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:24.248" endtime="20210731 21:38:24.256"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:24.248" endtime="20210731 21:38:24.256"/>
</for>
<status status="FAIL" starttime="20210731 21:38:24.246" endtime="20210731 21:38:24.256"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:24.246" endtime="20210731 21:38:24.256"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:24.223" endtime="20210731 21:38:24.256"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:24.270" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:24.280" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:24.280" level="INFO">${pids} = 6002
6009
6013</msg>
<status status="PASS" starttime="20210731 21:38:24.257" endtime="20210731 21:38:24.280"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:24.282" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:24.281" endtime="20210731 21:38:24.282"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:24.283" level="INFO">${pids} = ['6002', '6009', '6013']</msg>
<status status="PASS" starttime="20210731 21:38:24.282" endtime="20210731 21:38:24.283"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6002</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:24.287" level="INFO">Running command 'kill 6002 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:24.283" endtime="20210731 21:38:24.288"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.283" endtime="20210731 21:38:24.288"/>
</iter>
<iter>
<var name="${pid}">6009</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:24.292" level="INFO">Running command 'kill 6009 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:24.288" endtime="20210731 21:38:24.292"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.288" endtime="20210731 21:38:24.292"/>
</iter>
<iter>
<var name="${pid}">6013</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:24.296" level="INFO">Running command 'kill 6013 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:24.293" endtime="20210731 21:38:24.296"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.292" endtime="20210731 21:38:24.297"/>
</iter>
<status status="PASS" starttime="20210731 21:38:24.283" endtime="20210731 21:38:24.297"/>
</for>
<status status="PASS" starttime="20210731 21:38:24.282" endtime="20210731 21:38:24.297"/>
</branch>
<status status="PASS" starttime="20210731 21:38:24.282" endtime="20210731 21:38:24.297"/>
</if>
<status status="PASS" starttime="20210731 21:38:24.257" endtime="20210731 21:38:24.297"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤% 23!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:22.641" endtime="20210731 21:38:24.297">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t36" name="With Each Valid Token, Updating Username Of Each System User With # %123!&amp; Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:24.314" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:24.325" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:24.325" level="INFO">${pids} = 6042</msg>
<status status="PASS" starttime="20210731 21:38:24.299" endtime="20210731 21:38:24.325"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:24.327" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:24.326" endtime="20210731 21:38:24.327"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:24.327" level="INFO">${pids} = ['6042']</msg>
<status status="PASS" starttime="20210731 21:38:24.327" endtime="20210731 21:38:24.328"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6042</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:24.353" level="INFO">Running command 'kill 6042 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:24.328" endtime="20210731 21:38:24.353"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.328" endtime="20210731 21:38:24.354"/>
</iter>
<status status="PASS" starttime="20210731 21:38:24.328" endtime="20210731 21:38:24.354"/>
</for>
<status status="PASS" starttime="20210731 21:38:24.327" endtime="20210731 21:38:24.354"/>
</branch>
<status status="PASS" starttime="20210731 21:38:24.327" endtime="20210731 21:38:24.354"/>
</if>
<status status="PASS" starttime="20210731 21:38:24.299" endtime="20210731 21:38:24.354"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:24.356" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:24.355" endtime="20210731 21:38:24.356"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:24.356" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:24.356" endtime="20210731 21:38:24.356"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:24.357" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:24.356" endtime="20210731 21:38:24.357"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:24.357" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:24.357" endtime="20210731 21:38:24.357"/>
</kw>
<msg timestamp="20210731 21:38:24.358" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:24.356" endtime="20210731 21:38:24.358"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:24.361" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:24.358" endtime="20210731 21:38:24.362"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.354" endtime="20210731 21:38:24.363"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:24.364" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:24.364" endtime="20210731 21:38:24.368"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:25.871" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:24.369" endtime="20210731 21:38:25.871"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.363" endtime="20210731 21:38:25.871"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:25.872" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:25.872" endtime="20210731 21:38:25.872"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:25.873" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:25.873" endtime="20210731 21:38:25.873"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:25.873" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:25.873" endtime="20210731 21:38:25.873"/>
</kw>
<msg timestamp="20210731 21:38:25.874" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:25.872" endtime="20210731 21:38:25.874"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:25.874" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:25.874" endtime="20210731 21:38:25.874"/>
</kw>
<status status="PASS" starttime="20210731 21:38:25.871" endtime="20210731 21:38:25.875"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:25.875" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:25.875" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:25.875" endtime="20210731 21:38:25.876"/>
</kw>
<status status="PASS" starttime="20210731 21:38:25.875" endtime="20210731 21:38:25.876"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:25.876" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:25.876" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:25.876" endtime="20210731 21:38:25.876"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:25.877" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:25.877" endtime="20210731 21:38:25.877"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:25.878" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:25.877" endtime="20210731 21:38:25.878"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:25.878" endtime="20210731 21:38:25.879"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:25.879" endtime="20210731 21:38:25.879"/>
</kw>
<status status="PASS" starttime="20210731 21:38:25.877" endtime="20210731 21:38:25.879"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:25.879" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:25.879" endtime="20210731 21:38:25.879"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:25.880" endtime="20210731 21:38:25.880"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:25.880" endtime="20210731 21:38:25.881"/>
</kw>
<status status="PASS" starttime="20210731 21:38:25.879" endtime="20210731 21:38:25.881"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:25.881" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:25.881" endtime="20210731 21:38:25.881"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:25.881" endtime="20210731 21:38:25.882"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:25.882" endtime="20210731 21:38:25.883"/>
</kw>
<status status="PASS" starttime="20210731 21:38:25.881" endtime="20210731 21:38:25.883"/>
</iter>
<status status="PASS" starttime="20210731 21:38:25.877" endtime="20210731 21:38:25.883"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:25.883" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:25.883" endtime="20210731 21:38:25.883"/>
</kw>
<status status="PASS" starttime="20210731 21:38:25.876" endtime="20210731 21:38:25.883"/>
</kw>
<status status="PASS" starttime="20210731 21:38:24.299" endtime="20210731 21:38:25.883"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:25.885" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:25.884" endtime="20210731 21:38:25.885"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:25.885" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210731 21:38:25.885" endtime="20210731 21:38:25.885"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:25.900" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:25.900" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:25.886" endtime="20210731 21:38:25.900"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:25.901" endtime="20210731 21:38:25.901"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:25.901" endtime="20210731 21:38:25.901"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:25.886" endtime="20210731 21:38:25.901"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:25.886" endtime="20210731 21:38:25.901"/>
</for>
<status status="FAIL" starttime="20210731 21:38:25.884" endtime="20210731 21:38:25.901"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:25.884" endtime="20210731 21:38:25.901"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:25.903" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:25.902" endtime="20210731 21:38:25.903"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:25.903" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210731 21:38:25.903" endtime="20210731 21:38:25.903"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:25.908" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:25.908" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:25.903" endtime="20210731 21:38:25.908"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:25.908" endtime="20210731 21:38:25.908"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:25.908" endtime="20210731 21:38:25.909"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:25.903" endtime="20210731 21:38:25.909"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:25.903" endtime="20210731 21:38:25.909"/>
</for>
<status status="FAIL" starttime="20210731 21:38:25.901" endtime="20210731 21:38:25.909"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:25.901" endtime="20210731 21:38:25.909"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:25.911" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:25.910" endtime="20210731 21:38:25.911"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:25.911" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210731 21:38:25.911" endtime="20210731 21:38:25.911"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:25.938" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:25.938" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:25.912" endtime="20210731 21:38:25.938"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:25.939" endtime="20210731 21:38:25.939"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:25.939" endtime="20210731 21:38:25.939"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:25.912" endtime="20210731 21:38:25.939"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:25.911" endtime="20210731 21:38:25.939"/>
</for>
<status status="FAIL" starttime="20210731 21:38:25.909" endtime="20210731 21:38:25.939"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:25.909" endtime="20210731 21:38:25.939"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:25.884" endtime="20210731 21:38:25.939"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:25.945" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:25.976" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:25.976" level="INFO">${pids} = 6065
6072
6077</msg>
<status status="PASS" starttime="20210731 21:38:25.940" endtime="20210731 21:38:25.976"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:25.978" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:25.977" endtime="20210731 21:38:25.978"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:25.979" level="INFO">${pids} = ['6065', '6072', '6077']</msg>
<status status="PASS" starttime="20210731 21:38:25.978" endtime="20210731 21:38:25.979"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6065</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:25.987" level="INFO">Running command 'kill 6065 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:25.980" endtime="20210731 21:38:25.987"/>
</kw>
<status status="PASS" starttime="20210731 21:38:25.979" endtime="20210731 21:38:25.987"/>
</iter>
<iter>
<var name="${pid}">6072</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:25.996" level="INFO">Running command 'kill 6072 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:25.988" endtime="20210731 21:38:25.999"/>
</kw>
<status status="PASS" starttime="20210731 21:38:25.988" endtime="20210731 21:38:25.999"/>
</iter>
<iter>
<var name="${pid}">6077</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:26.006" level="INFO">Running command 'kill 6077 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:25.999" endtime="20210731 21:38:26.006"/>
</kw>
<status status="PASS" starttime="20210731 21:38:25.999" endtime="20210731 21:38:26.007"/>
</iter>
<status status="PASS" starttime="20210731 21:38:25.979" endtime="20210731 21:38:26.007"/>
</for>
<status status="PASS" starttime="20210731 21:38:25.978" endtime="20210731 21:38:26.007"/>
</branch>
<status status="PASS" starttime="20210731 21:38:25.978" endtime="20210731 21:38:26.007"/>
</if>
<status status="PASS" starttime="20210731 21:38:25.940" endtime="20210731 21:38:26.007"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '# %123!&amp;'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:24.298" endtime="20210731 21:38:26.007">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t37" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp;7683##() ?@#¤%&amp;34567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:26.015" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:26.031" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:26.031" level="INFO">${pids} = 6130</msg>
<status status="PASS" starttime="20210731 21:38:26.010" endtime="20210731 21:38:26.031"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:26.032" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:26.031" endtime="20210731 21:38:26.032"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:26.033" level="INFO">${pids} = ['6130']</msg>
<status status="PASS" starttime="20210731 21:38:26.033" endtime="20210731 21:38:26.033"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6130</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:26.041" level="INFO">Running command 'kill 6130 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:26.034" endtime="20210731 21:38:26.041"/>
</kw>
<status status="PASS" starttime="20210731 21:38:26.034" endtime="20210731 21:38:26.042"/>
</iter>
<status status="PASS" starttime="20210731 21:38:26.034" endtime="20210731 21:38:26.042"/>
</for>
<status status="PASS" starttime="20210731 21:38:26.032" endtime="20210731 21:38:26.042"/>
</branch>
<status status="PASS" starttime="20210731 21:38:26.032" endtime="20210731 21:38:26.042"/>
</if>
<status status="PASS" starttime="20210731 21:38:26.010" endtime="20210731 21:38:26.042"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:26.051" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:26.043" endtime="20210731 21:38:26.051"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:26.052" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:26.052" endtime="20210731 21:38:26.052"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:26.053" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:26.053" endtime="20210731 21:38:26.053"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:26.054" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:26.053" endtime="20210731 21:38:26.054"/>
</kw>
<msg timestamp="20210731 21:38:26.057" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:26.051" endtime="20210731 21:38:26.058"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:26.090" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:26.058" endtime="20210731 21:38:26.093"/>
</kw>
<status status="PASS" starttime="20210731 21:38:26.042" endtime="20210731 21:38:26.094"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:26.095" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:26.095" endtime="20210731 21:38:26.099"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:27.600" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:26.100" endtime="20210731 21:38:27.600"/>
</kw>
<status status="PASS" starttime="20210731 21:38:26.094" endtime="20210731 21:38:27.601"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:27.602" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:27.602" endtime="20210731 21:38:27.602"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:27.603" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:27.603" endtime="20210731 21:38:27.603"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:27.604" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:27.603" endtime="20210731 21:38:27.604"/>
</kw>
<msg timestamp="20210731 21:38:27.604" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:27.601" endtime="20210731 21:38:27.604"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:27.605" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:27.604" endtime="20210731 21:38:27.605"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.601" endtime="20210731 21:38:27.605"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:27.606" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:27.606" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:27.606" endtime="20210731 21:38:27.606"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.605" endtime="20210731 21:38:27.606"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:27.607" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:27.607" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:27.607" endtime="20210731 21:38:27.607"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:27.607" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:27.607" endtime="20210731 21:38:27.607"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:27.608" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:27.608" endtime="20210731 21:38:27.608"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:27.608" endtime="20210731 21:38:27.609"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:27.609" endtime="20210731 21:38:27.610"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.608" endtime="20210731 21:38:27.610"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:27.610" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:27.610" endtime="20210731 21:38:27.610"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:27.611" endtime="20210731 21:38:27.611"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:27.612" endtime="20210731 21:38:27.612"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.610" endtime="20210731 21:38:27.612"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:27.612" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:27.612" endtime="20210731 21:38:27.612"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:27.612" endtime="20210731 21:38:27.613"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:27.613" endtime="20210731 21:38:27.614"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.612" endtime="20210731 21:38:27.614"/>
</iter>
<status status="PASS" starttime="20210731 21:38:27.608" endtime="20210731 21:38:27.614"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:27.614" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:27.614" endtime="20210731 21:38:27.614"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.606" endtime="20210731 21:38:27.615"/>
</kw>
<status status="PASS" starttime="20210731 21:38:26.009" endtime="20210731 21:38:27.615"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:27.616" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:27.616" endtime="20210731 21:38:27.616"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:27.617" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 21:38:27.616" endtime="20210731 21:38:27.617"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:27.627" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:27.628" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:27.617" endtime="20210731 21:38:27.628"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:27.628" endtime="20210731 21:38:27.628"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:27.628" endtime="20210731 21:38:27.628"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:27.617" endtime="20210731 21:38:27.628"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:27.617" endtime="20210731 21:38:27.628"/>
</for>
<status status="FAIL" starttime="20210731 21:38:27.615" endtime="20210731 21:38:27.628"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:27.615" endtime="20210731 21:38:27.628"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:27.630" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:27.629" endtime="20210731 21:38:27.630"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:27.630" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 21:38:27.630" endtime="20210731 21:38:27.630"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:27.635" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:27.635" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:27.631" endtime="20210731 21:38:27.635"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:27.635" endtime="20210731 21:38:27.635"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:27.635" endtime="20210731 21:38:27.635"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:27.630" endtime="20210731 21:38:27.635"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:27.630" endtime="20210731 21:38:27.635"/>
</for>
<status status="FAIL" starttime="20210731 21:38:27.629" endtime="20210731 21:38:27.636"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:27.628" endtime="20210731 21:38:27.636"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:27.637" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:27.637" endtime="20210731 21:38:27.637"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:27.638" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210731 21:38:27.638" endtime="20210731 21:38:27.638"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:27.657" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:27.657" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:27.638" endtime="20210731 21:38:27.658"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:27.658" endtime="20210731 21:38:27.658"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:27.658" endtime="20210731 21:38:27.658"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:27.638" endtime="20210731 21:38:27.658"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:27.638" endtime="20210731 21:38:27.658"/>
</for>
<status status="FAIL" starttime="20210731 21:38:27.636" endtime="20210731 21:38:27.658"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:27.636" endtime="20210731 21:38:27.658"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:27.615" endtime="20210731 21:38:27.658"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:27.662" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:27.677" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:27.678" level="INFO">${pids} = 6191
6198
6203</msg>
<status status="PASS" starttime="20210731 21:38:27.659" endtime="20210731 21:38:27.678"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:27.679" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:27.678" endtime="20210731 21:38:27.679"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:27.680" level="INFO">${pids} = ['6191', '6198', '6203']</msg>
<status status="PASS" starttime="20210731 21:38:27.679" endtime="20210731 21:38:27.680"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6191</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:27.684" level="INFO">Running command 'kill 6191 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:27.680" endtime="20210731 21:38:27.684"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.680" endtime="20210731 21:38:27.684"/>
</iter>
<iter>
<var name="${pid}">6198</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:27.702" level="INFO">Running command 'kill 6198 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:27.685" endtime="20210731 21:38:27.703"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.684" endtime="20210731 21:38:27.703"/>
</iter>
<iter>
<var name="${pid}">6203</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:27.708" level="INFO">Running command 'kill 6203 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:27.704" endtime="20210731 21:38:27.709"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.704" endtime="20210731 21:38:27.709"/>
</iter>
<status status="PASS" starttime="20210731 21:38:27.680" endtime="20210731 21:38:27.709"/>
</for>
<status status="PASS" starttime="20210731 21:38:27.679" endtime="20210731 21:38:27.709"/>
</branch>
<status status="PASS" starttime="20210731 21:38:27.679" endtime="20210731 21:38:27.709"/>
</if>
<status status="PASS" starttime="20210731 21:38:27.659" endtime="20210731 21:38:27.709"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;7683##() ?@#¤%&amp;34567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:26.008" endtime="20210731 21:38:27.709">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t38" name="With Each Valid Token, Updating Username Of Each System User With #¤12 ab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:27.714" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:27.727" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:27.727" level="INFO">${pids} = 6240</msg>
<status status="PASS" starttime="20210731 21:38:27.712" endtime="20210731 21:38:27.727"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:27.728" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:27.728" endtime="20210731 21:38:27.728"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:27.729" level="INFO">${pids} = ['6240']</msg>
<status status="PASS" starttime="20210731 21:38:27.729" endtime="20210731 21:38:27.729"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6240</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:27.733" level="INFO">Running command 'kill 6240 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:27.729" endtime="20210731 21:38:27.733"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.729" endtime="20210731 21:38:27.733"/>
</iter>
<status status="PASS" starttime="20210731 21:38:27.729" endtime="20210731 21:38:27.733"/>
</for>
<status status="PASS" starttime="20210731 21:38:27.728" endtime="20210731 21:38:27.733"/>
</branch>
<status status="PASS" starttime="20210731 21:38:27.728" endtime="20210731 21:38:27.733"/>
</if>
<status status="PASS" starttime="20210731 21:38:27.711" endtime="20210731 21:38:27.734"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:27.735" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:27.735" endtime="20210731 21:38:27.735"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:27.736" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:27.736" endtime="20210731 21:38:27.736"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:27.736" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:27.736" endtime="20210731 21:38:27.737"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:27.737" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:27.737" endtime="20210731 21:38:27.737"/>
</kw>
<msg timestamp="20210731 21:38:27.738" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:27.735" endtime="20210731 21:38:27.738"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:27.745" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:27.738" endtime="20210731 21:38:27.747"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.734" endtime="20210731 21:38:27.747"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:27.749" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:27.748" endtime="20210731 21:38:27.753"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:29.254" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:27.754" endtime="20210731 21:38:29.255"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.747" endtime="20210731 21:38:29.255"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:29.256" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:29.256" endtime="20210731 21:38:29.256"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:29.257" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:29.257" endtime="20210731 21:38:29.257"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:29.257" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:29.257" endtime="20210731 21:38:29.257"/>
</kw>
<msg timestamp="20210731 21:38:29.258" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:29.256" endtime="20210731 21:38:29.258"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:29.258" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:29.258" endtime="20210731 21:38:29.259"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.255" endtime="20210731 21:38:29.259"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:29.259" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:29.259" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:29.259" endtime="20210731 21:38:29.260"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.259" endtime="20210731 21:38:29.260"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:29.260" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:29.261" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:29.260" endtime="20210731 21:38:29.261"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:29.261" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:29.261" endtime="20210731 21:38:29.261"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:29.262" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:29.262" endtime="20210731 21:38:29.262"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:29.263" endtime="20210731 21:38:29.264"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:29.264" endtime="20210731 21:38:29.264"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.262" endtime="20210731 21:38:29.264"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:29.264" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:29.264" endtime="20210731 21:38:29.264"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:29.265" endtime="20210731 21:38:29.265"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:29.266" endtime="20210731 21:38:29.266"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.264" endtime="20210731 21:38:29.266"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:29.266" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:29.266" endtime="20210731 21:38:29.266"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:29.267" endtime="20210731 21:38:29.267"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:29.268" endtime="20210731 21:38:29.268"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.266" endtime="20210731 21:38:29.268"/>
</iter>
<status status="PASS" starttime="20210731 21:38:29.261" endtime="20210731 21:38:29.268"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:29.268" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:29.268" endtime="20210731 21:38:29.268"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.260" endtime="20210731 21:38:29.269"/>
</kw>
<status status="PASS" starttime="20210731 21:38:27.711" endtime="20210731 21:38:29.269"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:29.270" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:29.270" endtime="20210731 21:38:29.270"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:29.271" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210731 21:38:29.271" endtime="20210731 21:38:29.271"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:29.282" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:29.282" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:29.271" endtime="20210731 21:38:29.282"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:29.282" endtime="20210731 21:38:29.282"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:29.282" endtime="20210731 21:38:29.282"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:29.271" endtime="20210731 21:38:29.283"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:29.271" endtime="20210731 21:38:29.283"/>
</for>
<status status="FAIL" starttime="20210731 21:38:29.269" endtime="20210731 21:38:29.283"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:29.269" endtime="20210731 21:38:29.283"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:29.284" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:29.284" endtime="20210731 21:38:29.284"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:29.285" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210731 21:38:29.284" endtime="20210731 21:38:29.285"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:29.290" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:29.290" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:29.285" endtime="20210731 21:38:29.290"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:29.291" endtime="20210731 21:38:29.291"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:29.291" endtime="20210731 21:38:29.291"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:29.285" endtime="20210731 21:38:29.291"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:29.285" endtime="20210731 21:38:29.291"/>
</for>
<status status="FAIL" starttime="20210731 21:38:29.283" endtime="20210731 21:38:29.291"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:29.283" endtime="20210731 21:38:29.291"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:29.292" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:29.292" endtime="20210731 21:38:29.292"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:29.293" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210731 21:38:29.292" endtime="20210731 21:38:29.293"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:29.298" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:29.298" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:29.293" endtime="20210731 21:38:29.298"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:29.298" endtime="20210731 21:38:29.298"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:29.299" endtime="20210731 21:38:29.299"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:29.293" endtime="20210731 21:38:29.299"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:29.293" endtime="20210731 21:38:29.300"/>
</for>
<status status="FAIL" starttime="20210731 21:38:29.291" endtime="20210731 21:38:29.300"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:29.291" endtime="20210731 21:38:29.300"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:29.269" endtime="20210731 21:38:29.300"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:29.316" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:29.327" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:29.327" level="INFO">${pids} = 6272
6282
6288</msg>
<status status="PASS" starttime="20210731 21:38:29.301" endtime="20210731 21:38:29.327"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:29.328" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:29.328" endtime="20210731 21:38:29.328"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:29.329" level="INFO">${pids} = ['6272', '6282', '6288']</msg>
<status status="PASS" starttime="20210731 21:38:29.329" endtime="20210731 21:38:29.329"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6272</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:29.333" level="INFO">Running command 'kill 6272 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:29.330" endtime="20210731 21:38:29.334"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.330" endtime="20210731 21:38:29.334"/>
</iter>
<iter>
<var name="${pid}">6282</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:29.338" level="INFO">Running command 'kill 6282 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:29.334" endtime="20210731 21:38:29.340"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.334" endtime="20210731 21:38:29.340"/>
</iter>
<iter>
<var name="${pid}">6288</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:29.347" level="INFO">Running command 'kill 6288 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:29.341" endtime="20210731 21:38:29.357"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.340" endtime="20210731 21:38:29.357"/>
</iter>
<status status="PASS" starttime="20210731 21:38:29.329" endtime="20210731 21:38:29.357"/>
</for>
<status status="PASS" starttime="20210731 21:38:29.329" endtime="20210731 21:38:29.357"/>
</branch>
<status status="PASS" starttime="20210731 21:38:29.328" endtime="20210731 21:38:29.357"/>
</if>
<status status="PASS" starttime="20210731 21:38:29.300" endtime="20210731 21:38:29.357"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤12 ab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:27.710" endtime="20210731 21:38:29.358">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t39" name="With Each Valid Token, Updating Username Of Each System User With # 123abc Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:29.364" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:29.375" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:29.375" level="INFO">${pids} = 6342</msg>
<status status="PASS" starttime="20210731 21:38:29.360" endtime="20210731 21:38:29.375"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:29.376" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:29.376" endtime="20210731 21:38:29.377"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:29.377" level="INFO">${pids} = ['6342']</msg>
<status status="PASS" starttime="20210731 21:38:29.377" endtime="20210731 21:38:29.377"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6342</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:29.381" level="INFO">Running command 'kill 6342 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:29.378" endtime="20210731 21:38:29.382"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.378" endtime="20210731 21:38:29.382"/>
</iter>
<status status="PASS" starttime="20210731 21:38:29.377" endtime="20210731 21:38:29.382"/>
</for>
<status status="PASS" starttime="20210731 21:38:29.377" endtime="20210731 21:38:29.382"/>
</branch>
<status status="PASS" starttime="20210731 21:38:29.377" endtime="20210731 21:38:29.382"/>
</if>
<status status="PASS" starttime="20210731 21:38:29.359" endtime="20210731 21:38:29.382"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:29.384" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:29.383" endtime="20210731 21:38:29.384"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:29.384" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:29.384" endtime="20210731 21:38:29.384"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:29.385" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:29.385" endtime="20210731 21:38:29.385"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:29.386" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:29.385" endtime="20210731 21:38:29.386"/>
</kw>
<msg timestamp="20210731 21:38:29.387" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:29.384" endtime="20210731 21:38:29.387"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:29.392" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:29.387" endtime="20210731 21:38:29.394"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.383" endtime="20210731 21:38:29.394"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:29.396" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:29.395" endtime="20210731 21:38:29.400"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:30.901" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:29.400" endtime="20210731 21:38:30.901"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.395" endtime="20210731 21:38:30.901"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:30.903" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:30.903" endtime="20210731 21:38:30.903"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:30.904" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:30.903" endtime="20210731 21:38:30.904"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:30.904" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:30.904" endtime="20210731 21:38:30.904"/>
</kw>
<msg timestamp="20210731 21:38:30.905" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:30.902" endtime="20210731 21:38:30.905"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:30.905" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:30.905" endtime="20210731 21:38:30.906"/>
</kw>
<status status="PASS" starttime="20210731 21:38:30.902" endtime="20210731 21:38:30.906"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:30.906" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:30.906" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:30.906" endtime="20210731 21:38:30.907"/>
</kw>
<status status="PASS" starttime="20210731 21:38:30.906" endtime="20210731 21:38:30.907"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:30.907" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:30.907" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:30.907" endtime="20210731 21:38:30.908"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:30.908" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:30.908" endtime="20210731 21:38:30.908"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:30.909" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:30.909" endtime="20210731 21:38:30.909"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:30.909" endtime="20210731 21:38:30.910"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:30.910" endtime="20210731 21:38:30.911"/>
</kw>
<status status="PASS" starttime="20210731 21:38:30.909" endtime="20210731 21:38:30.911"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:30.911" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:30.911" endtime="20210731 21:38:30.911"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:30.911" endtime="20210731 21:38:30.912"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:30.912" endtime="20210731 21:38:30.913"/>
</kw>
<status status="PASS" starttime="20210731 21:38:30.911" endtime="20210731 21:38:30.913"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:30.913" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:30.913" endtime="20210731 21:38:30.913"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:30.913" endtime="20210731 21:38:30.914"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:30.914" endtime="20210731 21:38:30.914"/>
</kw>
<status status="PASS" starttime="20210731 21:38:30.913" endtime="20210731 21:38:30.914"/>
</iter>
<status status="PASS" starttime="20210731 21:38:30.908" endtime="20210731 21:38:30.914"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:30.915" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:30.915" endtime="20210731 21:38:30.915"/>
</kw>
<status status="PASS" starttime="20210731 21:38:30.907" endtime="20210731 21:38:30.915"/>
</kw>
<status status="PASS" starttime="20210731 21:38:29.359" endtime="20210731 21:38:30.915"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:30.917" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:30.916" endtime="20210731 21:38:30.917"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:30.917" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210731 21:38:30.917" endtime="20210731 21:38:30.917"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:30.932" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:30.932" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:30.918" endtime="20210731 21:38:30.932"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:30.933" endtime="20210731 21:38:30.933"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:30.933" endtime="20210731 21:38:30.933"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:30.917" endtime="20210731 21:38:30.933"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:30.917" endtime="20210731 21:38:30.933"/>
</for>
<status status="FAIL" starttime="20210731 21:38:30.916" endtime="20210731 21:38:30.933"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:30.916" endtime="20210731 21:38:30.933"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:30.935" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:30.934" endtime="20210731 21:38:30.935"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:30.935" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210731 21:38:30.935" endtime="20210731 21:38:30.935"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:30.940" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:30.941" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:30.936" endtime="20210731 21:38:30.941"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:30.941" endtime="20210731 21:38:30.941"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:30.941" endtime="20210731 21:38:30.941"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:30.935" endtime="20210731 21:38:30.941"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:30.935" endtime="20210731 21:38:30.941"/>
</for>
<status status="FAIL" starttime="20210731 21:38:30.933" endtime="20210731 21:38:30.941"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:30.933" endtime="20210731 21:38:30.941"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:30.943" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:30.942" endtime="20210731 21:38:30.943"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:30.943" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210731 21:38:30.943" endtime="20210731 21:38:30.943"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:30.958" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:30.958" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:30.944" endtime="20210731 21:38:30.958"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:30.958" endtime="20210731 21:38:30.959"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:30.959" endtime="20210731 21:38:30.959"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:30.943" endtime="20210731 21:38:30.959"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:30.943" endtime="20210731 21:38:30.959"/>
</for>
<status status="FAIL" starttime="20210731 21:38:30.942" endtime="20210731 21:38:30.959"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:30.941" endtime="20210731 21:38:30.959"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:30.915" endtime="20210731 21:38:30.959"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:30.964" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:30.976" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:30.976" level="INFO">${pids} = 6377
6384
6388</msg>
<status status="PASS" starttime="20210731 21:38:30.960" endtime="20210731 21:38:30.976"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:30.977" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:30.976" endtime="20210731 21:38:30.977"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:30.978" level="INFO">${pids} = ['6377', '6384', '6388']</msg>
<status status="PASS" starttime="20210731 21:38:30.977" endtime="20210731 21:38:30.978"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6377</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:30.991" level="INFO">Running command 'kill 6377 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:30.978" endtime="20210731 21:38:30.992"/>
</kw>
<status status="PASS" starttime="20210731 21:38:30.978" endtime="20210731 21:38:30.992"/>
</iter>
<iter>
<var name="${pid}">6384</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:30.996" level="INFO">Running command 'kill 6384 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:30.992" endtime="20210731 21:38:30.999"/>
</kw>
<status status="PASS" starttime="20210731 21:38:30.992" endtime="20210731 21:38:30.999"/>
</iter>
<iter>
<var name="${pid}">6388</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:31.003" level="INFO">Running command 'kill 6388 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:30.999" endtime="20210731 21:38:31.003"/>
</kw>
<status status="PASS" starttime="20210731 21:38:30.999" endtime="20210731 21:38:31.004"/>
</iter>
<status status="PASS" starttime="20210731 21:38:30.978" endtime="20210731 21:38:31.004"/>
</for>
<status status="PASS" starttime="20210731 21:38:30.977" endtime="20210731 21:38:31.004"/>
</branch>
<status status="PASS" starttime="20210731 21:38:30.977" endtime="20210731 21:38:31.004"/>
</if>
<status status="PASS" starttime="20210731 21:38:30.959" endtime="20210731 21:38:31.004"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '# 123abc'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:29.358" endtime="20210731 21:38:31.004">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t40" name="With Each Valid Token, Updating Username Of Each System User With #¤/&amp;  !123abc456hjk Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:31.010" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:31.022" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:31.022" level="INFO">${pids} = 6418</msg>
<status status="PASS" starttime="20210731 21:38:31.007" endtime="20210731 21:38:31.022"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:31.023" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:31.022" endtime="20210731 21:38:31.023"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:31.024" level="INFO">${pids} = ['6418']</msg>
<status status="PASS" starttime="20210731 21:38:31.023" endtime="20210731 21:38:31.024"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6418</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:31.027" level="INFO">Running command 'kill 6418 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:31.024" endtime="20210731 21:38:31.028"/>
</kw>
<status status="PASS" starttime="20210731 21:38:31.024" endtime="20210731 21:38:31.028"/>
</iter>
<status status="PASS" starttime="20210731 21:38:31.024" endtime="20210731 21:38:31.028"/>
</for>
<status status="PASS" starttime="20210731 21:38:31.023" endtime="20210731 21:38:31.028"/>
</branch>
<status status="PASS" starttime="20210731 21:38:31.023" endtime="20210731 21:38:31.028"/>
</if>
<status status="PASS" starttime="20210731 21:38:31.006" endtime="20210731 21:38:31.028"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:31.030" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:31.029" endtime="20210731 21:38:31.030"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:31.030" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:31.030" endtime="20210731 21:38:31.030"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:31.031" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:31.031" endtime="20210731 21:38:31.031"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:31.031" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:31.031" endtime="20210731 21:38:31.031"/>
</kw>
<msg timestamp="20210731 21:38:31.032" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:31.030" endtime="20210731 21:38:31.032"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:31.036" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:31.032" endtime="20210731 21:38:31.038"/>
</kw>
<status status="PASS" starttime="20210731 21:38:31.029" endtime="20210731 21:38:31.038"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:31.040" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:31.039" endtime="20210731 21:38:31.044"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:32.545" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:31.045" endtime="20210731 21:38:32.545"/>
</kw>
<status status="PASS" starttime="20210731 21:38:31.039" endtime="20210731 21:38:32.546"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:32.547" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:32.547" endtime="20210731 21:38:32.547"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:32.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:32.547" endtime="20210731 21:38:32.548"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:32.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:32.548" endtime="20210731 21:38:32.548"/>
</kw>
<msg timestamp="20210731 21:38:32.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:32.546" endtime="20210731 21:38:32.549"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:32.549" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:32.549" endtime="20210731 21:38:32.550"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.546" endtime="20210731 21:38:32.550"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:32.550" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:32.550" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:32.550" endtime="20210731 21:38:32.551"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.550" endtime="20210731 21:38:32.551"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:32.552" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:32.552" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:32.551" endtime="20210731 21:38:32.552"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:32.553" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:32.552" endtime="20210731 21:38:32.553"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:32.553" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:32.553" endtime="20210731 21:38:32.553"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:32.554" endtime="20210731 21:38:32.554"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:32.555" endtime="20210731 21:38:32.555"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.553" endtime="20210731 21:38:32.555"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:32.555" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:32.555" endtime="20210731 21:38:32.555"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:32.555" endtime="20210731 21:38:32.556"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:32.556" endtime="20210731 21:38:32.557"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.555" endtime="20210731 21:38:32.557"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:32.557" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:32.557" endtime="20210731 21:38:32.557"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:32.557" endtime="20210731 21:38:32.558"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:32.558" endtime="20210731 21:38:32.558"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.557" endtime="20210731 21:38:32.558"/>
</iter>
<status status="PASS" starttime="20210731 21:38:32.553" endtime="20210731 21:38:32.558"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:32.559" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:32.559" endtime="20210731 21:38:32.559"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.551" endtime="20210731 21:38:32.559"/>
</kw>
<status status="PASS" starttime="20210731 21:38:31.006" endtime="20210731 21:38:32.559"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:32.561" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:32.561" endtime="20210731 21:38:32.561"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:32.561" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 21:38:32.561" endtime="20210731 21:38:32.561"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:32.572" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:32.573" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:32.562" endtime="20210731 21:38:32.573"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:32.573" endtime="20210731 21:38:32.573"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:32.573" endtime="20210731 21:38:32.573"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:32.562" endtime="20210731 21:38:32.573"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:32.561" endtime="20210731 21:38:32.573"/>
</for>
<status status="FAIL" starttime="20210731 21:38:32.560" endtime="20210731 21:38:32.574"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:32.560" endtime="20210731 21:38:32.574"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:32.575" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:32.574" endtime="20210731 21:38:32.575"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:32.576" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 21:38:32.575" endtime="20210731 21:38:32.576"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:32.580" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:32.580" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:32.576" endtime="20210731 21:38:32.580"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:32.581" endtime="20210731 21:38:32.581"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:32.581" endtime="20210731 21:38:32.581"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:32.576" endtime="20210731 21:38:32.581"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:32.576" endtime="20210731 21:38:32.581"/>
</for>
<status status="FAIL" starttime="20210731 21:38:32.574" endtime="20210731 21:38:32.581"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:32.574" endtime="20210731 21:38:32.581"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:32.582" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:32.582" endtime="20210731 21:38:32.582"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:32.583" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210731 21:38:32.582" endtime="20210731 21:38:32.583"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:32.590" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:32.590" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:32.583" endtime="20210731 21:38:32.590"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:32.591" endtime="20210731 21:38:32.591"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:32.591" endtime="20210731 21:38:32.591"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:32.583" endtime="20210731 21:38:32.591"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:32.583" endtime="20210731 21:38:32.591"/>
</for>
<status status="FAIL" starttime="20210731 21:38:32.581" endtime="20210731 21:38:32.591"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:32.581" endtime="20210731 21:38:32.591"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:32.560" endtime="20210731 21:38:32.591"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:32.610" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:32.621" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:32.621" level="INFO">${pids} = 6470
6488
6500</msg>
<status status="PASS" starttime="20210731 21:38:32.601" endtime="20210731 21:38:32.621"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:32.622" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:32.621" endtime="20210731 21:38:32.622"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:32.623" level="INFO">${pids} = ['6470', '6488', '6500']</msg>
<status status="PASS" starttime="20210731 21:38:32.622" endtime="20210731 21:38:32.623"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6470</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:32.638" level="INFO">Running command 'kill 6470 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:32.632" endtime="20210731 21:38:32.639"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.632" endtime="20210731 21:38:32.639"/>
</iter>
<iter>
<var name="${pid}">6488</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:32.643" level="INFO">Running command 'kill 6488 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:32.639" endtime="20210731 21:38:32.643"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.639" endtime="20210731 21:38:32.643"/>
</iter>
<iter>
<var name="${pid}">6500</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:32.647" level="INFO">Running command 'kill 6500 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:32.644" endtime="20210731 21:38:32.647"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.643" endtime="20210731 21:38:32.647"/>
</iter>
<status status="PASS" starttime="20210731 21:38:32.632" endtime="20210731 21:38:32.648"/>
</for>
<status status="PASS" starttime="20210731 21:38:32.622" endtime="20210731 21:38:32.648"/>
</branch>
<status status="PASS" starttime="20210731 21:38:32.622" endtime="20210731 21:38:32.648"/>
</if>
<status status="PASS" starttime="20210731 21:38:32.592" endtime="20210731 21:38:32.648"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/&amp; !123abc456hjk'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:31.005" endtime="20210731 21:38:32.648">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t41" name="With Each Valid Token, Updating Username Of Each System User With #¤ abc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:32.654" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:32.665" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:32.669" level="INFO">${pids} = 6559</msg>
<status status="PASS" starttime="20210731 21:38:32.651" endtime="20210731 21:38:32.669"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:32.671" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:32.670" endtime="20210731 21:38:32.671"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:32.672" level="INFO">${pids} = ['6559']</msg>
<status status="PASS" starttime="20210731 21:38:32.671" endtime="20210731 21:38:32.672"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6559</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:32.675" level="INFO">Running command 'kill 6559 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:32.672" endtime="20210731 21:38:32.676"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.672" endtime="20210731 21:38:32.676"/>
</iter>
<status status="PASS" starttime="20210731 21:38:32.672" endtime="20210731 21:38:32.676"/>
</for>
<status status="PASS" starttime="20210731 21:38:32.671" endtime="20210731 21:38:32.676"/>
</branch>
<status status="PASS" starttime="20210731 21:38:32.671" endtime="20210731 21:38:32.676"/>
</if>
<status status="PASS" starttime="20210731 21:38:32.650" endtime="20210731 21:38:32.676"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:32.678" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:32.677" endtime="20210731 21:38:32.678"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:32.679" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:32.678" endtime="20210731 21:38:32.679"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:32.679" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:32.679" endtime="20210731 21:38:32.679"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:32.680" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:32.679" endtime="20210731 21:38:32.680"/>
</kw>
<msg timestamp="20210731 21:38:32.680" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:32.678" endtime="20210731 21:38:32.680"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:32.683" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:32.680" endtime="20210731 21:38:32.685"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.677" endtime="20210731 21:38:32.685"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:32.712" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:32.711" endtime="20210731 21:38:32.719"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:34.220" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:32.719" endtime="20210731 21:38:34.221"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.711" endtime="20210731 21:38:34.221"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:34.223" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:34.222" endtime="20210731 21:38:34.223"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:34.223" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:34.223" endtime="20210731 21:38:34.223"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:34.224" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:34.224" endtime="20210731 21:38:34.224"/>
</kw>
<msg timestamp="20210731 21:38:34.224" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:34.222" endtime="20210731 21:38:34.224"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:34.225" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:34.225" endtime="20210731 21:38:34.226"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.221" endtime="20210731 21:38:34.226"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:34.226" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:34.226" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:34.226" endtime="20210731 21:38:34.227"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.226" endtime="20210731 21:38:34.227"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:34.228" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:34.228" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:34.227" endtime="20210731 21:38:34.228"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:34.229" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:34.228" endtime="20210731 21:38:34.229"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:34.229" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:34.229" endtime="20210731 21:38:34.230"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:34.230" endtime="20210731 21:38:34.231"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:34.231" endtime="20210731 21:38:34.231"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.229" endtime="20210731 21:38:34.231"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:34.232" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:34.231" endtime="20210731 21:38:34.232"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:34.232" endtime="20210731 21:38:34.233"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:34.233" endtime="20210731 21:38:34.233"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.231" endtime="20210731 21:38:34.233"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:34.234" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:34.234" endtime="20210731 21:38:34.234"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:34.234" endtime="20210731 21:38:34.236"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:34.236" endtime="20210731 21:38:34.237"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.234" endtime="20210731 21:38:34.237"/>
</iter>
<status status="PASS" starttime="20210731 21:38:34.229" endtime="20210731 21:38:34.237"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:34.238" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:34.237" endtime="20210731 21:38:34.238"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.227" endtime="20210731 21:38:34.239"/>
</kw>
<status status="PASS" starttime="20210731 21:38:32.650" endtime="20210731 21:38:34.239"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:34.241" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:34.241" endtime="20210731 21:38:34.241"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:34.242" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210731 21:38:34.242" endtime="20210731 21:38:34.242"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:34.255" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:34.255" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:34.243" endtime="20210731 21:38:34.255"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:34.256" endtime="20210731 21:38:34.256"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:34.256" endtime="20210731 21:38:34.256"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:34.243" endtime="20210731 21:38:34.256"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:34.242" endtime="20210731 21:38:34.256"/>
</for>
<status status="FAIL" starttime="20210731 21:38:34.240" endtime="20210731 21:38:34.256"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:34.240" endtime="20210731 21:38:34.256"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:34.258" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:34.257" endtime="20210731 21:38:34.258"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:34.258" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210731 21:38:34.258" endtime="20210731 21:38:34.259"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:34.264" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:34.264" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:34.259" endtime="20210731 21:38:34.264"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:34.264" endtime="20210731 21:38:34.264"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:34.265" endtime="20210731 21:38:34.265"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:34.259" endtime="20210731 21:38:34.265"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:34.259" endtime="20210731 21:38:34.265"/>
</for>
<status status="FAIL" starttime="20210731 21:38:34.256" endtime="20210731 21:38:34.265"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:34.256" endtime="20210731 21:38:34.265"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:34.267" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:34.266" endtime="20210731 21:38:34.267"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:34.269" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210731 21:38:34.267" endtime="20210731 21:38:34.269"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:34.287" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:34.288" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:34.269" endtime="20210731 21:38:34.288"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:34.288" endtime="20210731 21:38:34.288"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:34.288" endtime="20210731 21:38:34.288"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:34.269" endtime="20210731 21:38:34.288"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:34.269" endtime="20210731 21:38:34.288"/>
</for>
<status status="FAIL" starttime="20210731 21:38:34.265" endtime="20210731 21:38:34.288"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:34.265" endtime="20210731 21:38:34.288"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:34.239" endtime="20210731 21:38:34.289"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:34.293" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:34.319" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:34.319" level="INFO">${pids} = 6591
6598
6602</msg>
<status status="PASS" starttime="20210731 21:38:34.290" endtime="20210731 21:38:34.319"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:34.320" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:34.320" endtime="20210731 21:38:34.320"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:34.321" level="INFO">${pids} = ['6591', '6598', '6602']</msg>
<status status="PASS" starttime="20210731 21:38:34.321" endtime="20210731 21:38:34.321"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6591</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:34.325" level="INFO">Running command 'kill 6591 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:34.322" endtime="20210731 21:38:34.326"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.322" endtime="20210731 21:38:34.326"/>
</iter>
<iter>
<var name="${pid}">6598</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:34.330" level="INFO">Running command 'kill 6598 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:34.327" endtime="20210731 21:38:34.331"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.326" endtime="20210731 21:38:34.331"/>
</iter>
<iter>
<var name="${pid}">6602</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:34.336" level="INFO">Running command 'kill 6602 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:34.331" endtime="20210731 21:38:34.336"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.331" endtime="20210731 21:38:34.336"/>
</iter>
<status status="PASS" starttime="20210731 21:38:34.321" endtime="20210731 21:38:34.336"/>
</for>
<status status="PASS" starttime="20210731 21:38:34.321" endtime="20210731 21:38:34.337"/>
</branch>
<status status="PASS" starttime="20210731 21:38:34.321" endtime="20210731 21:38:34.337"/>
</if>
<status status="PASS" starttime="20210731 21:38:34.289" endtime="20210731 21:38:34.337"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤ abc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:32.649" endtime="20210731 21:38:34.337">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t42" name="With Each Valid Token, Updating Username Of Each System User With #¤ abc!g Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:34.344" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:34.360" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:34.360" level="INFO">${pids} = 6641</msg>
<status status="PASS" starttime="20210731 21:38:34.340" endtime="20210731 21:38:34.360"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:34.361" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:34.360" endtime="20210731 21:38:34.361"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:34.362" level="INFO">${pids} = ['6641']</msg>
<status status="PASS" starttime="20210731 21:38:34.361" endtime="20210731 21:38:34.362"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6641</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:34.368" level="INFO">Running command 'kill 6641 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:34.362" endtime="20210731 21:38:34.369"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.362" endtime="20210731 21:38:34.369"/>
</iter>
<status status="PASS" starttime="20210731 21:38:34.362" endtime="20210731 21:38:34.369"/>
</for>
<status status="PASS" starttime="20210731 21:38:34.361" endtime="20210731 21:38:34.369"/>
</branch>
<status status="PASS" starttime="20210731 21:38:34.361" endtime="20210731 21:38:34.369"/>
</if>
<status status="PASS" starttime="20210731 21:38:34.339" endtime="20210731 21:38:34.370"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:34.371" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:34.371" endtime="20210731 21:38:34.371"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:34.372" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:34.372" endtime="20210731 21:38:34.372"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:34.373" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:34.372" endtime="20210731 21:38:34.373"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:34.373" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:34.373" endtime="20210731 21:38:34.373"/>
</kw>
<msg timestamp="20210731 21:38:34.373" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:34.371" endtime="20210731 21:38:34.373"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:34.379" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:34.374" endtime="20210731 21:38:34.381"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.370" endtime="20210731 21:38:34.381"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:34.385" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:34.382" endtime="20210731 21:38:34.419"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:35.921" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:34.420" endtime="20210731 21:38:35.922"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.382" endtime="20210731 21:38:35.922"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:35.923" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:35.923" endtime="20210731 21:38:35.923"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:35.925" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:35.924" endtime="20210731 21:38:35.925"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:35.926" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:35.926" endtime="20210731 21:38:35.926"/>
</kw>
<msg timestamp="20210731 21:38:35.927" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:35.923" endtime="20210731 21:38:35.927"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:35.927" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:35.927" endtime="20210731 21:38:35.944"/>
</kw>
<status status="PASS" starttime="20210731 21:38:35.922" endtime="20210731 21:38:35.944"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:35.945" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:35.945" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:35.945" endtime="20210731 21:38:35.945"/>
</kw>
<status status="PASS" starttime="20210731 21:38:35.944" endtime="20210731 21:38:35.945"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:35.946" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:35.947" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:35.946" endtime="20210731 21:38:35.947"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:35.948" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:35.947" endtime="20210731 21:38:35.948"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:35.950" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:35.950" endtime="20210731 21:38:35.950"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:35.950" endtime="20210731 21:38:35.951"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:35.951" endtime="20210731 21:38:35.952"/>
</kw>
<status status="PASS" starttime="20210731 21:38:35.949" endtime="20210731 21:38:35.952"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:35.952" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:35.952" endtime="20210731 21:38:35.952"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:35.952" endtime="20210731 21:38:35.953"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:35.954" endtime="20210731 21:38:35.954"/>
</kw>
<status status="PASS" starttime="20210731 21:38:35.952" endtime="20210731 21:38:35.954"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:35.955" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:35.954" endtime="20210731 21:38:35.955"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:35.955" endtime="20210731 21:38:35.956"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:35.956" endtime="20210731 21:38:35.956"/>
</kw>
<status status="PASS" starttime="20210731 21:38:35.954" endtime="20210731 21:38:35.956"/>
</iter>
<status status="PASS" starttime="20210731 21:38:35.948" endtime="20210731 21:38:35.956"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:35.957" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:35.956" endtime="20210731 21:38:35.957"/>
</kw>
<status status="PASS" starttime="20210731 21:38:35.946" endtime="20210731 21:38:35.957"/>
</kw>
<status status="PASS" starttime="20210731 21:38:34.339" endtime="20210731 21:38:35.957"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:35.960" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:35.959" endtime="20210731 21:38:35.960"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:35.960" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210731 21:38:35.960" endtime="20210731 21:38:35.960"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:35.973" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:35.974" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:35.961" endtime="20210731 21:38:35.974"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:35.974" endtime="20210731 21:38:35.974"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:35.974" endtime="20210731 21:38:35.974"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:35.961" endtime="20210731 21:38:35.974"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:35.960" endtime="20210731 21:38:35.974"/>
</for>
<status status="FAIL" starttime="20210731 21:38:35.958" endtime="20210731 21:38:35.975"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:35.958" endtime="20210731 21:38:35.975"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:35.977" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:35.976" endtime="20210731 21:38:35.977"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:35.977" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210731 21:38:35.977" endtime="20210731 21:38:35.977"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:35.983" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:35.983" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:35.978" endtime="20210731 21:38:35.983"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:35.983" endtime="20210731 21:38:35.983"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:35.983" endtime="20210731 21:38:35.983"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:35.978" endtime="20210731 21:38:35.984"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:35.977" endtime="20210731 21:38:35.984"/>
</for>
<status status="FAIL" starttime="20210731 21:38:35.975" endtime="20210731 21:38:35.984"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:35.975" endtime="20210731 21:38:35.984"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:35.988" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:35.986" endtime="20210731 21:38:35.988"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:35.990" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210731 21:38:35.989" endtime="20210731 21:38:35.990"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:36.006" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:36.007" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:35.990" endtime="20210731 21:38:36.007"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:36.007" endtime="20210731 21:38:36.007"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:36.007" endtime="20210731 21:38:36.007"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:35.990" endtime="20210731 21:38:36.007"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:35.990" endtime="20210731 21:38:36.007"/>
</for>
<status status="FAIL" starttime="20210731 21:38:35.985" endtime="20210731 21:38:36.008"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:35.985" endtime="20210731 21:38:36.008"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:35.958" endtime="20210731 21:38:36.008"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:36.016" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:36.030" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:36.030" level="INFO">${pids} = 6664
6679
6700</msg>
<status status="PASS" starttime="20210731 21:38:36.012" endtime="20210731 21:38:36.030"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:36.031" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:36.031" endtime="20210731 21:38:36.031"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:36.032" level="INFO">${pids} = ['6664', '6679', '6700']</msg>
<status status="PASS" starttime="20210731 21:38:36.032" endtime="20210731 21:38:36.032"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6664</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:36.043" level="INFO">Running command 'kill 6664 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:36.033" endtime="20210731 21:38:36.045"/>
</kw>
<status status="PASS" starttime="20210731 21:38:36.033" endtime="20210731 21:38:36.045"/>
</iter>
<iter>
<var name="${pid}">6679</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:36.055" level="INFO">Running command 'kill 6679 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:36.046" endtime="20210731 21:38:36.058"/>
</kw>
<status status="PASS" starttime="20210731 21:38:36.046" endtime="20210731 21:38:36.059"/>
</iter>
<iter>
<var name="${pid}">6700</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:36.063" level="INFO">Running command 'kill 6700 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:36.059" endtime="20210731 21:38:36.064"/>
</kw>
<status status="PASS" starttime="20210731 21:38:36.059" endtime="20210731 21:38:36.064"/>
</iter>
<status status="PASS" starttime="20210731 21:38:36.032" endtime="20210731 21:38:36.064"/>
</for>
<status status="PASS" starttime="20210731 21:38:36.032" endtime="20210731 21:38:36.064"/>
</branch>
<status status="PASS" starttime="20210731 21:38:36.031" endtime="20210731 21:38:36.064"/>
</if>
<status status="PASS" starttime="20210731 21:38:36.010" endtime="20210731 21:38:36.065"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤ abc!g'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:34.338" endtime="20210731 21:38:36.065">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t43" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g() &amp;%¤fghjklQWERTY Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:36.072" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:36.088" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:36.088" level="INFO">${pids} = 6750</msg>
<status status="PASS" starttime="20210731 21:38:36.068" endtime="20210731 21:38:36.088"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:36.089" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:36.089" endtime="20210731 21:38:36.089"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:36.090" level="INFO">${pids} = ['6750']</msg>
<status status="PASS" starttime="20210731 21:38:36.090" endtime="20210731 21:38:36.090"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6750</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:36.104" level="INFO">Running command 'kill 6750 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:36.091" endtime="20210731 21:38:36.106"/>
</kw>
<status status="PASS" starttime="20210731 21:38:36.091" endtime="20210731 21:38:36.106"/>
</iter>
<status status="PASS" starttime="20210731 21:38:36.090" endtime="20210731 21:38:36.106"/>
</for>
<status status="PASS" starttime="20210731 21:38:36.090" endtime="20210731 21:38:36.106"/>
</branch>
<status status="PASS" starttime="20210731 21:38:36.090" endtime="20210731 21:38:36.106"/>
</if>
<status status="PASS" starttime="20210731 21:38:36.068" endtime="20210731 21:38:36.107"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:36.114" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:36.113" endtime="20210731 21:38:36.114"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:36.119" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:36.115" endtime="20210731 21:38:36.120"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:36.120" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:36.120" endtime="20210731 21:38:36.120"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:36.121" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:36.121" endtime="20210731 21:38:36.121"/>
</kw>
<msg timestamp="20210731 21:38:36.122" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:36.114" endtime="20210731 21:38:36.122"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:36.144" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:36.122" endtime="20210731 21:38:36.147"/>
</kw>
<status status="PASS" starttime="20210731 21:38:36.108" endtime="20210731 21:38:36.147"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:36.149" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:36.148" endtime="20210731 21:38:36.155"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:37.657" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:36.156" endtime="20210731 21:38:37.658"/>
</kw>
<status status="PASS" starttime="20210731 21:38:36.148" endtime="20210731 21:38:37.658"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:37.660" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:37.659" endtime="20210731 21:38:37.660"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:37.660" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:37.660" endtime="20210731 21:38:37.660"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:37.661" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:37.660" endtime="20210731 21:38:37.661"/>
</kw>
<msg timestamp="20210731 21:38:37.661" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:37.659" endtime="20210731 21:38:37.661"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:37.662" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:37.661" endtime="20210731 21:38:37.662"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.659" endtime="20210731 21:38:37.662"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:37.663" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:37.663" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:37.663" endtime="20210731 21:38:37.663"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.663" endtime="20210731 21:38:37.664"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:37.688" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:37.688" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:37.664" endtime="20210731 21:38:37.688"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:37.689" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:37.689" endtime="20210731 21:38:37.689"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:37.690" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:37.690" endtime="20210731 21:38:37.690"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:37.690" endtime="20210731 21:38:37.691"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:37.692" endtime="20210731 21:38:37.692"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.689" endtime="20210731 21:38:37.692"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:37.693" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:37.693" endtime="20210731 21:38:37.693"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:37.693" endtime="20210731 21:38:37.694"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:37.694" endtime="20210731 21:38:37.694"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.692" endtime="20210731 21:38:37.695"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:37.695" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:37.695" endtime="20210731 21:38:37.695"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:37.695" endtime="20210731 21:38:37.696"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:37.696" endtime="20210731 21:38:37.697"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.695" endtime="20210731 21:38:37.697"/>
</iter>
<status status="PASS" starttime="20210731 21:38:37.689" endtime="20210731 21:38:37.697"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:37.697" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:37.697" endtime="20210731 21:38:37.697"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.664" endtime="20210731 21:38:37.697"/>
</kw>
<status status="PASS" starttime="20210731 21:38:36.067" endtime="20210731 21:38:37.698"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:37.699" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:37.699" endtime="20210731 21:38:37.699"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:37.700" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 21:38:37.700" endtime="20210731 21:38:37.700"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:37.714" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:37.714" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:37.700" endtime="20210731 21:38:37.714"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:37.714" endtime="20210731 21:38:37.714"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:37.714" endtime="20210731 21:38:37.714"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:37.700" endtime="20210731 21:38:37.714"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:37.700" endtime="20210731 21:38:37.715"/>
</for>
<status status="FAIL" starttime="20210731 21:38:37.698" endtime="20210731 21:38:37.715"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:37.698" endtime="20210731 21:38:37.715"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:37.716" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:37.716" endtime="20210731 21:38:37.716"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:37.717" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 21:38:37.717" endtime="20210731 21:38:37.717"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:37.724" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:37.724" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:37.718" endtime="20210731 21:38:37.724"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:37.724" endtime="20210731 21:38:37.724"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:37.725" endtime="20210731 21:38:37.725"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:37.717" endtime="20210731 21:38:37.725"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:37.717" endtime="20210731 21:38:37.725"/>
</for>
<status status="FAIL" starttime="20210731 21:38:37.715" endtime="20210731 21:38:37.726"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:37.715" endtime="20210731 21:38:37.726"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:37.728" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:37.728" endtime="20210731 21:38:37.728"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:37.730" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210731 21:38:37.728" endtime="20210731 21:38:37.730"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:37.737" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:37.738" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:37.731" endtime="20210731 21:38:37.738"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:37.738" endtime="20210731 21:38:37.739"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:37.739" endtime="20210731 21:38:37.739"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:37.731" endtime="20210731 21:38:37.739"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:37.731" endtime="20210731 21:38:37.739"/>
</for>
<status status="FAIL" starttime="20210731 21:38:37.727" endtime="20210731 21:38:37.739"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:37.726" endtime="20210731 21:38:37.739"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:37.698" endtime="20210731 21:38:37.740"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:37.748" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:37.763" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:37.763" level="INFO">${pids} = 6799
6813
6829</msg>
<status status="PASS" starttime="20210731 21:38:37.741" endtime="20210731 21:38:37.763"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:37.764" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:37.764" endtime="20210731 21:38:37.764"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:37.765" level="INFO">${pids} = ['6799', '6813', '6829']</msg>
<status status="PASS" starttime="20210731 21:38:37.765" endtime="20210731 21:38:37.767"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6799</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:37.772" level="INFO">Running command 'kill 6799 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:37.768" endtime="20210731 21:38:37.773"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.767" endtime="20210731 21:38:37.773"/>
</iter>
<iter>
<var name="${pid}">6813</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:37.796" level="INFO">Running command 'kill 6813 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:37.775" endtime="20210731 21:38:37.796"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.774" endtime="20210731 21:38:37.797"/>
</iter>
<iter>
<var name="${pid}">6829</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:37.802" level="INFO">Running command 'kill 6829 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:37.797" endtime="20210731 21:38:37.803"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.797" endtime="20210731 21:38:37.803"/>
</iter>
<status status="PASS" starttime="20210731 21:38:37.767" endtime="20210731 21:38:37.803"/>
</for>
<status status="PASS" starttime="20210731 21:38:37.765" endtime="20210731 21:38:37.803"/>
</branch>
<status status="PASS" starttime="20210731 21:38:37.764" endtime="20210731 21:38:37.803"/>
</if>
<status status="PASS" starttime="20210731 21:38:37.740" endtime="20210731 21:38:37.803"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g() &amp;%¤fghjklQWERTY'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-USERNAME-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:36.066" endtime="20210731 21:38:37.803">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t44" name="With Each Valid Token, Updating Password Of Each System User With '' Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:37.811" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:37.829" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:37.829" level="INFO">${pids} = 6880</msg>
<status status="PASS" starttime="20210731 21:38:37.806" endtime="20210731 21:38:37.829"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:37.830" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:37.829" endtime="20210731 21:38:37.830"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:37.831" level="INFO">${pids} = ['6880']</msg>
<status status="PASS" starttime="20210731 21:38:37.831" endtime="20210731 21:38:37.831"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6880</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:37.839" level="INFO">Running command 'kill 6880 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:37.831" endtime="20210731 21:38:37.841"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.831" endtime="20210731 21:38:37.841"/>
</iter>
<status status="PASS" starttime="20210731 21:38:37.831" endtime="20210731 21:38:37.843"/>
</for>
<status status="PASS" starttime="20210731 21:38:37.830" endtime="20210731 21:38:37.849"/>
</branch>
<status status="PASS" starttime="20210731 21:38:37.830" endtime="20210731 21:38:37.850"/>
</if>
<status status="PASS" starttime="20210731 21:38:37.806" endtime="20210731 21:38:37.850"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:37.856" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:37.851" endtime="20210731 21:38:37.856"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:37.857" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:37.857" endtime="20210731 21:38:37.857"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:37.862" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:37.857" endtime="20210731 21:38:37.862"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:37.862" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:37.862" endtime="20210731 21:38:37.863"/>
</kw>
<msg timestamp="20210731 21:38:37.863" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:37.856" endtime="20210731 21:38:37.863"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:37.876" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:37.863" endtime="20210731 21:38:37.879"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.850" endtime="20210731 21:38:37.880"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:37.881" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:37.881" endtime="20210731 21:38:37.887"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:39.388" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:37.887" endtime="20210731 21:38:39.388"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.880" endtime="20210731 21:38:39.389"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:39.390" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:39.390" endtime="20210731 21:38:39.390"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:39.391" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:39.391" endtime="20210731 21:38:39.391"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:39.391" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:39.391" endtime="20210731 21:38:39.391"/>
</kw>
<msg timestamp="20210731 21:38:39.392" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:39.390" endtime="20210731 21:38:39.392"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:39.392" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:39.392" endtime="20210731 21:38:39.393"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.389" endtime="20210731 21:38:39.393"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:39.393" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:39.393" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:39.393" endtime="20210731 21:38:39.394"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.393" endtime="20210731 21:38:39.394"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:39.395" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:39.395" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:39.394" endtime="20210731 21:38:39.395"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:39.395" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:39.395" endtime="20210731 21:38:39.395"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:39.396" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:39.395" endtime="20210731 21:38:39.396"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:39.396" endtime="20210731 21:38:39.397"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:39.397" endtime="20210731 21:38:39.397"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.395" endtime="20210731 21:38:39.397"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:39.398" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:39.398" endtime="20210731 21:38:39.398"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:39.398" endtime="20210731 21:38:39.399"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:39.399" endtime="20210731 21:38:39.399"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.397" endtime="20210731 21:38:39.399"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:39.400" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:39.399" endtime="20210731 21:38:39.400"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:39.400" endtime="20210731 21:38:39.401"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:39.401" endtime="20210731 21:38:39.401"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.399" endtime="20210731 21:38:39.401"/>
</iter>
<status status="PASS" starttime="20210731 21:38:39.395" endtime="20210731 21:38:39.401"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:39.402" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:39.402" endtime="20210731 21:38:39.402"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.394" endtime="20210731 21:38:39.402"/>
</kw>
<status status="PASS" starttime="20210731 21:38:37.806" endtime="20210731 21:38:39.402"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:39.404" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:39.404" endtime="20210731 21:38:39.404"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:39.405" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210731 21:38:39.404" endtime="20210731 21:38:39.405"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:39.417" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:39.417" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:39.406" endtime="20210731 21:38:39.417"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:39.418" endtime="20210731 21:38:39.418"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:39.418" endtime="20210731 21:38:39.418"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:39.405" endtime="20210731 21:38:39.418"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:39.405" endtime="20210731 21:38:39.418"/>
</for>
<status status="FAIL" starttime="20210731 21:38:39.403" endtime="20210731 21:38:39.418"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:39.403" endtime="20210731 21:38:39.418"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:39.420" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:39.420" endtime="20210731 21:38:39.420"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:39.421" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210731 21:38:39.420" endtime="20210731 21:38:39.421"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:39.426" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:39.426" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:39.421" endtime="20210731 21:38:39.426"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:39.426" endtime="20210731 21:38:39.426"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:39.426" endtime="20210731 21:38:39.426"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:39.421" endtime="20210731 21:38:39.427"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:39.421" endtime="20210731 21:38:39.427"/>
</for>
<status status="FAIL" starttime="20210731 21:38:39.418" endtime="20210731 21:38:39.427"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:39.418" endtime="20210731 21:38:39.427"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:39.430" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:39.428" endtime="20210731 21:38:39.430"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:39.430" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210731 21:38:39.430" endtime="20210731 21:38:39.430"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:39.449" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:39.450" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:39.445" endtime="20210731 21:38:39.450"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:39.450" endtime="20210731 21:38:39.450"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:39.450" endtime="20210731 21:38:39.450"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:39.444" endtime="20210731 21:38:39.450"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:39.431" endtime="20210731 21:38:39.450"/>
</for>
<status status="FAIL" starttime="20210731 21:38:39.427" endtime="20210731 21:38:39.450"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:39.427" endtime="20210731 21:38:39.450"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:39.403" endtime="20210731 21:38:39.451"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:39.455" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:39.466" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:39.466" level="INFO">${pids} = 6909
6916
6920</msg>
<status status="PASS" starttime="20210731 21:38:39.451" endtime="20210731 21:38:39.466"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:39.467" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:39.466" endtime="20210731 21:38:39.467"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:39.469" level="INFO">${pids} = ['6909', '6916', '6920']</msg>
<status status="PASS" starttime="20210731 21:38:39.468" endtime="20210731 21:38:39.469"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6909</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:39.472" level="INFO">Running command 'kill 6909 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:39.469" endtime="20210731 21:38:39.473"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.469" endtime="20210731 21:38:39.473"/>
</iter>
<iter>
<var name="${pid}">6916</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:39.476" level="INFO">Running command 'kill 6916 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:39.474" endtime="20210731 21:38:39.477"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.473" endtime="20210731 21:38:39.480"/>
</iter>
<iter>
<var name="${pid}">6920</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:39.493" level="INFO">Running command 'kill 6920 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:39.480" endtime="20210731 21:38:39.493"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.480" endtime="20210731 21:38:39.493"/>
</iter>
<status status="PASS" starttime="20210731 21:38:39.469" endtime="20210731 21:38:39.494"/>
</for>
<status status="PASS" starttime="20210731 21:38:39.468" endtime="20210731 21:38:39.494"/>
</branch>
<status status="PASS" starttime="20210731 21:38:39.467" endtime="20210731 21:38:39.494"/>
</if>
<status status="PASS" starttime="20210731 21:38:39.451" endtime="20210731 21:38:39.494"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": ''
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:37.804" endtime="20210731 21:38:39.494">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t45" name="With Each Valid Token, Updating Password Of Each System User With abcdefg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:39.499" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:39.511" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:39.511" level="INFO">${pids} = 6949</msg>
<status status="PASS" starttime="20210731 21:38:39.496" endtime="20210731 21:38:39.511"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:39.512" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:39.512" endtime="20210731 21:38:39.512"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:39.513" level="INFO">${pids} = ['6949']</msg>
<status status="PASS" starttime="20210731 21:38:39.513" endtime="20210731 21:38:39.513"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6949</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:39.518" level="INFO">Running command 'kill 6949 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:39.514" endtime="20210731 21:38:39.519"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.514" endtime="20210731 21:38:39.519"/>
</iter>
<status status="PASS" starttime="20210731 21:38:39.514" endtime="20210731 21:38:39.519"/>
</for>
<status status="PASS" starttime="20210731 21:38:39.513" endtime="20210731 21:38:39.519"/>
</branch>
<status status="PASS" starttime="20210731 21:38:39.513" endtime="20210731 21:38:39.519"/>
</if>
<status status="PASS" starttime="20210731 21:38:39.496" endtime="20210731 21:38:39.519"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:39.521" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:39.520" endtime="20210731 21:38:39.521"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:39.522" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:39.522" endtime="20210731 21:38:39.522"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:39.522" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:39.522" endtime="20210731 21:38:39.522"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:39.523" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:39.522" endtime="20210731 21:38:39.523"/>
</kw>
<msg timestamp="20210731 21:38:39.523" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:39.521" endtime="20210731 21:38:39.523"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:39.531" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:39.523" endtime="20210731 21:38:39.533"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.520" endtime="20210731 21:38:39.533"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:39.535" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:39.534" endtime="20210731 21:38:39.539"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:41.041" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:39.540" endtime="20210731 21:38:41.041"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.534" endtime="20210731 21:38:41.041"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:41.043" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:41.042" endtime="20210731 21:38:41.043"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:41.043" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:41.043" endtime="20210731 21:38:41.043"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:41.044" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:41.043" endtime="20210731 21:38:41.044"/>
</kw>
<msg timestamp="20210731 21:38:41.044" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:41.042" endtime="20210731 21:38:41.044"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:41.044" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:41.044" endtime="20210731 21:38:41.045"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.041" endtime="20210731 21:38:41.045"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:41.046" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:41.046" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:41.046" endtime="20210731 21:38:41.046"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.045" endtime="20210731 21:38:41.046"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:41.047" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:41.047" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:41.047" endtime="20210731 21:38:41.047"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:41.048" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:41.047" endtime="20210731 21:38:41.048"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:41.049" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:41.048" endtime="20210731 21:38:41.049"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:41.049" endtime="20210731 21:38:41.050"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:41.050" endtime="20210731 21:38:41.050"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.048" endtime="20210731 21:38:41.050"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:41.051" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:41.050" endtime="20210731 21:38:41.051"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:41.051" endtime="20210731 21:38:41.052"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:41.052" endtime="20210731 21:38:41.052"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.050" endtime="20210731 21:38:41.052"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:41.053" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:41.053" endtime="20210731 21:38:41.053"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:41.053" endtime="20210731 21:38:41.055"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:41.055" endtime="20210731 21:38:41.056"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.052" endtime="20210731 21:38:41.056"/>
</iter>
<status status="PASS" starttime="20210731 21:38:41.048" endtime="20210731 21:38:41.056"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:41.056" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:41.056" endtime="20210731 21:38:41.056"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.046" endtime="20210731 21:38:41.056"/>
</kw>
<status status="PASS" starttime="20210731 21:38:39.496" endtime="20210731 21:38:41.057"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:41.058" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:41.058" endtime="20210731 21:38:41.058"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:41.059" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 21:38:41.058" endtime="20210731 21:38:41.059"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:41.071" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:41.071" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:41.059" endtime="20210731 21:38:41.071"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:41.072" endtime="20210731 21:38:41.072"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:41.072" endtime="20210731 21:38:41.072"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:41.059" endtime="20210731 21:38:41.072"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:41.059" endtime="20210731 21:38:41.072"/>
</for>
<status status="FAIL" starttime="20210731 21:38:41.057" endtime="20210731 21:38:41.072"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:41.057" endtime="20210731 21:38:41.072"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:41.073" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:41.073" endtime="20210731 21:38:41.073"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:41.074" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 21:38:41.074" endtime="20210731 21:38:41.074"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:41.079" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:41.079" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:41.074" endtime="20210731 21:38:41.079"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:41.079" endtime="20210731 21:38:41.079"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:41.079" endtime="20210731 21:38:41.079"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:41.074" endtime="20210731 21:38:41.080"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:41.074" endtime="20210731 21:38:41.080"/>
</for>
<status status="FAIL" starttime="20210731 21:38:41.072" endtime="20210731 21:38:41.080"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:41.072" endtime="20210731 21:38:41.080"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:41.081" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:41.081" endtime="20210731 21:38:41.081"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:41.082" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210731 21:38:41.081" endtime="20210731 21:38:41.082"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:41.090" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:41.102" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:41.082" endtime="20210731 21:38:41.102"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:41.102" endtime="20210731 21:38:41.102"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:41.102" endtime="20210731 21:38:41.102"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:41.082" endtime="20210731 21:38:41.102"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:41.082" endtime="20210731 21:38:41.102"/>
</for>
<status status="FAIL" starttime="20210731 21:38:41.080" endtime="20210731 21:38:41.102"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:41.080" endtime="20210731 21:38:41.102"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:41.057" endtime="20210731 21:38:41.103"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:41.108" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:41.121" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:41.121" level="INFO">${pids} = 6972
6979
6986</msg>
<status status="PASS" starttime="20210731 21:38:41.104" endtime="20210731 21:38:41.121"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:41.123" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:41.122" endtime="20210731 21:38:41.123"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:41.124" level="INFO">${pids} = ['6972', '6979', '6986']</msg>
<status status="PASS" starttime="20210731 21:38:41.123" endtime="20210731 21:38:41.124"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">6972</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:41.127" level="INFO">Running command 'kill 6972 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:41.124" endtime="20210731 21:38:41.128"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.124" endtime="20210731 21:38:41.128"/>
</iter>
<iter>
<var name="${pid}">6979</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:41.133" level="INFO">Running command 'kill 6979 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:41.128" endtime="20210731 21:38:41.136"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.128" endtime="20210731 21:38:41.136"/>
</iter>
<iter>
<var name="${pid}">6986</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:41.152" level="INFO">Running command 'kill 6986 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:41.137" endtime="20210731 21:38:41.152"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.136" endtime="20210731 21:38:41.152"/>
</iter>
<status status="PASS" starttime="20210731 21:38:41.124" endtime="20210731 21:38:41.152"/>
</for>
<status status="PASS" starttime="20210731 21:38:41.123" endtime="20210731 21:38:41.152"/>
</branch>
<status status="PASS" starttime="20210731 21:38:41.123" endtime="20210731 21:38:41.152"/>
</if>
<status status="PASS" starttime="20210731 21:38:41.103" endtime="20210731 21:38:41.153"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:39.495" endtime="20210731 21:38:41.153">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t46" name="With Each Valid Token, Updating Password Of Each System User With abcdefgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:41.159" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:41.172" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:41.173" level="INFO">${pids} = 7052</msg>
<status status="PASS" starttime="20210731 21:38:41.156" endtime="20210731 21:38:41.173"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:41.174" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:41.173" endtime="20210731 21:38:41.174"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:41.175" level="INFO">${pids} = ['7052']</msg>
<status status="PASS" starttime="20210731 21:38:41.174" endtime="20210731 21:38:41.175"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7052</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:41.179" level="INFO">Running command 'kill 7052 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:41.175" endtime="20210731 21:38:41.179"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.175" endtime="20210731 21:38:41.179"/>
</iter>
<status status="PASS" starttime="20210731 21:38:41.175" endtime="20210731 21:38:41.180"/>
</for>
<status status="PASS" starttime="20210731 21:38:41.174" endtime="20210731 21:38:41.180"/>
</branch>
<status status="PASS" starttime="20210731 21:38:41.174" endtime="20210731 21:38:41.183"/>
</if>
<status status="PASS" starttime="20210731 21:38:41.155" endtime="20210731 21:38:41.184"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:41.186" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:41.185" endtime="20210731 21:38:41.186"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:41.187" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:41.187" endtime="20210731 21:38:41.187"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:41.188" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:41.188" endtime="20210731 21:38:41.188"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:41.189" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:41.188" endtime="20210731 21:38:41.189"/>
</kw>
<msg timestamp="20210731 21:38:41.189" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:41.186" endtime="20210731 21:38:41.189"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:41.195" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:41.189" endtime="20210731 21:38:41.196"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.184" endtime="20210731 21:38:41.196"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:41.199" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:41.197" endtime="20210731 21:38:41.229"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:42.730" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:41.229" endtime="20210731 21:38:42.730"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.197" endtime="20210731 21:38:42.730"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:42.732" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:42.732" endtime="20210731 21:38:42.732"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:42.733" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:42.732" endtime="20210731 21:38:42.733"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:42.733" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:42.733" endtime="20210731 21:38:42.733"/>
</kw>
<msg timestamp="20210731 21:38:42.733" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:42.731" endtime="20210731 21:38:42.734"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:42.734" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:42.734" endtime="20210731 21:38:42.735"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.731" endtime="20210731 21:38:42.735"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:42.735" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:42.735" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:42.735" endtime="20210731 21:38:42.736"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.735" endtime="20210731 21:38:42.736"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:42.736" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:42.737" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:42.736" endtime="20210731 21:38:42.737"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:42.737" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:42.737" endtime="20210731 21:38:42.737"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:42.738" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:42.738" endtime="20210731 21:38:42.738"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:42.738" endtime="20210731 21:38:42.739"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:42.739" endtime="20210731 21:38:42.739"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.737" endtime="20210731 21:38:42.739"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:42.740" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:42.740" endtime="20210731 21:38:42.740"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:42.740" endtime="20210731 21:38:42.741"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:42.741" endtime="20210731 21:38:42.741"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.739" endtime="20210731 21:38:42.741"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:42.742" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:42.742" endtime="20210731 21:38:42.742"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:42.742" endtime="20210731 21:38:42.743"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:42.743" endtime="20210731 21:38:42.743"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.741" endtime="20210731 21:38:42.743"/>
</iter>
<status status="PASS" starttime="20210731 21:38:42.737" endtime="20210731 21:38:42.743"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:42.744" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:42.744" endtime="20210731 21:38:42.744"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.736" endtime="20210731 21:38:42.744"/>
</kw>
<status status="PASS" starttime="20210731 21:38:41.155" endtime="20210731 21:38:42.744"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:42.746" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:42.745" endtime="20210731 21:38:42.746"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:42.746" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 21:38:42.746" endtime="20210731 21:38:42.746"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:42.759" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:42.760" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:42.747" endtime="20210731 21:38:42.760"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:42.760" endtime="20210731 21:38:42.760"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:42.760" endtime="20210731 21:38:42.760"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:42.747" endtime="20210731 21:38:42.760"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:42.746" endtime="20210731 21:38:42.760"/>
</for>
<status status="FAIL" starttime="20210731 21:38:42.745" endtime="20210731 21:38:42.760"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:42.745" endtime="20210731 21:38:42.760"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:42.762" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:42.761" endtime="20210731 21:38:42.762"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:42.762" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 21:38:42.762" endtime="20210731 21:38:42.762"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:42.767" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:42.768" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:42.763" endtime="20210731 21:38:42.768"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:42.768" endtime="20210731 21:38:42.768"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:42.768" endtime="20210731 21:38:42.768"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:42.763" endtime="20210731 21:38:42.768"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:42.762" endtime="20210731 21:38:42.768"/>
</for>
<status status="FAIL" starttime="20210731 21:38:42.761" endtime="20210731 21:38:42.768"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:42.761" endtime="20210731 21:38:42.768"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:42.769" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:42.769" endtime="20210731 21:38:42.770"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:42.770" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210731 21:38:42.770" endtime="20210731 21:38:42.770"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:42.787" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:42.787" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:42.771" endtime="20210731 21:38:42.787"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:42.787" endtime="20210731 21:38:42.787"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:42.788" endtime="20210731 21:38:42.788"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:42.770" endtime="20210731 21:38:42.788"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:42.770" endtime="20210731 21:38:42.788"/>
</for>
<status status="FAIL" starttime="20210731 21:38:42.768" endtime="20210731 21:38:42.788"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:42.768" endtime="20210731 21:38:42.788"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:42.744" endtime="20210731 21:38:42.788"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:42.793" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:42.805" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:42.805" level="INFO">${pids} = 7084
7091
7096</msg>
<status status="PASS" starttime="20210731 21:38:42.789" endtime="20210731 21:38:42.805"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:42.806" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:42.805" endtime="20210731 21:38:42.806"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:42.807" level="INFO">${pids} = ['7084', '7091', '7096']</msg>
<status status="PASS" starttime="20210731 21:38:42.807" endtime="20210731 21:38:42.807"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7084</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:42.820" level="INFO">Running command 'kill 7084 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:42.808" endtime="20210731 21:38:42.821"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.807" endtime="20210731 21:38:42.821"/>
</iter>
<iter>
<var name="${pid}">7091</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:42.825" level="INFO">Running command 'kill 7091 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:42.822" endtime="20210731 21:38:42.828"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.821" endtime="20210731 21:38:42.828"/>
</iter>
<iter>
<var name="${pid}">7096</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:42.832" level="INFO">Running command 'kill 7096 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:42.829" endtime="20210731 21:38:42.833"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.828" endtime="20210731 21:38:42.833"/>
</iter>
<status status="PASS" starttime="20210731 21:38:42.807" endtime="20210731 21:38:42.833"/>
</for>
<status status="PASS" starttime="20210731 21:38:42.806" endtime="20210731 21:38:42.833"/>
</branch>
<status status="PASS" starttime="20210731 21:38:42.806" endtime="20210731 21:38:42.833"/>
</if>
<status status="PASS" starttime="20210731 21:38:42.788" endtime="20210731 21:38:42.833"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:41.154" endtime="20210731 21:38:42.833">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t47" name="With Each Valid Token, Updating Password Of Each System User With abcdefghjklmnprstoöuüvyz Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:42.843" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:42.857" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:42.857" level="INFO">${pids} = 7131</msg>
<status status="PASS" starttime="20210731 21:38:42.836" endtime="20210731 21:38:42.857"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:42.858" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:42.858" endtime="20210731 21:38:42.858"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:42.859" level="INFO">${pids} = ['7131']</msg>
<status status="PASS" starttime="20210731 21:38:42.859" endtime="20210731 21:38:42.859"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7131</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:42.867" level="INFO">Running command 'kill 7131 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:42.860" endtime="20210731 21:38:42.868"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.860" endtime="20210731 21:38:42.868"/>
</iter>
<status status="PASS" starttime="20210731 21:38:42.860" endtime="20210731 21:38:42.868"/>
</for>
<status status="PASS" starttime="20210731 21:38:42.859" endtime="20210731 21:38:42.868"/>
</branch>
<status status="PASS" starttime="20210731 21:38:42.859" endtime="20210731 21:38:42.868"/>
</if>
<status status="PASS" starttime="20210731 21:38:42.835" endtime="20210731 21:38:42.869"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:42.870" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:42.870" endtime="20210731 21:38:42.870"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:42.871" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:42.871" endtime="20210731 21:38:42.871"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:42.872" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:42.871" endtime="20210731 21:38:42.872"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:42.872" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:42.872" endtime="20210731 21:38:42.872"/>
</kw>
<msg timestamp="20210731 21:38:42.873" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:42.870" endtime="20210731 21:38:42.873"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:42.876" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:42.873" endtime="20210731 21:38:42.878"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.869" endtime="20210731 21:38:42.878"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:42.880" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:42.879" endtime="20210731 21:38:42.904"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:44.405" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:42.905" endtime="20210731 21:38:44.406"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.878" endtime="20210731 21:38:44.406"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:44.407" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:44.407" endtime="20210731 21:38:44.407"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:44.408" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:44.408" endtime="20210731 21:38:44.408"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:44.408" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:44.408" endtime="20210731 21:38:44.408"/>
</kw>
<msg timestamp="20210731 21:38:44.409" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:44.407" endtime="20210731 21:38:44.409"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:44.409" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:44.409" endtime="20210731 21:38:44.410"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.406" endtime="20210731 21:38:44.410"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:44.411" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:44.411" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:44.410" endtime="20210731 21:38:44.411"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.410" endtime="20210731 21:38:44.411"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:44.412" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:44.412" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:44.412" endtime="20210731 21:38:44.412"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:44.412" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:44.412" endtime="20210731 21:38:44.412"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:44.413" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:44.413" endtime="20210731 21:38:44.413"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:44.413" endtime="20210731 21:38:44.414"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:44.414" endtime="20210731 21:38:44.415"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.413" endtime="20210731 21:38:44.415"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:44.415" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:44.415" endtime="20210731 21:38:44.415"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:44.415" endtime="20210731 21:38:44.416"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:44.416" endtime="20210731 21:38:44.417"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.415" endtime="20210731 21:38:44.417"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:44.417" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:44.417" endtime="20210731 21:38:44.417"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:44.417" endtime="20210731 21:38:44.418"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:44.418" endtime="20210731 21:38:44.419"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.417" endtime="20210731 21:38:44.419"/>
</iter>
<status status="PASS" starttime="20210731 21:38:44.412" endtime="20210731 21:38:44.419"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:44.419" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:44.419" endtime="20210731 21:38:44.419"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.411" endtime="20210731 21:38:44.419"/>
</kw>
<status status="PASS" starttime="20210731 21:38:42.835" endtime="20210731 21:38:44.419"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:44.421" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:44.421" endtime="20210731 21:38:44.421"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:44.422" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210731 21:38:44.421" endtime="20210731 21:38:44.422"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:44.434" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:44.434" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:44.422" endtime="20210731 21:38:44.434"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:44.435" endtime="20210731 21:38:44.435"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:44.435" endtime="20210731 21:38:44.435"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:44.422" endtime="20210731 21:38:44.435"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:44.422" endtime="20210731 21:38:44.435"/>
</for>
<status status="FAIL" starttime="20210731 21:38:44.420" endtime="20210731 21:38:44.435"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:44.420" endtime="20210731 21:38:44.435"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:44.437" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:44.437" endtime="20210731 21:38:44.437"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:44.438" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210731 21:38:44.437" endtime="20210731 21:38:44.438"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:44.443" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:44.443" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:44.438" endtime="20210731 21:38:44.443"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:44.443" endtime="20210731 21:38:44.443"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:44.443" endtime="20210731 21:38:44.443"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:44.438" endtime="20210731 21:38:44.443"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:44.438" endtime="20210731 21:38:44.443"/>
</for>
<status status="FAIL" starttime="20210731 21:38:44.436" endtime="20210731 21:38:44.444"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:44.435" endtime="20210731 21:38:44.444"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:44.445" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:44.445" endtime="20210731 21:38:44.445"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:44.445" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210731 21:38:44.445" endtime="20210731 21:38:44.446"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:44.468" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:44.468" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:44.446" endtime="20210731 21:38:44.468"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:44.468" endtime="20210731 21:38:44.468"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:44.468" endtime="20210731 21:38:44.469"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:44.446" endtime="20210731 21:38:44.469"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:44.446" endtime="20210731 21:38:44.469"/>
</for>
<status status="FAIL" starttime="20210731 21:38:44.444" endtime="20210731 21:38:44.469"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:44.444" endtime="20210731 21:38:44.469"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:44.420" endtime="20210731 21:38:44.469"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:44.473" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:44.492" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:44.492" level="INFO">${pids} = 7171
7178
7182</msg>
<status status="PASS" starttime="20210731 21:38:44.470" endtime="20210731 21:38:44.492"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:44.493" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:44.493" endtime="20210731 21:38:44.493"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:44.494" level="INFO">${pids} = ['7171', '7178', '7182']</msg>
<status status="PASS" starttime="20210731 21:38:44.494" endtime="20210731 21:38:44.497"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7171</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:44.502" level="INFO">Running command 'kill 7171 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:44.498" endtime="20210731 21:38:44.502"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.498" endtime="20210731 21:38:44.503"/>
</iter>
<iter>
<var name="${pid}">7178</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:44.507" level="INFO">Running command 'kill 7178 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:44.503" endtime="20210731 21:38:44.507"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.503" endtime="20210731 21:38:44.507"/>
</iter>
<iter>
<var name="${pid}">7182</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:44.511" level="INFO">Running command 'kill 7182 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:44.508" endtime="20210731 21:38:44.511"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.507" endtime="20210731 21:38:44.511"/>
</iter>
<status status="PASS" starttime="20210731 21:38:44.498" endtime="20210731 21:38:44.511"/>
</for>
<status status="PASS" starttime="20210731 21:38:44.494" endtime="20210731 21:38:44.511"/>
</branch>
<status status="PASS" starttime="20210731 21:38:44.493" endtime="20210731 21:38:44.511"/>
</if>
<status status="PASS" starttime="20210731 21:38:44.470" endtime="20210731 21:38:44.512"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefghjklmnprstoöuüvyz'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:42.834" endtime="20210731 21:38:44.512">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t48" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFG Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:44.522" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:44.534" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:44.535" level="INFO">${pids} = 7212</msg>
<status status="PASS" starttime="20210731 21:38:44.515" endtime="20210731 21:38:44.535"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:44.536" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:44.535" endtime="20210731 21:38:44.536"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:44.537" level="INFO">${pids} = ['7212']</msg>
<status status="PASS" starttime="20210731 21:38:44.536" endtime="20210731 21:38:44.537"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7212</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:44.546" level="INFO">Running command 'kill 7212 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:44.537" endtime="20210731 21:38:44.546"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.537" endtime="20210731 21:38:44.546"/>
</iter>
<status status="PASS" starttime="20210731 21:38:44.537" endtime="20210731 21:38:44.546"/>
</for>
<status status="PASS" starttime="20210731 21:38:44.536" endtime="20210731 21:38:44.546"/>
</branch>
<status status="PASS" starttime="20210731 21:38:44.536" endtime="20210731 21:38:44.546"/>
</if>
<status status="PASS" starttime="20210731 21:38:44.514" endtime="20210731 21:38:44.547"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:44.548" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:44.548" endtime="20210731 21:38:44.548"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:44.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:44.549" endtime="20210731 21:38:44.549"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:44.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:44.549" endtime="20210731 21:38:44.550"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:44.550" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:44.550" endtime="20210731 21:38:44.550"/>
</kw>
<msg timestamp="20210731 21:38:44.550" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:44.548" endtime="20210731 21:38:44.550"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:44.554" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:44.551" endtime="20210731 21:38:44.556"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.547" endtime="20210731 21:38:44.556"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:44.558" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:44.557" endtime="20210731 21:38:44.588"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:46.090" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:44.589" endtime="20210731 21:38:46.090"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.557" endtime="20210731 21:38:46.090"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:46.092" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:46.092" endtime="20210731 21:38:46.092"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:46.092" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:46.092" endtime="20210731 21:38:46.092"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:46.093" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:46.092" endtime="20210731 21:38:46.093"/>
</kw>
<msg timestamp="20210731 21:38:46.093" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:46.091" endtime="20210731 21:38:46.093"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:46.094" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:46.093" endtime="20210731 21:38:46.095"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.091" endtime="20210731 21:38:46.095"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:46.095" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:46.095" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:46.095" endtime="20210731 21:38:46.096"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.095" endtime="20210731 21:38:46.096"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:46.096" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:46.097" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:46.096" endtime="20210731 21:38:46.097"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:46.097" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:46.097" endtime="20210731 21:38:46.097"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:46.098" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:46.098" endtime="20210731 21:38:46.098"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:46.098" endtime="20210731 21:38:46.099"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:46.099" endtime="20210731 21:38:46.099"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.097" endtime="20210731 21:38:46.099"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:46.100" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:46.100" endtime="20210731 21:38:46.100"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:46.100" endtime="20210731 21:38:46.101"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:46.101" endtime="20210731 21:38:46.102"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.100" endtime="20210731 21:38:46.102"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:46.102" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:46.102" endtime="20210731 21:38:46.102"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:46.102" endtime="20210731 21:38:46.103"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:46.103" endtime="20210731 21:38:46.103"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.102" endtime="20210731 21:38:46.104"/>
</iter>
<status status="PASS" starttime="20210731 21:38:46.097" endtime="20210731 21:38:46.104"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:46.104" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:46.104" endtime="20210731 21:38:46.104"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.096" endtime="20210731 21:38:46.104"/>
</kw>
<status status="PASS" starttime="20210731 21:38:44.514" endtime="20210731 21:38:46.104"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:46.108" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:46.105" endtime="20210731 21:38:46.108"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:46.108" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210731 21:38:46.108" endtime="20210731 21:38:46.108"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:46.120" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:46.120" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:46.109" endtime="20210731 21:38:46.120"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:46.120" endtime="20210731 21:38:46.121"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:46.121" endtime="20210731 21:38:46.121"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:46.108" endtime="20210731 21:38:46.121"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:46.108" endtime="20210731 21:38:46.121"/>
</for>
<status status="FAIL" starttime="20210731 21:38:46.105" endtime="20210731 21:38:46.121"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:46.105" endtime="20210731 21:38:46.121"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:46.122" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:46.122" endtime="20210731 21:38:46.122"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:46.123" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210731 21:38:46.123" endtime="20210731 21:38:46.123"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:46.128" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:46.128" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:46.123" endtime="20210731 21:38:46.128"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:46.128" endtime="20210731 21:38:46.128"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:46.128" endtime="20210731 21:38:46.128"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:46.123" endtime="20210731 21:38:46.128"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:46.123" endtime="20210731 21:38:46.128"/>
</for>
<status status="FAIL" starttime="20210731 21:38:46.121" endtime="20210731 21:38:46.129"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:46.121" endtime="20210731 21:38:46.129"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:46.130" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:46.130" endtime="20210731 21:38:46.130"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:46.130" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210731 21:38:46.130" endtime="20210731 21:38:46.131"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:46.156" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:46.156" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:46.131" endtime="20210731 21:38:46.156"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:46.157" endtime="20210731 21:38:46.157"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:46.157" endtime="20210731 21:38:46.157"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:46.131" endtime="20210731 21:38:46.157"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:46.131" endtime="20210731 21:38:46.157"/>
</for>
<status status="FAIL" starttime="20210731 21:38:46.129" endtime="20210731 21:38:46.157"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:46.129" endtime="20210731 21:38:46.157"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:46.105" endtime="20210731 21:38:46.157"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:46.163" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:46.174" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:46.174" level="INFO">${pids} = 7236
7243
7251</msg>
<status status="PASS" starttime="20210731 21:38:46.158" endtime="20210731 21:38:46.174"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:46.175" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:46.174" endtime="20210731 21:38:46.175"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:46.176" level="INFO">${pids} = ['7236', '7243', '7251']</msg>
<status status="PASS" starttime="20210731 21:38:46.176" endtime="20210731 21:38:46.176"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7236</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:46.182" level="INFO">Running command 'kill 7236 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:46.176" endtime="20210731 21:38:46.182"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.176" endtime="20210731 21:38:46.182"/>
</iter>
<iter>
<var name="${pid}">7243</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:46.203" level="INFO">Running command 'kill 7243 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:46.183" endtime="20210731 21:38:46.203"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.182" endtime="20210731 21:38:46.203"/>
</iter>
<iter>
<var name="${pid}">7251</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:46.208" level="INFO">Running command 'kill 7251 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:46.204" endtime="20210731 21:38:46.209"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.204" endtime="20210731 21:38:46.209"/>
</iter>
<status status="PASS" starttime="20210731 21:38:46.176" endtime="20210731 21:38:46.209"/>
</for>
<status status="PASS" starttime="20210731 21:38:46.175" endtime="20210731 21:38:46.209"/>
</branch>
<status status="PASS" starttime="20210731 21:38:46.175" endtime="20210731 21:38:46.209"/>
</if>
<status status="PASS" starttime="20210731 21:38:46.158" endtime="20210731 21:38:46.210"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFG'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:44.513" endtime="20210731 21:38:46.210">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t49" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFGH Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:46.217" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:46.230" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:46.230" level="INFO">${pids} = 7294</msg>
<status status="PASS" starttime="20210731 21:38:46.213" endtime="20210731 21:38:46.230"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:46.231" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:46.231" endtime="20210731 21:38:46.231"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:46.232" level="INFO">${pids} = ['7294']</msg>
<status status="PASS" starttime="20210731 21:38:46.232" endtime="20210731 21:38:46.232"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7294</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:46.239" level="INFO">Running command 'kill 7294 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:46.233" endtime="20210731 21:38:46.239"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.232" endtime="20210731 21:38:46.239"/>
</iter>
<status status="PASS" starttime="20210731 21:38:46.232" endtime="20210731 21:38:46.239"/>
</for>
<status status="PASS" starttime="20210731 21:38:46.232" endtime="20210731 21:38:46.240"/>
</branch>
<status status="PASS" starttime="20210731 21:38:46.231" endtime="20210731 21:38:46.240"/>
</if>
<status status="PASS" starttime="20210731 21:38:46.213" endtime="20210731 21:38:46.240"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:46.241" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:46.241" endtime="20210731 21:38:46.241"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:46.243" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:46.242" endtime="20210731 21:38:46.243"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:46.243" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:46.243" endtime="20210731 21:38:46.243"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:46.244" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:46.243" endtime="20210731 21:38:46.244"/>
</kw>
<msg timestamp="20210731 21:38:46.244" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:46.242" endtime="20210731 21:38:46.244"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:46.261" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:46.244" endtime="20210731 21:38:46.274"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.240" endtime="20210731 21:38:46.275"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:46.276" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:46.276" endtime="20210731 21:38:46.281"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:47.782" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:46.281" endtime="20210731 21:38:47.782"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.275" endtime="20210731 21:38:47.783"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:47.784" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:47.784" endtime="20210731 21:38:47.784"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:47.784" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:47.784" endtime="20210731 21:38:47.784"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:47.785" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:47.785" endtime="20210731 21:38:47.785"/>
</kw>
<msg timestamp="20210731 21:38:47.785" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:47.783" endtime="20210731 21:38:47.785"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:47.786" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:47.785" endtime="20210731 21:38:47.786"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.783" endtime="20210731 21:38:47.786"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:47.787" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:47.787" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:47.787" endtime="20210731 21:38:47.788"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.787" endtime="20210731 21:38:47.788"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:47.789" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:47.789" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:47.788" endtime="20210731 21:38:47.789"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:47.789" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:47.789" endtime="20210731 21:38:47.789"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:47.790" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:47.790" endtime="20210731 21:38:47.790"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:47.790" endtime="20210731 21:38:47.791"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:47.791" endtime="20210731 21:38:47.791"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.790" endtime="20210731 21:38:47.792"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:47.792" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:47.792" endtime="20210731 21:38:47.792"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:47.792" endtime="20210731 21:38:47.793"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:47.793" endtime="20210731 21:38:47.794"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.792" endtime="20210731 21:38:47.794"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:47.794" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:47.794" endtime="20210731 21:38:47.794"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:47.794" endtime="20210731 21:38:47.795"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:47.795" endtime="20210731 21:38:47.795"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.794" endtime="20210731 21:38:47.796"/>
</iter>
<status status="PASS" starttime="20210731 21:38:47.789" endtime="20210731 21:38:47.796"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:47.796" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:47.796" endtime="20210731 21:38:47.796"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.788" endtime="20210731 21:38:47.796"/>
</kw>
<status status="PASS" starttime="20210731 21:38:46.212" endtime="20210731 21:38:47.796"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:47.798" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:47.798" endtime="20210731 21:38:47.798"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:47.799" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210731 21:38:47.798" endtime="20210731 21:38:47.799"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:47.810" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:47.810" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:47.799" endtime="20210731 21:38:47.810"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:47.810" endtime="20210731 21:38:47.810"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:47.810" endtime="20210731 21:38:47.810"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:47.799" endtime="20210731 21:38:47.810"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:47.799" endtime="20210731 21:38:47.811"/>
</for>
<status status="FAIL" starttime="20210731 21:38:47.797" endtime="20210731 21:38:47.811"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:47.797" endtime="20210731 21:38:47.811"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:47.812" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:47.812" endtime="20210731 21:38:47.812"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:47.813" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210731 21:38:47.812" endtime="20210731 21:38:47.813"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:47.818" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:47.818" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:47.813" endtime="20210731 21:38:47.818"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:47.818" endtime="20210731 21:38:47.818"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:47.818" endtime="20210731 21:38:47.818"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:47.813" endtime="20210731 21:38:47.818"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:47.813" endtime="20210731 21:38:47.818"/>
</for>
<status status="FAIL" starttime="20210731 21:38:47.811" endtime="20210731 21:38:47.819"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:47.811" endtime="20210731 21:38:47.819"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:47.820" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:47.819" endtime="20210731 21:38:47.820"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:47.820" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210731 21:38:47.820" endtime="20210731 21:38:47.820"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:47.829" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:47.829" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:47.821" endtime="20210731 21:38:47.829"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:47.829" endtime="20210731 21:38:47.829"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:47.829" endtime="20210731 21:38:47.829"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:47.821" endtime="20210731 21:38:47.829"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:47.821" endtime="20210731 21:38:47.829"/>
</for>
<status status="FAIL" starttime="20210731 21:38:47.819" endtime="20210731 21:38:47.830"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:47.819" endtime="20210731 21:38:47.830"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:47.797" endtime="20210731 21:38:47.830"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:47.849" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:47.862" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:47.862" level="INFO">${pids} = 7317
7324
7329</msg>
<status status="PASS" starttime="20210731 21:38:47.831" endtime="20210731 21:38:47.862"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:47.863" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:47.862" endtime="20210731 21:38:47.863"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:47.864" level="INFO">${pids} = ['7317', '7324', '7329']</msg>
<status status="PASS" starttime="20210731 21:38:47.864" endtime="20210731 21:38:47.864"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7317</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:47.868" level="INFO">Running command 'kill 7317 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:47.864" endtime="20210731 21:38:47.868"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.864" endtime="20210731 21:38:47.868"/>
</iter>
<iter>
<var name="${pid}">7324</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:47.872" level="INFO">Running command 'kill 7324 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:47.869" endtime="20210731 21:38:47.873"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.868" endtime="20210731 21:38:47.873"/>
</iter>
<iter>
<var name="${pid}">7329</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:47.895" level="INFO">Running command 'kill 7329 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:47.874" endtime="20210731 21:38:47.896"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.873" endtime="20210731 21:38:47.896"/>
</iter>
<status status="PASS" starttime="20210731 21:38:47.864" endtime="20210731 21:38:47.896"/>
</for>
<status status="PASS" starttime="20210731 21:38:47.863" endtime="20210731 21:38:47.896"/>
</branch>
<status status="PASS" starttime="20210731 21:38:47.863" endtime="20210731 21:38:47.896"/>
</if>
<status status="PASS" starttime="20210731 21:38:47.830" endtime="20210731 21:38:47.896"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFGH'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:46.211" endtime="20210731 21:38:47.897">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t50" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFGHJKLMNPRSTOÖUÜVYZ Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:47.904" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:47.916" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:47.916" level="INFO">${pids} = 7358</msg>
<status status="PASS" starttime="20210731 21:38:47.901" endtime="20210731 21:38:47.916"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:47.917" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:47.917" endtime="20210731 21:38:47.918"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:47.918" level="INFO">${pids} = ['7358']</msg>
<status status="PASS" starttime="20210731 21:38:47.918" endtime="20210731 21:38:47.918"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7358</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:47.922" level="INFO">Running command 'kill 7358 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:47.919" endtime="20210731 21:38:47.923"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.919" endtime="20210731 21:38:47.923"/>
</iter>
<status status="PASS" starttime="20210731 21:38:47.918" endtime="20210731 21:38:47.923"/>
</for>
<status status="PASS" starttime="20210731 21:38:47.918" endtime="20210731 21:38:47.923"/>
</branch>
<status status="PASS" starttime="20210731 21:38:47.918" endtime="20210731 21:38:47.923"/>
</if>
<status status="PASS" starttime="20210731 21:38:47.900" endtime="20210731 21:38:47.923"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:47.925" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:47.924" endtime="20210731 21:38:47.925"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:47.926" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:47.925" endtime="20210731 21:38:47.926"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:47.926" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:47.926" endtime="20210731 21:38:47.926"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:47.927" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:47.926" endtime="20210731 21:38:47.927"/>
</kw>
<msg timestamp="20210731 21:38:47.927" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:47.925" endtime="20210731 21:38:47.927"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:47.931" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:47.928" endtime="20210731 21:38:47.933"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.924" endtime="20210731 21:38:47.934"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:47.935" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:47.935" endtime="20210731 21:38:47.945"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:49.446" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:47.945" endtime="20210731 21:38:49.447"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.934" endtime="20210731 21:38:49.447"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:49.448" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:49.448" endtime="20210731 21:38:49.448"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:49.449" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:49.448" endtime="20210731 21:38:49.449"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:49.449" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:49.449" endtime="20210731 21:38:49.449"/>
</kw>
<msg timestamp="20210731 21:38:49.449" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:49.448" endtime="20210731 21:38:49.449"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:49.450" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:49.450" endtime="20210731 21:38:49.450"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.447" endtime="20210731 21:38:49.451"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:49.451" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:49.451" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:49.451" endtime="20210731 21:38:49.451"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.451" endtime="20210731 21:38:49.452"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:49.452" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:49.452" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:49.452" endtime="20210731 21:38:49.452"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:49.453" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:49.453" endtime="20210731 21:38:49.453"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:49.454" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:49.453" endtime="20210731 21:38:49.454"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:49.454" endtime="20210731 21:38:49.455"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:49.455" endtime="20210731 21:38:49.455"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.453" endtime="20210731 21:38:49.455"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:49.456" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:49.455" endtime="20210731 21:38:49.456"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:49.456" endtime="20210731 21:38:49.457"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:49.457" endtime="20210731 21:38:49.457"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.455" endtime="20210731 21:38:49.457"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:49.458" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:49.457" endtime="20210731 21:38:49.458"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:49.458" endtime="20210731 21:38:49.459"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:49.459" endtime="20210731 21:38:49.459"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.457" endtime="20210731 21:38:49.459"/>
</iter>
<status status="PASS" starttime="20210731 21:38:49.453" endtime="20210731 21:38:49.459"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:49.460" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:49.459" endtime="20210731 21:38:49.460"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.452" endtime="20210731 21:38:49.460"/>
</kw>
<status status="PASS" starttime="20210731 21:38:47.899" endtime="20210731 21:38:49.460"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:49.462" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:49.461" endtime="20210731 21:38:49.462"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:49.462" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210731 21:38:49.462" endtime="20210731 21:38:49.462"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:49.474" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:49.474" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:49.463" endtime="20210731 21:38:49.474"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:49.474" endtime="20210731 21:38:49.475"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:49.475" endtime="20210731 21:38:49.475"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:49.463" endtime="20210731 21:38:49.475"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:49.462" endtime="20210731 21:38:49.475"/>
</for>
<status status="FAIL" starttime="20210731 21:38:49.460" endtime="20210731 21:38:49.475"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:49.460" endtime="20210731 21:38:49.475"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:49.476" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:49.476" endtime="20210731 21:38:49.477"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:49.477" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210731 21:38:49.477" endtime="20210731 21:38:49.477"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:49.482" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:49.482" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:49.478" endtime="20210731 21:38:49.482"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:49.483" endtime="20210731 21:38:49.483"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:49.483" endtime="20210731 21:38:49.483"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:49.477" endtime="20210731 21:38:49.483"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:49.477" endtime="20210731 21:38:49.483"/>
</for>
<status status="FAIL" starttime="20210731 21:38:49.475" endtime="20210731 21:38:49.483"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:49.475" endtime="20210731 21:38:49.483"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:49.484" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:49.484" endtime="20210731 21:38:49.484"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:49.485" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210731 21:38:49.485" endtime="20210731 21:38:49.485"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:49.506" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:49.506" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:49.485" endtime="20210731 21:38:49.506"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:49.506" endtime="20210731 21:38:49.506"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:49.506" endtime="20210731 21:38:49.506"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:49.485" endtime="20210731 21:38:49.507"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:49.485" endtime="20210731 21:38:49.507"/>
</for>
<status status="FAIL" starttime="20210731 21:38:49.483" endtime="20210731 21:38:49.507"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:49.483" endtime="20210731 21:38:49.507"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:49.460" endtime="20210731 21:38:49.507"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:49.511" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:49.530" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:49.530" level="INFO">${pids} = 7381
7388
7393</msg>
<status status="PASS" starttime="20210731 21:38:49.508" endtime="20210731 21:38:49.530"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:49.531" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:49.530" endtime="20210731 21:38:49.531"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:49.532" level="INFO">${pids} = ['7381', '7388', '7393']</msg>
<status status="PASS" starttime="20210731 21:38:49.531" endtime="20210731 21:38:49.532"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7381</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:49.535" level="INFO">Running command 'kill 7381 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:49.532" endtime="20210731 21:38:49.536"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.532" endtime="20210731 21:38:49.536"/>
</iter>
<iter>
<var name="${pid}">7388</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:49.556" level="INFO">Running command 'kill 7388 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:49.537" endtime="20210731 21:38:49.556"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.536" endtime="20210731 21:38:49.556"/>
</iter>
<iter>
<var name="${pid}">7393</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:49.563" level="INFO">Running command 'kill 7393 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:49.557" endtime="20210731 21:38:49.564"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.556" endtime="20210731 21:38:49.564"/>
</iter>
<status status="PASS" starttime="20210731 21:38:49.532" endtime="20210731 21:38:49.564"/>
</for>
<status status="PASS" starttime="20210731 21:38:49.531" endtime="20210731 21:38:49.564"/>
</branch>
<status status="PASS" starttime="20210731 21:38:49.531" endtime="20210731 21:38:49.564"/>
</if>
<status status="PASS" starttime="20210731 21:38:49.507" endtime="20210731 21:38:49.565"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:47.898" endtime="20210731 21:38:49.565">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t51" name="With Each Valid Token, Updating Password Of Each System User With 0123456 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:49.572" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:49.585" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:49.585" level="INFO">${pids} = 7422</msg>
<status status="PASS" starttime="20210731 21:38:49.568" endtime="20210731 21:38:49.585"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:49.586" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:49.585" endtime="20210731 21:38:49.586"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:49.587" level="INFO">${pids} = ['7422']</msg>
<status status="PASS" starttime="20210731 21:38:49.586" endtime="20210731 21:38:49.587"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7422</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:49.591" level="INFO">Running command 'kill 7422 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:49.587" endtime="20210731 21:38:49.591"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.587" endtime="20210731 21:38:49.591"/>
</iter>
<status status="PASS" starttime="20210731 21:38:49.587" endtime="20210731 21:38:49.591"/>
</for>
<status status="PASS" starttime="20210731 21:38:49.586" endtime="20210731 21:38:49.591"/>
</branch>
<status status="PASS" starttime="20210731 21:38:49.586" endtime="20210731 21:38:49.591"/>
</if>
<status status="PASS" starttime="20210731 21:38:49.568" endtime="20210731 21:38:49.592"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:49.593" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:49.592" endtime="20210731 21:38:49.593"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:49.594" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:49.594" endtime="20210731 21:38:49.594"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:49.595" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:49.594" endtime="20210731 21:38:49.595"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:49.595" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:49.595" endtime="20210731 21:38:49.595"/>
</kw>
<msg timestamp="20210731 21:38:49.596" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:49.593" endtime="20210731 21:38:49.596"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:49.604" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:49.596" endtime="20210731 21:38:49.605"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.592" endtime="20210731 21:38:49.606"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:49.607" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:49.607" endtime="20210731 21:38:49.614"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:51.115" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:49.614" endtime="20210731 21:38:51.116"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.606" endtime="20210731 21:38:51.116"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:51.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:51.117" endtime="20210731 21:38:51.118"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:51.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:51.118" endtime="20210731 21:38:51.118"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:51.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:51.118" endtime="20210731 21:38:51.118"/>
</kw>
<msg timestamp="20210731 21:38:51.119" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:51.117" endtime="20210731 21:38:51.119"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:51.119" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:51.119" endtime="20210731 21:38:51.120"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.116" endtime="20210731 21:38:51.120"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:51.121" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:51.121" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:51.121" endtime="20210731 21:38:51.121"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.120" endtime="20210731 21:38:51.121"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:51.122" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:51.122" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:51.122" endtime="20210731 21:38:51.122"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:51.123" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:51.123" endtime="20210731 21:38:51.123"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:51.123" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:51.123" endtime="20210731 21:38:51.124"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:51.124" endtime="20210731 21:38:51.125"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:51.125" endtime="20210731 21:38:51.125"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.123" endtime="20210731 21:38:51.125"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:51.126" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:51.126" endtime="20210731 21:38:51.126"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:51.126" endtime="20210731 21:38:51.127"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:51.127" endtime="20210731 21:38:51.127"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.125" endtime="20210731 21:38:51.127"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:51.128" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:51.127" endtime="20210731 21:38:51.128"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:51.128" endtime="20210731 21:38:51.129"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:51.129" endtime="20210731 21:38:51.129"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.127" endtime="20210731 21:38:51.129"/>
</iter>
<status status="PASS" starttime="20210731 21:38:51.123" endtime="20210731 21:38:51.129"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:51.130" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:51.129" endtime="20210731 21:38:51.130"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.122" endtime="20210731 21:38:51.130"/>
</kw>
<status status="PASS" starttime="20210731 21:38:49.567" endtime="20210731 21:38:51.130"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:51.132" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:51.131" endtime="20210731 21:38:51.132"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:51.132" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210731 21:38:51.132" endtime="20210731 21:38:51.132"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:51.144" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:51.145" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:51.133" endtime="20210731 21:38:51.145"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:51.145" endtime="20210731 21:38:51.145"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:51.145" endtime="20210731 21:38:51.145"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:51.133" endtime="20210731 21:38:51.145"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:51.132" endtime="20210731 21:38:51.145"/>
</for>
<status status="FAIL" starttime="20210731 21:38:51.131" endtime="20210731 21:38:51.145"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:51.131" endtime="20210731 21:38:51.146"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:51.147" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:51.146" endtime="20210731 21:38:51.147"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:51.147" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210731 21:38:51.147" endtime="20210731 21:38:51.147"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:51.152" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:51.153" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:51.148" endtime="20210731 21:38:51.153"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:51.153" endtime="20210731 21:38:51.153"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:51.153" endtime="20210731 21:38:51.153"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:51.148" endtime="20210731 21:38:51.153"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:51.147" endtime="20210731 21:38:51.153"/>
</for>
<status status="FAIL" starttime="20210731 21:38:51.146" endtime="20210731 21:38:51.153"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:51.146" endtime="20210731 21:38:51.154"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:51.155" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:51.154" endtime="20210731 21:38:51.155"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:51.155" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210731 21:38:51.155" endtime="20210731 21:38:51.155"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:51.163" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:51.163" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:51.156" endtime="20210731 21:38:51.163"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:51.163" endtime="20210731 21:38:51.163"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:51.163" endtime="20210731 21:38:51.163"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:51.156" endtime="20210731 21:38:51.163"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:51.155" endtime="20210731 21:38:51.164"/>
</for>
<status status="FAIL" starttime="20210731 21:38:51.154" endtime="20210731 21:38:51.164"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:51.154" endtime="20210731 21:38:51.164"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:51.130" endtime="20210731 21:38:51.164"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:51.182" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:51.196" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:51.196" level="INFO">${pids} = 7446
7453
7457</msg>
<status status="PASS" starttime="20210731 21:38:51.165" endtime="20210731 21:38:51.196"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:51.198" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:51.197" endtime="20210731 21:38:51.198"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:51.203" level="INFO">${pids} = ['7446', '7453', '7457']</msg>
<status status="PASS" starttime="20210731 21:38:51.203" endtime="20210731 21:38:51.203"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7446</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:51.231" level="INFO">Running command 'kill 7446 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:51.204" endtime="20210731 21:38:51.233"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.204" endtime="20210731 21:38:51.233"/>
</iter>
<iter>
<var name="${pid}">7453</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:51.250" level="INFO">Running command 'kill 7453 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:51.233" endtime="20210731 21:38:51.251"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.233" endtime="20210731 21:38:51.251"/>
</iter>
<iter>
<var name="${pid}">7457</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:51.256" level="INFO">Running command 'kill 7457 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:51.252" endtime="20210731 21:38:51.257"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.251" endtime="20210731 21:38:51.257"/>
</iter>
<status status="PASS" starttime="20210731 21:38:51.203" endtime="20210731 21:38:51.257"/>
</for>
<status status="PASS" starttime="20210731 21:38:51.202" endtime="20210731 21:38:51.257"/>
</branch>
<status status="PASS" starttime="20210731 21:38:51.202" endtime="20210731 21:38:51.257"/>
</if>
<status status="PASS" starttime="20210731 21:38:51.164" endtime="20210731 21:38:51.257"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123456'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:49.566" endtime="20210731 21:38:51.257">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t52" name="With Each Valid Token, Updating Password Of Each System User With 01234567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:51.266" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:51.280" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:51.280" level="INFO">${pids} = 7486</msg>
<status status="PASS" starttime="20210731 21:38:51.260" endtime="20210731 21:38:51.280"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:51.281" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:51.280" endtime="20210731 21:38:51.281"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:51.282" level="INFO">${pids} = ['7486']</msg>
<status status="PASS" starttime="20210731 21:38:51.281" endtime="20210731 21:38:51.282"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7486</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:51.285" level="INFO">Running command 'kill 7486 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:51.282" endtime="20210731 21:38:51.286"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.282" endtime="20210731 21:38:51.286"/>
</iter>
<status status="PASS" starttime="20210731 21:38:51.282" endtime="20210731 21:38:51.287"/>
</for>
<status status="PASS" starttime="20210731 21:38:51.281" endtime="20210731 21:38:51.287"/>
</branch>
<status status="PASS" starttime="20210731 21:38:51.281" endtime="20210731 21:38:51.287"/>
</if>
<status status="PASS" starttime="20210731 21:38:51.260" endtime="20210731 21:38:51.287"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:51.289" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:51.288" endtime="20210731 21:38:51.289"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:51.289" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:51.289" endtime="20210731 21:38:51.289"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:51.290" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:51.290" endtime="20210731 21:38:51.290"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:51.291" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:51.290" endtime="20210731 21:38:51.291"/>
</kw>
<msg timestamp="20210731 21:38:51.291" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:51.289" endtime="20210731 21:38:51.291"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:51.295" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:51.291" endtime="20210731 21:38:51.297"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.288" endtime="20210731 21:38:51.297"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:51.299" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:51.298" endtime="20210731 21:38:51.303"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:52.805" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:51.304" endtime="20210731 21:38:52.805"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.298" endtime="20210731 21:38:52.805"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:52.807" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:52.806" endtime="20210731 21:38:52.807"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:52.807" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:52.807" endtime="20210731 21:38:52.807"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:52.808" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:52.807" endtime="20210731 21:38:52.808"/>
</kw>
<msg timestamp="20210731 21:38:52.808" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:52.806" endtime="20210731 21:38:52.808"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:52.809" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:52.808" endtime="20210731 21:38:52.809"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.806" endtime="20210731 21:38:52.809"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:52.810" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:52.810" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:52.810" endtime="20210731 21:38:52.810"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.809" endtime="20210731 21:38:52.810"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:52.811" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:52.811" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:52.811" endtime="20210731 21:38:52.811"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:52.812" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:52.811" endtime="20210731 21:38:52.812"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:52.813" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:52.812" endtime="20210731 21:38:52.813"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:52.813" endtime="20210731 21:38:52.814"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:52.814" endtime="20210731 21:38:52.814"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.812" endtime="20210731 21:38:52.814"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:52.815" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:52.815" endtime="20210731 21:38:52.815"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:52.815" endtime="20210731 21:38:52.816"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:52.816" endtime="20210731 21:38:52.816"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.814" endtime="20210731 21:38:52.816"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:52.817" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:52.816" endtime="20210731 21:38:52.817"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:52.817" endtime="20210731 21:38:52.818"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:52.818" endtime="20210731 21:38:52.818"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.816" endtime="20210731 21:38:52.818"/>
</iter>
<status status="PASS" starttime="20210731 21:38:52.812" endtime="20210731 21:38:52.818"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:52.819" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:52.818" endtime="20210731 21:38:52.819"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.810" endtime="20210731 21:38:52.819"/>
</kw>
<status status="PASS" starttime="20210731 21:38:51.259" endtime="20210731 21:38:52.819"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:52.820" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:52.820" endtime="20210731 21:38:52.821"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:52.821" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210731 21:38:52.821" endtime="20210731 21:38:52.821"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:52.834" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:52.834" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:52.821" endtime="20210731 21:38:52.834"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:52.834" endtime="20210731 21:38:52.834"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:52.834" endtime="20210731 21:38:52.834"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:52.821" endtime="20210731 21:38:52.835"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:52.821" endtime="20210731 21:38:52.835"/>
</for>
<status status="FAIL" starttime="20210731 21:38:52.820" endtime="20210731 21:38:52.835"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:52.819" endtime="20210731 21:38:52.835"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:52.836" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:52.836" endtime="20210731 21:38:52.836"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:52.837" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210731 21:38:52.836" endtime="20210731 21:38:52.837"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:52.842" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:52.842" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:52.837" endtime="20210731 21:38:52.842"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:52.842" endtime="20210731 21:38:52.842"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:52.842" endtime="20210731 21:38:52.842"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:52.837" endtime="20210731 21:38:52.843"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:52.837" endtime="20210731 21:38:52.843"/>
</for>
<status status="FAIL" starttime="20210731 21:38:52.835" endtime="20210731 21:38:52.843"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:52.835" endtime="20210731 21:38:52.843"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:52.844" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:52.844" endtime="20210731 21:38:52.844"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:52.845" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210731 21:38:52.845" endtime="20210731 21:38:52.845"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:52.867" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:52.868" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:52.846" endtime="20210731 21:38:52.869"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:52.869" endtime="20210731 21:38:52.869"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:52.869" endtime="20210731 21:38:52.869"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:52.845" endtime="20210731 21:38:52.869"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:52.845" endtime="20210731 21:38:52.869"/>
</for>
<status status="FAIL" starttime="20210731 21:38:52.843" endtime="20210731 21:38:52.870"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:52.843" endtime="20210731 21:38:52.870"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:52.819" endtime="20210731 21:38:52.870"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:52.874" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:52.887" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:52.887" level="INFO">${pids} = 7509
7516
7521</msg>
<status status="PASS" starttime="20210731 21:38:52.871" endtime="20210731 21:38:52.887"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:52.888" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:52.887" endtime="20210731 21:38:52.888"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:52.889" level="INFO">${pids} = ['7509', '7516', '7521']</msg>
<status status="PASS" starttime="20210731 21:38:52.888" endtime="20210731 21:38:52.889"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7509</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:52.893" level="INFO">Running command 'kill 7509 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:52.889" endtime="20210731 21:38:52.893"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.889" endtime="20210731 21:38:52.894"/>
</iter>
<iter>
<var name="${pid}">7516</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:52.906" level="INFO">Running command 'kill 7516 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:52.894" endtime="20210731 21:38:52.906"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.894" endtime="20210731 21:38:52.906"/>
</iter>
<iter>
<var name="${pid}">7521</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:52.921" level="INFO">Running command 'kill 7521 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:52.907" endtime="20210731 21:38:52.922"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.907" endtime="20210731 21:38:52.922"/>
</iter>
<status status="PASS" starttime="20210731 21:38:52.889" endtime="20210731 21:38:52.922"/>
</for>
<status status="PASS" starttime="20210731 21:38:52.888" endtime="20210731 21:38:52.922"/>
</branch>
<status status="PASS" starttime="20210731 21:38:52.888" endtime="20210731 21:38:52.922"/>
</if>
<status status="PASS" starttime="20210731 21:38:52.870" endtime="20210731 21:38:52.922"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '01234567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:51.258" endtime="20210731 21:38:52.922">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t53" name="With Each Valid Token, Updating Password Of Each System User With 01234567890123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:52.928" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:52.944" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:52.944" level="INFO">${pids} = 7551</msg>
<status status="PASS" starttime="20210731 21:38:52.925" endtime="20210731 21:38:52.944"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:52.945" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:52.944" endtime="20210731 21:38:52.945"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:52.946" level="INFO">${pids} = ['7551']</msg>
<status status="PASS" starttime="20210731 21:38:52.946" endtime="20210731 21:38:52.946"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7551</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:52.956" level="INFO">Running command 'kill 7551 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:52.947" endtime="20210731 21:38:52.957"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.946" endtime="20210731 21:38:52.957"/>
</iter>
<status status="PASS" starttime="20210731 21:38:52.946" endtime="20210731 21:38:52.957"/>
</for>
<status status="PASS" starttime="20210731 21:38:52.945" endtime="20210731 21:38:52.957"/>
</branch>
<status status="PASS" starttime="20210731 21:38:52.945" endtime="20210731 21:38:52.957"/>
</if>
<status status="PASS" starttime="20210731 21:38:52.925" endtime="20210731 21:38:52.958"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:52.959" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:52.959" endtime="20210731 21:38:52.959"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:52.960" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:52.960" endtime="20210731 21:38:52.960"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:52.960" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:52.960" endtime="20210731 21:38:52.960"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:52.961" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:52.961" endtime="20210731 21:38:52.961"/>
</kw>
<msg timestamp="20210731 21:38:52.961" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:52.959" endtime="20210731 21:38:52.961"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:52.979" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:52.961" endtime="20210731 21:38:52.981"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.958" endtime="20210731 21:38:52.982"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:52.983" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:52.983" endtime="20210731 21:38:52.998"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:54.499" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:52.998" endtime="20210731 21:38:54.500"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.982" endtime="20210731 21:38:54.500"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:54.501" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:54.501" endtime="20210731 21:38:54.501"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:54.502" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:54.502" endtime="20210731 21:38:54.502"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:54.502" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:54.502" endtime="20210731 21:38:54.502"/>
</kw>
<msg timestamp="20210731 21:38:54.503" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:54.501" endtime="20210731 21:38:54.503"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:54.503" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:54.503" endtime="20210731 21:38:54.504"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.500" endtime="20210731 21:38:54.504"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:54.505" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:54.505" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:54.505" endtime="20210731 21:38:54.505"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.504" endtime="20210731 21:38:54.505"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:54.506" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:54.506" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:54.506" endtime="20210731 21:38:54.506"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:54.507" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:54.507" endtime="20210731 21:38:54.507"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:54.508" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:54.508" endtime="20210731 21:38:54.508"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:54.508" endtime="20210731 21:38:54.509"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:54.509" endtime="20210731 21:38:54.510"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.507" endtime="20210731 21:38:54.510"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:54.510" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:54.510" endtime="20210731 21:38:54.510"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:54.510" endtime="20210731 21:38:54.511"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:54.511" endtime="20210731 21:38:54.511"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.510" endtime="20210731 21:38:54.511"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:54.512" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:54.512" endtime="20210731 21:38:54.512"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:54.512" endtime="20210731 21:38:54.513"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:54.513" endtime="20210731 21:38:54.513"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.512" endtime="20210731 21:38:54.514"/>
</iter>
<status status="PASS" starttime="20210731 21:38:54.507" endtime="20210731 21:38:54.514"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:54.514" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:54.514" endtime="20210731 21:38:54.514"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.505" endtime="20210731 21:38:54.514"/>
</kw>
<status status="PASS" starttime="20210731 21:38:52.924" endtime="20210731 21:38:54.514"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:54.516" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:54.515" endtime="20210731 21:38:54.516"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:54.516" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210731 21:38:54.516" endtime="20210731 21:38:54.516"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:54.531" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:54.531" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:54.517" endtime="20210731 21:38:54.531"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:54.531" endtime="20210731 21:38:54.532"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:54.532" endtime="20210731 21:38:54.532"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:54.517" endtime="20210731 21:38:54.532"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:54.517" endtime="20210731 21:38:54.532"/>
</for>
<status status="FAIL" starttime="20210731 21:38:54.515" endtime="20210731 21:38:54.532"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:54.515" endtime="20210731 21:38:54.532"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:54.534" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:54.533" endtime="20210731 21:38:54.534"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:54.534" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210731 21:38:54.534" endtime="20210731 21:38:54.534"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:54.539" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:54.539" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:54.535" endtime="20210731 21:38:54.539"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:54.540" endtime="20210731 21:38:54.540"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:54.540" endtime="20210731 21:38:54.540"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:54.534" endtime="20210731 21:38:54.540"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:54.534" endtime="20210731 21:38:54.540"/>
</for>
<status status="FAIL" starttime="20210731 21:38:54.532" endtime="20210731 21:38:54.540"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:54.532" endtime="20210731 21:38:54.540"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:54.541" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:54.541" endtime="20210731 21:38:54.542"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:54.542" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210731 21:38:54.542" endtime="20210731 21:38:54.542"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:54.562" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:54.563" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:54.542" endtime="20210731 21:38:54.563"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:54.563" endtime="20210731 21:38:54.563"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:54.563" endtime="20210731 21:38:54.563"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:54.542" endtime="20210731 21:38:54.563"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:54.542" endtime="20210731 21:38:54.563"/>
</for>
<status status="FAIL" starttime="20210731 21:38:54.540" endtime="20210731 21:38:54.564"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:54.540" endtime="20210731 21:38:54.564"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:54.515" endtime="20210731 21:38:54.564"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:54.569" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:54.580" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:54.580" level="INFO">${pids} = 7574
7581
7586</msg>
<status status="PASS" starttime="20210731 21:38:54.565" endtime="20210731 21:38:54.580"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:54.581" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:54.581" endtime="20210731 21:38:54.582"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:54.583" level="INFO">${pids} = ['7574', '7581', '7586']</msg>
<status status="PASS" starttime="20210731 21:38:54.582" endtime="20210731 21:38:54.583"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7574</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:54.599" level="INFO">Running command 'kill 7574 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:54.583" endtime="20210731 21:38:54.600"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.583" endtime="20210731 21:38:54.600"/>
</iter>
<iter>
<var name="${pid}">7581</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:54.604" level="INFO">Running command 'kill 7581 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:54.600" endtime="20210731 21:38:54.605"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.600" endtime="20210731 21:38:54.605"/>
</iter>
<iter>
<var name="${pid}">7586</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:54.608" level="INFO">Running command 'kill 7586 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:54.605" endtime="20210731 21:38:54.609"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.605" endtime="20210731 21:38:54.609"/>
</iter>
<status status="PASS" starttime="20210731 21:38:54.583" endtime="20210731 21:38:54.609"/>
</for>
<status status="PASS" starttime="20210731 21:38:54.582" endtime="20210731 21:38:54.609"/>
</branch>
<status status="PASS" starttime="20210731 21:38:54.582" endtime="20210731 21:38:54.609"/>
</if>
<status status="PASS" starttime="20210731 21:38:54.564" endtime="20210731 21:38:54.610"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '01234567890123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:52.923" endtime="20210731 21:38:54.610">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t54" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:54.616" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:54.628" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:54.629" level="INFO">${pids} = 7615</msg>
<status status="PASS" starttime="20210731 21:38:54.613" endtime="20210731 21:38:54.629"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:54.630" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:54.629" endtime="20210731 21:38:54.630"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:54.631" level="INFO">${pids} = ['7615']</msg>
<status status="PASS" starttime="20210731 21:38:54.630" endtime="20210731 21:38:54.631"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7615</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:54.635" level="INFO">Running command 'kill 7615 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:54.631" endtime="20210731 21:38:54.635"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.631" endtime="20210731 21:38:54.635"/>
</iter>
<status status="PASS" starttime="20210731 21:38:54.631" endtime="20210731 21:38:54.635"/>
</for>
<status status="PASS" starttime="20210731 21:38:54.630" endtime="20210731 21:38:54.635"/>
</branch>
<status status="PASS" starttime="20210731 21:38:54.630" endtime="20210731 21:38:54.635"/>
</if>
<status status="PASS" starttime="20210731 21:38:54.612" endtime="20210731 21:38:54.636"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:54.639" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:54.638" endtime="20210731 21:38:54.639"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:54.640" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:54.639" endtime="20210731 21:38:54.640"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:54.640" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:54.640" endtime="20210731 21:38:54.640"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:54.641" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:54.640" endtime="20210731 21:38:54.641"/>
</kw>
<msg timestamp="20210731 21:38:54.641" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:54.639" endtime="20210731 21:38:54.641"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:54.647" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:54.642" endtime="20210731 21:38:54.649"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.636" endtime="20210731 21:38:54.649"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:54.651" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:54.650" endtime="20210731 21:38:54.685"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:56.187" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:54.685" endtime="20210731 21:38:56.187"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.650" endtime="20210731 21:38:56.187"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:56.189" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:56.188" endtime="20210731 21:38:56.189"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:56.189" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:56.189" endtime="20210731 21:38:56.189"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:56.190" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:56.189" endtime="20210731 21:38:56.190"/>
</kw>
<msg timestamp="20210731 21:38:56.190" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:56.188" endtime="20210731 21:38:56.190"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:56.190" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:56.190" endtime="20210731 21:38:56.191"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.187" endtime="20210731 21:38:56.191"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:56.192" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:56.192" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:56.191" endtime="20210731 21:38:56.192"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.191" endtime="20210731 21:38:56.192"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:56.194" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:56.194" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:56.192" endtime="20210731 21:38:56.194"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:56.195" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:56.194" endtime="20210731 21:38:56.195"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:56.195" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:56.195" endtime="20210731 21:38:56.195"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:56.195" endtime="20210731 21:38:56.196"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:56.197" endtime="20210731 21:38:56.197"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.195" endtime="20210731 21:38:56.197"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:56.197" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:56.197" endtime="20210731 21:38:56.197"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:56.197" endtime="20210731 21:38:56.198"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:56.198" endtime="20210731 21:38:56.199"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.197" endtime="20210731 21:38:56.199"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:56.199" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:56.199" endtime="20210731 21:38:56.199"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:56.199" endtime="20210731 21:38:56.200"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:56.200" endtime="20210731 21:38:56.201"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.199" endtime="20210731 21:38:56.201"/>
</iter>
<status status="PASS" starttime="20210731 21:38:56.195" endtime="20210731 21:38:56.201"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:56.201" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:56.201" endtime="20210731 21:38:56.201"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.192" endtime="20210731 21:38:56.201"/>
</kw>
<status status="PASS" starttime="20210731 21:38:54.612" endtime="20210731 21:38:56.202"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:56.203" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:56.203" endtime="20210731 21:38:56.203"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:56.203" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210731 21:38:56.203" endtime="20210731 21:38:56.204"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:56.215" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:56.215" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:56.204" endtime="20210731 21:38:56.215"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:56.216" endtime="20210731 21:38:56.216"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:56.216" endtime="20210731 21:38:56.216"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:56.204" endtime="20210731 21:38:56.216"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:56.204" endtime="20210731 21:38:56.216"/>
</for>
<status status="FAIL" starttime="20210731 21:38:56.202" endtime="20210731 21:38:56.216"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:56.202" endtime="20210731 21:38:56.216"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:56.218" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:56.217" endtime="20210731 21:38:56.218"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:56.218" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210731 21:38:56.218" endtime="20210731 21:38:56.218"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:56.223" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:56.223" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:56.219" endtime="20210731 21:38:56.223"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:56.224" endtime="20210731 21:38:56.224"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:56.224" endtime="20210731 21:38:56.224"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:56.218" endtime="20210731 21:38:56.224"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:56.218" endtime="20210731 21:38:56.224"/>
</for>
<status status="FAIL" starttime="20210731 21:38:56.216" endtime="20210731 21:38:56.224"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:56.216" endtime="20210731 21:38:56.224"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:56.225" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:56.225" endtime="20210731 21:38:56.225"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:56.226" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210731 21:38:56.226" endtime="20210731 21:38:56.226"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:56.233" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:56.233" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:56.226" endtime="20210731 21:38:56.233"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:56.233" endtime="20210731 21:38:56.233"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:56.233" endtime="20210731 21:38:56.233"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:56.226" endtime="20210731 21:38:56.233"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:56.226" endtime="20210731 21:38:56.233"/>
</for>
<status status="FAIL" starttime="20210731 21:38:56.224" endtime="20210731 21:38:56.234"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:56.224" endtime="20210731 21:38:56.234"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:56.202" endtime="20210731 21:38:56.234"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:56.251" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:56.263" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:56.263" level="INFO">${pids} = 7638
7645
7649</msg>
<status status="PASS" starttime="20210731 21:38:56.235" endtime="20210731 21:38:56.263"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:56.264" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:56.264" endtime="20210731 21:38:56.264"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:56.265" level="INFO">${pids} = ['7638', '7645', '7649']</msg>
<status status="PASS" starttime="20210731 21:38:56.265" endtime="20210731 21:38:56.265"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7638</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:56.269" level="INFO">Running command 'kill 7638 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:56.266" endtime="20210731 21:38:56.269"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.265" endtime="20210731 21:38:56.270"/>
</iter>
<iter>
<var name="${pid}">7645</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:56.273" level="INFO">Running command 'kill 7645 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:56.270" endtime="20210731 21:38:56.275"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.270" endtime="20210731 21:38:56.275"/>
</iter>
<iter>
<var name="${pid}">7649</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:56.280" level="INFO">Running command 'kill 7649 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:56.275" endtime="20210731 21:38:56.282"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.275" endtime="20210731 21:38:56.282"/>
</iter>
<status status="PASS" starttime="20210731 21:38:56.265" endtime="20210731 21:38:56.282"/>
</for>
<status status="PASS" starttime="20210731 21:38:56.265" endtime="20210731 21:38:56.282"/>
</branch>
<status status="PASS" starttime="20210731 21:38:56.264" endtime="20210731 21:38:56.282"/>
</if>
<status status="PASS" starttime="20210731 21:38:56.234" endtime="20210731 21:38:56.283"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:54.611" endtime="20210731 21:38:56.283">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t55" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:56.318" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:56.339" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:56.339" level="INFO">${pids} = 7679</msg>
<status status="PASS" starttime="20210731 21:38:56.285" endtime="20210731 21:38:56.339"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:56.340" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:56.339" endtime="20210731 21:38:56.340"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:56.341" level="INFO">${pids} = ['7679']</msg>
<status status="PASS" starttime="20210731 21:38:56.340" endtime="20210731 21:38:56.341"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7679</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:56.345" level="INFO">Running command 'kill 7679 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:56.341" endtime="20210731 21:38:56.345"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.341" endtime="20210731 21:38:56.345"/>
</iter>
<status status="PASS" starttime="20210731 21:38:56.341" endtime="20210731 21:38:56.345"/>
</for>
<status status="PASS" starttime="20210731 21:38:56.340" endtime="20210731 21:38:56.345"/>
</branch>
<status status="PASS" starttime="20210731 21:38:56.340" endtime="20210731 21:38:56.345"/>
</if>
<status status="PASS" starttime="20210731 21:38:56.285" endtime="20210731 21:38:56.346"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:56.347" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:56.346" endtime="20210731 21:38:56.347"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:56.348" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:56.347" endtime="20210731 21:38:56.348"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:56.348" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:56.348" endtime="20210731 21:38:56.348"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:56.348" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:56.348" endtime="20210731 21:38:56.349"/>
</kw>
<msg timestamp="20210731 21:38:56.349" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:56.347" endtime="20210731 21:38:56.349"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:56.352" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:56.349" endtime="20210731 21:38:56.354"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.346" endtime="20210731 21:38:56.354"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:56.356" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:56.355" endtime="20210731 21:38:56.360"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:57.861" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:56.361" endtime="20210731 21:38:57.862"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.355" endtime="20210731 21:38:57.862"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:57.863" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:57.863" endtime="20210731 21:38:57.863"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:57.864" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:57.863" endtime="20210731 21:38:57.864"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:57.864" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:57.864" endtime="20210731 21:38:57.864"/>
</kw>
<msg timestamp="20210731 21:38:57.865" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:57.863" endtime="20210731 21:38:57.865"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:57.865" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:57.865" endtime="20210731 21:38:57.866"/>
</kw>
<status status="PASS" starttime="20210731 21:38:57.862" endtime="20210731 21:38:57.866"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:57.866" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:57.867" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:57.866" endtime="20210731 21:38:57.867"/>
</kw>
<status status="PASS" starttime="20210731 21:38:57.866" endtime="20210731 21:38:57.867"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:57.868" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:57.868" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:57.868" endtime="20210731 21:38:57.868"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:57.869" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:57.868" endtime="20210731 21:38:57.869"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:57.869" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:57.869" endtime="20210731 21:38:57.869"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:57.869" endtime="20210731 21:38:57.870"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:57.870" endtime="20210731 21:38:57.871"/>
</kw>
<status status="PASS" starttime="20210731 21:38:57.869" endtime="20210731 21:38:57.871"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:57.871" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:57.871" endtime="20210731 21:38:57.871"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:57.871" endtime="20210731 21:38:57.872"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:57.872" endtime="20210731 21:38:57.873"/>
</kw>
<status status="PASS" starttime="20210731 21:38:57.871" endtime="20210731 21:38:57.873"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:57.873" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:57.873" endtime="20210731 21:38:57.873"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:57.873" endtime="20210731 21:38:57.874"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:57.874" endtime="20210731 21:38:57.874"/>
</kw>
<status status="PASS" starttime="20210731 21:38:57.873" endtime="20210731 21:38:57.874"/>
</iter>
<status status="PASS" starttime="20210731 21:38:57.869" endtime="20210731 21:38:57.875"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:57.875" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:57.875" endtime="20210731 21:38:57.875"/>
</kw>
<status status="PASS" starttime="20210731 21:38:57.867" endtime="20210731 21:38:57.875"/>
</kw>
<status status="PASS" starttime="20210731 21:38:56.284" endtime="20210731 21:38:57.875"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:57.877" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:57.876" endtime="20210731 21:38:57.877"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:57.877" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210731 21:38:57.877" endtime="20210731 21:38:57.877"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:57.888" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:57.888" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:57.878" endtime="20210731 21:38:57.888"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:57.888" endtime="20210731 21:38:57.889"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:57.889" endtime="20210731 21:38:57.889"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:57.878" endtime="20210731 21:38:57.889"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:57.877" endtime="20210731 21:38:57.889"/>
</for>
<status status="FAIL" starttime="20210731 21:38:57.876" endtime="20210731 21:38:57.889"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:57.876" endtime="20210731 21:38:57.889"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:57.890" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:57.890" endtime="20210731 21:38:57.890"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:57.891" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210731 21:38:57.890" endtime="20210731 21:38:57.891"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:57.896" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:57.896" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:57.891" endtime="20210731 21:38:57.896"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:57.896" endtime="20210731 21:38:57.896"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:57.896" endtime="20210731 21:38:57.896"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:57.891" endtime="20210731 21:38:57.897"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:57.891" endtime="20210731 21:38:57.897"/>
</for>
<status status="FAIL" starttime="20210731 21:38:57.889" endtime="20210731 21:38:57.897"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:57.889" endtime="20210731 21:38:57.897"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:57.898" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:57.898" endtime="20210731 21:38:57.898"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:57.898" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210731 21:38:57.898" endtime="20210731 21:38:57.898"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:57.903" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:57.904" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:57.899" endtime="20210731 21:38:57.904"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:57.904" endtime="20210731 21:38:57.904"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:57.904" endtime="20210731 21:38:57.904"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:57.899" endtime="20210731 21:38:57.904"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:57.899" endtime="20210731 21:38:57.904"/>
</for>
<status status="FAIL" starttime="20210731 21:38:57.897" endtime="20210731 21:38:57.904"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:57.897" endtime="20210731 21:38:57.905"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:57.876" endtime="20210731 21:38:57.905"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:57.920" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:57.942" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:57.942" level="INFO">${pids} = 7702
7709
7715</msg>
<status status="PASS" starttime="20210731 21:38:57.906" endtime="20210731 21:38:57.942"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:57.943" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:57.942" endtime="20210731 21:38:57.943"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:57.944" level="INFO">${pids} = ['7702', '7709', '7715']</msg>
<status status="PASS" starttime="20210731 21:38:57.943" endtime="20210731 21:38:57.944"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7702</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:57.948" level="INFO">Running command 'kill 7702 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:57.944" endtime="20210731 21:38:57.948"/>
</kw>
<status status="PASS" starttime="20210731 21:38:57.944" endtime="20210731 21:38:57.948"/>
</iter>
<iter>
<var name="${pid}">7709</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:57.953" level="INFO">Running command 'kill 7709 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:57.949" endtime="20210731 21:38:57.954"/>
</kw>
<status status="PASS" starttime="20210731 21:38:57.949" endtime="20210731 21:38:57.954"/>
</iter>
<iter>
<var name="${pid}">7715</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:57.975" level="INFO">Running command 'kill 7715 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:57.954" endtime="20210731 21:38:57.976"/>
</kw>
<status status="PASS" starttime="20210731 21:38:57.954" endtime="20210731 21:38:57.976"/>
</iter>
<status status="PASS" starttime="20210731 21:38:57.944" endtime="20210731 21:38:57.976"/>
</for>
<status status="PASS" starttime="20210731 21:38:57.943" endtime="20210731 21:38:57.976"/>
</branch>
<status status="PASS" starttime="20210731 21:38:57.943" endtime="20210731 21:38:57.976"/>
</if>
<status status="PASS" starttime="20210731 21:38:57.905" endtime="20210731 21:38:57.976"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:56.284" endtime="20210731 21:38:57.976">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t56" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.!?!?.?!.!?!.!. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:57.982" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:57.997" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:57.997" level="INFO">${pids} = 7744</msg>
<status status="PASS" starttime="20210731 21:38:57.979" endtime="20210731 21:38:57.997"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:57.998" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:57.997" endtime="20210731 21:38:57.998"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:57.999" level="INFO">${pids} = ['7744']</msg>
<status status="PASS" starttime="20210731 21:38:57.998" endtime="20210731 21:38:57.999"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7744</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:58.003" level="INFO">Running command 'kill 7744 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:57.999" endtime="20210731 21:38:58.003"/>
</kw>
<status status="PASS" starttime="20210731 21:38:57.999" endtime="20210731 21:38:58.003"/>
</iter>
<status status="PASS" starttime="20210731 21:38:57.999" endtime="20210731 21:38:58.003"/>
</for>
<status status="PASS" starttime="20210731 21:38:57.998" endtime="20210731 21:38:58.003"/>
</branch>
<status status="PASS" starttime="20210731 21:38:57.998" endtime="20210731 21:38:58.003"/>
</if>
<status status="PASS" starttime="20210731 21:38:57.978" endtime="20210731 21:38:58.004"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:58.005" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:58.005" endtime="20210731 21:38:58.005"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:58.006" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:58.006" endtime="20210731 21:38:58.006"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:58.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:58.007" endtime="20210731 21:38:58.007"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:58.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:58.007" endtime="20210731 21:38:58.007"/>
</kw>
<msg timestamp="20210731 21:38:58.008" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:58.006" endtime="20210731 21:38:58.008"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:58.011" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:58.008" endtime="20210731 21:38:58.013"/>
</kw>
<status status="PASS" starttime="20210731 21:38:58.004" endtime="20210731 21:38:58.014"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:58.015" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:58.015" endtime="20210731 21:38:58.019"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:38:59.521" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:58.020" endtime="20210731 21:38:59.521"/>
</kw>
<status status="PASS" starttime="20210731 21:38:58.014" endtime="20210731 21:38:59.521"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:59.523" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:59.522" endtime="20210731 21:38:59.523"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:59.523" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:59.523" endtime="20210731 21:38:59.523"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:59.524" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:59.523" endtime="20210731 21:38:59.524"/>
</kw>
<msg timestamp="20210731 21:38:59.524" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:59.522" endtime="20210731 21:38:59.524"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:38:59.525" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:38:59.524" endtime="20210731 21:38:59.525"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.522" endtime="20210731 21:38:59.526"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:38:59.526" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:38:59.526" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:38:59.526" endtime="20210731 21:38:59.527"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.526" endtime="20210731 21:38:59.527"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:38:59.528" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:38:59.528" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:38:59.527" endtime="20210731 21:38:59.528"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:38:59.528" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:38:59.528" endtime="20210731 21:38:59.528"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:59.529" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:59.529" endtime="20210731 21:38:59.529"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:59.529" endtime="20210731 21:38:59.530"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:59.530" endtime="20210731 21:38:59.530"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.528" endtime="20210731 21:38:59.530"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:59.531" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:59.531" endtime="20210731 21:38:59.531"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:59.531" endtime="20210731 21:38:59.532"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:59.532" endtime="20210731 21:38:59.532"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.530" endtime="20210731 21:38:59.532"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:59.533" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:38:59.533" endtime="20210731 21:38:59.533"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:38:59.533" endtime="20210731 21:38:59.534"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:38:59.534" endtime="20210731 21:38:59.534"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.532" endtime="20210731 21:38:59.534"/>
</iter>
<status status="PASS" starttime="20210731 21:38:59.528" endtime="20210731 21:38:59.534"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:38:59.535" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:38:59.534" endtime="20210731 21:38:59.535"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.527" endtime="20210731 21:38:59.535"/>
</kw>
<status status="PASS" starttime="20210731 21:38:57.978" endtime="20210731 21:38:59.535"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:59.537" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:38:59.536" endtime="20210731 21:38:59.537"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:59.537" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210731 21:38:59.537" endtime="20210731 21:38:59.537"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:59.548" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:59.548" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:59.537" endtime="20210731 21:38:59.548"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:59.548" endtime="20210731 21:38:59.548"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:59.549" endtime="20210731 21:38:59.549"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:59.537" endtime="20210731 21:38:59.549"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:59.537" endtime="20210731 21:38:59.549"/>
</for>
<status status="FAIL" starttime="20210731 21:38:59.536" endtime="20210731 21:38:59.549"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:59.536" endtime="20210731 21:38:59.549"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:59.550" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:38:59.550" endtime="20210731 21:38:59.550"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:59.551" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210731 21:38:59.550" endtime="20210731 21:38:59.551"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:59.556" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:59.557" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:59.551" endtime="20210731 21:38:59.557"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:59.557" endtime="20210731 21:38:59.557"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:59.557" endtime="20210731 21:38:59.557"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:59.551" endtime="20210731 21:38:59.557"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:59.551" endtime="20210731 21:38:59.557"/>
</for>
<status status="FAIL" starttime="20210731 21:38:59.549" endtime="20210731 21:38:59.557"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:59.549" endtime="20210731 21:38:59.557"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:59.559" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:38:59.558" endtime="20210731 21:38:59.559"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:38:59.559" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210731 21:38:59.559" endtime="20210731 21:38:59.559"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:38:59.565" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:38:59.566" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:38:59.559" endtime="20210731 21:38:59.566"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:38:59.566" endtime="20210731 21:38:59.566"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:38:59.566" endtime="20210731 21:38:59.566"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:59.559" endtime="20210731 21:38:59.566"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:59.559" endtime="20210731 21:38:59.566"/>
</for>
<status status="FAIL" starttime="20210731 21:38:59.558" endtime="20210731 21:38:59.566"/>
</kw>
<status status="FAIL" starttime="20210731 21:38:59.558" endtime="20210731 21:38:59.566"/>
</iter>
<status status="FAIL" starttime="20210731 21:38:59.535" endtime="20210731 21:38:59.566"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:59.581" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:59.592" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:59.592" level="INFO">${pids} = 7768
7775
7779</msg>
<status status="PASS" starttime="20210731 21:38:59.578" endtime="20210731 21:38:59.592"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:59.593" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:59.593" endtime="20210731 21:38:59.593"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:59.594" level="INFO">${pids} = ['7768', '7775', '7779']</msg>
<status status="PASS" starttime="20210731 21:38:59.594" endtime="20210731 21:38:59.594"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7768</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:59.598" level="INFO">Running command 'kill 7768 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:59.595" endtime="20210731 21:38:59.599"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.594" endtime="20210731 21:38:59.599"/>
</iter>
<iter>
<var name="${pid}">7775</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:59.602" level="INFO">Running command 'kill 7775 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:59.599" endtime="20210731 21:38:59.603"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.599" endtime="20210731 21:38:59.603"/>
</iter>
<iter>
<var name="${pid}">7779</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:59.606" level="INFO">Running command 'kill 7779 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:59.603" endtime="20210731 21:38:59.607"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.603" endtime="20210731 21:38:59.607"/>
</iter>
<status status="PASS" starttime="20210731 21:38:59.594" endtime="20210731 21:38:59.607"/>
</for>
<status status="PASS" starttime="20210731 21:38:59.594" endtime="20210731 21:38:59.607"/>
</branch>
<status status="PASS" starttime="20210731 21:38:59.593" endtime="20210731 21:38:59.607"/>
</if>
<status status="PASS" starttime="20210731 21:38:59.567" endtime="20210731 21:38:59.607"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!?!?.?!.!?!.!.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:57.977" endtime="20210731 21:38:59.608">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t57" name="With Each Valid Token, Updating Password Of Each System User With abcdABC Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:38:59.618" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:38:59.624" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:38:59.625" level="INFO">${pids} = 7808</msg>
<status status="PASS" starttime="20210731 21:38:59.610" endtime="20210731 21:38:59.625"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:59.626" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:38:59.625" endtime="20210731 21:38:59.626"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:38:59.626" level="INFO">${pids} = ['7808']</msg>
<status status="PASS" starttime="20210731 21:38:59.626" endtime="20210731 21:38:59.626"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7808</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:59.632" level="INFO">Running command 'kill 7808 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:59.627" endtime="20210731 21:38:59.633"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.627" endtime="20210731 21:38:59.633"/>
</iter>
<status status="PASS" starttime="20210731 21:38:59.627" endtime="20210731 21:38:59.633"/>
</for>
<status status="PASS" starttime="20210731 21:38:59.626" endtime="20210731 21:38:59.633"/>
</branch>
<status status="PASS" starttime="20210731 21:38:59.626" endtime="20210731 21:38:59.633"/>
</if>
<status status="PASS" starttime="20210731 21:38:59.609" endtime="20210731 21:38:59.635"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:59.636" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:59.636" endtime="20210731 21:38:59.636"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:59.637" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:38:59.637" endtime="20210731 21:38:59.637"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:38:59.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:38:59.637" endtime="20210731 21:38:59.638"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:38:59.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:59.638" endtime="20210731 21:38:59.638"/>
</kw>
<msg timestamp="20210731 21:38:59.638" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:38:59.636" endtime="20210731 21:38:59.638"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:38:59.666" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:38:59.639" endtime="20210731 21:38:59.668"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.635" endtime="20210731 21:38:59.669"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:38:59.671" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:38:59.670" endtime="20210731 21:38:59.675"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:01.177" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:38:59.675" endtime="20210731 21:39:01.177"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.669" endtime="20210731 21:39:01.177"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:01.179" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:01.178" endtime="20210731 21:39:01.179"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:01.179" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:01.179" endtime="20210731 21:39:01.179"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:01.180" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:01.179" endtime="20210731 21:39:01.180"/>
</kw>
<msg timestamp="20210731 21:39:01.180" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:01.178" endtime="20210731 21:39:01.180"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:01.181" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:01.180" endtime="20210731 21:39:01.181"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.178" endtime="20210731 21:39:01.181"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:01.182" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:01.182" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:01.182" endtime="20210731 21:39:01.182"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.181" endtime="20210731 21:39:01.182"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:01.183" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:01.183" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:01.183" endtime="20210731 21:39:01.183"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:01.184" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:01.184" endtime="20210731 21:39:01.184"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:01.185" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:01.184" endtime="20210731 21:39:01.185"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:01.185" endtime="20210731 21:39:01.186"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:01.186" endtime="20210731 21:39:01.186"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.184" endtime="20210731 21:39:01.186"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:01.187" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:01.186" endtime="20210731 21:39:01.187"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:01.187" endtime="20210731 21:39:01.188"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:01.188" endtime="20210731 21:39:01.188"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.186" endtime="20210731 21:39:01.188"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:01.189" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:01.188" endtime="20210731 21:39:01.189"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:01.189" endtime="20210731 21:39:01.190"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:01.190" endtime="20210731 21:39:01.190"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.188" endtime="20210731 21:39:01.190"/>
</iter>
<status status="PASS" starttime="20210731 21:39:01.184" endtime="20210731 21:39:01.190"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:01.191" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:01.190" endtime="20210731 21:39:01.191"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.182" endtime="20210731 21:39:01.191"/>
</kw>
<status status="PASS" starttime="20210731 21:38:59.609" endtime="20210731 21:39:01.191"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:01.193" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:01.192" endtime="20210731 21:39:01.193"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:01.193" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210731 21:39:01.193" endtime="20210731 21:39:01.193"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:01.205" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:01.205" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:01.194" endtime="20210731 21:39:01.205"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:01.205" endtime="20210731 21:39:01.205"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:01.205" endtime="20210731 21:39:01.205"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:01.193" endtime="20210731 21:39:01.205"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:01.193" endtime="20210731 21:39:01.206"/>
</for>
<status status="FAIL" starttime="20210731 21:39:01.192" endtime="20210731 21:39:01.206"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:01.192" endtime="20210731 21:39:01.206"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:01.207" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:01.207" endtime="20210731 21:39:01.207"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:01.208" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210731 21:39:01.207" endtime="20210731 21:39:01.208"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:01.212" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:01.213" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:01.208" endtime="20210731 21:39:01.213"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:01.213" endtime="20210731 21:39:01.213"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:01.213" endtime="20210731 21:39:01.213"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:01.208" endtime="20210731 21:39:01.213"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:01.208" endtime="20210731 21:39:01.213"/>
</for>
<status status="FAIL" starttime="20210731 21:39:01.206" endtime="20210731 21:39:01.213"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:01.206" endtime="20210731 21:39:01.213"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:01.215" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:01.214" endtime="20210731 21:39:01.215"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:01.215" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210731 21:39:01.215" endtime="20210731 21:39:01.215"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:01.232" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:01.233" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:01.215" endtime="20210731 21:39:01.233"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:01.233" endtime="20210731 21:39:01.233"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:01.234" endtime="20210731 21:39:01.234"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:01.215" endtime="20210731 21:39:01.234"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:01.215" endtime="20210731 21:39:01.234"/>
</for>
<status status="FAIL" starttime="20210731 21:39:01.214" endtime="20210731 21:39:01.234"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:01.213" endtime="20210731 21:39:01.234"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:01.191" endtime="20210731 21:39:01.234"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:01.239" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:01.250" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:01.250" level="INFO">${pids} = 7831
7838
7842</msg>
<status status="PASS" starttime="20210731 21:39:01.235" endtime="20210731 21:39:01.250"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:01.252" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:01.251" endtime="20210731 21:39:01.252"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:01.253" level="INFO">${pids} = ['7831', '7838', '7842']</msg>
<status status="PASS" starttime="20210731 21:39:01.252" endtime="20210731 21:39:01.253"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7831</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:01.266" level="INFO">Running command 'kill 7831 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:01.253" endtime="20210731 21:39:01.267"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.253" endtime="20210731 21:39:01.267"/>
</iter>
<iter>
<var name="${pid}">7838</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:01.271" level="INFO">Running command 'kill 7838 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:01.268" endtime="20210731 21:39:01.271"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.267" endtime="20210731 21:39:01.272"/>
</iter>
<iter>
<var name="${pid}">7842</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:01.275" level="INFO">Running command 'kill 7842 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:01.272" endtime="20210731 21:39:01.276"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.272" endtime="20210731 21:39:01.276"/>
</iter>
<status status="PASS" starttime="20210731 21:39:01.253" endtime="20210731 21:39:01.276"/>
</for>
<status status="PASS" starttime="20210731 21:39:01.252" endtime="20210731 21:39:01.276"/>
</branch>
<status status="PASS" starttime="20210731 21:39:01.252" endtime="20210731 21:39:01.276"/>
</if>
<status status="PASS" starttime="20210731 21:39:01.234" endtime="20210731 21:39:01.276"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABC'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:38:59.608" endtime="20210731 21:39:01.276">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t58" name="With Each Valid Token, Updating Password Of Each System User With abcdABCD Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:01.282" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:01.294" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:01.294" level="INFO">${pids} = 7873</msg>
<status status="PASS" starttime="20210731 21:39:01.279" endtime="20210731 21:39:01.294"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:01.295" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:01.295" endtime="20210731 21:39:01.295"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:01.296" level="INFO">${pids} = ['7873']</msg>
<status status="PASS" starttime="20210731 21:39:01.296" endtime="20210731 21:39:01.296"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7873</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:01.300" level="INFO">Running command 'kill 7873 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:01.296" endtime="20210731 21:39:01.301"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.296" endtime="20210731 21:39:01.301"/>
</iter>
<status status="PASS" starttime="20210731 21:39:01.296" endtime="20210731 21:39:01.301"/>
</for>
<status status="PASS" starttime="20210731 21:39:01.295" endtime="20210731 21:39:01.301"/>
</branch>
<status status="PASS" starttime="20210731 21:39:01.295" endtime="20210731 21:39:01.301"/>
</if>
<status status="PASS" starttime="20210731 21:39:01.278" endtime="20210731 21:39:01.302"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:01.303" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:01.303" endtime="20210731 21:39:01.303"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:01.310" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:01.310" endtime="20210731 21:39:01.310"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:01.311" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:01.310" endtime="20210731 21:39:01.311"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:01.311" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:01.311" endtime="20210731 21:39:01.311"/>
</kw>
<msg timestamp="20210731 21:39:01.312" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:01.303" endtime="20210731 21:39:01.312"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:01.330" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:01.312" endtime="20210731 21:39:01.332"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.302" endtime="20210731 21:39:01.332"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:01.334" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:01.333" endtime="20210731 21:39:01.338"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:02.840" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:01.339" endtime="20210731 21:39:02.840"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.333" endtime="20210731 21:39:02.840"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:02.841" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:02.841" endtime="20210731 21:39:02.841"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:02.842" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:02.842" endtime="20210731 21:39:02.842"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:02.842" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:02.842" endtime="20210731 21:39:02.842"/>
</kw>
<msg timestamp="20210731 21:39:02.843" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:02.841" endtime="20210731 21:39:02.843"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:02.843" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:02.843" endtime="20210731 21:39:02.844"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.840" endtime="20210731 21:39:02.844"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:02.844" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:02.844" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:02.844" endtime="20210731 21:39:02.845"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.844" endtime="20210731 21:39:02.845"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:02.846" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:02.846" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:02.845" endtime="20210731 21:39:02.846"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:02.846" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:02.846" endtime="20210731 21:39:02.846"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:02.847" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:02.847" endtime="20210731 21:39:02.847"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:02.847" endtime="20210731 21:39:02.848"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:02.848" endtime="20210731 21:39:02.849"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.847" endtime="20210731 21:39:02.849"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:02.849" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:02.849" endtime="20210731 21:39:02.849"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:02.849" endtime="20210731 21:39:02.850"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:02.850" endtime="20210731 21:39:02.851"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.849" endtime="20210731 21:39:02.851"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:02.851" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:02.851" endtime="20210731 21:39:02.851"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:02.851" endtime="20210731 21:39:02.852"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:02.852" endtime="20210731 21:39:02.853"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.851" endtime="20210731 21:39:02.853"/>
</iter>
<status status="PASS" starttime="20210731 21:39:02.847" endtime="20210731 21:39:02.853"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:02.853" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:02.853" endtime="20210731 21:39:02.853"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.845" endtime="20210731 21:39:02.853"/>
</kw>
<status status="PASS" starttime="20210731 21:39:01.278" endtime="20210731 21:39:02.854"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:02.855" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:02.855" endtime="20210731 21:39:02.855"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:02.855" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210731 21:39:02.855" endtime="20210731 21:39:02.856"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:02.869" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:02.869" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:02.856" endtime="20210731 21:39:02.869"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:02.870" endtime="20210731 21:39:02.870"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:02.870" endtime="20210731 21:39:02.870"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:02.856" endtime="20210731 21:39:02.870"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:02.856" endtime="20210731 21:39:02.870"/>
</for>
<status status="FAIL" starttime="20210731 21:39:02.854" endtime="20210731 21:39:02.870"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:02.854" endtime="20210731 21:39:02.870"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:02.872" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:02.871" endtime="20210731 21:39:02.872"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:02.872" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210731 21:39:02.872" endtime="20210731 21:39:02.872"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:02.877" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:02.877" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:02.873" endtime="20210731 21:39:02.877"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:02.878" endtime="20210731 21:39:02.878"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:02.878" endtime="20210731 21:39:02.878"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:02.872" endtime="20210731 21:39:02.878"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:02.872" endtime="20210731 21:39:02.878"/>
</for>
<status status="FAIL" starttime="20210731 21:39:02.870" endtime="20210731 21:39:02.878"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:02.870" endtime="20210731 21:39:02.878"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:02.879" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:02.879" endtime="20210731 21:39:02.879"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:02.880" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210731 21:39:02.880" endtime="20210731 21:39:02.880"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:02.896" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:02.896" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:02.881" endtime="20210731 21:39:02.897"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:02.897" endtime="20210731 21:39:02.897"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:02.897" endtime="20210731 21:39:02.897"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:02.880" endtime="20210731 21:39:02.897"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:02.880" endtime="20210731 21:39:02.897"/>
</for>
<status status="FAIL" starttime="20210731 21:39:02.878" endtime="20210731 21:39:02.897"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:02.878" endtime="20210731 21:39:02.897"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:02.854" endtime="20210731 21:39:02.897"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:02.902" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:02.915" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:02.916" level="INFO">${pids} = 7900
7989
7994</msg>
<status status="PASS" starttime="20210731 21:39:02.899" endtime="20210731 21:39:02.916"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:02.917" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:02.916" endtime="20210731 21:39:02.917"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:02.918" level="INFO">${pids} = ['7900', '7989', '7994']</msg>
<status status="PASS" starttime="20210731 21:39:02.917" endtime="20210731 21:39:02.918"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">7900</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:02.929" level="INFO">Running command 'kill 7900 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:02.918" endtime="20210731 21:39:02.929"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.918" endtime="20210731 21:39:02.929"/>
</iter>
<iter>
<var name="${pid}">7989</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:02.935" level="INFO">Running command 'kill 7989 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:02.930" endtime="20210731 21:39:02.935"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.930" endtime="20210731 21:39:02.935"/>
</iter>
<iter>
<var name="${pid}">7994</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:02.948" level="INFO">Running command 'kill 7994 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:02.936" endtime="20210731 21:39:02.948"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.936" endtime="20210731 21:39:02.948"/>
</iter>
<status status="PASS" starttime="20210731 21:39:02.918" endtime="20210731 21:39:02.948"/>
</for>
<status status="PASS" starttime="20210731 21:39:02.917" endtime="20210731 21:39:02.948"/>
</branch>
<status status="PASS" starttime="20210731 21:39:02.917" endtime="20210731 21:39:02.949"/>
</if>
<status status="PASS" starttime="20210731 21:39:02.898" endtime="20210731 21:39:02.949"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABCD'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:01.277" endtime="20210731 21:39:02.949">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t59" name="With Each Valid Token, Updating Password Of Each System User With abcdABCDefgjklmnprstoö Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:02.956" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:02.967" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:02.967" level="INFO">${pids} = 8023</msg>
<status status="PASS" starttime="20210731 21:39:02.952" endtime="20210731 21:39:02.967"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:02.968" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:02.968" endtime="20210731 21:39:02.968"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:02.969" level="INFO">${pids} = ['8023']</msg>
<status status="PASS" starttime="20210731 21:39:02.969" endtime="20210731 21:39:02.969"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8023</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:02.972" level="INFO">Running command 'kill 8023 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:02.969" endtime="20210731 21:39:02.973"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.969" endtime="20210731 21:39:02.973"/>
</iter>
<status status="PASS" starttime="20210731 21:39:02.969" endtime="20210731 21:39:02.973"/>
</for>
<status status="PASS" starttime="20210731 21:39:02.968" endtime="20210731 21:39:02.973"/>
</branch>
<status status="PASS" starttime="20210731 21:39:02.968" endtime="20210731 21:39:02.973"/>
</if>
<status status="PASS" starttime="20210731 21:39:02.951" endtime="20210731 21:39:02.973"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:02.975" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:02.974" endtime="20210731 21:39:02.975"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:02.975" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:02.975" endtime="20210731 21:39:02.975"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:02.976" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:02.976" endtime="20210731 21:39:02.976"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:02.976" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:02.976" endtime="20210731 21:39:02.976"/>
</kw>
<msg timestamp="20210731 21:39:02.977" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:02.975" endtime="20210731 21:39:02.977"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:02.985" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:02.977" endtime="20210731 21:39:02.986"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.974" endtime="20210731 21:39:02.987"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:02.988" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:02.988" endtime="20210731 21:39:02.992"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:04.493" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:02.993" endtime="20210731 21:39:04.494"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.987" endtime="20210731 21:39:04.494"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:04.495" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:04.495" endtime="20210731 21:39:04.495"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:04.496" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:04.496" endtime="20210731 21:39:04.496"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:04.496" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:04.496" endtime="20210731 21:39:04.496"/>
</kw>
<msg timestamp="20210731 21:39:04.497" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:04.495" endtime="20210731 21:39:04.497"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:04.497" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:04.497" endtime="20210731 21:39:04.498"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.494" endtime="20210731 21:39:04.498"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:04.498" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:04.498" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:04.498" endtime="20210731 21:39:04.498"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.498" endtime="20210731 21:39:04.499"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:04.499" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:04.500" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:04.499" endtime="20210731 21:39:04.500"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:04.500" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:04.500" endtime="20210731 21:39:04.500"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:04.501" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:04.500" endtime="20210731 21:39:04.501"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:04.501" endtime="20210731 21:39:04.502"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:04.502" endtime="20210731 21:39:04.502"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.500" endtime="20210731 21:39:04.502"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:04.502" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:04.502" endtime="20210731 21:39:04.503"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:04.503" endtime="20210731 21:39:04.503"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:04.504" endtime="20210731 21:39:04.504"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.502" endtime="20210731 21:39:04.504"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:04.504" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:04.504" endtime="20210731 21:39:04.504"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:04.504" endtime="20210731 21:39:04.505"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:04.505" endtime="20210731 21:39:04.506"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.504" endtime="20210731 21:39:04.506"/>
</iter>
<status status="PASS" starttime="20210731 21:39:04.500" endtime="20210731 21:39:04.506"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:04.506" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:04.506" endtime="20210731 21:39:04.506"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.499" endtime="20210731 21:39:04.506"/>
</kw>
<status status="PASS" starttime="20210731 21:39:02.951" endtime="20210731 21:39:04.506"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:04.508" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:04.508" endtime="20210731 21:39:04.508"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:04.508" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210731 21:39:04.508" endtime="20210731 21:39:04.508"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:04.519" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:04.520" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:04.509" endtime="20210731 21:39:04.520"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:04.520" endtime="20210731 21:39:04.520"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:04.520" endtime="20210731 21:39:04.520"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:04.509" endtime="20210731 21:39:04.520"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:04.509" endtime="20210731 21:39:04.520"/>
</for>
<status status="FAIL" starttime="20210731 21:39:04.507" endtime="20210731 21:39:04.521"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:04.507" endtime="20210731 21:39:04.521"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:04.523" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:04.522" endtime="20210731 21:39:04.523"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:04.523" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210731 21:39:04.523" endtime="20210731 21:39:04.523"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:04.528" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:04.528" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:04.524" endtime="20210731 21:39:04.528"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:04.529" endtime="20210731 21:39:04.529"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:04.529" endtime="20210731 21:39:04.529"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:04.523" endtime="20210731 21:39:04.529"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:04.523" endtime="20210731 21:39:04.529"/>
</for>
<status status="FAIL" starttime="20210731 21:39:04.521" endtime="20210731 21:39:04.529"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:04.521" endtime="20210731 21:39:04.529"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:04.530" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:04.530" endtime="20210731 21:39:04.530"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:04.531" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210731 21:39:04.531" endtime="20210731 21:39:04.531"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:04.536" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:04.537" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:04.531" endtime="20210731 21:39:04.537"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:04.537" endtime="20210731 21:39:04.537"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:04.537" endtime="20210731 21:39:04.537"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:04.531" endtime="20210731 21:39:04.537"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:04.531" endtime="20210731 21:39:04.537"/>
</for>
<status status="FAIL" starttime="20210731 21:39:04.529" endtime="20210731 21:39:04.538"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:04.529" endtime="20210731 21:39:04.538"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:04.507" endtime="20210731 21:39:04.538"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:04.552" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:04.556" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:04.556" level="INFO">${pids} = 8046
8053
8057</msg>
<status status="PASS" starttime="20210731 21:39:04.539" endtime="20210731 21:39:04.556"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:04.557" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:04.556" endtime="20210731 21:39:04.557"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:04.558" level="INFO">${pids} = ['8046', '8053', '8057']</msg>
<status status="PASS" starttime="20210731 21:39:04.557" endtime="20210731 21:39:04.558"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8046</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:04.562" level="INFO">Running command 'kill 8046 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:04.558" endtime="20210731 21:39:04.563"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.558" endtime="20210731 21:39:04.563"/>
</iter>
<iter>
<var name="${pid}">8053</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:04.569" level="INFO">Running command 'kill 8053 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:04.564" endtime="20210731 21:39:04.569"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.563" endtime="20210731 21:39:04.569"/>
</iter>
<iter>
<var name="${pid}">8057</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:04.573" level="INFO">Running command 'kill 8057 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:04.570" endtime="20210731 21:39:04.574"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.570" endtime="20210731 21:39:04.574"/>
</iter>
<status status="PASS" starttime="20210731 21:39:04.558" endtime="20210731 21:39:04.574"/>
</for>
<status status="PASS" starttime="20210731 21:39:04.557" endtime="20210731 21:39:04.574"/>
</branch>
<status status="PASS" starttime="20210731 21:39:04.557" endtime="20210731 21:39:04.574"/>
</if>
<status status="PASS" starttime="20210731 21:39:04.538" endtime="20210731 21:39:04.575"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABCDefgjklmnprstoö'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:02.950" endtime="20210731 21:39:04.575">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t60" name="With Each Valid Token, Updating Password Of Each System User With abcd012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:04.581" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:04.598" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:04.598" level="INFO">${pids} = 8086</msg>
<status status="PASS" starttime="20210731 21:39:04.577" endtime="20210731 21:39:04.598"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:04.599" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:04.598" endtime="20210731 21:39:04.599"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:04.600" level="INFO">${pids} = ['8086']</msg>
<status status="PASS" starttime="20210731 21:39:04.600" endtime="20210731 21:39:04.600"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8086</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:04.607" level="INFO">Running command 'kill 8086 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:04.601" endtime="20210731 21:39:04.608"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.601" endtime="20210731 21:39:04.608"/>
</iter>
<status status="PASS" starttime="20210731 21:39:04.601" endtime="20210731 21:39:04.608"/>
</for>
<status status="PASS" starttime="20210731 21:39:04.600" endtime="20210731 21:39:04.608"/>
</branch>
<status status="PASS" starttime="20210731 21:39:04.599" endtime="20210731 21:39:04.608"/>
</if>
<status status="PASS" starttime="20210731 21:39:04.577" endtime="20210731 21:39:04.609"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:04.610" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:04.610" endtime="20210731 21:39:04.610"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:04.611" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:04.611" endtime="20210731 21:39:04.611"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:04.611" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:04.611" endtime="20210731 21:39:04.611"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:04.612" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:04.612" endtime="20210731 21:39:04.612"/>
</kw>
<msg timestamp="20210731 21:39:04.612" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:04.610" endtime="20210731 21:39:04.612"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:04.616" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:04.612" endtime="20210731 21:39:04.618"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.609" endtime="20210731 21:39:04.618"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:04.620" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:04.619" endtime="20210731 21:39:04.647"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:06.149" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:04.648" endtime="20210731 21:39:06.149"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.619" endtime="20210731 21:39:06.149"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:06.150" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:06.150" endtime="20210731 21:39:06.151"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:06.151" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:06.151" endtime="20210731 21:39:06.151"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:06.151" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:06.151" endtime="20210731 21:39:06.152"/>
</kw>
<msg timestamp="20210731 21:39:06.152" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:06.150" endtime="20210731 21:39:06.152"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:06.152" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:06.152" endtime="20210731 21:39:06.153"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.149" endtime="20210731 21:39:06.153"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:06.154" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:06.154" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:06.154" endtime="20210731 21:39:06.154"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.153" endtime="20210731 21:39:06.154"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:06.155" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:06.156" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:06.155" endtime="20210731 21:39:06.156"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:06.156" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:06.156" endtime="20210731 21:39:06.156"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:06.157" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:06.157" endtime="20210731 21:39:06.157"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:06.157" endtime="20210731 21:39:06.158"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:06.158" endtime="20210731 21:39:06.159"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.156" endtime="20210731 21:39:06.159"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:06.159" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:06.159" endtime="20210731 21:39:06.159"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:06.159" endtime="20210731 21:39:06.160"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:06.160" endtime="20210731 21:39:06.161"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.159" endtime="20210731 21:39:06.161"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:06.161" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:06.161" endtime="20210731 21:39:06.161"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:06.161" endtime="20210731 21:39:06.163"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:06.163" endtime="20210731 21:39:06.163"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.161" endtime="20210731 21:39:06.163"/>
</iter>
<status status="PASS" starttime="20210731 21:39:06.156" endtime="20210731 21:39:06.163"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:06.164" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:06.163" endtime="20210731 21:39:06.164"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.154" endtime="20210731 21:39:06.164"/>
</kw>
<status status="PASS" starttime="20210731 21:39:04.577" endtime="20210731 21:39:06.164"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:06.166" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:06.166" endtime="20210731 21:39:06.166"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:06.167" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210731 21:39:06.166" endtime="20210731 21:39:06.167"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:06.178" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:06.178" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:06.167" endtime="20210731 21:39:06.178"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:06.179" endtime="20210731 21:39:06.179"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:06.179" endtime="20210731 21:39:06.179"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:06.167" endtime="20210731 21:39:06.179"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:06.167" endtime="20210731 21:39:06.179"/>
</for>
<status status="FAIL" starttime="20210731 21:39:06.165" endtime="20210731 21:39:06.179"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:06.165" endtime="20210731 21:39:06.179"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:06.181" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:06.180" endtime="20210731 21:39:06.181"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:06.182" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210731 21:39:06.181" endtime="20210731 21:39:06.182"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:06.188" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:06.188" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:06.182" endtime="20210731 21:39:06.188"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:06.188" endtime="20210731 21:39:06.188"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:06.189" endtime="20210731 21:39:06.189"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:06.182" endtime="20210731 21:39:06.189"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:06.182" endtime="20210731 21:39:06.189"/>
</for>
<status status="FAIL" starttime="20210731 21:39:06.179" endtime="20210731 21:39:06.189"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:06.179" endtime="20210731 21:39:06.189"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:06.190" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:06.190" endtime="20210731 21:39:06.190"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:06.191" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210731 21:39:06.191" endtime="20210731 21:39:06.191"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:06.208" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:06.208" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:06.191" endtime="20210731 21:39:06.208"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:06.208" endtime="20210731 21:39:06.208"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:06.208" endtime="20210731 21:39:06.208"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:06.191" endtime="20210731 21:39:06.208"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:06.191" endtime="20210731 21:39:06.209"/>
</for>
<status status="FAIL" starttime="20210731 21:39:06.189" endtime="20210731 21:39:06.209"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:06.189" endtime="20210731 21:39:06.209"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:06.164" endtime="20210731 21:39:06.209"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:06.214" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:06.225" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:06.225" level="INFO">${pids} = 8110
8117
8121</msg>
<status status="PASS" starttime="20210731 21:39:06.210" endtime="20210731 21:39:06.226"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:06.227" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:06.226" endtime="20210731 21:39:06.227"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:06.227" level="INFO">${pids} = ['8110', '8117', '8121']</msg>
<status status="PASS" starttime="20210731 21:39:06.227" endtime="20210731 21:39:06.228"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8110</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:06.231" level="INFO">Running command 'kill 8110 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:06.228" endtime="20210731 21:39:06.232"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.228" endtime="20210731 21:39:06.232"/>
</iter>
<iter>
<var name="${pid}">8117</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:06.236" level="INFO">Running command 'kill 8117 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:06.233" endtime="20210731 21:39:06.240"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.232" endtime="20210731 21:39:06.240"/>
</iter>
<iter>
<var name="${pid}">8121</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:06.255" level="INFO">Running command 'kill 8121 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:06.241" endtime="20210731 21:39:06.256"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.241" endtime="20210731 21:39:06.256"/>
</iter>
<status status="PASS" starttime="20210731 21:39:06.228" endtime="20210731 21:39:06.256"/>
</for>
<status status="PASS" starttime="20210731 21:39:06.227" endtime="20210731 21:39:06.256"/>
</branch>
<status status="PASS" starttime="20210731 21:39:06.227" endtime="20210731 21:39:06.256"/>
</if>
<status status="PASS" starttime="20210731 21:39:06.209" endtime="20210731 21:39:06.256"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:04.576" endtime="20210731 21:39:06.257">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t61" name="With Each Valid Token, Updating Password Of Each System User With abcd0123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:06.262" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:06.275" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:06.276" level="INFO">${pids} = 8150</msg>
<status status="PASS" starttime="20210731 21:39:06.259" endtime="20210731 21:39:06.276"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:06.277" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:06.276" endtime="20210731 21:39:06.277"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:06.278" level="INFO">${pids} = ['8150']</msg>
<status status="PASS" starttime="20210731 21:39:06.277" endtime="20210731 21:39:06.278"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8150</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:06.282" level="INFO">Running command 'kill 8150 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:06.278" endtime="20210731 21:39:06.282"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.278" endtime="20210731 21:39:06.282"/>
</iter>
<status status="PASS" starttime="20210731 21:39:06.278" endtime="20210731 21:39:06.282"/>
</for>
<status status="PASS" starttime="20210731 21:39:06.277" endtime="20210731 21:39:06.282"/>
</branch>
<status status="PASS" starttime="20210731 21:39:06.277" endtime="20210731 21:39:06.282"/>
</if>
<status status="PASS" starttime="20210731 21:39:06.259" endtime="20210731 21:39:06.283"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:06.284" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:06.284" endtime="20210731 21:39:06.284"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:06.285" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:06.285" endtime="20210731 21:39:06.285"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:06.286" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:06.285" endtime="20210731 21:39:06.286"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:06.286" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:06.286" endtime="20210731 21:39:06.286"/>
</kw>
<msg timestamp="20210731 21:39:06.287" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:06.284" endtime="20210731 21:39:06.287"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:06.291" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:06.287" endtime="20210731 21:39:06.293"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.283" endtime="20210731 21:39:06.293"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:06.295" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:06.294" endtime="20210731 21:39:06.299"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:07.801" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:06.300" endtime="20210731 21:39:07.801"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.294" endtime="20210731 21:39:07.801"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:07.803" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:07.803" endtime="20210731 21:39:07.803"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:07.803" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:07.803" endtime="20210731 21:39:07.803"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:07.804" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:07.803" endtime="20210731 21:39:07.804"/>
</kw>
<msg timestamp="20210731 21:39:07.804" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:07.802" endtime="20210731 21:39:07.804"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:07.805" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:07.804" endtime="20210731 21:39:07.805"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.802" endtime="20210731 21:39:07.805"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:07.806" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:07.806" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:07.806" endtime="20210731 21:39:07.806"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.805" endtime="20210731 21:39:07.806"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:07.808" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:07.808" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:07.807" endtime="20210731 21:39:07.808"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:07.808" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:07.808" endtime="20210731 21:39:07.808"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:07.809" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:07.809" endtime="20210731 21:39:07.809"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:07.809" endtime="20210731 21:39:07.810"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:07.810" endtime="20210731 21:39:07.810"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.808" endtime="20210731 21:39:07.810"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:07.811" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:07.811" endtime="20210731 21:39:07.811"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:07.811" endtime="20210731 21:39:07.812"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:07.812" endtime="20210731 21:39:07.812"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.810" endtime="20210731 21:39:07.812"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:07.813" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:07.812" endtime="20210731 21:39:07.813"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:07.813" endtime="20210731 21:39:07.814"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:07.814" endtime="20210731 21:39:07.814"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.812" endtime="20210731 21:39:07.814"/>
</iter>
<status status="PASS" starttime="20210731 21:39:07.808" endtime="20210731 21:39:07.814"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:07.815" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:07.814" endtime="20210731 21:39:07.815"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.806" endtime="20210731 21:39:07.815"/>
</kw>
<status status="PASS" starttime="20210731 21:39:06.258" endtime="20210731 21:39:07.815"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:07.816" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:07.816" endtime="20210731 21:39:07.816"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:07.817" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210731 21:39:07.816" endtime="20210731 21:39:07.817"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:07.829" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:07.829" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:07.817" endtime="20210731 21:39:07.830"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:07.830" endtime="20210731 21:39:07.830"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:07.830" endtime="20210731 21:39:07.830"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:07.817" endtime="20210731 21:39:07.830"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:07.817" endtime="20210731 21:39:07.830"/>
</for>
<status status="FAIL" starttime="20210731 21:39:07.815" endtime="20210731 21:39:07.830"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:07.815" endtime="20210731 21:39:07.830"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:07.831" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:07.831" endtime="20210731 21:39:07.831"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:07.832" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210731 21:39:07.832" endtime="20210731 21:39:07.832"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:07.837" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:07.837" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:07.832" endtime="20210731 21:39:07.838"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:07.838" endtime="20210731 21:39:07.838"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:07.838" endtime="20210731 21:39:07.838"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:07.832" endtime="20210731 21:39:07.838"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:07.832" endtime="20210731 21:39:07.838"/>
</for>
<status status="FAIL" starttime="20210731 21:39:07.830" endtime="20210731 21:39:07.838"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:07.830" endtime="20210731 21:39:07.838"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:07.839" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:07.839" endtime="20210731 21:39:07.839"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:07.840" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210731 21:39:07.840" endtime="20210731 21:39:07.840"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:07.845" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:07.857" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:07.840" endtime="20210731 21:39:07.857"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:07.858" endtime="20210731 21:39:07.858"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:07.860" endtime="20210731 21:39:07.860"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:07.840" endtime="20210731 21:39:07.860"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:07.840" endtime="20210731 21:39:07.860"/>
</for>
<status status="FAIL" starttime="20210731 21:39:07.838" endtime="20210731 21:39:07.860"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:07.838" endtime="20210731 21:39:07.860"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:07.815" endtime="20210731 21:39:07.860"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:07.865" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:07.878" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:07.878" level="INFO">${pids} = 8173
8181
8186</msg>
<status status="PASS" starttime="20210731 21:39:07.861" endtime="20210731 21:39:07.878"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:07.879" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:07.878" endtime="20210731 21:39:07.879"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:07.880" level="INFO">${pids} = ['8173', '8181', '8186']</msg>
<status status="PASS" starttime="20210731 21:39:07.879" endtime="20210731 21:39:07.880"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8173</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:07.883" level="INFO">Running command 'kill 8173 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:07.880" endtime="20210731 21:39:07.884"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.880" endtime="20210731 21:39:07.884"/>
</iter>
<iter>
<var name="${pid}">8181</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:07.888" level="INFO">Running command 'kill 8181 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:07.885" endtime="20210731 21:39:07.888"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.884" endtime="20210731 21:39:07.888"/>
</iter>
<iter>
<var name="${pid}">8186</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:07.896" level="INFO">Running command 'kill 8186 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:07.889" endtime="20210731 21:39:07.897"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.888" endtime="20210731 21:39:07.897"/>
</iter>
<status status="PASS" starttime="20210731 21:39:07.880" endtime="20210731 21:39:07.897"/>
</for>
<status status="PASS" starttime="20210731 21:39:07.879" endtime="20210731 21:39:07.897"/>
</branch>
<status status="PASS" starttime="20210731 21:39:07.879" endtime="20210731 21:39:07.897"/>
</if>
<status status="PASS" starttime="20210731 21:39:07.861" endtime="20210731 21:39:07.897"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd0123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:06.257" endtime="20210731 21:39:07.898">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t62" name="With Each Valid Token, Updating Password Of Each System User With abcd0123456789defghjk4 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:07.910" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:07.934" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:07.934" level="INFO">${pids} = 8225</msg>
<status status="PASS" starttime="20210731 21:39:07.900" endtime="20210731 21:39:07.934"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:07.935" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:07.935" endtime="20210731 21:39:07.936"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:07.937" level="INFO">${pids} = ['8225']</msg>
<status status="PASS" starttime="20210731 21:39:07.936" endtime="20210731 21:39:07.937"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8225</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:07.958" level="INFO">Running command 'kill 8225 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:07.937" endtime="20210731 21:39:07.958"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.937" endtime="20210731 21:39:07.959"/>
</iter>
<status status="PASS" starttime="20210731 21:39:07.937" endtime="20210731 21:39:07.959"/>
</for>
<status status="PASS" starttime="20210731 21:39:07.936" endtime="20210731 21:39:07.959"/>
</branch>
<status status="PASS" starttime="20210731 21:39:07.936" endtime="20210731 21:39:07.959"/>
</if>
<status status="PASS" starttime="20210731 21:39:07.900" endtime="20210731 21:39:07.959"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:07.962" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:07.961" endtime="20210731 21:39:07.962"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:07.963" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:07.963" endtime="20210731 21:39:07.963"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:07.963" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:07.963" endtime="20210731 21:39:07.963"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:07.964" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:07.964" endtime="20210731 21:39:07.964"/>
</kw>
<msg timestamp="20210731 21:39:07.964" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:07.962" endtime="20210731 21:39:07.964"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:07.968" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:07.964" endtime="20210731 21:39:07.970"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.960" endtime="20210731 21:39:07.970"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:07.972" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:07.971" endtime="20210731 21:39:07.976"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:09.478" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:07.977" endtime="20210731 21:39:09.478"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.971" endtime="20210731 21:39:09.478"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:09.480" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:09.480" endtime="20210731 21:39:09.480"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:09.480" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:09.480" endtime="20210731 21:39:09.480"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:09.481" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:09.480" endtime="20210731 21:39:09.481"/>
</kw>
<msg timestamp="20210731 21:39:09.481" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:09.479" endtime="20210731 21:39:09.481"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:09.482" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:09.481" endtime="20210731 21:39:09.482"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.479" endtime="20210731 21:39:09.482"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:09.483" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:09.483" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:09.483" endtime="20210731 21:39:09.483"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.483" endtime="20210731 21:39:09.483"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:09.485" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:09.485" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:09.484" endtime="20210731 21:39:09.485"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:09.485" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:09.485" endtime="20210731 21:39:09.485"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:09.486" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:09.486" endtime="20210731 21:39:09.486"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:09.486" endtime="20210731 21:39:09.487"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:09.487" endtime="20210731 21:39:09.488"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.486" endtime="20210731 21:39:09.488"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:09.488" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:09.488" endtime="20210731 21:39:09.488"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:09.489" endtime="20210731 21:39:09.489"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:09.490" endtime="20210731 21:39:09.490"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.488" endtime="20210731 21:39:09.490"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:09.490" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:09.490" endtime="20210731 21:39:09.490"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:09.491" endtime="20210731 21:39:09.491"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:09.492" endtime="20210731 21:39:09.492"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.490" endtime="20210731 21:39:09.492"/>
</iter>
<status status="PASS" starttime="20210731 21:39:09.485" endtime="20210731 21:39:09.492"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:09.493" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:09.492" endtime="20210731 21:39:09.493"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.484" endtime="20210731 21:39:09.493"/>
</kw>
<status status="PASS" starttime="20210731 21:39:07.899" endtime="20210731 21:39:09.493"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:09.495" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:09.494" endtime="20210731 21:39:09.495"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:09.495" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210731 21:39:09.495" endtime="20210731 21:39:09.495"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:09.506" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:09.507" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:09.495" endtime="20210731 21:39:09.507"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:09.507" endtime="20210731 21:39:09.507"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:09.507" endtime="20210731 21:39:09.507"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:09.495" endtime="20210731 21:39:09.507"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:09.495" endtime="20210731 21:39:09.507"/>
</for>
<status status="FAIL" starttime="20210731 21:39:09.494" endtime="20210731 21:39:09.508"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:09.493" endtime="20210731 21:39:09.508"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:09.509" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:09.509" endtime="20210731 21:39:09.509"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:09.510" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210731 21:39:09.509" endtime="20210731 21:39:09.510"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:09.514" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:09.515" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:09.510" endtime="20210731 21:39:09.515"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:09.515" endtime="20210731 21:39:09.515"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:09.515" endtime="20210731 21:39:09.515"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:09.510" endtime="20210731 21:39:09.515"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:09.510" endtime="20210731 21:39:09.515"/>
</for>
<status status="FAIL" starttime="20210731 21:39:09.508" endtime="20210731 21:39:09.515"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:09.508" endtime="20210731 21:39:09.515"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:09.517" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:09.516" endtime="20210731 21:39:09.517"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:09.517" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210731 21:39:09.517" endtime="20210731 21:39:09.517"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:09.524" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:09.524" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:09.518" endtime="20210731 21:39:09.524"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:09.524" endtime="20210731 21:39:09.524"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:09.524" endtime="20210731 21:39:09.524"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:09.517" endtime="20210731 21:39:09.524"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:09.517" endtime="20210731 21:39:09.525"/>
</for>
<status status="FAIL" starttime="20210731 21:39:09.516" endtime="20210731 21:39:09.525"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:09.515" endtime="20210731 21:39:09.525"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:09.493" endtime="20210731 21:39:09.525"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:09.543" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:09.566" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:09.567" level="INFO">${pids} = 8248
8255
8259</msg>
<status status="PASS" starttime="20210731 21:39:09.538" endtime="20210731 21:39:09.567"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:09.568" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:09.567" endtime="20210731 21:39:09.568"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:09.569" level="INFO">${pids} = ['8248', '8255', '8259']</msg>
<status status="PASS" starttime="20210731 21:39:09.568" endtime="20210731 21:39:09.569"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8248</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:09.574" level="INFO">Running command 'kill 8248 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:09.569" endtime="20210731 21:39:09.574"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.569" endtime="20210731 21:39:09.575"/>
</iter>
<iter>
<var name="${pid}">8255</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:09.578" level="INFO">Running command 'kill 8255 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:09.575" endtime="20210731 21:39:09.579"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.575" endtime="20210731 21:39:09.579"/>
</iter>
<iter>
<var name="${pid}">8259</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:09.584" level="INFO">Running command 'kill 8259 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:09.580" endtime="20210731 21:39:09.584"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.580" endtime="20210731 21:39:09.584"/>
</iter>
<status status="PASS" starttime="20210731 21:39:09.569" endtime="20210731 21:39:09.584"/>
</for>
<status status="PASS" starttime="20210731 21:39:09.568" endtime="20210731 21:39:09.584"/>
</branch>
<status status="PASS" starttime="20210731 21:39:09.568" endtime="20210731 21:39:09.585"/>
</if>
<status status="PASS" starttime="20210731 21:39:09.525" endtime="20210731 21:39:09.585"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd0123456789defghjk4'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:07.898" endtime="20210731 21:39:09.585">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t63" name="With Each Valid Token, Updating Password Of Each System User With abcd!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:09.592" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:09.606" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:09.606" level="INFO">${pids} = 8288</msg>
<status status="PASS" starttime="20210731 21:39:09.588" endtime="20210731 21:39:09.606"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:09.607" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:09.606" endtime="20210731 21:39:09.607"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:09.608" level="INFO">${pids} = ['8288']</msg>
<status status="PASS" starttime="20210731 21:39:09.608" endtime="20210731 21:39:09.608"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8288</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:09.612" level="INFO">Running command 'kill 8288 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:09.608" endtime="20210731 21:39:09.612"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.608" endtime="20210731 21:39:09.613"/>
</iter>
<status status="PASS" starttime="20210731 21:39:09.608" endtime="20210731 21:39:09.613"/>
</for>
<status status="PASS" starttime="20210731 21:39:09.607" endtime="20210731 21:39:09.613"/>
</branch>
<status status="PASS" starttime="20210731 21:39:09.607" endtime="20210731 21:39:09.613"/>
</if>
<status status="PASS" starttime="20210731 21:39:09.587" endtime="20210731 21:39:09.614"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:09.615" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:09.615" endtime="20210731 21:39:09.615"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:09.616" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:09.616" endtime="20210731 21:39:09.616"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:09.617" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:09.616" endtime="20210731 21:39:09.617"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:09.617" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:09.617" endtime="20210731 21:39:09.617"/>
</kw>
<msg timestamp="20210731 21:39:09.618" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:09.615" endtime="20210731 21:39:09.618"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:09.647" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:09.618" endtime="20210731 21:39:09.649"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.614" endtime="20210731 21:39:09.650"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:09.652" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:09.651" endtime="20210731 21:39:09.656"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:11.158" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:09.657" endtime="20210731 21:39:11.158"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.650" endtime="20210731 21:39:11.158"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:11.160" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:11.159" endtime="20210731 21:39:11.160"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:11.160" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:11.160" endtime="20210731 21:39:11.160"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:11.161" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:11.160" endtime="20210731 21:39:11.161"/>
</kw>
<msg timestamp="20210731 21:39:11.161" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:11.159" endtime="20210731 21:39:11.161"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:11.162" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:11.161" endtime="20210731 21:39:11.162"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.159" endtime="20210731 21:39:11.162"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:11.163" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:11.163" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:11.163" endtime="20210731 21:39:11.163"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.162" endtime="20210731 21:39:11.163"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:11.164" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:11.165" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:11.164" endtime="20210731 21:39:11.165"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:11.165" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:11.165" endtime="20210731 21:39:11.165"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:11.166" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:11.165" endtime="20210731 21:39:11.166"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:11.166" endtime="20210731 21:39:11.167"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:11.167" endtime="20210731 21:39:11.167"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.165" endtime="20210731 21:39:11.167"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:11.168" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:11.168" endtime="20210731 21:39:11.168"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:11.168" endtime="20210731 21:39:11.169"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:11.169" endtime="20210731 21:39:11.169"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.167" endtime="20210731 21:39:11.169"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:11.170" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:11.170" endtime="20210731 21:39:11.170"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:11.170" endtime="20210731 21:39:11.171"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:11.171" endtime="20210731 21:39:11.172"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.170" endtime="20210731 21:39:11.172"/>
</iter>
<status status="PASS" starttime="20210731 21:39:11.165" endtime="20210731 21:39:11.172"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:11.172" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:11.172" endtime="20210731 21:39:11.172"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.164" endtime="20210731 21:39:11.173"/>
</kw>
<status status="PASS" starttime="20210731 21:39:09.587" endtime="20210731 21:39:11.173"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:11.174" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:11.174" endtime="20210731 21:39:11.174"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:11.175" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:11.174" endtime="20210731 21:39:11.175"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:11.187" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:11.187" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:11.175" endtime="20210731 21:39:11.187"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:11.187" endtime="20210731 21:39:11.187"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:11.188" endtime="20210731 21:39:11.188"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:11.175" endtime="20210731 21:39:11.188"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:11.175" endtime="20210731 21:39:11.188"/>
</for>
<status status="FAIL" starttime="20210731 21:39:11.173" endtime="20210731 21:39:11.188"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:11.173" endtime="20210731 21:39:11.188"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:11.189" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:11.189" endtime="20210731 21:39:11.189"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:11.190" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:11.190" endtime="20210731 21:39:11.190"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:11.195" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:11.195" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:11.190" endtime="20210731 21:39:11.195"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:11.195" endtime="20210731 21:39:11.195"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:11.195" endtime="20210731 21:39:11.196"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:11.190" endtime="20210731 21:39:11.196"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:11.190" endtime="20210731 21:39:11.196"/>
</for>
<status status="FAIL" starttime="20210731 21:39:11.188" endtime="20210731 21:39:11.196"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:11.188" endtime="20210731 21:39:11.196"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:11.197" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:11.197" endtime="20210731 21:39:11.198"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:11.198" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:11.198" endtime="20210731 21:39:11.198"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:11.215" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:11.216" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:11.198" endtime="20210731 21:39:11.216"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:11.216" endtime="20210731 21:39:11.216"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:11.216" endtime="20210731 21:39:11.216"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:11.198" endtime="20210731 21:39:11.216"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:11.198" endtime="20210731 21:39:11.216"/>
</for>
<status status="FAIL" starttime="20210731 21:39:11.196" endtime="20210731 21:39:11.216"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:11.196" endtime="20210731 21:39:11.217"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:11.173" endtime="20210731 21:39:11.217"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:11.221" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:11.232" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:11.232" level="INFO">${pids} = 8312
8321
8325</msg>
<status status="PASS" starttime="20210731 21:39:11.218" endtime="20210731 21:39:11.232"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:11.233" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:11.232" endtime="20210731 21:39:11.233"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:11.234" level="INFO">${pids} = ['8312', '8321', '8325']</msg>
<status status="PASS" starttime="20210731 21:39:11.234" endtime="20210731 21:39:11.234"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8312</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:11.238" level="INFO">Running command 'kill 8312 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:11.234" endtime="20210731 21:39:11.238"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.234" endtime="20210731 21:39:11.238"/>
</iter>
<iter>
<var name="${pid}">8321</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:11.243" level="INFO">Running command 'kill 8321 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:11.239" endtime="20210731 21:39:11.245"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.239" endtime="20210731 21:39:11.245"/>
</iter>
<iter>
<var name="${pid}">8325</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:11.262" level="INFO">Running command 'kill 8325 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:11.245" endtime="20210731 21:39:11.263"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.245" endtime="20210731 21:39:11.263"/>
</iter>
<status status="PASS" starttime="20210731 21:39:11.234" endtime="20210731 21:39:11.263"/>
</for>
<status status="PASS" starttime="20210731 21:39:11.233" endtime="20210731 21:39:11.263"/>
</branch>
<status status="PASS" starttime="20210731 21:39:11.233" endtime="20210731 21:39:11.263"/>
</if>
<status status="PASS" starttime="20210731 21:39:11.217" endtime="20210731 21:39:11.263"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:09.586" endtime="20210731 21:39:11.264">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t64" name="With Each Valid Token, Updating Password Of Each System User With abcd!?.! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:11.269" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:11.283" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:11.283" level="INFO">${pids} = 8354</msg>
<status status="PASS" starttime="20210731 21:39:11.266" endtime="20210731 21:39:11.283"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:11.284" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:11.283" endtime="20210731 21:39:11.284"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:11.286" level="INFO">${pids} = ['8354']</msg>
<status status="PASS" starttime="20210731 21:39:11.285" endtime="20210731 21:39:11.286"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8354</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:11.291" level="INFO">Running command 'kill 8354 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:11.287" endtime="20210731 21:39:11.295"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.286" endtime="20210731 21:39:11.295"/>
</iter>
<status status="PASS" starttime="20210731 21:39:11.286" endtime="20210731 21:39:11.295"/>
</for>
<status status="PASS" starttime="20210731 21:39:11.285" endtime="20210731 21:39:11.295"/>
</branch>
<status status="PASS" starttime="20210731 21:39:11.285" endtime="20210731 21:39:11.296"/>
</if>
<status status="PASS" starttime="20210731 21:39:11.266" endtime="20210731 21:39:11.296"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:11.298" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:11.297" endtime="20210731 21:39:11.298"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:11.298" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:11.298" endtime="20210731 21:39:11.298"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:11.299" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:11.299" endtime="20210731 21:39:11.299"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:11.299" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:11.299" endtime="20210731 21:39:11.299"/>
</kw>
<msg timestamp="20210731 21:39:11.300" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:11.298" endtime="20210731 21:39:11.300"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:11.303" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:11.300" endtime="20210731 21:39:11.305"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.296" endtime="20210731 21:39:11.306"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:11.307" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:11.307" endtime="20210731 21:39:11.318"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:12.819" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:11.318" endtime="20210731 21:39:12.819"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.306" endtime="20210731 21:39:12.820"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:12.821" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:12.821" endtime="20210731 21:39:12.821"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:12.822" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:12.821" endtime="20210731 21:39:12.822"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:12.822" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:12.822" endtime="20210731 21:39:12.822"/>
</kw>
<msg timestamp="20210731 21:39:12.823" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:12.820" endtime="20210731 21:39:12.823"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:12.823" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:12.823" endtime="20210731 21:39:12.824"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.820" endtime="20210731 21:39:12.824"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:12.824" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:12.824" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:12.824" endtime="20210731 21:39:12.825"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.824" endtime="20210731 21:39:12.825"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:12.826" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:12.826" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:12.825" endtime="20210731 21:39:12.826"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:12.826" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:12.826" endtime="20210731 21:39:12.826"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:12.827" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:12.827" endtime="20210731 21:39:12.827"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:12.827" endtime="20210731 21:39:12.828"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:12.828" endtime="20210731 21:39:12.829"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.827" endtime="20210731 21:39:12.829"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:12.829" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:12.829" endtime="20210731 21:39:12.829"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:12.829" endtime="20210731 21:39:12.830"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:12.831" endtime="20210731 21:39:12.831"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.829" endtime="20210731 21:39:12.831"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:12.831" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:12.831" endtime="20210731 21:39:12.831"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:12.832" endtime="20210731 21:39:12.832"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:12.833" endtime="20210731 21:39:12.833"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.831" endtime="20210731 21:39:12.833"/>
</iter>
<status status="PASS" starttime="20210731 21:39:12.827" endtime="20210731 21:39:12.833"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:12.834" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:12.833" endtime="20210731 21:39:12.834"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.825" endtime="20210731 21:39:12.834"/>
</kw>
<status status="PASS" starttime="20210731 21:39:11.265" endtime="20210731 21:39:12.834"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:12.835" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:12.835" endtime="20210731 21:39:12.835"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:12.836" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210731 21:39:12.835" endtime="20210731 21:39:12.836"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:12.848" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:12.848" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:12.836" endtime="20210731 21:39:12.848"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:12.848" endtime="20210731 21:39:12.848"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:12.849" endtime="20210731 21:39:12.849"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:12.836" endtime="20210731 21:39:12.849"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:12.836" endtime="20210731 21:39:12.849"/>
</for>
<status status="FAIL" starttime="20210731 21:39:12.834" endtime="20210731 21:39:12.849"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:12.834" endtime="20210731 21:39:12.849"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:12.850" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:12.850" endtime="20210731 21:39:12.850"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:12.851" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210731 21:39:12.851" endtime="20210731 21:39:12.851"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:12.856" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:12.856" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:12.851" endtime="20210731 21:39:12.856"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:12.857" endtime="20210731 21:39:12.857"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:12.857" endtime="20210731 21:39:12.857"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:12.851" endtime="20210731 21:39:12.857"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:12.851" endtime="20210731 21:39:12.857"/>
</for>
<status status="FAIL" starttime="20210731 21:39:12.849" endtime="20210731 21:39:12.857"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:12.849" endtime="20210731 21:39:12.857"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:12.858" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:12.858" endtime="20210731 21:39:12.859"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:12.859" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210731 21:39:12.859" endtime="20210731 21:39:12.859"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:12.878" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:12.879" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:12.859" endtime="20210731 21:39:12.879"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:12.879" endtime="20210731 21:39:12.879"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:12.879" endtime="20210731 21:39:12.879"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:12.859" endtime="20210731 21:39:12.879"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:12.859" endtime="20210731 21:39:12.879"/>
</for>
<status status="FAIL" starttime="20210731 21:39:12.857" endtime="20210731 21:39:12.880"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:12.857" endtime="20210731 21:39:12.880"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:12.834" endtime="20210731 21:39:12.880"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:12.885" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:12.898" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:12.898" level="INFO">${pids} = 8377
8384
8389</msg>
<status status="PASS" starttime="20210731 21:39:12.882" endtime="20210731 21:39:12.898"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:12.899" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:12.898" endtime="20210731 21:39:12.899"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:12.900" level="INFO">${pids} = ['8377', '8384', '8389']</msg>
<status status="PASS" starttime="20210731 21:39:12.900" endtime="20210731 21:39:12.900"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8377</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:12.904" level="INFO">Running command 'kill 8377 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:12.901" endtime="20210731 21:39:12.905"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.900" endtime="20210731 21:39:12.905"/>
</iter>
<iter>
<var name="${pid}">8384</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:12.910" level="INFO">Running command 'kill 8384 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:12.905" endtime="20210731 21:39:12.911"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.905" endtime="20210731 21:39:12.911"/>
</iter>
<iter>
<var name="${pid}">8389</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:12.927" level="INFO">Running command 'kill 8389 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:12.911" endtime="20210731 21:39:12.928"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.911" endtime="20210731 21:39:12.928"/>
</iter>
<status status="PASS" starttime="20210731 21:39:12.900" endtime="20210731 21:39:12.928"/>
</for>
<status status="PASS" starttime="20210731 21:39:12.899" endtime="20210731 21:39:12.928"/>
</branch>
<status status="PASS" starttime="20210731 21:39:12.899" endtime="20210731 21:39:12.928"/>
</if>
<status status="PASS" starttime="20210731 21:39:12.880" endtime="20210731 21:39:12.928"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:11.264" endtime="20210731 21:39:12.929">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t65" name="With Each Valid Token, Updating Password Of Each System User With abcd!?.!abcd!?.!abcd?? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:12.934" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:12.952" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:12.952" level="INFO">${pids} = 8418</msg>
<status status="PASS" starttime="20210731 21:39:12.931" endtime="20210731 21:39:12.952"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:12.954" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:12.953" endtime="20210731 21:39:12.954"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:12.954" level="INFO">${pids} = ['8418']</msg>
<status status="PASS" starttime="20210731 21:39:12.954" endtime="20210731 21:39:12.955"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8418</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:12.967" level="INFO">Running command 'kill 8418 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:12.955" endtime="20210731 21:39:12.982"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.955" endtime="20210731 21:39:12.982"/>
</iter>
<status status="PASS" starttime="20210731 21:39:12.955" endtime="20210731 21:39:12.982"/>
</for>
<status status="PASS" starttime="20210731 21:39:12.954" endtime="20210731 21:39:12.982"/>
</branch>
<status status="PASS" starttime="20210731 21:39:12.954" endtime="20210731 21:39:12.982"/>
</if>
<status status="PASS" starttime="20210731 21:39:12.931" endtime="20210731 21:39:12.983"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:12.984" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:12.983" endtime="20210731 21:39:12.984"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:12.985" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:12.984" endtime="20210731 21:39:12.985"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:12.995" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:12.985" endtime="20210731 21:39:12.995"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:12.996" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:12.995" endtime="20210731 21:39:12.996"/>
</kw>
<msg timestamp="20210731 21:39:12.996" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:12.984" endtime="20210731 21:39:12.996"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:13.001" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:12.996" endtime="20210731 21:39:13.003"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.983" endtime="20210731 21:39:13.004"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:13.006" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:13.005" endtime="20210731 21:39:13.010"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:14.511" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:13.010" endtime="20210731 21:39:14.511"/>
</kw>
<status status="PASS" starttime="20210731 21:39:13.004" endtime="20210731 21:39:14.512"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:14.513" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:14.513" endtime="20210731 21:39:14.513"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:14.513" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:14.513" endtime="20210731 21:39:14.514"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:14.514" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:14.514" endtime="20210731 21:39:14.514"/>
</kw>
<msg timestamp="20210731 21:39:14.514" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:14.512" endtime="20210731 21:39:14.514"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:14.515" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:14.514" endtime="20210731 21:39:14.515"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.512" endtime="20210731 21:39:14.515"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:14.516" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:14.516" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:14.516" endtime="20210731 21:39:14.516"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.516" endtime="20210731 21:39:14.516"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:14.518" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:14.518" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:14.517" endtime="20210731 21:39:14.518"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:14.518" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:14.518" endtime="20210731 21:39:14.518"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:14.519" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:14.519" endtime="20210731 21:39:14.519"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:14.519" endtime="20210731 21:39:14.520"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:14.520" endtime="20210731 21:39:14.521"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.518" endtime="20210731 21:39:14.521"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:14.521" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:14.521" endtime="20210731 21:39:14.521"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:14.521" endtime="20210731 21:39:14.522"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:14.522" endtime="20210731 21:39:14.523"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.521" endtime="20210731 21:39:14.523"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:14.523" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:14.523" endtime="20210731 21:39:14.523"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:14.524" endtime="20210731 21:39:14.524"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:14.525" endtime="20210731 21:39:14.525"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.523" endtime="20210731 21:39:14.525"/>
</iter>
<status status="PASS" starttime="20210731 21:39:14.518" endtime="20210731 21:39:14.525"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:14.526" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:14.525" endtime="20210731 21:39:14.526"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.517" endtime="20210731 21:39:14.526"/>
</kw>
<status status="PASS" starttime="20210731 21:39:12.930" endtime="20210731 21:39:14.526"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:14.527" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:14.527" endtime="20210731 21:39:14.528"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:14.528" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210731 21:39:14.528" endtime="20210731 21:39:14.528"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:14.540" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:14.540" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:14.528" endtime="20210731 21:39:14.540"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:14.541" endtime="20210731 21:39:14.541"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:14.541" endtime="20210731 21:39:14.541"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:14.528" endtime="20210731 21:39:14.541"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:14.528" endtime="20210731 21:39:14.541"/>
</for>
<status status="FAIL" starttime="20210731 21:39:14.526" endtime="20210731 21:39:14.541"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:14.526" endtime="20210731 21:39:14.541"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:14.543" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:14.542" endtime="20210731 21:39:14.543"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:14.543" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210731 21:39:14.543" endtime="20210731 21:39:14.543"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:14.548" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:14.548" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:14.544" endtime="20210731 21:39:14.548"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:14.548" endtime="20210731 21:39:14.548"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:14.549" endtime="20210731 21:39:14.549"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:14.543" endtime="20210731 21:39:14.549"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:14.543" endtime="20210731 21:39:14.549"/>
</for>
<status status="FAIL" starttime="20210731 21:39:14.542" endtime="20210731 21:39:14.549"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:14.541" endtime="20210731 21:39:14.549"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:14.550" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:14.550" endtime="20210731 21:39:14.550"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:14.551" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210731 21:39:14.551" endtime="20210731 21:39:14.551"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:14.558" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:14.559" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:14.552" endtime="20210731 21:39:14.559"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:14.559" endtime="20210731 21:39:14.559"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:14.559" endtime="20210731 21:39:14.559"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:14.551" endtime="20210731 21:39:14.559"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:14.551" endtime="20210731 21:39:14.559"/>
</for>
<status status="FAIL" starttime="20210731 21:39:14.549" endtime="20210731 21:39:14.559"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:14.549" endtime="20210731 21:39:14.559"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:14.526" endtime="20210731 21:39:14.560"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:14.570" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:14.582" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:14.582" level="INFO">${pids} = 8441
8449
8453</msg>
<status status="PASS" starttime="20210731 21:39:14.561" endtime="20210731 21:39:14.582"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:14.584" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:14.583" endtime="20210731 21:39:14.584"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:14.585" level="INFO">${pids} = ['8441', '8449', '8453']</msg>
<status status="PASS" starttime="20210731 21:39:14.584" endtime="20210731 21:39:14.585"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8441</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:14.589" level="INFO">Running command 'kill 8441 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:14.585" endtime="20210731 21:39:14.590"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.585" endtime="20210731 21:39:14.590"/>
</iter>
<iter>
<var name="${pid}">8449</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:14.603" level="INFO">Running command 'kill 8449 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:14.590" endtime="20210731 21:39:14.604"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.590" endtime="20210731 21:39:14.604"/>
</iter>
<iter>
<var name="${pid}">8453</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:14.608" level="INFO">Running command 'kill 8453 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:14.604" endtime="20210731 21:39:14.608"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.604" endtime="20210731 21:39:14.608"/>
</iter>
<status status="PASS" starttime="20210731 21:39:14.585" endtime="20210731 21:39:14.609"/>
</for>
<status status="PASS" starttime="20210731 21:39:14.584" endtime="20210731 21:39:14.609"/>
</branch>
<status status="PASS" starttime="20210731 21:39:14.584" endtime="20210731 21:39:14.609"/>
</if>
<status status="PASS" starttime="20210731 21:39:14.560" endtime="20210731 21:39:14.609"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.!abcd!?.!abcd??'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:12.929" endtime="20210731 21:39:14.609">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t66" name="With Each Valid Token, Updating Password Of Each System User With ABCD012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:14.615" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:14.628" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:14.628" level="INFO">${pids} = 8487</msg>
<status status="PASS" starttime="20210731 21:39:14.612" endtime="20210731 21:39:14.628"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:14.629" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:14.629" endtime="20210731 21:39:14.629"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:14.630" level="INFO">${pids} = ['8487']</msg>
<status status="PASS" starttime="20210731 21:39:14.630" endtime="20210731 21:39:14.630"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8487</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:14.634" level="INFO">Running command 'kill 8487 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:14.631" endtime="20210731 21:39:14.658"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.631" endtime="20210731 21:39:14.659"/>
</iter>
<status status="PASS" starttime="20210731 21:39:14.630" endtime="20210731 21:39:14.659"/>
</for>
<status status="PASS" starttime="20210731 21:39:14.630" endtime="20210731 21:39:14.659"/>
</branch>
<status status="PASS" starttime="20210731 21:39:14.630" endtime="20210731 21:39:14.659"/>
</if>
<status status="PASS" starttime="20210731 21:39:14.612" endtime="20210731 21:39:14.659"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:14.661" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:14.660" endtime="20210731 21:39:14.661"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:14.661" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:14.661" endtime="20210731 21:39:14.661"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:14.662" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:14.662" endtime="20210731 21:39:14.662"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:14.662" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:14.662" endtime="20210731 21:39:14.662"/>
</kw>
<msg timestamp="20210731 21:39:14.663" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:14.661" endtime="20210731 21:39:14.663"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:14.672" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:14.663" endtime="20210731 21:39:14.674"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.659" endtime="20210731 21:39:14.674"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:14.675" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:14.675" endtime="20210731 21:39:14.680"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:16.181" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:14.680" endtime="20210731 21:39:16.181"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.674" endtime="20210731 21:39:16.182"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:16.183" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:16.183" endtime="20210731 21:39:16.183"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:16.183" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:16.183" endtime="20210731 21:39:16.183"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:16.184" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:16.184" endtime="20210731 21:39:16.184"/>
</kw>
<msg timestamp="20210731 21:39:16.184" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:16.182" endtime="20210731 21:39:16.184"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:16.185" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:16.184" endtime="20210731 21:39:16.185"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.182" endtime="20210731 21:39:16.185"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:16.186" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:16.186" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:16.186" endtime="20210731 21:39:16.186"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.185" endtime="20210731 21:39:16.187"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:16.188" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:16.188" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:16.187" endtime="20210731 21:39:16.188"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:16.188" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:16.188" endtime="20210731 21:39:16.188"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:16.189" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:16.189" endtime="20210731 21:39:16.189"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:16.189" endtime="20210731 21:39:16.190"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:16.190" endtime="20210731 21:39:16.191"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.189" endtime="20210731 21:39:16.191"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:16.191" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:16.191" endtime="20210731 21:39:16.191"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:16.191" endtime="20210731 21:39:16.192"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:16.192" endtime="20210731 21:39:16.192"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.191" endtime="20210731 21:39:16.192"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:16.193" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:16.193" endtime="20210731 21:39:16.193"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:16.193" endtime="20210731 21:39:16.194"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:16.194" endtime="20210731 21:39:16.194"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.192" endtime="20210731 21:39:16.194"/>
</iter>
<status status="PASS" starttime="20210731 21:39:16.189" endtime="20210731 21:39:16.194"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:16.195" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:16.194" endtime="20210731 21:39:16.195"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.187" endtime="20210731 21:39:16.195"/>
</kw>
<status status="PASS" starttime="20210731 21:39:14.611" endtime="20210731 21:39:16.195"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:16.196" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:16.196" endtime="20210731 21:39:16.196"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:16.197" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210731 21:39:16.197" endtime="20210731 21:39:16.197"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:16.208" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:16.208" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:16.197" endtime="20210731 21:39:16.208"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:16.208" endtime="20210731 21:39:16.209"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:16.209" endtime="20210731 21:39:16.209"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:16.197" endtime="20210731 21:39:16.209"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:16.197" endtime="20210731 21:39:16.209"/>
</for>
<status status="FAIL" starttime="20210731 21:39:16.196" endtime="20210731 21:39:16.209"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:16.195" endtime="20210731 21:39:16.209"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:16.210" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:16.210" endtime="20210731 21:39:16.210"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:16.211" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210731 21:39:16.211" endtime="20210731 21:39:16.211"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:16.216" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:16.216" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:16.211" endtime="20210731 21:39:16.216"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:16.216" endtime="20210731 21:39:16.216"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:16.216" endtime="20210731 21:39:16.216"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:16.211" endtime="20210731 21:39:16.216"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:16.211" endtime="20210731 21:39:16.216"/>
</for>
<status status="FAIL" starttime="20210731 21:39:16.209" endtime="20210731 21:39:16.216"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:16.209" endtime="20210731 21:39:16.217"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:16.218" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:16.217" endtime="20210731 21:39:16.218"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:16.218" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210731 21:39:16.218" endtime="20210731 21:39:16.218"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:16.224" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:16.226" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:16.219" endtime="20210731 21:39:16.226"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:16.226" endtime="20210731 21:39:16.226"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:16.226" endtime="20210731 21:39:16.226"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:16.219" endtime="20210731 21:39:16.226"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:16.218" endtime="20210731 21:39:16.227"/>
</for>
<status status="FAIL" starttime="20210731 21:39:16.217" endtime="20210731 21:39:16.227"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:16.217" endtime="20210731 21:39:16.227"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:16.195" endtime="20210731 21:39:16.227"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:16.251" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:16.264" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:16.264" level="INFO">${pids} = 8511
8518
8522</msg>
<status status="PASS" starttime="20210731 21:39:16.228" endtime="20210731 21:39:16.264"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:16.266" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:16.265" endtime="20210731 21:39:16.266"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:16.267" level="INFO">${pids} = ['8511', '8518', '8522']</msg>
<status status="PASS" starttime="20210731 21:39:16.266" endtime="20210731 21:39:16.267"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8511</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:16.273" level="INFO">Running command 'kill 8511 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:16.267" endtime="20210731 21:39:16.273"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.267" endtime="20210731 21:39:16.273"/>
</iter>
<iter>
<var name="${pid}">8518</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:16.294" level="INFO">Running command 'kill 8518 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:16.274" endtime="20210731 21:39:16.295"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.274" endtime="20210731 21:39:16.295"/>
</iter>
<iter>
<var name="${pid}">8522</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:16.299" level="INFO">Running command 'kill 8522 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:16.295" endtime="20210731 21:39:16.299"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.295" endtime="20210731 21:39:16.299"/>
</iter>
<status status="PASS" starttime="20210731 21:39:16.267" endtime="20210731 21:39:16.299"/>
</for>
<status status="PASS" starttime="20210731 21:39:16.266" endtime="20210731 21:39:16.300"/>
</branch>
<status status="PASS" starttime="20210731 21:39:16.266" endtime="20210731 21:39:16.300"/>
</if>
<status status="PASS" starttime="20210731 21:39:16.227" endtime="20210731 21:39:16.300"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:14.610" endtime="20210731 21:39:16.300">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t67" name="With Each Valid Token, Updating Password Of Each System User With ABCD0123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:16.306" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:16.319" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:16.320" level="INFO">${pids} = 8551</msg>
<status status="PASS" starttime="20210731 21:39:16.302" endtime="20210731 21:39:16.320"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:16.321" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:16.320" endtime="20210731 21:39:16.321"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:16.322" level="INFO">${pids} = ['8551']</msg>
<status status="PASS" starttime="20210731 21:39:16.321" endtime="20210731 21:39:16.322"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8551</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:16.326" level="INFO">Running command 'kill 8551 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:16.322" endtime="20210731 21:39:16.326"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.322" endtime="20210731 21:39:16.326"/>
</iter>
<status status="PASS" starttime="20210731 21:39:16.322" endtime="20210731 21:39:16.326"/>
</for>
<status status="PASS" starttime="20210731 21:39:16.321" endtime="20210731 21:39:16.326"/>
</branch>
<status status="PASS" starttime="20210731 21:39:16.321" endtime="20210731 21:39:16.326"/>
</if>
<status status="PASS" starttime="20210731 21:39:16.302" endtime="20210731 21:39:16.327"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:16.328" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:16.327" endtime="20210731 21:39:16.328"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:16.329" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:16.329" endtime="20210731 21:39:16.329"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:16.330" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:16.329" endtime="20210731 21:39:16.330"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:16.330" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:16.330" endtime="20210731 21:39:16.330"/>
</kw>
<msg timestamp="20210731 21:39:16.330" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:16.328" endtime="20210731 21:39:16.330"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:16.354" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:16.331" endtime="20210731 21:39:16.363"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.327" endtime="20210731 21:39:16.364"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:16.365" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:16.365" endtime="20210731 21:39:16.371"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:17.873" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:16.372" endtime="20210731 21:39:17.873"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.364" endtime="20210731 21:39:17.873"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:17.875" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:17.874" endtime="20210731 21:39:17.875"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:17.875" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:17.875" endtime="20210731 21:39:17.875"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:17.876" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:17.875" endtime="20210731 21:39:17.876"/>
</kw>
<msg timestamp="20210731 21:39:17.876" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:17.874" endtime="20210731 21:39:17.876"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:17.876" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:17.876" endtime="20210731 21:39:17.877"/>
</kw>
<status status="PASS" starttime="20210731 21:39:17.873" endtime="20210731 21:39:17.877"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:17.881" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:17.882" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:17.878" endtime="20210731 21:39:17.882"/>
</kw>
<status status="PASS" starttime="20210731 21:39:17.877" endtime="20210731 21:39:17.882"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:17.883" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:17.884" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:17.883" endtime="20210731 21:39:17.884"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:17.884" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:17.884" endtime="20210731 21:39:17.884"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:17.885" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:17.884" endtime="20210731 21:39:17.885"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:17.885" endtime="20210731 21:39:17.886"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:17.886" endtime="20210731 21:39:17.886"/>
</kw>
<status status="PASS" starttime="20210731 21:39:17.884" endtime="20210731 21:39:17.886"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:17.887" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:17.887" endtime="20210731 21:39:17.887"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:17.887" endtime="20210731 21:39:17.888"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:17.888" endtime="20210731 21:39:17.888"/>
</kw>
<status status="PASS" starttime="20210731 21:39:17.886" endtime="20210731 21:39:17.888"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:17.889" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:17.889" endtime="20210731 21:39:17.889"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:17.889" endtime="20210731 21:39:17.890"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:17.890" endtime="20210731 21:39:17.890"/>
</kw>
<status status="PASS" starttime="20210731 21:39:17.888" endtime="20210731 21:39:17.890"/>
</iter>
<status status="PASS" starttime="20210731 21:39:17.884" endtime="20210731 21:39:17.890"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:17.891" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:17.891" endtime="20210731 21:39:17.891"/>
</kw>
<status status="PASS" starttime="20210731 21:39:17.882" endtime="20210731 21:39:17.891"/>
</kw>
<status status="PASS" starttime="20210731 21:39:16.302" endtime="20210731 21:39:17.891"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:17.893" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:17.893" endtime="20210731 21:39:17.893"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:17.894" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210731 21:39:17.893" endtime="20210731 21:39:17.894"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:17.905" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:17.906" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:17.894" endtime="20210731 21:39:17.906"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:17.906" endtime="20210731 21:39:17.906"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:17.906" endtime="20210731 21:39:17.906"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:17.894" endtime="20210731 21:39:17.906"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:17.894" endtime="20210731 21:39:17.907"/>
</for>
<status status="FAIL" starttime="20210731 21:39:17.892" endtime="20210731 21:39:17.907"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:17.892" endtime="20210731 21:39:17.907"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:17.908" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:17.908" endtime="20210731 21:39:17.908"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:17.909" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210731 21:39:17.908" endtime="20210731 21:39:17.909"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:17.914" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:17.914" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:17.909" endtime="20210731 21:39:17.914"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:17.914" endtime="20210731 21:39:17.914"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:17.914" endtime="20210731 21:39:17.914"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:17.909" endtime="20210731 21:39:17.914"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:17.909" endtime="20210731 21:39:17.914"/>
</for>
<status status="FAIL" starttime="20210731 21:39:17.907" endtime="20210731 21:39:17.915"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:17.907" endtime="20210731 21:39:17.915"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:17.916" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:17.915" endtime="20210731 21:39:17.916"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:17.916" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210731 21:39:17.916" endtime="20210731 21:39:17.916"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:17.923" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:17.923" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:17.917" endtime="20210731 21:39:17.923"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:17.923" endtime="20210731 21:39:17.923"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:17.923" endtime="20210731 21:39:17.924"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:17.917" endtime="20210731 21:39:17.924"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:17.916" endtime="20210731 21:39:17.941"/>
</for>
<status status="FAIL" starttime="20210731 21:39:17.915" endtime="20210731 21:39:17.941"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:17.915" endtime="20210731 21:39:17.941"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:17.892" endtime="20210731 21:39:17.942"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:17.955" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:17.984" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:17.984" level="INFO">${pids} = 8574
8581
8586</msg>
<status status="PASS" starttime="20210731 21:39:17.943" endtime="20210731 21:39:17.984"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:17.985" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:17.985" endtime="20210731 21:39:17.985"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:17.986" level="INFO">${pids} = ['8574', '8581', '8586']</msg>
<status status="PASS" starttime="20210731 21:39:17.986" endtime="20210731 21:39:17.986"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8574</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:17.990" level="INFO">Running command 'kill 8574 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:17.987" endtime="20210731 21:39:17.991"/>
</kw>
<status status="PASS" starttime="20210731 21:39:17.987" endtime="20210731 21:39:17.991"/>
</iter>
<iter>
<var name="${pid}">8581</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:17.995" level="INFO">Running command 'kill 8581 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:17.991" endtime="20210731 21:39:17.995"/>
</kw>
<status status="PASS" starttime="20210731 21:39:17.991" endtime="20210731 21:39:17.995"/>
</iter>
<iter>
<var name="${pid}">8586</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:17.999" level="INFO">Running command 'kill 8586 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:17.996" endtime="20210731 21:39:18.000"/>
</kw>
<status status="PASS" starttime="20210731 21:39:17.995" endtime="20210731 21:39:18.000"/>
</iter>
<status status="PASS" starttime="20210731 21:39:17.986" endtime="20210731 21:39:18.000"/>
</for>
<status status="PASS" starttime="20210731 21:39:17.986" endtime="20210731 21:39:18.000"/>
</branch>
<status status="PASS" starttime="20210731 21:39:17.985" endtime="20210731 21:39:18.000"/>
</if>
<status status="PASS" starttime="20210731 21:39:17.942" endtime="20210731 21:39:18.000"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD0123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:16.301" endtime="20210731 21:39:18.000">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t68" name="With Each Valid Token, Updating Password Of Each System User With ABCD0123ABCD0123ABCD01 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:18.007" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:18.022" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:18.022" level="INFO">${pids} = 8615</msg>
<status status="PASS" starttime="20210731 21:39:18.003" endtime="20210731 21:39:18.022"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:18.023" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:18.022" endtime="20210731 21:39:18.023"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:18.024" level="INFO">${pids} = ['8615']</msg>
<status status="PASS" starttime="20210731 21:39:18.023" endtime="20210731 21:39:18.024"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8615</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:18.044" level="INFO">Running command 'kill 8615 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:18.024" endtime="20210731 21:39:18.045"/>
</kw>
<status status="PASS" starttime="20210731 21:39:18.024" endtime="20210731 21:39:18.045"/>
</iter>
<status status="PASS" starttime="20210731 21:39:18.024" endtime="20210731 21:39:18.045"/>
</for>
<status status="PASS" starttime="20210731 21:39:18.023" endtime="20210731 21:39:18.045"/>
</branch>
<status status="PASS" starttime="20210731 21:39:18.023" endtime="20210731 21:39:18.045"/>
</if>
<status status="PASS" starttime="20210731 21:39:18.003" endtime="20210731 21:39:18.045"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:18.047" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:18.046" endtime="20210731 21:39:18.047"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:18.047" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:18.047" endtime="20210731 21:39:18.047"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:18.048" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:18.047" endtime="20210731 21:39:18.048"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:18.048" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:18.048" endtime="20210731 21:39:18.048"/>
</kw>
<msg timestamp="20210731 21:39:18.048" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:18.047" endtime="20210731 21:39:18.048"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:18.080" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:18.049" endtime="20210731 21:39:18.084"/>
</kw>
<status status="PASS" starttime="20210731 21:39:18.046" endtime="20210731 21:39:18.085"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:18.087" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:18.086" endtime="20210731 21:39:18.091"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:19.593" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:18.092" endtime="20210731 21:39:19.593"/>
</kw>
<status status="PASS" starttime="20210731 21:39:18.085" endtime="20210731 21:39:19.593"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:19.594" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:19.594" endtime="20210731 21:39:19.595"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:19.595" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:19.595" endtime="20210731 21:39:19.595"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:19.595" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:19.595" endtime="20210731 21:39:19.596"/>
</kw>
<msg timestamp="20210731 21:39:19.596" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:19.594" endtime="20210731 21:39:19.596"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:19.596" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:19.596" endtime="20210731 21:39:19.597"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.593" endtime="20210731 21:39:19.597"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:19.598" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:19.598" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:19.598" endtime="20210731 21:39:19.598"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.597" endtime="20210731 21:39:19.598"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:19.599" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:19.599" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:19.599" endtime="20210731 21:39:19.600"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:19.600" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:19.600" endtime="20210731 21:39:19.600"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:19.601" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:19.600" endtime="20210731 21:39:19.601"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:19.601" endtime="20210731 21:39:19.602"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:19.602" endtime="20210731 21:39:19.602"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.600" endtime="20210731 21:39:19.602"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:19.603" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:19.602" endtime="20210731 21:39:19.603"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:19.603" endtime="20210731 21:39:19.604"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:19.604" endtime="20210731 21:39:19.604"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.602" endtime="20210731 21:39:19.604"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:19.605" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:19.604" endtime="20210731 21:39:19.605"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:19.605" endtime="20210731 21:39:19.605"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:19.606" endtime="20210731 21:39:19.606"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.604" endtime="20210731 21:39:19.606"/>
</iter>
<status status="PASS" starttime="20210731 21:39:19.600" endtime="20210731 21:39:19.606"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:19.606" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:19.606" endtime="20210731 21:39:19.606"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.598" endtime="20210731 21:39:19.606"/>
</kw>
<status status="PASS" starttime="20210731 21:39:18.003" endtime="20210731 21:39:19.607"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:19.608" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:19.607" endtime="20210731 21:39:19.608"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:19.608" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210731 21:39:19.608" endtime="20210731 21:39:19.608"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:19.619" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:19.619" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:19.609" endtime="20210731 21:39:19.620"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:19.620" endtime="20210731 21:39:19.620"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:19.620" endtime="20210731 21:39:19.620"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:19.609" endtime="20210731 21:39:19.620"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:19.608" endtime="20210731 21:39:19.620"/>
</for>
<status status="FAIL" starttime="20210731 21:39:19.607" endtime="20210731 21:39:19.620"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:19.607" endtime="20210731 21:39:19.620"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:19.621" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:19.621" endtime="20210731 21:39:19.622"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:19.622" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210731 21:39:19.622" endtime="20210731 21:39:19.622"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:19.626" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:19.627" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:19.622" endtime="20210731 21:39:19.627"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:19.627" endtime="20210731 21:39:19.627"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:19.627" endtime="20210731 21:39:19.627"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:19.622" endtime="20210731 21:39:19.627"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:19.622" endtime="20210731 21:39:19.627"/>
</for>
<status status="FAIL" starttime="20210731 21:39:19.620" endtime="20210731 21:39:19.627"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:19.620" endtime="20210731 21:39:19.627"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:19.628" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:19.628" endtime="20210731 21:39:19.629"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:19.629" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210731 21:39:19.629" endtime="20210731 21:39:19.629"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:19.633" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:19.634" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:19.629" endtime="20210731 21:39:19.634"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:19.634" endtime="20210731 21:39:19.634"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:19.634" endtime="20210731 21:39:19.634"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:19.629" endtime="20210731 21:39:19.634"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:19.629" endtime="20210731 21:39:19.634"/>
</for>
<status status="FAIL" starttime="20210731 21:39:19.628" endtime="20210731 21:39:19.634"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:19.627" endtime="20210731 21:39:19.634"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:19.607" endtime="20210731 21:39:19.635"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:19.654" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:19.668" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:19.668" level="INFO">${pids} = 8638
8645
8649</msg>
<status status="PASS" starttime="20210731 21:39:19.636" endtime="20210731 21:39:19.668"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:19.670" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:19.669" endtime="20210731 21:39:19.670"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:19.670" level="INFO">${pids} = ['8638', '8645', '8649']</msg>
<status status="PASS" starttime="20210731 21:39:19.670" endtime="20210731 21:39:19.670"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8638</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:19.674" level="INFO">Running command 'kill 8638 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:19.671" endtime="20210731 21:39:19.675"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.671" endtime="20210731 21:39:19.675"/>
</iter>
<iter>
<var name="${pid}">8645</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:19.679" level="INFO">Running command 'kill 8645 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:19.675" endtime="20210731 21:39:19.679"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.675" endtime="20210731 21:39:19.679"/>
</iter>
<iter>
<var name="${pid}">8649</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:19.697" level="INFO">Running command 'kill 8649 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:19.680" endtime="20210731 21:39:19.697"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.680" endtime="20210731 21:39:19.697"/>
</iter>
<status status="PASS" starttime="20210731 21:39:19.670" endtime="20210731 21:39:19.697"/>
</for>
<status status="PASS" starttime="20210731 21:39:19.670" endtime="20210731 21:39:19.697"/>
</branch>
<status status="PASS" starttime="20210731 21:39:19.670" endtime="20210731 21:39:19.698"/>
</if>
<status status="PASS" starttime="20210731 21:39:19.635" endtime="20210731 21:39:19.698"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD0123ABCD0123ABCD01'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:18.002" endtime="20210731 21:39:19.698">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t69" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:19.707" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:19.722" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:19.722" level="INFO">${pids} = 8678</msg>
<status status="PASS" starttime="20210731 21:39:19.701" endtime="20210731 21:39:19.722"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:19.723" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:19.722" endtime="20210731 21:39:19.723"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:19.724" level="INFO">${pids} = ['8678']</msg>
<status status="PASS" starttime="20210731 21:39:19.723" endtime="20210731 21:39:19.724"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8678</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:19.731" level="INFO">Running command 'kill 8678 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:19.724" endtime="20210731 21:39:19.732"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.724" endtime="20210731 21:39:19.732"/>
</iter>
<status status="PASS" starttime="20210731 21:39:19.724" endtime="20210731 21:39:19.732"/>
</for>
<status status="PASS" starttime="20210731 21:39:19.723" endtime="20210731 21:39:19.732"/>
</branch>
<status status="PASS" starttime="20210731 21:39:19.723" endtime="20210731 21:39:19.732"/>
</if>
<status status="PASS" starttime="20210731 21:39:19.700" endtime="20210731 21:39:19.733"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:19.734" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:19.734" endtime="20210731 21:39:19.734"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:19.735" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:19.735" endtime="20210731 21:39:19.735"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:19.735" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:19.735" endtime="20210731 21:39:19.735"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:19.736" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:19.736" endtime="20210731 21:39:19.736"/>
</kw>
<msg timestamp="20210731 21:39:19.736" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:19.734" endtime="20210731 21:39:19.736"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:19.743" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:19.737" endtime="20210731 21:39:19.766"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.733" endtime="20210731 21:39:19.767"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:19.769" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:19.768" endtime="20210731 21:39:19.774"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:21.275" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:19.774" endtime="20210731 21:39:21.275"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.767" endtime="20210731 21:39:21.275"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:21.277" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:21.276" endtime="20210731 21:39:21.277"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:21.277" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:21.277" endtime="20210731 21:39:21.277"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:21.278" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:21.277" endtime="20210731 21:39:21.278"/>
</kw>
<msg timestamp="20210731 21:39:21.278" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:21.276" endtime="20210731 21:39:21.278"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:21.278" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:21.278" endtime="20210731 21:39:21.279"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.275" endtime="20210731 21:39:21.279"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:21.280" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:21.280" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:21.279" endtime="20210731 21:39:21.280"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.279" endtime="20210731 21:39:21.280"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:21.281" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:21.281" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:21.280" endtime="20210731 21:39:21.281"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:21.282" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:21.281" endtime="20210731 21:39:21.282"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:21.282" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:21.282" endtime="20210731 21:39:21.282"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:21.282" endtime="20210731 21:39:21.283"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:21.283" endtime="20210731 21:39:21.284"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.282" endtime="20210731 21:39:21.284"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:21.284" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:21.284" endtime="20210731 21:39:21.284"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:21.284" endtime="20210731 21:39:21.285"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:21.285" endtime="20210731 21:39:21.286"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.284" endtime="20210731 21:39:21.286"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:21.286" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:21.286" endtime="20210731 21:39:21.286"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:21.286" endtime="20210731 21:39:21.287"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:21.287" endtime="20210731 21:39:21.287"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.286" endtime="20210731 21:39:21.287"/>
</iter>
<status status="PASS" starttime="20210731 21:39:21.282" endtime="20210731 21:39:21.287"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:21.288" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:21.288" endtime="20210731 21:39:21.288"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.280" endtime="20210731 21:39:21.288"/>
</kw>
<status status="PASS" starttime="20210731 21:39:19.700" endtime="20210731 21:39:21.288"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:21.290" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:21.289" endtime="20210731 21:39:21.290"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:21.290" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:21.290" endtime="20210731 21:39:21.290"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:21.300" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:21.301" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:21.290" endtime="20210731 21:39:21.301"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:21.301" endtime="20210731 21:39:21.301"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:21.301" endtime="20210731 21:39:21.301"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:21.290" endtime="20210731 21:39:21.301"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:21.290" endtime="20210731 21:39:21.301"/>
</for>
<status status="FAIL" starttime="20210731 21:39:21.289" endtime="20210731 21:39:21.302"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:21.289" endtime="20210731 21:39:21.302"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:21.303" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:21.302" endtime="20210731 21:39:21.303"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:21.303" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:21.303" endtime="20210731 21:39:21.303"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:21.308" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:21.308" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:21.304" endtime="20210731 21:39:21.308"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:21.308" endtime="20210731 21:39:21.308"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:21.308" endtime="20210731 21:39:21.308"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:21.303" endtime="20210731 21:39:21.308"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:21.303" endtime="20210731 21:39:21.308"/>
</for>
<status status="FAIL" starttime="20210731 21:39:21.302" endtime="20210731 21:39:21.309"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:21.302" endtime="20210731 21:39:21.309"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:21.310" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:21.310" endtime="20210731 21:39:21.310"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:21.310" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:21.310" endtime="20210731 21:39:21.310"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:21.315" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:21.316" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:21.311" endtime="20210731 21:39:21.316"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:21.316" endtime="20210731 21:39:21.316"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:21.316" endtime="20210731 21:39:21.316"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:21.311" endtime="20210731 21:39:21.316"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:21.310" endtime="20210731 21:39:21.316"/>
</for>
<status status="FAIL" starttime="20210731 21:39:21.309" endtime="20210731 21:39:21.316"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:21.309" endtime="20210731 21:39:21.317"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:21.288" endtime="20210731 21:39:21.317"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:21.337" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:21.349" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:21.349" level="INFO">${pids} = 8701
8708
8713</msg>
<status status="PASS" starttime="20210731 21:39:21.319" endtime="20210731 21:39:21.349"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:21.350" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:21.350" endtime="20210731 21:39:21.350"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:21.351" level="INFO">${pids} = ['8701', '8708', '8713']</msg>
<status status="PASS" starttime="20210731 21:39:21.351" endtime="20210731 21:39:21.351"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8701</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:21.355" level="INFO">Running command 'kill 8701 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:21.351" endtime="20210731 21:39:21.355"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.351" endtime="20210731 21:39:21.355"/>
</iter>
<iter>
<var name="${pid}">8708</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:21.359" level="INFO">Running command 'kill 8708 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:21.356" endtime="20210731 21:39:21.359"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.355" endtime="20210731 21:39:21.359"/>
</iter>
<iter>
<var name="${pid}">8713</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:21.363" level="INFO">Running command 'kill 8713 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:21.360" endtime="20210731 21:39:21.363"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.360" endtime="20210731 21:39:21.363"/>
</iter>
<status status="PASS" starttime="20210731 21:39:21.351" endtime="20210731 21:39:21.363"/>
</for>
<status status="PASS" starttime="20210731 21:39:21.350" endtime="20210731 21:39:21.363"/>
</branch>
<status status="PASS" starttime="20210731 21:39:21.350" endtime="20210731 21:39:21.364"/>
</if>
<status status="PASS" starttime="20210731 21:39:21.318" endtime="20210731 21:39:21.364"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:19.699" endtime="20210731 21:39:21.365">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t70" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?.. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:21.394" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:21.406" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:21.406" level="INFO">${pids} = 8742</msg>
<status status="PASS" starttime="20210731 21:39:21.386" endtime="20210731 21:39:21.406"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:21.407" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:21.406" endtime="20210731 21:39:21.407"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:21.408" level="INFO">${pids} = ['8742']</msg>
<status status="PASS" starttime="20210731 21:39:21.408" endtime="20210731 21:39:21.408"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8742</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:21.421" level="INFO">Running command 'kill 8742 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:21.408" endtime="20210731 21:39:21.422"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.408" endtime="20210731 21:39:21.422"/>
</iter>
<status status="PASS" starttime="20210731 21:39:21.408" endtime="20210731 21:39:21.422"/>
</for>
<status status="PASS" starttime="20210731 21:39:21.407" endtime="20210731 21:39:21.422"/>
</branch>
<status status="PASS" starttime="20210731 21:39:21.407" endtime="20210731 21:39:21.422"/>
</if>
<status status="PASS" starttime="20210731 21:39:21.382" endtime="20210731 21:39:21.423"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:21.424" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:21.424" endtime="20210731 21:39:21.424"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:21.425" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:21.425" endtime="20210731 21:39:21.425"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:21.426" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:21.425" endtime="20210731 21:39:21.426"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:21.426" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:21.426" endtime="20210731 21:39:21.426"/>
</kw>
<msg timestamp="20210731 21:39:21.426" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:21.424" endtime="20210731 21:39:21.426"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:21.430" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:21.426" endtime="20210731 21:39:21.435"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.423" endtime="20210731 21:39:21.435"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:21.436" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:21.436" endtime="20210731 21:39:21.441"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:22.942" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:21.441" endtime="20210731 21:39:22.942"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.435" endtime="20210731 21:39:22.942"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:22.944" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:22.943" endtime="20210731 21:39:22.944"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:22.944" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:22.944" endtime="20210731 21:39:22.944"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:22.945" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:22.944" endtime="20210731 21:39:22.945"/>
</kw>
<msg timestamp="20210731 21:39:22.945" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:22.943" endtime="20210731 21:39:22.945"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:22.947" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:22.945" endtime="20210731 21:39:22.947"/>
</kw>
<status status="PASS" starttime="20210731 21:39:22.943" endtime="20210731 21:39:22.947"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:22.948" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:22.948" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:22.948" endtime="20210731 21:39:22.948"/>
</kw>
<status status="PASS" starttime="20210731 21:39:22.947" endtime="20210731 21:39:22.948"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:22.951" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:22.951" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:22.949" endtime="20210731 21:39:22.951"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:22.951" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:22.951" endtime="20210731 21:39:22.951"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:22.952" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:22.952" endtime="20210731 21:39:22.952"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:22.952" endtime="20210731 21:39:22.953"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:22.953" endtime="20210731 21:39:22.953"/>
</kw>
<status status="PASS" starttime="20210731 21:39:22.952" endtime="20210731 21:39:22.954"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:22.954" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:22.954" endtime="20210731 21:39:22.954"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:22.954" endtime="20210731 21:39:22.955"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:22.955" endtime="20210731 21:39:22.955"/>
</kw>
<status status="PASS" starttime="20210731 21:39:22.954" endtime="20210731 21:39:22.955"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:22.956" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:22.956" endtime="20210731 21:39:22.956"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:22.956" endtime="20210731 21:39:22.957"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:22.957" endtime="20210731 21:39:22.962"/>
</kw>
<status status="PASS" starttime="20210731 21:39:22.955" endtime="20210731 21:39:22.962"/>
</iter>
<status status="PASS" starttime="20210731 21:39:22.951" endtime="20210731 21:39:22.962"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:22.965" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:22.962" endtime="20210731 21:39:22.965"/>
</kw>
<status status="PASS" starttime="20210731 21:39:22.949" endtime="20210731 21:39:22.965"/>
</kw>
<status status="PASS" starttime="20210731 21:39:21.367" endtime="20210731 21:39:22.965"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:22.968" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:22.968" endtime="20210731 21:39:22.968"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:22.969" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210731 21:39:22.969" endtime="20210731 21:39:22.969"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:22.980" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:22.980" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:22.969" endtime="20210731 21:39:22.980"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:22.980" endtime="20210731 21:39:22.980"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:22.981" endtime="20210731 21:39:22.981"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:22.969" endtime="20210731 21:39:22.981"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:22.969" endtime="20210731 21:39:22.981"/>
</for>
<status status="FAIL" starttime="20210731 21:39:22.966" endtime="20210731 21:39:22.981"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:22.966" endtime="20210731 21:39:22.981"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:22.982" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:22.982" endtime="20210731 21:39:22.982"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:22.983" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210731 21:39:22.983" endtime="20210731 21:39:22.983"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:22.988" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:22.988" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:22.983" endtime="20210731 21:39:22.988"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:22.988" endtime="20210731 21:39:22.988"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:22.988" endtime="20210731 21:39:22.988"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:22.983" endtime="20210731 21:39:22.988"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:22.983" endtime="20210731 21:39:22.989"/>
</for>
<status status="FAIL" starttime="20210731 21:39:22.981" endtime="20210731 21:39:22.989"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:22.981" endtime="20210731 21:39:22.989"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:22.990" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:22.990" endtime="20210731 21:39:22.990"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:22.991" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210731 21:39:22.990" endtime="20210731 21:39:22.991"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:22.998" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:22.999" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:22.991" endtime="20210731 21:39:22.999"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:22.999" endtime="20210731 21:39:22.999"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:22.999" endtime="20210731 21:39:22.999"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:22.991" endtime="20210731 21:39:22.999"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:22.991" endtime="20210731 21:39:22.999"/>
</for>
<status status="FAIL" starttime="20210731 21:39:22.989" endtime="20210731 21:39:22.999"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:22.989" endtime="20210731 21:39:22.999"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:22.966" endtime="20210731 21:39:23.000"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:23.016" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:23.030" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:23.030" level="INFO">${pids} = 8765
8772
8777</msg>
<status status="PASS" starttime="20210731 21:39:23.001" endtime="20210731 21:39:23.031"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:23.032" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:23.031" endtime="20210731 21:39:23.032"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:23.032" level="INFO">${pids} = ['8765', '8772', '8777']</msg>
<status status="PASS" starttime="20210731 21:39:23.032" endtime="20210731 21:39:23.032"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8765</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:23.036" level="INFO">Running command 'kill 8765 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:23.033" endtime="20210731 21:39:23.036"/>
</kw>
<status status="PASS" starttime="20210731 21:39:23.033" endtime="20210731 21:39:23.037"/>
</iter>
<iter>
<var name="${pid}">8772</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:23.040" level="INFO">Running command 'kill 8772 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:23.037" endtime="20210731 21:39:23.045"/>
</kw>
<status status="PASS" starttime="20210731 21:39:23.037" endtime="20210731 21:39:23.045"/>
</iter>
<iter>
<var name="${pid}">8777</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:23.065" level="INFO">Running command 'kill 8777 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:23.046" endtime="20210731 21:39:23.066"/>
</kw>
<status status="PASS" starttime="20210731 21:39:23.046" endtime="20210731 21:39:23.066"/>
</iter>
<status status="PASS" starttime="20210731 21:39:23.033" endtime="20210731 21:39:23.066"/>
</for>
<status status="PASS" starttime="20210731 21:39:23.032" endtime="20210731 21:39:23.066"/>
</branch>
<status status="PASS" starttime="20210731 21:39:23.032" endtime="20210731 21:39:23.066"/>
</if>
<status status="PASS" starttime="20210731 21:39:23.000" endtime="20210731 21:39:23.067"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?..'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:21.366" endtime="20210731 21:39:23.067">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t71" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?..ABCD!?..ABCD!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:23.072" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:23.085" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:23.085" level="INFO">${pids} = 8806</msg>
<status status="PASS" starttime="20210731 21:39:23.069" endtime="20210731 21:39:23.085"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:23.086" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:23.086" endtime="20210731 21:39:23.086"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:23.087" level="INFO">${pids} = ['8806']</msg>
<status status="PASS" starttime="20210731 21:39:23.087" endtime="20210731 21:39:23.087"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8806</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:23.091" level="INFO">Running command 'kill 8806 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:23.088" endtime="20210731 21:39:23.091"/>
</kw>
<status status="PASS" starttime="20210731 21:39:23.088" endtime="20210731 21:39:23.091"/>
</iter>
<status status="PASS" starttime="20210731 21:39:23.087" endtime="20210731 21:39:23.092"/>
</for>
<status status="PASS" starttime="20210731 21:39:23.087" endtime="20210731 21:39:23.092"/>
</branch>
<status status="PASS" starttime="20210731 21:39:23.087" endtime="20210731 21:39:23.092"/>
</if>
<status status="PASS" starttime="20210731 21:39:23.069" endtime="20210731 21:39:23.092"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:23.093" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:23.093" endtime="20210731 21:39:23.093"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:23.094" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:23.094" endtime="20210731 21:39:23.094"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:23.095" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:23.094" endtime="20210731 21:39:23.095"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:23.095" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:23.095" endtime="20210731 21:39:23.095"/>
</kw>
<msg timestamp="20210731 21:39:23.096" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:23.093" endtime="20210731 21:39:23.096"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:23.103" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:23.096" endtime="20210731 21:39:23.104"/>
</kw>
<status status="PASS" starttime="20210731 21:39:23.092" endtime="20210731 21:39:23.105"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:23.106" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:23.106" endtime="20210731 21:39:23.110"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:24.611" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:23.111" endtime="20210731 21:39:24.611"/>
</kw>
<status status="PASS" starttime="20210731 21:39:23.105" endtime="20210731 21:39:24.612"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:24.613" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:24.613" endtime="20210731 21:39:24.613"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:24.614" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:24.613" endtime="20210731 21:39:24.614"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:24.614" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:24.614" endtime="20210731 21:39:24.614"/>
</kw>
<msg timestamp="20210731 21:39:24.614" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:24.612" endtime="20210731 21:39:24.614"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:24.615" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:24.614" endtime="20210731 21:39:24.615"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.612" endtime="20210731 21:39:24.615"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:24.616" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:24.616" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:24.616" endtime="20210731 21:39:24.616"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.616" endtime="20210731 21:39:24.616"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:24.617" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:24.618" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:24.617" endtime="20210731 21:39:24.618"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:24.618" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:24.618" endtime="20210731 21:39:24.618"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:24.619" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:24.618" endtime="20210731 21:39:24.619"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:24.619" endtime="20210731 21:39:24.620"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:24.620" endtime="20210731 21:39:24.620"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.618" endtime="20210731 21:39:24.620"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:24.621" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:24.621" endtime="20210731 21:39:24.621"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:24.621" endtime="20210731 21:39:24.622"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:24.622" endtime="20210731 21:39:24.622"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.620" endtime="20210731 21:39:24.622"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:24.623" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:24.623" endtime="20210731 21:39:24.623"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:24.623" endtime="20210731 21:39:24.624"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:24.624" endtime="20210731 21:39:24.624"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.622" endtime="20210731 21:39:24.624"/>
</iter>
<status status="PASS" starttime="20210731 21:39:24.618" endtime="20210731 21:39:24.624"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:24.625" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:24.625" endtime="20210731 21:39:24.625"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.617" endtime="20210731 21:39:24.625"/>
</kw>
<status status="PASS" starttime="20210731 21:39:23.068" endtime="20210731 21:39:24.625"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:24.627" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:24.626" endtime="20210731 21:39:24.627"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:24.627" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210731 21:39:24.627" endtime="20210731 21:39:24.627"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:24.642" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:24.642" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:24.628" endtime="20210731 21:39:24.642"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:24.642" endtime="20210731 21:39:24.642"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:24.642" endtime="20210731 21:39:24.642"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:24.628" endtime="20210731 21:39:24.642"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:24.627" endtime="20210731 21:39:24.643"/>
</for>
<status status="FAIL" starttime="20210731 21:39:24.626" endtime="20210731 21:39:24.643"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:24.626" endtime="20210731 21:39:24.643"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:24.644" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:24.644" endtime="20210731 21:39:24.644"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:24.645" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210731 21:39:24.644" endtime="20210731 21:39:24.645"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:24.651" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:24.651" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:24.645" endtime="20210731 21:39:24.652"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:24.652" endtime="20210731 21:39:24.652"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:24.652" endtime="20210731 21:39:24.653"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:24.645" endtime="20210731 21:39:24.653"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:24.645" endtime="20210731 21:39:24.653"/>
</for>
<status status="FAIL" starttime="20210731 21:39:24.643" endtime="20210731 21:39:24.653"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:24.643" endtime="20210731 21:39:24.653"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:24.656" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:24.656" endtime="20210731 21:39:24.656"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:24.657" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210731 21:39:24.656" endtime="20210731 21:39:24.657"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:24.678" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:24.679" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:24.657" endtime="20210731 21:39:24.679"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:24.679" endtime="20210731 21:39:24.679"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:24.679" endtime="20210731 21:39:24.679"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:24.657" endtime="20210731 21:39:24.679"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:24.657" endtime="20210731 21:39:24.679"/>
</for>
<status status="FAIL" starttime="20210731 21:39:24.653" endtime="20210731 21:39:24.679"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:24.653" endtime="20210731 21:39:24.679"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:24.625" endtime="20210731 21:39:24.679"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:24.685" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:24.697" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:24.697" level="INFO">${pids} = 8829
8836
8840</msg>
<status status="PASS" starttime="20210731 21:39:24.681" endtime="20210731 21:39:24.697"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:24.698" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:24.697" endtime="20210731 21:39:24.698"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:24.699" level="INFO">${pids} = ['8829', '8836', '8840']</msg>
<status status="PASS" starttime="20210731 21:39:24.698" endtime="20210731 21:39:24.699"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8829</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:24.721" level="INFO">Running command 'kill 8829 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:24.699" endtime="20210731 21:39:24.722"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.699" endtime="20210731 21:39:24.722"/>
</iter>
<iter>
<var name="${pid}">8836</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:24.726" level="INFO">Running command 'kill 8836 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:24.722" endtime="20210731 21:39:24.728"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.722" endtime="20210731 21:39:24.728"/>
</iter>
<iter>
<var name="${pid}">8840</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:24.733" level="INFO">Running command 'kill 8840 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:24.729" endtime="20210731 21:39:24.734"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.729" endtime="20210731 21:39:24.734"/>
</iter>
<status status="PASS" starttime="20210731 21:39:24.699" endtime="20210731 21:39:24.734"/>
</for>
<status status="PASS" starttime="20210731 21:39:24.698" endtime="20210731 21:39:24.734"/>
</branch>
<status status="PASS" starttime="20210731 21:39:24.698" endtime="20210731 21:39:24.734"/>
</if>
<status status="PASS" starttime="20210731 21:39:24.680" endtime="20210731 21:39:24.734"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?..ABCD!?..ABCD!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:23.068" endtime="20210731 21:39:24.735">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t72" name="With Each Valid Token, Updating Password Of Each System User With 0123!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:24.740" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:24.754" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:24.754" level="INFO">${pids} = 8869</msg>
<status status="PASS" starttime="20210731 21:39:24.737" endtime="20210731 21:39:24.754"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:24.755" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:24.754" endtime="20210731 21:39:24.755"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:24.756" level="INFO">${pids} = ['8869']</msg>
<status status="PASS" starttime="20210731 21:39:24.755" endtime="20210731 21:39:24.756"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8869</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:24.760" level="INFO">Running command 'kill 8869 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:24.756" endtime="20210731 21:39:24.760"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.756" endtime="20210731 21:39:24.760"/>
</iter>
<status status="PASS" starttime="20210731 21:39:24.756" endtime="20210731 21:39:24.761"/>
</for>
<status status="PASS" starttime="20210731 21:39:24.755" endtime="20210731 21:39:24.761"/>
</branch>
<status status="PASS" starttime="20210731 21:39:24.755" endtime="20210731 21:39:24.761"/>
</if>
<status status="PASS" starttime="20210731 21:39:24.737" endtime="20210731 21:39:24.761"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:24.762" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:24.762" endtime="20210731 21:39:24.762"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:24.763" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:24.763" endtime="20210731 21:39:24.763"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:24.763" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:24.763" endtime="20210731 21:39:24.764"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:24.764" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:24.764" endtime="20210731 21:39:24.764"/>
</kw>
<msg timestamp="20210731 21:39:24.764" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:24.762" endtime="20210731 21:39:24.764"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:24.774" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:24.764" endtime="20210731 21:39:24.776"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.761" endtime="20210731 21:39:24.776"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:24.778" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:24.777" endtime="20210731 21:39:24.784"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:26.285" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:24.784" endtime="20210731 21:39:26.285"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.776" endtime="20210731 21:39:26.286"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:26.287" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:26.287" endtime="20210731 21:39:26.287"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:26.288" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:26.288" endtime="20210731 21:39:26.288"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:26.288" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:26.288" endtime="20210731 21:39:26.288"/>
</kw>
<msg timestamp="20210731 21:39:26.289" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:26.286" endtime="20210731 21:39:26.289"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:26.289" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:26.289" endtime="20210731 21:39:26.290"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.286" endtime="20210731 21:39:26.290"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:26.291" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:26.291" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:26.290" endtime="20210731 21:39:26.291"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.290" endtime="20210731 21:39:26.291"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:26.293" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:26.293" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:26.292" endtime="20210731 21:39:26.293"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:26.294" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:26.293" endtime="20210731 21:39:26.294"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:26.294" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:26.294" endtime="20210731 21:39:26.294"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:26.294" endtime="20210731 21:39:26.295"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:26.295" endtime="20210731 21:39:26.296"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.294" endtime="20210731 21:39:26.296"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:26.296" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:26.296" endtime="20210731 21:39:26.296"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:26.296" endtime="20210731 21:39:26.297"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:26.297" endtime="20210731 21:39:26.298"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.296" endtime="20210731 21:39:26.298"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:26.298" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:26.298" endtime="20210731 21:39:26.298"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:26.298" endtime="20210731 21:39:26.299"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:26.299" endtime="20210731 21:39:26.300"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.298" endtime="20210731 21:39:26.300"/>
</iter>
<status status="PASS" starttime="20210731 21:39:26.294" endtime="20210731 21:39:26.300"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:26.300" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:26.300" endtime="20210731 21:39:26.300"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.291" endtime="20210731 21:39:26.300"/>
</kw>
<status status="PASS" starttime="20210731 21:39:24.736" endtime="20210731 21:39:26.301"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:26.302" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:26.302" endtime="20210731 21:39:26.302"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:26.303" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:26.302" endtime="20210731 21:39:26.303"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:26.316" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:26.317" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:26.303" endtime="20210731 21:39:26.317"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:26.317" endtime="20210731 21:39:26.317"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:26.317" endtime="20210731 21:39:26.317"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:26.303" endtime="20210731 21:39:26.317"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:26.303" endtime="20210731 21:39:26.317"/>
</for>
<status status="FAIL" starttime="20210731 21:39:26.301" endtime="20210731 21:39:26.318"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:26.301" endtime="20210731 21:39:26.318"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:26.319" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:26.318" endtime="20210731 21:39:26.319"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:26.319" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:26.319" endtime="20210731 21:39:26.319"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:26.324" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:26.325" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:26.320" endtime="20210731 21:39:26.325"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:26.325" endtime="20210731 21:39:26.325"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:26.325" endtime="20210731 21:39:26.325"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:26.320" endtime="20210731 21:39:26.325"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:26.320" endtime="20210731 21:39:26.325"/>
</for>
<status status="FAIL" starttime="20210731 21:39:26.318" endtime="20210731 21:39:26.326"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:26.318" endtime="20210731 21:39:26.326"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:26.327" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:26.327" endtime="20210731 21:39:26.327"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:26.328" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:26.327" endtime="20210731 21:39:26.328"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:26.354" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:26.354" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:26.328" endtime="20210731 21:39:26.355"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:26.355" endtime="20210731 21:39:26.355"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:26.355" endtime="20210731 21:39:26.355"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:26.328" endtime="20210731 21:39:26.355"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:26.328" endtime="20210731 21:39:26.355"/>
</for>
<status status="FAIL" starttime="20210731 21:39:26.326" endtime="20210731 21:39:26.355"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:26.326" endtime="20210731 21:39:26.355"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:26.301" endtime="20210731 21:39:26.356"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:26.362" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:26.373" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:26.374" level="INFO">${pids} = 8892
8899
8904</msg>
<status status="PASS" starttime="20210731 21:39:26.357" endtime="20210731 21:39:26.374"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:26.375" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:26.374" endtime="20210731 21:39:26.375"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:26.376" level="INFO">${pids} = ['8892', '8899', '8904']</msg>
<status status="PASS" starttime="20210731 21:39:26.375" endtime="20210731 21:39:26.376"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8892</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:26.398" level="INFO">Running command 'kill 8892 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:26.376" endtime="20210731 21:39:26.398"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.376" endtime="20210731 21:39:26.398"/>
</iter>
<iter>
<var name="${pid}">8899</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:26.402" level="INFO">Running command 'kill 8899 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:26.399" endtime="20210731 21:39:26.403"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.399" endtime="20210731 21:39:26.403"/>
</iter>
<iter>
<var name="${pid}">8904</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:26.407" level="INFO">Running command 'kill 8904 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:26.404" endtime="20210731 21:39:26.408"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.404" endtime="20210731 21:39:26.408"/>
</iter>
<status status="PASS" starttime="20210731 21:39:26.376" endtime="20210731 21:39:26.408"/>
</for>
<status status="PASS" starttime="20210731 21:39:26.375" endtime="20210731 21:39:26.408"/>
</branch>
<status status="PASS" starttime="20210731 21:39:26.375" endtime="20210731 21:39:26.408"/>
</if>
<status status="PASS" starttime="20210731 21:39:26.356" endtime="20210731 21:39:26.408"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:24.735" endtime="20210731 21:39:26.409">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t73" name="With Each Valid Token, Updating Password Of Each System User With 0123!?.0 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:26.414" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:26.428" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:26.428" level="INFO">${pids} = 8933</msg>
<status status="PASS" starttime="20210731 21:39:26.411" endtime="20210731 21:39:26.428"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:26.429" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:26.428" endtime="20210731 21:39:26.429"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:26.430" level="INFO">${pids} = ['8933']</msg>
<status status="PASS" starttime="20210731 21:39:26.430" endtime="20210731 21:39:26.430"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8933</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:26.434" level="INFO">Running command 'kill 8933 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:26.430" endtime="20210731 21:39:26.434"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.430" endtime="20210731 21:39:26.434"/>
</iter>
<status status="PASS" starttime="20210731 21:39:26.430" endtime="20210731 21:39:26.434"/>
</for>
<status status="PASS" starttime="20210731 21:39:26.429" endtime="20210731 21:39:26.434"/>
</branch>
<status status="PASS" starttime="20210731 21:39:26.429" endtime="20210731 21:39:26.434"/>
</if>
<status status="PASS" starttime="20210731 21:39:26.411" endtime="20210731 21:39:26.435"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:26.439" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:26.438" endtime="20210731 21:39:26.439"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:26.439" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:26.439" endtime="20210731 21:39:26.439"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:26.440" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:26.440" endtime="20210731 21:39:26.440"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:26.440" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:26.440" endtime="20210731 21:39:26.440"/>
</kw>
<msg timestamp="20210731 21:39:26.441" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:26.439" endtime="20210731 21:39:26.441"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:26.445" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:26.441" endtime="20210731 21:39:26.447"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.435" endtime="20210731 21:39:26.447"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:26.449" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:26.448" endtime="20210731 21:39:26.453"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:27.955" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:26.454" endtime="20210731 21:39:27.955"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.448" endtime="20210731 21:39:27.955"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:27.956" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:27.956" endtime="20210731 21:39:27.957"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:27.957" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:27.957" endtime="20210731 21:39:27.957"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:27.958" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:27.957" endtime="20210731 21:39:27.958"/>
</kw>
<msg timestamp="20210731 21:39:27.958" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:27.956" endtime="20210731 21:39:27.958"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:27.958" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:27.958" endtime="20210731 21:39:27.959"/>
</kw>
<status status="PASS" starttime="20210731 21:39:27.955" endtime="20210731 21:39:27.959"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:27.960" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:27.960" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:27.960" endtime="20210731 21:39:27.960"/>
</kw>
<status status="PASS" starttime="20210731 21:39:27.959" endtime="20210731 21:39:27.960"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:27.962" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:27.962" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:27.961" endtime="20210731 21:39:27.962"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:27.962" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:27.962" endtime="20210731 21:39:27.962"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:27.963" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:27.963" endtime="20210731 21:39:27.963"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:27.963" endtime="20210731 21:39:27.964"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:27.964" endtime="20210731 21:39:27.965"/>
</kw>
<status status="PASS" starttime="20210731 21:39:27.962" endtime="20210731 21:39:27.965"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:27.965" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:27.965" endtime="20210731 21:39:27.965"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:27.965" endtime="20210731 21:39:27.966"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:27.966" endtime="20210731 21:39:27.967"/>
</kw>
<status status="PASS" starttime="20210731 21:39:27.965" endtime="20210731 21:39:27.967"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:27.967" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:27.967" endtime="20210731 21:39:27.967"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:27.967" endtime="20210731 21:39:27.968"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:27.968" endtime="20210731 21:39:27.969"/>
</kw>
<status status="PASS" starttime="20210731 21:39:27.967" endtime="20210731 21:39:27.969"/>
</iter>
<status status="PASS" starttime="20210731 21:39:27.962" endtime="20210731 21:39:27.969"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:27.969" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:27.969" endtime="20210731 21:39:27.969"/>
</kw>
<status status="PASS" starttime="20210731 21:39:27.961" endtime="20210731 21:39:27.970"/>
</kw>
<status status="PASS" starttime="20210731 21:39:26.411" endtime="20210731 21:39:27.970"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:27.971" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:27.971" endtime="20210731 21:39:27.971"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:27.972" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210731 21:39:27.971" endtime="20210731 21:39:27.972"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:27.984" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:27.984" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:27.972" endtime="20210731 21:39:27.985"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:27.985" endtime="20210731 21:39:27.985"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:27.985" endtime="20210731 21:39:27.985"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:27.972" endtime="20210731 21:39:27.985"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:27.972" endtime="20210731 21:39:27.985"/>
</for>
<status status="FAIL" starttime="20210731 21:39:27.970" endtime="20210731 21:39:27.985"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:27.970" endtime="20210731 21:39:27.985"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:27.987" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:27.986" endtime="20210731 21:39:27.987"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:27.987" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210731 21:39:27.987" endtime="20210731 21:39:27.987"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:27.992" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:27.992" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:27.988" endtime="20210731 21:39:27.993"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:27.993" endtime="20210731 21:39:27.993"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:27.993" endtime="20210731 21:39:27.993"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:27.988" endtime="20210731 21:39:27.993"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:27.987" endtime="20210731 21:39:27.993"/>
</for>
<status status="FAIL" starttime="20210731 21:39:27.986" endtime="20210731 21:39:27.993"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:27.986" endtime="20210731 21:39:27.993"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:27.995" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:27.994" endtime="20210731 21:39:27.995"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:27.995" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210731 21:39:27.995" endtime="20210731 21:39:27.995"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:28.008" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:28.009" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:27.996" endtime="20210731 21:39:28.009"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:28.009" endtime="20210731 21:39:28.009"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:28.009" endtime="20210731 21:39:28.009"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:27.995" endtime="20210731 21:39:28.009"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:27.995" endtime="20210731 21:39:28.009"/>
</for>
<status status="FAIL" starttime="20210731 21:39:27.994" endtime="20210731 21:39:28.010"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:27.994" endtime="20210731 21:39:28.010"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:27.970" endtime="20210731 21:39:28.010"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:28.023" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:28.055" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:28.056" level="INFO">${pids} = 8970
8977
8982</msg>
<status status="PASS" starttime="20210731 21:39:28.011" endtime="20210731 21:39:28.056"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:28.057" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:28.056" endtime="20210731 21:39:28.057"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:28.058" level="INFO">${pids} = ['8970', '8977', '8982']</msg>
<status status="PASS" starttime="20210731 21:39:28.057" endtime="20210731 21:39:28.058"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">8970</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:28.062" level="INFO">Running command 'kill 8970 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:28.059" endtime="20210731 21:39:28.063"/>
</kw>
<status status="PASS" starttime="20210731 21:39:28.058" endtime="20210731 21:39:28.063"/>
</iter>
<iter>
<var name="${pid}">8977</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:28.067" level="INFO">Running command 'kill 8977 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:28.063" endtime="20210731 21:39:28.067"/>
</kw>
<status status="PASS" starttime="20210731 21:39:28.063" endtime="20210731 21:39:28.067"/>
</iter>
<iter>
<var name="${pid}">8982</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:28.073" level="INFO">Running command 'kill 8982 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:28.068" endtime="20210731 21:39:28.074"/>
</kw>
<status status="PASS" starttime="20210731 21:39:28.067" endtime="20210731 21:39:28.074"/>
</iter>
<status status="PASS" starttime="20210731 21:39:28.058" endtime="20210731 21:39:28.074"/>
</for>
<status status="PASS" starttime="20210731 21:39:28.057" endtime="20210731 21:39:28.074"/>
</branch>
<status status="PASS" starttime="20210731 21:39:28.057" endtime="20210731 21:39:28.074"/>
</if>
<status status="PASS" starttime="20210731 21:39:28.010" endtime="20210731 21:39:28.074"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.0'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:26.410" endtime="20210731 21:39:28.074">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t74" name="With Each Valid Token, Updating Password Of Each System User With 0123!?.00123!?.00123!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:28.080" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:28.094" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:28.094" level="INFO">${pids} = 9011</msg>
<status status="PASS" starttime="20210731 21:39:28.077" endtime="20210731 21:39:28.095"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:28.096" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:28.095" endtime="20210731 21:39:28.096"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:28.096" level="INFO">${pids} = ['9011']</msg>
<status status="PASS" starttime="20210731 21:39:28.096" endtime="20210731 21:39:28.097"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9011</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:28.100" level="INFO">Running command 'kill 9011 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:28.097" endtime="20210731 21:39:28.101"/>
</kw>
<status status="PASS" starttime="20210731 21:39:28.097" endtime="20210731 21:39:28.101"/>
</iter>
<status status="PASS" starttime="20210731 21:39:28.097" endtime="20210731 21:39:28.101"/>
</for>
<status status="PASS" starttime="20210731 21:39:28.096" endtime="20210731 21:39:28.101"/>
</branch>
<status status="PASS" starttime="20210731 21:39:28.096" endtime="20210731 21:39:28.101"/>
</if>
<status status="PASS" starttime="20210731 21:39:28.076" endtime="20210731 21:39:28.102"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:28.103" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:28.102" endtime="20210731 21:39:28.103"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:28.104" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:28.104" endtime="20210731 21:39:28.104"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:28.104" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:28.104" endtime="20210731 21:39:28.104"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:28.105" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:28.104" endtime="20210731 21:39:28.105"/>
</kw>
<msg timestamp="20210731 21:39:28.105" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:28.103" endtime="20210731 21:39:28.105"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:28.121" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:28.105" endtime="20210731 21:39:28.136"/>
</kw>
<status status="PASS" starttime="20210731 21:39:28.102" endtime="20210731 21:39:28.137"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:28.138" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:28.138" endtime="20210731 21:39:28.143"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:29.644" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:28.143" endtime="20210731 21:39:29.644"/>
</kw>
<status status="PASS" starttime="20210731 21:39:28.137" endtime="20210731 21:39:29.645"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:29.646" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:29.646" endtime="20210731 21:39:29.646"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:29.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:29.646" endtime="20210731 21:39:29.647"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:29.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:29.647" endtime="20210731 21:39:29.647"/>
</kw>
<msg timestamp="20210731 21:39:29.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:29.645" endtime="20210731 21:39:29.648"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:29.648" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:29.648" endtime="20210731 21:39:29.648"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.645" endtime="20210731 21:39:29.649"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:29.649" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:29.649" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:29.649" endtime="20210731 21:39:29.650"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.649" endtime="20210731 21:39:29.650"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:29.651" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:29.651" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:29.650" endtime="20210731 21:39:29.651"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:29.651" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:29.651" endtime="20210731 21:39:29.651"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:29.652" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:29.652" endtime="20210731 21:39:29.652"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:29.652" endtime="20210731 21:39:29.653"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:29.653" endtime="20210731 21:39:29.653"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.651" endtime="20210731 21:39:29.653"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:29.654" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:29.654" endtime="20210731 21:39:29.654"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:29.654" endtime="20210731 21:39:29.655"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:29.656" endtime="20210731 21:39:29.656"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.654" endtime="20210731 21:39:29.656"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:29.656" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:29.656" endtime="20210731 21:39:29.656"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:29.657" endtime="20210731 21:39:29.657"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:29.658" endtime="20210731 21:39:29.658"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.656" endtime="20210731 21:39:29.658"/>
</iter>
<status status="PASS" starttime="20210731 21:39:29.651" endtime="20210731 21:39:29.658"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:29.658" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:29.658" endtime="20210731 21:39:29.658"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.650" endtime="20210731 21:39:29.658"/>
</kw>
<status status="PASS" starttime="20210731 21:39:28.076" endtime="20210731 21:39:29.659"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:29.660" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:29.660" endtime="20210731 21:39:29.660"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:29.660" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210731 21:39:29.660" endtime="20210731 21:39:29.660"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:29.670" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:29.671" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:29.661" endtime="20210731 21:39:29.671"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:29.671" endtime="20210731 21:39:29.671"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:29.671" endtime="20210731 21:39:29.671"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:29.660" endtime="20210731 21:39:29.671"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:29.660" endtime="20210731 21:39:29.671"/>
</for>
<status status="FAIL" starttime="20210731 21:39:29.659" endtime="20210731 21:39:29.672"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:29.659" endtime="20210731 21:39:29.672"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:29.673" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:29.673" endtime="20210731 21:39:29.673"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:29.674" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210731 21:39:29.673" endtime="20210731 21:39:29.674"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:29.678" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:29.679" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:29.674" endtime="20210731 21:39:29.679"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:29.679" endtime="20210731 21:39:29.679"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:29.679" endtime="20210731 21:39:29.679"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:29.674" endtime="20210731 21:39:29.679"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:29.674" endtime="20210731 21:39:29.679"/>
</for>
<status status="FAIL" starttime="20210731 21:39:29.672" endtime="20210731 21:39:29.679"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:29.672" endtime="20210731 21:39:29.679"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:29.681" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:29.680" endtime="20210731 21:39:29.681"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:29.681" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210731 21:39:29.681" endtime="20210731 21:39:29.681"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:29.686" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:29.686" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:29.681" endtime="20210731 21:39:29.686"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:29.687" endtime="20210731 21:39:29.687"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:29.687" endtime="20210731 21:39:29.687"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:29.681" endtime="20210731 21:39:29.687"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:29.681" endtime="20210731 21:39:29.687"/>
</for>
<status status="FAIL" starttime="20210731 21:39:29.680" endtime="20210731 21:39:29.687"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:29.679" endtime="20210731 21:39:29.688"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:29.659" endtime="20210731 21:39:29.688"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:29.709" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:29.740" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:29.740" level="INFO">${pids} = 9040
9055
9060</msg>
<status status="PASS" starttime="20210731 21:39:29.690" endtime="20210731 21:39:29.740"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:29.741" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:29.741" endtime="20210731 21:39:29.741"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:29.742" level="INFO">${pids} = ['9040', '9055', '9060']</msg>
<status status="PASS" starttime="20210731 21:39:29.742" endtime="20210731 21:39:29.742"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9040</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:29.747" level="INFO">Running command 'kill 9040 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:29.743" endtime="20210731 21:39:29.748"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.742" endtime="20210731 21:39:29.748"/>
</iter>
<iter>
<var name="${pid}">9055</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:29.752" level="INFO">Running command 'kill 9055 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:29.749" endtime="20210731 21:39:29.753"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.748" endtime="20210731 21:39:29.753"/>
</iter>
<iter>
<var name="${pid}">9060</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:29.758" level="INFO">Running command 'kill 9060 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:29.753" endtime="20210731 21:39:29.758"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.753" endtime="20210731 21:39:29.758"/>
</iter>
<status status="PASS" starttime="20210731 21:39:29.742" endtime="20210731 21:39:29.758"/>
</for>
<status status="PASS" starttime="20210731 21:39:29.742" endtime="20210731 21:39:29.758"/>
</branch>
<status status="PASS" starttime="20210731 21:39:29.742" endtime="20210731 21:39:29.758"/>
</if>
<status status="PASS" starttime="20210731 21:39:29.688" endtime="20210731 21:39:29.759"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.00123!?.00123!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:28.075" endtime="20210731 21:39:29.759">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t75" name="With Each Valid Token, Updating Password Of Each System User With abcdAB9 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:29.764" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:29.776" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:29.776" level="INFO">${pids} = 9093</msg>
<status status="PASS" starttime="20210731 21:39:29.761" endtime="20210731 21:39:29.776"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:29.777" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:29.777" endtime="20210731 21:39:29.777"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:29.778" level="INFO">${pids} = ['9093']</msg>
<status status="PASS" starttime="20210731 21:39:29.778" endtime="20210731 21:39:29.778"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9093</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:29.782" level="INFO">Running command 'kill 9093 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:29.779" endtime="20210731 21:39:29.782"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.778" endtime="20210731 21:39:29.782"/>
</iter>
<status status="PASS" starttime="20210731 21:39:29.778" endtime="20210731 21:39:29.782"/>
</for>
<status status="PASS" starttime="20210731 21:39:29.778" endtime="20210731 21:39:29.782"/>
</branch>
<status status="PASS" starttime="20210731 21:39:29.777" endtime="20210731 21:39:29.782"/>
</if>
<status status="PASS" starttime="20210731 21:39:29.761" endtime="20210731 21:39:29.783"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:29.784" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:29.783" endtime="20210731 21:39:29.784"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:29.785" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:29.784" endtime="20210731 21:39:29.785"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:29.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:29.785" endtime="20210731 21:39:29.788"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:29.789" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:29.788" endtime="20210731 21:39:29.789"/>
</kw>
<msg timestamp="20210731 21:39:29.789" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:29.784" endtime="20210731 21:39:29.789"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:29.794" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:29.790" endtime="20210731 21:39:29.796"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.783" endtime="20210731 21:39:29.796"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:29.797" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:29.797" endtime="20210731 21:39:29.801"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:31.303" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:29.802" endtime="20210731 21:39:31.304"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.796" endtime="20210731 21:39:31.304"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:31.305" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:31.305" endtime="20210731 21:39:31.305"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:31.306" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:31.306" endtime="20210731 21:39:31.306"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:31.306" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:31.306" endtime="20210731 21:39:31.306"/>
</kw>
<msg timestamp="20210731 21:39:31.307" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:31.305" endtime="20210731 21:39:31.307"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:31.307" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:31.307" endtime="20210731 21:39:31.308"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.304" endtime="20210731 21:39:31.308"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:31.308" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:31.308" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:31.308" endtime="20210731 21:39:31.309"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.308" endtime="20210731 21:39:31.309"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:31.310" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:31.310" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:31.309" endtime="20210731 21:39:31.310"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:31.310" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:31.310" endtime="20210731 21:39:31.310"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:31.311" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:31.311" endtime="20210731 21:39:31.311"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:31.311" endtime="20210731 21:39:31.312"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:31.313" endtime="20210731 21:39:31.313"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.311" endtime="20210731 21:39:31.313"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:31.313" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:31.313" endtime="20210731 21:39:31.313"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:31.314" endtime="20210731 21:39:31.314"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:31.315" endtime="20210731 21:39:31.315"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.313" endtime="20210731 21:39:31.315"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:31.316" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:31.315" endtime="20210731 21:39:31.316"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:31.316" endtime="20210731 21:39:31.317"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:31.317" endtime="20210731 21:39:31.317"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.315" endtime="20210731 21:39:31.317"/>
</iter>
<status status="PASS" starttime="20210731 21:39:31.311" endtime="20210731 21:39:31.317"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:31.318" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:31.317" endtime="20210731 21:39:31.318"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.309" endtime="20210731 21:39:31.318"/>
</kw>
<status status="PASS" starttime="20210731 21:39:29.760" endtime="20210731 21:39:31.318"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:31.319" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:31.319" endtime="20210731 21:39:31.319"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:31.320" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210731 21:39:31.320" endtime="20210731 21:39:31.320"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:31.334" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:31.334" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:31.320" endtime="20210731 21:39:31.334"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:31.334" endtime="20210731 21:39:31.334"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:31.334" endtime="20210731 21:39:31.335"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:31.320" endtime="20210731 21:39:31.335"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:31.320" endtime="20210731 21:39:31.335"/>
</for>
<status status="FAIL" starttime="20210731 21:39:31.318" endtime="20210731 21:39:31.335"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:31.318" endtime="20210731 21:39:31.335"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:31.337" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:31.336" endtime="20210731 21:39:31.337"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:31.338" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210731 21:39:31.337" endtime="20210731 21:39:31.338"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:31.342" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:31.343" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:31.338" endtime="20210731 21:39:31.343"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:31.343" endtime="20210731 21:39:31.343"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:31.343" endtime="20210731 21:39:31.343"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:31.338" endtime="20210731 21:39:31.343"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:31.338" endtime="20210731 21:39:31.343"/>
</for>
<status status="FAIL" starttime="20210731 21:39:31.335" endtime="20210731 21:39:31.343"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:31.335" endtime="20210731 21:39:31.343"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:31.345" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:31.344" endtime="20210731 21:39:31.345"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:31.346" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210731 21:39:31.345" endtime="20210731 21:39:31.346"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:31.362" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:31.362" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:31.346" endtime="20210731 21:39:31.362"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:31.363" endtime="20210731 21:39:31.363"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:31.363" endtime="20210731 21:39:31.363"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:31.346" endtime="20210731 21:39:31.363"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:31.346" endtime="20210731 21:39:31.363"/>
</for>
<status status="FAIL" starttime="20210731 21:39:31.344" endtime="20210731 21:39:31.363"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:31.344" endtime="20210731 21:39:31.363"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:31.318" endtime="20210731 21:39:31.363"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:31.370" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:31.386" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:31.386" level="INFO">${pids} = 9119
9126
9130</msg>
<status status="PASS" starttime="20210731 21:39:31.364" endtime="20210731 21:39:31.386"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:31.391" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:31.386" endtime="20210731 21:39:31.391"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:31.392" level="INFO">${pids} = ['9119', '9126', '9130']</msg>
<status status="PASS" starttime="20210731 21:39:31.391" endtime="20210731 21:39:31.392"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9119</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:31.396" level="INFO">Running command 'kill 9119 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:31.392" endtime="20210731 21:39:31.396"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.392" endtime="20210731 21:39:31.396"/>
</iter>
<iter>
<var name="${pid}">9126</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:31.400" level="INFO">Running command 'kill 9126 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:31.397" endtime="20210731 21:39:31.402"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.397" endtime="20210731 21:39:31.402"/>
</iter>
<iter>
<var name="${pid}">9130</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:31.406" level="INFO">Running command 'kill 9130 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:31.402" endtime="20210731 21:39:31.406"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.402" endtime="20210731 21:39:31.406"/>
</iter>
<status status="PASS" starttime="20210731 21:39:31.392" endtime="20210731 21:39:31.407"/>
</for>
<status status="PASS" starttime="20210731 21:39:31.391" endtime="20210731 21:39:31.407"/>
</branch>
<status status="PASS" starttime="20210731 21:39:31.391" endtime="20210731 21:39:31.407"/>
</if>
<status status="PASS" starttime="20210731 21:39:31.364" endtime="20210731 21:39:31.407"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB9'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:29.759" endtime="20210731 21:39:31.407">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t76" name="With Each Valid Token, Updating Password Of Each System User With abcdAB90 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:31.415" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:31.426" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:31.426" level="INFO">${pids} = 9159</msg>
<status status="PASS" starttime="20210731 21:39:31.410" endtime="20210731 21:39:31.426"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:31.427" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:31.426" endtime="20210731 21:39:31.427"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:31.428" level="INFO">${pids} = ['9159']</msg>
<status status="PASS" starttime="20210731 21:39:31.427" endtime="20210731 21:39:31.428"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9159</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:31.431" level="INFO">Running command 'kill 9159 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:31.428" endtime="20210731 21:39:31.432"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.428" endtime="20210731 21:39:31.432"/>
</iter>
<status status="PASS" starttime="20210731 21:39:31.428" endtime="20210731 21:39:31.432"/>
</for>
<status status="PASS" starttime="20210731 21:39:31.427" endtime="20210731 21:39:31.432"/>
</branch>
<status status="PASS" starttime="20210731 21:39:31.427" endtime="20210731 21:39:31.432"/>
</if>
<status status="PASS" starttime="20210731 21:39:31.409" endtime="20210731 21:39:31.432"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:31.434" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:31.433" endtime="20210731 21:39:31.434"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:31.435" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:31.434" endtime="20210731 21:39:31.435"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:31.435" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:31.435" endtime="20210731 21:39:31.435"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:31.436" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:31.435" endtime="20210731 21:39:31.436"/>
</kw>
<msg timestamp="20210731 21:39:31.436" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:31.434" endtime="20210731 21:39:31.436"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:31.443" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:31.436" endtime="20210731 21:39:31.445"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.433" endtime="20210731 21:39:31.446"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:31.447" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:31.446" endtime="20210731 21:39:31.451"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:32.954" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:31.451" endtime="20210731 21:39:32.954"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.446" endtime="20210731 21:39:32.955"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:32.958" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:32.957" endtime="20210731 21:39:32.958"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:32.960" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:32.958" endtime="20210731 21:39:32.960"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:32.961" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:32.960" endtime="20210731 21:39:32.961"/>
</kw>
<msg timestamp="20210731 21:39:32.961" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:32.956" endtime="20210731 21:39:32.961"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:32.966" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:32.961" endtime="20210731 21:39:32.967"/>
</kw>
<status status="PASS" starttime="20210731 21:39:32.955" endtime="20210731 21:39:32.967"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:32.968" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:32.968" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:32.968" endtime="20210731 21:39:32.969"/>
</kw>
<status status="PASS" starttime="20210731 21:39:32.967" endtime="20210731 21:39:32.969"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:32.971" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:32.972" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:32.970" endtime="20210731 21:39:32.972"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:32.973" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:32.972" endtime="20210731 21:39:32.973"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:32.974" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:32.974" endtime="20210731 21:39:32.974"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:32.975" endtime="20210731 21:39:32.976"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:32.977" endtime="20210731 21:39:32.977"/>
</kw>
<status status="PASS" starttime="20210731 21:39:32.974" endtime="20210731 21:39:32.977"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:32.978" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:32.977" endtime="20210731 21:39:32.978"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:32.978" endtime="20210731 21:39:32.979"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:32.979" endtime="20210731 21:39:32.980"/>
</kw>
<status status="PASS" starttime="20210731 21:39:32.977" endtime="20210731 21:39:32.980"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:32.980" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:32.980" endtime="20210731 21:39:32.980"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:32.980" endtime="20210731 21:39:32.981"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:32.981" endtime="20210731 21:39:32.982"/>
</kw>
<status status="PASS" starttime="20210731 21:39:32.980" endtime="20210731 21:39:32.982"/>
</iter>
<status status="PASS" starttime="20210731 21:39:32.973" endtime="20210731 21:39:32.982"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:32.983" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:32.982" endtime="20210731 21:39:32.983"/>
</kw>
<status status="PASS" starttime="20210731 21:39:32.969" endtime="20210731 21:39:32.983"/>
</kw>
<status status="PASS" starttime="20210731 21:39:31.409" endtime="20210731 21:39:32.984"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:32.985" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:32.985" endtime="20210731 21:39:32.985"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:32.986" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210731 21:39:32.986" endtime="20210731 21:39:32.986"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:32.999" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:32.999" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:32.987" endtime="20210731 21:39:32.999"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:33.000" endtime="20210731 21:39:33.000"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:33.000" endtime="20210731 21:39:33.000"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:32.986" endtime="20210731 21:39:33.000"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:32.986" endtime="20210731 21:39:33.000"/>
</for>
<status status="FAIL" starttime="20210731 21:39:32.984" endtime="20210731 21:39:33.000"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:32.984" endtime="20210731 21:39:33.000"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:33.002" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:33.001" endtime="20210731 21:39:33.002"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:33.002" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210731 21:39:33.002" endtime="20210731 21:39:33.002"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:33.008" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:33.009" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:33.002" endtime="20210731 21:39:33.009"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:33.009" endtime="20210731 21:39:33.009"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:33.009" endtime="20210731 21:39:33.009"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:33.002" endtime="20210731 21:39:33.009"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:33.002" endtime="20210731 21:39:33.009"/>
</for>
<status status="FAIL" starttime="20210731 21:39:33.000" endtime="20210731 21:39:33.009"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:33.000" endtime="20210731 21:39:33.009"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:33.011" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:33.010" endtime="20210731 21:39:33.011"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:33.011" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210731 21:39:33.011" endtime="20210731 21:39:33.011"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:33.025" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:33.026" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:33.012" endtime="20210731 21:39:33.026"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:33.026" endtime="20210731 21:39:33.026"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:33.026" endtime="20210731 21:39:33.026"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:33.012" endtime="20210731 21:39:33.026"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:33.012" endtime="20210731 21:39:33.026"/>
</for>
<status status="FAIL" starttime="20210731 21:39:33.010" endtime="20210731 21:39:33.027"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:33.009" endtime="20210731 21:39:33.027"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:32.984" endtime="20210731 21:39:33.027"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:33.031" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:33.044" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:33.044" level="INFO">${pids} = 9182
9189
9194</msg>
<status status="PASS" starttime="20210731 21:39:33.028" endtime="20210731 21:39:33.044"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:33.045" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:33.045" endtime="20210731 21:39:33.045"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:33.046" level="INFO">${pids} = ['9182', '9189', '9194']</msg>
<status status="PASS" starttime="20210731 21:39:33.046" endtime="20210731 21:39:33.047"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9182</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:33.059" level="INFO">Running command 'kill 9182 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:33.047" endtime="20210731 21:39:33.060"/>
</kw>
<status status="PASS" starttime="20210731 21:39:33.047" endtime="20210731 21:39:33.060"/>
</iter>
<iter>
<var name="${pid}">9189</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:33.064" level="INFO">Running command 'kill 9189 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:33.061" endtime="20210731 21:39:33.065"/>
</kw>
<status status="PASS" starttime="20210731 21:39:33.060" endtime="20210731 21:39:33.065"/>
</iter>
<iter>
<var name="${pid}">9194</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:33.071" level="INFO">Running command 'kill 9194 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:33.068" endtime="20210731 21:39:33.072"/>
</kw>
<status status="PASS" starttime="20210731 21:39:33.067" endtime="20210731 21:39:33.072"/>
</iter>
<status status="PASS" starttime="20210731 21:39:33.047" endtime="20210731 21:39:33.072"/>
</for>
<status status="PASS" starttime="20210731 21:39:33.046" endtime="20210731 21:39:33.072"/>
</branch>
<status status="PASS" starttime="20210731 21:39:33.046" endtime="20210731 21:39:33.072"/>
</if>
<status status="PASS" starttime="20210731 21:39:33.027" endtime="20210731 21:39:33.072"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB90'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:31.408" endtime="20210731 21:39:33.073">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t77" name="With Each Valid Token, Updating Password Of Each System User With abcdAB90abcdAB90abcdAB Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:33.078" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:33.092" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:33.092" level="INFO">${pids} = 9223</msg>
<status status="PASS" starttime="20210731 21:39:33.075" endtime="20210731 21:39:33.092"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:33.093" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:33.092" endtime="20210731 21:39:33.093"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:33.094" level="INFO">${pids} = ['9223']</msg>
<status status="PASS" starttime="20210731 21:39:33.093" endtime="20210731 21:39:33.094"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9223</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:33.097" level="INFO">Running command 'kill 9223 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:33.094" endtime="20210731 21:39:33.098"/>
</kw>
<status status="PASS" starttime="20210731 21:39:33.094" endtime="20210731 21:39:33.098"/>
</iter>
<status status="PASS" starttime="20210731 21:39:33.094" endtime="20210731 21:39:33.098"/>
</for>
<status status="PASS" starttime="20210731 21:39:33.093" endtime="20210731 21:39:33.098"/>
</branch>
<status status="PASS" starttime="20210731 21:39:33.093" endtime="20210731 21:39:33.098"/>
</if>
<status status="PASS" starttime="20210731 21:39:33.075" endtime="20210731 21:39:33.098"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:33.100" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:33.099" endtime="20210731 21:39:33.100"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:33.100" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:33.100" endtime="20210731 21:39:33.100"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:33.101" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:33.100" endtime="20210731 21:39:33.101"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:33.101" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:33.101" endtime="20210731 21:39:33.101"/>
</kw>
<msg timestamp="20210731 21:39:33.102" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:33.100" endtime="20210731 21:39:33.102"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:33.107" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:33.102" endtime="20210731 21:39:33.109"/>
</kw>
<status status="PASS" starttime="20210731 21:39:33.099" endtime="20210731 21:39:33.109"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:33.111" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:33.110" endtime="20210731 21:39:33.115"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:34.616" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:33.116" endtime="20210731 21:39:34.617"/>
</kw>
<status status="PASS" starttime="20210731 21:39:33.110" endtime="20210731 21:39:34.617"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:34.618" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:34.618" endtime="20210731 21:39:34.618"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:34.619" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:34.618" endtime="20210731 21:39:34.619"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:34.619" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:34.619" endtime="20210731 21:39:34.619"/>
</kw>
<msg timestamp="20210731 21:39:34.619" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:34.618" endtime="20210731 21:39:34.620"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:34.620" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:34.620" endtime="20210731 21:39:34.620"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.617" endtime="20210731 21:39:34.621"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:34.621" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:34.621" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:34.621" endtime="20210731 21:39:34.622"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.621" endtime="20210731 21:39:34.622"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:34.623" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:34.623" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:34.622" endtime="20210731 21:39:34.623"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:34.623" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:34.623" endtime="20210731 21:39:34.623"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:34.624" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:34.624" endtime="20210731 21:39:34.624"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:34.624" endtime="20210731 21:39:34.625"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:34.625" endtime="20210731 21:39:34.625"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.624" endtime="20210731 21:39:34.626"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:34.626" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:34.626" endtime="20210731 21:39:34.626"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:34.626" endtime="20210731 21:39:34.627"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:34.627" endtime="20210731 21:39:34.627"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.626" endtime="20210731 21:39:34.627"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:34.628" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:34.628" endtime="20210731 21:39:34.628"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:34.628" endtime="20210731 21:39:34.629"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:34.629" endtime="20210731 21:39:34.629"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.627" endtime="20210731 21:39:34.629"/>
</iter>
<status status="PASS" starttime="20210731 21:39:34.623" endtime="20210731 21:39:34.629"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:34.630" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:34.629" endtime="20210731 21:39:34.630"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.622" endtime="20210731 21:39:34.630"/>
</kw>
<status status="PASS" starttime="20210731 21:39:33.074" endtime="20210731 21:39:34.630"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:34.631" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:34.631" endtime="20210731 21:39:34.631"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:34.632" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210731 21:39:34.632" endtime="20210731 21:39:34.632"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:34.642" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:34.643" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:34.632" endtime="20210731 21:39:34.643"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:34.643" endtime="20210731 21:39:34.643"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:34.643" endtime="20210731 21:39:34.643"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:34.632" endtime="20210731 21:39:34.643"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:34.632" endtime="20210731 21:39:34.643"/>
</for>
<status status="FAIL" starttime="20210731 21:39:34.631" endtime="20210731 21:39:34.644"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:34.630" endtime="20210731 21:39:34.644"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:34.645" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:34.645" endtime="20210731 21:39:34.645"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:34.646" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210731 21:39:34.645" endtime="20210731 21:39:34.646"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:34.654" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:34.656" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:34.646" endtime="20210731 21:39:34.656"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:34.657" endtime="20210731 21:39:34.657"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:34.657" endtime="20210731 21:39:34.657"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:34.646" endtime="20210731 21:39:34.657"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:34.646" endtime="20210731 21:39:34.657"/>
</for>
<status status="FAIL" starttime="20210731 21:39:34.644" endtime="20210731 21:39:34.658"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:34.644" endtime="20210731 21:39:34.658"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:34.659" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:34.659" endtime="20210731 21:39:34.659"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:34.660" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210731 21:39:34.659" endtime="20210731 21:39:34.660"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:34.674" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:34.675" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:34.660" endtime="20210731 21:39:34.675"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:34.675" endtime="20210731 21:39:34.675"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:34.675" endtime="20210731 21:39:34.675"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:34.660" endtime="20210731 21:39:34.675"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:34.660" endtime="20210731 21:39:34.675"/>
</for>
<status status="FAIL" starttime="20210731 21:39:34.658" endtime="20210731 21:39:34.675"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:34.658" endtime="20210731 21:39:34.675"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:34.630" endtime="20210731 21:39:34.676"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:34.680" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:34.693" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:34.693" level="INFO">${pids} = 9246
9253
9257</msg>
<status status="PASS" starttime="20210731 21:39:34.677" endtime="20210731 21:39:34.694"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:34.695" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:34.694" endtime="20210731 21:39:34.695"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:34.695" level="INFO">${pids} = ['9246', '9253', '9257']</msg>
<status status="PASS" starttime="20210731 21:39:34.695" endtime="20210731 21:39:34.695"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9246</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:34.699" level="INFO">Running command 'kill 9246 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:34.696" endtime="20210731 21:39:34.700"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.696" endtime="20210731 21:39:34.700"/>
</iter>
<iter>
<var name="${pid}">9253</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:34.703" level="INFO">Running command 'kill 9253 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:34.701" endtime="20210731 21:39:34.704"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.700" endtime="20210731 21:39:34.704"/>
</iter>
<iter>
<var name="${pid}">9257</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:34.716" level="INFO">Running command 'kill 9257 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:34.705" endtime="20210731 21:39:34.716"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.705" endtime="20210731 21:39:34.717"/>
</iter>
<status status="PASS" starttime="20210731 21:39:34.696" endtime="20210731 21:39:34.717"/>
</for>
<status status="PASS" starttime="20210731 21:39:34.695" endtime="20210731 21:39:34.717"/>
</branch>
<status status="PASS" starttime="20210731 21:39:34.695" endtime="20210731 21:39:34.717"/>
</if>
<status status="PASS" starttime="20210731 21:39:34.676" endtime="20210731 21:39:34.717"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB90abcdAB90abcdAB'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:33.073" endtime="20210731 21:39:34.717">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t78" name="With Each Valid Token, Updating Password Of Each System User With ABCabc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:34.729" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:34.742" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:34.743" level="INFO">${pids} = 9286</msg>
<status status="PASS" starttime="20210731 21:39:34.720" endtime="20210731 21:39:34.743"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:34.744" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:34.743" endtime="20210731 21:39:34.744"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:34.744" level="INFO">${pids} = ['9286']</msg>
<status status="PASS" starttime="20210731 21:39:34.744" endtime="20210731 21:39:34.744"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9286</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:34.748" level="INFO">Running command 'kill 9286 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:34.745" endtime="20210731 21:39:34.749"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.745" endtime="20210731 21:39:34.749"/>
</iter>
<status status="PASS" starttime="20210731 21:39:34.745" endtime="20210731 21:39:34.749"/>
</for>
<status status="PASS" starttime="20210731 21:39:34.744" endtime="20210731 21:39:34.749"/>
</branch>
<status status="PASS" starttime="20210731 21:39:34.744" endtime="20210731 21:39:34.749"/>
</if>
<status status="PASS" starttime="20210731 21:39:34.719" endtime="20210731 21:39:34.749"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:34.750" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:34.750" endtime="20210731 21:39:34.750"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:34.751" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:34.751" endtime="20210731 21:39:34.751"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:34.752" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:34.752" endtime="20210731 21:39:34.752"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:34.752" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:34.752" endtime="20210731 21:39:34.752"/>
</kw>
<msg timestamp="20210731 21:39:34.753" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:34.751" endtime="20210731 21:39:34.753"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:34.770" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:34.753" endtime="20210731 21:39:34.774"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.749" endtime="20210731 21:39:34.775"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:34.776" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:34.776" endtime="20210731 21:39:34.803"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:36.304" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:34.803" endtime="20210731 21:39:36.304"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.775" endtime="20210731 21:39:36.304"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:36.306" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:36.306" endtime="20210731 21:39:36.306"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:36.306" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:36.306" endtime="20210731 21:39:36.306"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:36.307" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:36.307" endtime="20210731 21:39:36.307"/>
</kw>
<msg timestamp="20210731 21:39:36.307" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:36.305" endtime="20210731 21:39:36.307"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:36.308" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:36.307" endtime="20210731 21:39:36.308"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.305" endtime="20210731 21:39:36.308"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:36.309" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:36.309" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:36.309" endtime="20210731 21:39:36.309"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.308" endtime="20210731 21:39:36.309"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:36.311" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:36.311" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:36.310" endtime="20210731 21:39:36.311"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:36.311" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:36.311" endtime="20210731 21:39:36.311"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:36.312" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:36.312" endtime="20210731 21:39:36.312"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:36.312" endtime="20210731 21:39:36.313"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:36.313" endtime="20210731 21:39:36.313"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.311" endtime="20210731 21:39:36.313"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:36.314" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:36.314" endtime="20210731 21:39:36.314"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:36.314" endtime="20210731 21:39:36.315"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:36.315" endtime="20210731 21:39:36.315"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.313" endtime="20210731 21:39:36.315"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:36.316" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:36.315" endtime="20210731 21:39:36.316"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:36.316" endtime="20210731 21:39:36.317"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:36.317" endtime="20210731 21:39:36.317"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.315" endtime="20210731 21:39:36.317"/>
</iter>
<status status="PASS" starttime="20210731 21:39:36.311" endtime="20210731 21:39:36.317"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:36.318" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:36.317" endtime="20210731 21:39:36.318"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.310" endtime="20210731 21:39:36.318"/>
</kw>
<status status="PASS" starttime="20210731 21:39:34.719" endtime="20210731 21:39:36.318"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:36.320" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:36.319" endtime="20210731 21:39:36.320"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:36.320" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210731 21:39:36.320" endtime="20210731 21:39:36.320"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:36.333" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:36.333" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:36.321" endtime="20210731 21:39:36.333"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:36.334" endtime="20210731 21:39:36.334"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:36.334" endtime="20210731 21:39:36.334"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:36.321" endtime="20210731 21:39:36.334"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:36.321" endtime="20210731 21:39:36.334"/>
</for>
<status status="FAIL" starttime="20210731 21:39:36.319" endtime="20210731 21:39:36.334"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:36.319" endtime="20210731 21:39:36.334"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:36.336" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:36.335" endtime="20210731 21:39:36.336"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:36.336" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210731 21:39:36.336" endtime="20210731 21:39:36.336"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:36.341" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:36.342" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:36.337" endtime="20210731 21:39:36.342"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:36.342" endtime="20210731 21:39:36.342"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:36.342" endtime="20210731 21:39:36.342"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:36.337" endtime="20210731 21:39:36.342"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:36.337" endtime="20210731 21:39:36.342"/>
</for>
<status status="FAIL" starttime="20210731 21:39:36.334" endtime="20210731 21:39:36.342"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:36.334" endtime="20210731 21:39:36.342"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:36.344" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:36.343" endtime="20210731 21:39:36.344"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:36.344" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210731 21:39:36.344" endtime="20210731 21:39:36.344"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:36.359" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:36.359" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:36.345" endtime="20210731 21:39:36.359"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:36.360" endtime="20210731 21:39:36.360"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:36.360" endtime="20210731 21:39:36.360"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:36.344" endtime="20210731 21:39:36.360"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:36.344" endtime="20210731 21:39:36.360"/>
</for>
<status status="FAIL" starttime="20210731 21:39:36.343" endtime="20210731 21:39:36.360"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:36.342" endtime="20210731 21:39:36.360"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:36.318" endtime="20210731 21:39:36.360"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:36.365" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:36.379" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:36.379" level="INFO">${pids} = 9309
9316
9320</msg>
<status status="PASS" starttime="20210731 21:39:36.361" endtime="20210731 21:39:36.379"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:36.380" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:36.380" endtime="20210731 21:39:36.380"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:36.381" level="INFO">${pids} = ['9309', '9316', '9320']</msg>
<status status="PASS" starttime="20210731 21:39:36.381" endtime="20210731 21:39:36.381"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9309</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:36.386" level="INFO">Running command 'kill 9309 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:36.382" endtime="20210731 21:39:36.387"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.382" endtime="20210731 21:39:36.387"/>
</iter>
<iter>
<var name="${pid}">9316</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:36.392" level="INFO">Running command 'kill 9316 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:36.388" endtime="20210731 21:39:36.395"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.388" endtime="20210731 21:39:36.395"/>
</iter>
<iter>
<var name="${pid}">9320</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:36.411" level="INFO">Running command 'kill 9320 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:36.396" endtime="20210731 21:39:36.412"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.396" endtime="20210731 21:39:36.412"/>
</iter>
<status status="PASS" starttime="20210731 21:39:36.381" endtime="20210731 21:39:36.412"/>
</for>
<status status="PASS" starttime="20210731 21:39:36.381" endtime="20210731 21:39:36.412"/>
</branch>
<status status="PASS" starttime="20210731 21:39:36.380" endtime="20210731 21:39:36.412"/>
</if>
<status status="PASS" starttime="20210731 21:39:36.361" endtime="20210731 21:39:36.412"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:34.718" endtime="20210731 21:39:36.413">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t79" name="With Each Valid Token, Updating Password Of Each System User With ABCabc!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:36.418" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:36.431" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:36.431" level="INFO">${pids} = 9349</msg>
<status status="PASS" starttime="20210731 21:39:36.415" endtime="20210731 21:39:36.431"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:36.432" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:36.432" endtime="20210731 21:39:36.432"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:36.433" level="INFO">${pids} = ['9349']</msg>
<status status="PASS" starttime="20210731 21:39:36.433" endtime="20210731 21:39:36.433"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9349</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:36.437" level="INFO">Running command 'kill 9349 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:36.433" endtime="20210731 21:39:36.437"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.433" endtime="20210731 21:39:36.437"/>
</iter>
<status status="PASS" starttime="20210731 21:39:36.433" endtime="20210731 21:39:36.438"/>
</for>
<status status="PASS" starttime="20210731 21:39:36.432" endtime="20210731 21:39:36.438"/>
</branch>
<status status="PASS" starttime="20210731 21:39:36.432" endtime="20210731 21:39:36.438"/>
</if>
<status status="PASS" starttime="20210731 21:39:36.415" endtime="20210731 21:39:36.438"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:36.439" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:36.439" endtime="20210731 21:39:36.439"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:36.440" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:36.440" endtime="20210731 21:39:36.440"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:36.440" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:36.440" endtime="20210731 21:39:36.440"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:36.441" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:36.441" endtime="20210731 21:39:36.441"/>
</kw>
<msg timestamp="20210731 21:39:36.441" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:36.439" endtime="20210731 21:39:36.441"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:36.447" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:36.441" endtime="20210731 21:39:36.449"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.438" endtime="20210731 21:39:36.449"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:36.451" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:36.450" endtime="20210731 21:39:36.456"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:37.957" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:36.456" endtime="20210731 21:39:37.957"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.450" endtime="20210731 21:39:37.957"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:37.959" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:37.959" endtime="20210731 21:39:37.959"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:37.959" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:37.959" endtime="20210731 21:39:37.960"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:37.961" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:37.960" endtime="20210731 21:39:37.961"/>
</kw>
<msg timestamp="20210731 21:39:37.961" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:37.958" endtime="20210731 21:39:37.961"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:37.962" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:37.961" endtime="20210731 21:39:37.962"/>
</kw>
<status status="PASS" starttime="20210731 21:39:37.958" endtime="20210731 21:39:37.962"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:37.963" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:37.963" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:37.963" endtime="20210731 21:39:37.963"/>
</kw>
<status status="PASS" starttime="20210731 21:39:37.963" endtime="20210731 21:39:37.964"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:37.965" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:37.965" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:37.964" endtime="20210731 21:39:37.965"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:37.965" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:37.965" endtime="20210731 21:39:37.965"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:37.966" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:37.966" endtime="20210731 21:39:37.966"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:37.966" endtime="20210731 21:39:37.967"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:37.967" endtime="20210731 21:39:37.968"/>
</kw>
<status status="PASS" starttime="20210731 21:39:37.966" endtime="20210731 21:39:37.968"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:37.968" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:37.968" endtime="20210731 21:39:37.968"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:37.968" endtime="20210731 21:39:37.969"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:37.969" endtime="20210731 21:39:37.970"/>
</kw>
<status status="PASS" starttime="20210731 21:39:37.968" endtime="20210731 21:39:37.970"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:37.970" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:37.970" endtime="20210731 21:39:37.970"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:37.970" endtime="20210731 21:39:37.971"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:37.971" endtime="20210731 21:39:37.972"/>
</kw>
<status status="PASS" starttime="20210731 21:39:37.970" endtime="20210731 21:39:37.972"/>
</iter>
<status status="PASS" starttime="20210731 21:39:37.965" endtime="20210731 21:39:37.972"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:37.972" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:37.972" endtime="20210731 21:39:37.973"/>
</kw>
<status status="PASS" starttime="20210731 21:39:37.964" endtime="20210731 21:39:37.973"/>
</kw>
<status status="PASS" starttime="20210731 21:39:36.414" endtime="20210731 21:39:37.973"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:37.974" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:37.974" endtime="20210731 21:39:37.974"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:37.975" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210731 21:39:37.974" endtime="20210731 21:39:37.975"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:37.986" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:37.986" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:37.975" endtime="20210731 21:39:37.986"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:37.986" endtime="20210731 21:39:37.986"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:37.986" endtime="20210731 21:39:37.986"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:37.975" endtime="20210731 21:39:37.987"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:37.975" endtime="20210731 21:39:37.987"/>
</for>
<status status="FAIL" starttime="20210731 21:39:37.973" endtime="20210731 21:39:37.987"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:37.973" endtime="20210731 21:39:37.987"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:37.988" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:37.988" endtime="20210731 21:39:37.988"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:37.989" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210731 21:39:37.988" endtime="20210731 21:39:37.989"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:37.994" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:37.994" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:37.989" endtime="20210731 21:39:37.994"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:37.995" endtime="20210731 21:39:37.995"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:37.995" endtime="20210731 21:39:37.995"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:37.989" endtime="20210731 21:39:37.995"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:37.989" endtime="20210731 21:39:37.995"/>
</for>
<status status="FAIL" starttime="20210731 21:39:37.987" endtime="20210731 21:39:37.995"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:37.987" endtime="20210731 21:39:37.995"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:37.996" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:37.996" endtime="20210731 21:39:37.996"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:37.997" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210731 21:39:37.996" endtime="20210731 21:39:37.997"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:38.003" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:38.003" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:37.997" endtime="20210731 21:39:38.003"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:38.004" endtime="20210731 21:39:38.004"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:38.004" endtime="20210731 21:39:38.004"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:37.997" endtime="20210731 21:39:38.004"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:37.997" endtime="20210731 21:39:38.004"/>
</for>
<status status="FAIL" starttime="20210731 21:39:37.995" endtime="20210731 21:39:38.004"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:37.995" endtime="20210731 21:39:38.004"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:37.973" endtime="20210731 21:39:38.004"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:38.024" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:38.035" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:38.035" level="INFO">${pids} = 9372
9379
9392</msg>
<status status="PASS" starttime="20210731 21:39:38.014" endtime="20210731 21:39:38.035"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:38.036" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:38.036" endtime="20210731 21:39:38.036"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:38.037" level="INFO">${pids} = ['9372', '9379', '9392']</msg>
<status status="PASS" starttime="20210731 21:39:38.037" endtime="20210731 21:39:38.037"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9372</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:38.041" level="INFO">Running command 'kill 9372 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:38.038" endtime="20210731 21:39:38.042"/>
</kw>
<status status="PASS" starttime="20210731 21:39:38.038" endtime="20210731 21:39:38.042"/>
</iter>
<iter>
<var name="${pid}">9379</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:38.046" level="INFO">Running command 'kill 9379 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:38.043" endtime="20210731 21:39:38.046"/>
</kw>
<status status="PASS" starttime="20210731 21:39:38.042" endtime="20210731 21:39:38.046"/>
</iter>
<iter>
<var name="${pid}">9392</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:38.062" level="INFO">Running command 'kill 9392 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:38.047" endtime="20210731 21:39:38.062"/>
</kw>
<status status="PASS" starttime="20210731 21:39:38.047" endtime="20210731 21:39:38.062"/>
</iter>
<status status="PASS" starttime="20210731 21:39:38.037" endtime="20210731 21:39:38.062"/>
</for>
<status status="PASS" starttime="20210731 21:39:38.037" endtime="20210731 21:39:38.063"/>
</branch>
<status status="PASS" starttime="20210731 21:39:38.037" endtime="20210731 21:39:38.063"/>
</if>
<status status="PASS" starttime="20210731 21:39:38.005" endtime="20210731 21:39:38.063"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:36.413" endtime="20210731 21:39:38.063">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t80" name="With Each Valid Token, Updating Password Of Each System User With ABCabc!?ABCabc!?ABCab. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:38.069" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:38.081" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:38.081" level="INFO">${pids} = 9421</msg>
<status status="PASS" starttime="20210731 21:39:38.065" endtime="20210731 21:39:38.081"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:38.082" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:38.081" endtime="20210731 21:39:38.082"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:38.083" level="INFO">${pids} = ['9421']</msg>
<status status="PASS" starttime="20210731 21:39:38.082" endtime="20210731 21:39:38.083"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9421</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:38.087" level="INFO">Running command 'kill 9421 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:38.083" endtime="20210731 21:39:38.087"/>
</kw>
<status status="PASS" starttime="20210731 21:39:38.083" endtime="20210731 21:39:38.087"/>
</iter>
<status status="PASS" starttime="20210731 21:39:38.083" endtime="20210731 21:39:38.087"/>
</for>
<status status="PASS" starttime="20210731 21:39:38.082" endtime="20210731 21:39:38.087"/>
</branch>
<status status="PASS" starttime="20210731 21:39:38.082" endtime="20210731 21:39:38.087"/>
</if>
<status status="PASS" starttime="20210731 21:39:38.065" endtime="20210731 21:39:38.088"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:38.089" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:38.089" endtime="20210731 21:39:38.089"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:38.090" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:38.090" endtime="20210731 21:39:38.090"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:38.091" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:38.090" endtime="20210731 21:39:38.091"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:38.091" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:38.091" endtime="20210731 21:39:38.091"/>
</kw>
<msg timestamp="20210731 21:39:38.091" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:38.089" endtime="20210731 21:39:38.091"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:38.097" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:38.092" endtime="20210731 21:39:38.099"/>
</kw>
<status status="PASS" starttime="20210731 21:39:38.088" endtime="20210731 21:39:38.099"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:38.100" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:38.100" endtime="20210731 21:39:38.105"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:39.606" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:38.105" endtime="20210731 21:39:39.606"/>
</kw>
<status status="PASS" starttime="20210731 21:39:38.099" endtime="20210731 21:39:39.606"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:39.608" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:39.607" endtime="20210731 21:39:39.608"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:39.608" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:39.608" endtime="20210731 21:39:39.608"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:39.608" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:39.608" endtime="20210731 21:39:39.608"/>
</kw>
<msg timestamp="20210731 21:39:39.609" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:39.607" endtime="20210731 21:39:39.609"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:39.609" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:39.609" endtime="20210731 21:39:39.610"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.607" endtime="20210731 21:39:39.610"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:39.610" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:39.610" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:39.610" endtime="20210731 21:39:39.611"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.610" endtime="20210731 21:39:39.611"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:39.612" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:39.612" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:39.611" endtime="20210731 21:39:39.612"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:39.612" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:39.612" endtime="20210731 21:39:39.612"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:39.613" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:39.612" endtime="20210731 21:39:39.613"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:39.613" endtime="20210731 21:39:39.621"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:39.621" endtime="20210731 21:39:39.622"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.612" endtime="20210731 21:39:39.622"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:39.622" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:39.622" endtime="20210731 21:39:39.622"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:39.622" endtime="20210731 21:39:39.623"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:39.623" endtime="20210731 21:39:39.624"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.622" endtime="20210731 21:39:39.624"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:39.624" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:39.624" endtime="20210731 21:39:39.629"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:39.630" endtime="20210731 21:39:39.631"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:39.631" endtime="20210731 21:39:39.631"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.624" endtime="20210731 21:39:39.631"/>
</iter>
<status status="PASS" starttime="20210731 21:39:39.612" endtime="20210731 21:39:39.631"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:39.632" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:39.631" endtime="20210731 21:39:39.632"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.611" endtime="20210731 21:39:39.632"/>
</kw>
<status status="PASS" starttime="20210731 21:39:38.065" endtime="20210731 21:39:39.632"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:39.636" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:39.636" endtime="20210731 21:39:39.636"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:39.637" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210731 21:39:39.636" endtime="20210731 21:39:39.637"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:39.652" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:39.652" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:39.637" endtime="20210731 21:39:39.652"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:39.652" endtime="20210731 21:39:39.652"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:39.652" endtime="20210731 21:39:39.652"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:39.637" endtime="20210731 21:39:39.652"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:39.637" endtime="20210731 21:39:39.653"/>
</for>
<status status="FAIL" starttime="20210731 21:39:39.635" endtime="20210731 21:39:39.653"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:39.635" endtime="20210731 21:39:39.653"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:39.654" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:39.654" endtime="20210731 21:39:39.654"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:39.655" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210731 21:39:39.654" endtime="20210731 21:39:39.655"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:39.676" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:39.676" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:39.655" endtime="20210731 21:39:39.676"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:39.676" endtime="20210731 21:39:39.676"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:39.676" endtime="20210731 21:39:39.676"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:39.655" endtime="20210731 21:39:39.676"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:39.655" endtime="20210731 21:39:39.677"/>
</for>
<status status="FAIL" starttime="20210731 21:39:39.653" endtime="20210731 21:39:39.677"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:39.653" endtime="20210731 21:39:39.677"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:39.678" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:39.678" endtime="20210731 21:39:39.678"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:39.679" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210731 21:39:39.678" endtime="20210731 21:39:39.679"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:39.684" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:39.684" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:39.680" endtime="20210731 21:39:39.684"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:39.684" endtime="20210731 21:39:39.684"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:39.684" endtime="20210731 21:39:39.685"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:39.679" endtime="20210731 21:39:39.685"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:39.679" endtime="20210731 21:39:39.685"/>
</for>
<status status="FAIL" starttime="20210731 21:39:39.677" endtime="20210731 21:39:39.685"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:39.677" endtime="20210731 21:39:39.685"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:39.635" endtime="20210731 21:39:39.685"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:39.691" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:39.704" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:39.704" level="INFO">${pids} = 9444
9451
9455</msg>
<status status="PASS" starttime="20210731 21:39:39.686" endtime="20210731 21:39:39.704"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:39.705" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:39.704" endtime="20210731 21:39:39.705"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:39.706" level="INFO">${pids} = ['9444', '9451', '9455']</msg>
<status status="PASS" starttime="20210731 21:39:39.705" endtime="20210731 21:39:39.706"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9444</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:39.721" level="INFO">Running command 'kill 9444 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:39.706" endtime="20210731 21:39:39.722"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.706" endtime="20210731 21:39:39.722"/>
</iter>
<iter>
<var name="${pid}">9451</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:39.726" level="INFO">Running command 'kill 9451 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:39.723" endtime="20210731 21:39:39.726"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.722" endtime="20210731 21:39:39.727"/>
</iter>
<iter>
<var name="${pid}">9455</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:39.730" level="INFO">Running command 'kill 9455 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:39.727" endtime="20210731 21:39:39.731"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.727" endtime="20210731 21:39:39.731"/>
</iter>
<status status="PASS" starttime="20210731 21:39:39.706" endtime="20210731 21:39:39.731"/>
</for>
<status status="PASS" starttime="20210731 21:39:39.705" endtime="20210731 21:39:39.731"/>
</branch>
<status status="PASS" starttime="20210731 21:39:39.705" endtime="20210731 21:39:39.731"/>
</if>
<status status="PASS" starttime="20210731 21:39:39.685" endtime="20210731 21:39:39.731"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!?ABCabc!?ABCab.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:38.064" endtime="20210731 21:39:39.732">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t81" name="With Each Valid Token, Updating Password Of Each System User With abc012. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:39.738" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:39.751" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:39.751" level="INFO">${pids} = 9484</msg>
<status status="PASS" starttime="20210731 21:39:39.734" endtime="20210731 21:39:39.751"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:39.752" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:39.751" endtime="20210731 21:39:39.752"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:39.753" level="INFO">${pids} = ['9484']</msg>
<status status="PASS" starttime="20210731 21:39:39.752" endtime="20210731 21:39:39.753"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9484</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:39.757" level="INFO">Running command 'kill 9484 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:39.753" endtime="20210731 21:39:39.757"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.753" endtime="20210731 21:39:39.757"/>
</iter>
<status status="PASS" starttime="20210731 21:39:39.753" endtime="20210731 21:39:39.757"/>
</for>
<status status="PASS" starttime="20210731 21:39:39.752" endtime="20210731 21:39:39.757"/>
</branch>
<status status="PASS" starttime="20210731 21:39:39.752" endtime="20210731 21:39:39.757"/>
</if>
<status status="PASS" starttime="20210731 21:39:39.734" endtime="20210731 21:39:39.758"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:39.759" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:39.759" endtime="20210731 21:39:39.759"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:39.760" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:39.759" endtime="20210731 21:39:39.760"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:39.760" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:39.760" endtime="20210731 21:39:39.760"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:39.761" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:39.760" endtime="20210731 21:39:39.761"/>
</kw>
<msg timestamp="20210731 21:39:39.761" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:39.759" endtime="20210731 21:39:39.761"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:39.766" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:39.761" endtime="20210731 21:39:39.768"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.758" endtime="20210731 21:39:39.768"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:39.770" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:39.769" endtime="20210731 21:39:39.775"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:41.276" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:39.775" endtime="20210731 21:39:41.276"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.769" endtime="20210731 21:39:41.276"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:41.278" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:41.277" endtime="20210731 21:39:41.278"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:41.278" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:41.278" endtime="20210731 21:39:41.278"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:41.279" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:41.278" endtime="20210731 21:39:41.279"/>
</kw>
<msg timestamp="20210731 21:39:41.279" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:41.277" endtime="20210731 21:39:41.279"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:41.279" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:41.279" endtime="20210731 21:39:41.280"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.276" endtime="20210731 21:39:41.280"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:41.280" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:41.280" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:41.280" endtime="20210731 21:39:41.281"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.280" endtime="20210731 21:39:41.281"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:41.282" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:41.282" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:41.281" endtime="20210731 21:39:41.282"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:41.282" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:41.282" endtime="20210731 21:39:41.282"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:41.283" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:41.283" endtime="20210731 21:39:41.283"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:41.283" endtime="20210731 21:39:41.284"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:41.284" endtime="20210731 21:39:41.285"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.283" endtime="20210731 21:39:41.285"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:41.285" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:41.285" endtime="20210731 21:39:41.285"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:41.285" endtime="20210731 21:39:41.286"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:41.286" endtime="20210731 21:39:41.287"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.285" endtime="20210731 21:39:41.287"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:41.287" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:41.287" endtime="20210731 21:39:41.287"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:41.287" endtime="20210731 21:39:41.288"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:41.288" endtime="20210731 21:39:41.288"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.287" endtime="20210731 21:39:41.289"/>
</iter>
<status status="PASS" starttime="20210731 21:39:41.283" endtime="20210731 21:39:41.289"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:41.289" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:41.289" endtime="20210731 21:39:41.289"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.281" endtime="20210731 21:39:41.289"/>
</kw>
<status status="PASS" starttime="20210731 21:39:39.734" endtime="20210731 21:39:41.289"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:41.291" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:41.290" endtime="20210731 21:39:41.291"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:41.291" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210731 21:39:41.291" endtime="20210731 21:39:41.291"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:41.304" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:41.304" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:41.292" endtime="20210731 21:39:41.304"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:41.304" endtime="20210731 21:39:41.304"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:41.304" endtime="20210731 21:39:41.305"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:41.292" endtime="20210731 21:39:41.305"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:41.291" endtime="20210731 21:39:41.305"/>
</for>
<status status="FAIL" starttime="20210731 21:39:41.290" endtime="20210731 21:39:41.305"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:41.290" endtime="20210731 21:39:41.305"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:41.306" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:41.306" endtime="20210731 21:39:41.306"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:41.307" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210731 21:39:41.306" endtime="20210731 21:39:41.307"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:41.311" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:41.312" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:41.307" endtime="20210731 21:39:41.312"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:41.312" endtime="20210731 21:39:41.312"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:41.312" endtime="20210731 21:39:41.312"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:41.307" endtime="20210731 21:39:41.312"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:41.307" endtime="20210731 21:39:41.312"/>
</for>
<status status="FAIL" starttime="20210731 21:39:41.305" endtime="20210731 21:39:41.312"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:41.305" endtime="20210731 21:39:41.312"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:41.313" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:41.313" endtime="20210731 21:39:41.314"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:41.314" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210731 21:39:41.314" endtime="20210731 21:39:41.314"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:41.320" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:41.320" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:41.314" endtime="20210731 21:39:41.320"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:41.333" endtime="20210731 21:39:41.333"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:41.333" endtime="20210731 21:39:41.333"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:41.314" endtime="20210731 21:39:41.333"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:41.314" endtime="20210731 21:39:41.333"/>
</for>
<status status="FAIL" starttime="20210731 21:39:41.312" endtime="20210731 21:39:41.335"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:41.312" endtime="20210731 21:39:41.335"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:41.290" endtime="20210731 21:39:41.335"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:41.340" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:41.351" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:41.351" level="INFO">${pids} = 9507
9514
9519</msg>
<status status="PASS" starttime="20210731 21:39:41.337" endtime="20210731 21:39:41.351"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:41.352" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:41.351" endtime="20210731 21:39:41.352"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:41.353" level="INFO">${pids} = ['9507', '9514', '9519']</msg>
<status status="PASS" starttime="20210731 21:39:41.353" endtime="20210731 21:39:41.353"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9507</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:41.357" level="INFO">Running command 'kill 9507 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:41.354" endtime="20210731 21:39:41.358"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.353" endtime="20210731 21:39:41.358"/>
</iter>
<iter>
<var name="${pid}">9514</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:41.361" level="INFO">Running command 'kill 9514 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:41.358" endtime="20210731 21:39:41.362"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.358" endtime="20210731 21:39:41.362"/>
</iter>
<iter>
<var name="${pid}">9519</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:41.366" level="INFO">Running command 'kill 9519 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:41.362" endtime="20210731 21:39:41.367"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.362" endtime="20210731 21:39:41.367"/>
</iter>
<status status="PASS" starttime="20210731 21:39:41.353" endtime="20210731 21:39:41.367"/>
</for>
<status status="PASS" starttime="20210731 21:39:41.352" endtime="20210731 21:39:41.367"/>
</branch>
<status status="PASS" starttime="20210731 21:39:41.352" endtime="20210731 21:39:41.367"/>
</if>
<status status="PASS" starttime="20210731 21:39:41.336" endtime="20210731 21:39:41.367"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:39.733" endtime="20210731 21:39:41.367">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t82" name="With Each Valid Token, Updating Password Of Each System User With abc012!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:41.384" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:41.406" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:41.406" level="INFO">${pids} = 9549</msg>
<status status="PASS" starttime="20210731 21:39:41.370" endtime="20210731 21:39:41.406"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:41.407" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:41.407" endtime="20210731 21:39:41.407"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:41.408" level="INFO">${pids} = ['9549']</msg>
<status status="PASS" starttime="20210731 21:39:41.408" endtime="20210731 21:39:41.408"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9549</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:41.418" level="INFO">Running command 'kill 9549 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:41.408" endtime="20210731 21:39:41.419"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.408" endtime="20210731 21:39:41.419"/>
</iter>
<status status="PASS" starttime="20210731 21:39:41.408" endtime="20210731 21:39:41.419"/>
</for>
<status status="PASS" starttime="20210731 21:39:41.407" endtime="20210731 21:39:41.419"/>
</branch>
<status status="PASS" starttime="20210731 21:39:41.407" endtime="20210731 21:39:41.419"/>
</if>
<status status="PASS" starttime="20210731 21:39:41.369" endtime="20210731 21:39:41.419"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:41.421" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:41.420" endtime="20210731 21:39:41.421"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:41.422" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:41.422" endtime="20210731 21:39:41.422"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:41.422" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:41.422" endtime="20210731 21:39:41.422"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:41.423" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:41.422" endtime="20210731 21:39:41.423"/>
</kw>
<msg timestamp="20210731 21:39:41.423" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:41.421" endtime="20210731 21:39:41.423"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:41.426" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:41.423" endtime="20210731 21:39:41.428"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.420" endtime="20210731 21:39:41.428"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:41.430" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:41.429" endtime="20210731 21:39:41.434"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:42.935" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:41.434" endtime="20210731 21:39:42.935"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.429" endtime="20210731 21:39:42.936"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:42.937" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:42.937" endtime="20210731 21:39:42.937"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:42.938" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:42.937" endtime="20210731 21:39:42.938"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:42.938" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:42.938" endtime="20210731 21:39:42.938"/>
</kw>
<msg timestamp="20210731 21:39:42.938" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:42.936" endtime="20210731 21:39:42.939"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:42.939" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:42.939" endtime="20210731 21:39:42.940"/>
</kw>
<status status="PASS" starttime="20210731 21:39:42.936" endtime="20210731 21:39:42.940"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:42.940" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:42.940" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:42.940" endtime="20210731 21:39:42.941"/>
</kw>
<status status="PASS" starttime="20210731 21:39:42.940" endtime="20210731 21:39:42.941"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:42.942" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:42.942" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:42.941" endtime="20210731 21:39:42.942"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:42.942" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:42.942" endtime="20210731 21:39:42.942"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:42.943" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:42.943" endtime="20210731 21:39:42.943"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:42.943" endtime="20210731 21:39:42.944"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:42.944" endtime="20210731 21:39:42.945"/>
</kw>
<status status="PASS" starttime="20210731 21:39:42.943" endtime="20210731 21:39:42.945"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:42.945" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:42.945" endtime="20210731 21:39:42.945"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:42.946" endtime="20210731 21:39:42.947"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:42.947" endtime="20210731 21:39:42.947"/>
</kw>
<status status="PASS" starttime="20210731 21:39:42.945" endtime="20210731 21:39:42.947"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:42.948" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:42.947" endtime="20210731 21:39:42.948"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:42.948" endtime="20210731 21:39:42.949"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:42.949" endtime="20210731 21:39:42.949"/>
</kw>
<status status="PASS" starttime="20210731 21:39:42.947" endtime="20210731 21:39:42.949"/>
</iter>
<status status="PASS" starttime="20210731 21:39:42.943" endtime="20210731 21:39:42.949"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:42.950" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:42.949" endtime="20210731 21:39:42.950"/>
</kw>
<status status="PASS" starttime="20210731 21:39:42.941" endtime="20210731 21:39:42.950"/>
</kw>
<status status="PASS" starttime="20210731 21:39:41.369" endtime="20210731 21:39:42.950"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:42.952" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:42.952" endtime="20210731 21:39:42.952"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:42.953" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210731 21:39:42.952" endtime="20210731 21:39:42.953"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:42.970" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:42.970" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:42.953" endtime="20210731 21:39:42.970"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:42.970" endtime="20210731 21:39:42.970"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:42.970" endtime="20210731 21:39:42.971"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:42.953" endtime="20210731 21:39:42.971"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:42.953" endtime="20210731 21:39:42.971"/>
</for>
<status status="FAIL" starttime="20210731 21:39:42.951" endtime="20210731 21:39:42.971"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:42.951" endtime="20210731 21:39:42.971"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:42.972" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:42.972" endtime="20210731 21:39:42.972"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:42.973" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210731 21:39:42.972" endtime="20210731 21:39:42.973"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:42.980" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:42.980" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:42.973" endtime="20210731 21:39:42.980"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:42.980" endtime="20210731 21:39:42.980"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:42.980" endtime="20210731 21:39:42.980"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:42.973" endtime="20210731 21:39:42.980"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:42.973" endtime="20210731 21:39:42.980"/>
</for>
<status status="FAIL" starttime="20210731 21:39:42.971" endtime="20210731 21:39:42.981"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:42.971" endtime="20210731 21:39:42.981"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:42.982" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:42.982" endtime="20210731 21:39:42.982"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:42.983" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210731 21:39:42.982" endtime="20210731 21:39:42.983"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:42.997" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:42.997" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:42.984" endtime="20210731 21:39:42.997"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:42.998" endtime="20210731 21:39:42.998"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:42.998" endtime="20210731 21:39:42.998"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:42.984" endtime="20210731 21:39:42.998"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:42.984" endtime="20210731 21:39:42.998"/>
</for>
<status status="FAIL" starttime="20210731 21:39:42.981" endtime="20210731 21:39:42.998"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:42.981" endtime="20210731 21:39:42.998"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:42.950" endtime="20210731 21:39:42.998"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:43.004" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:43.015" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:43.015" level="INFO">${pids} = 9572
9579
9586</msg>
<status status="PASS" starttime="20210731 21:39:43.000" endtime="20210731 21:39:43.015"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:43.016" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:43.015" endtime="20210731 21:39:43.016"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:43.017" level="INFO">${pids} = ['9572', '9579', '9586']</msg>
<status status="PASS" starttime="20210731 21:39:43.016" endtime="20210731 21:39:43.017"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9572</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:43.020" level="INFO">Running command 'kill 9572 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:43.017" endtime="20210731 21:39:43.021"/>
</kw>
<status status="PASS" starttime="20210731 21:39:43.017" endtime="20210731 21:39:43.021"/>
</iter>
<iter>
<var name="${pid}">9579</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:43.024" level="INFO">Running command 'kill 9579 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:43.022" endtime="20210731 21:39:43.027"/>
</kw>
<status status="PASS" starttime="20210731 21:39:43.021" endtime="20210731 21:39:43.028"/>
</iter>
<iter>
<var name="${pid}">9586</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:43.042" level="INFO">Running command 'kill 9586 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:43.028" endtime="20210731 21:39:43.042"/>
</kw>
<status status="PASS" starttime="20210731 21:39:43.028" endtime="20210731 21:39:43.042"/>
</iter>
<status status="PASS" starttime="20210731 21:39:43.017" endtime="20210731 21:39:43.042"/>
</for>
<status status="PASS" starttime="20210731 21:39:43.016" endtime="20210731 21:39:43.042"/>
</branch>
<status status="PASS" starttime="20210731 21:39:43.016" endtime="20210731 21:39:43.043"/>
</if>
<status status="PASS" starttime="20210731 21:39:42.999" endtime="20210731 21:39:43.043"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:41.368" endtime="20210731 21:39:43.043">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t83" name="With Each Valid Token, Updating Password Of Each System User With abc012!?abc012!?abc012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:43.048" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:43.060" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:43.060" level="INFO">${pids} = 9615</msg>
<status status="PASS" starttime="20210731 21:39:43.045" endtime="20210731 21:39:43.060"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:43.061" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:43.061" endtime="20210731 21:39:43.062"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:43.062" level="INFO">${pids} = ['9615']</msg>
<status status="PASS" starttime="20210731 21:39:43.062" endtime="20210731 21:39:43.062"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9615</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:43.066" level="INFO">Running command 'kill 9615 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:43.063" endtime="20210731 21:39:43.066"/>
</kw>
<status status="PASS" starttime="20210731 21:39:43.063" endtime="20210731 21:39:43.066"/>
</iter>
<status status="PASS" starttime="20210731 21:39:43.062" endtime="20210731 21:39:43.066"/>
</for>
<status status="PASS" starttime="20210731 21:39:43.062" endtime="20210731 21:39:43.066"/>
</branch>
<status status="PASS" starttime="20210731 21:39:43.062" endtime="20210731 21:39:43.066"/>
</if>
<status status="PASS" starttime="20210731 21:39:43.045" endtime="20210731 21:39:43.067"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:43.068" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:43.067" endtime="20210731 21:39:43.068"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:43.069" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:43.068" endtime="20210731 21:39:43.069"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:43.069" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:43.069" endtime="20210731 21:39:43.069"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:43.070" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:43.069" endtime="20210731 21:39:43.070"/>
</kw>
<msg timestamp="20210731 21:39:43.070" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:43.068" endtime="20210731 21:39:43.070"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:43.078" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:43.074" endtime="20210731 21:39:43.079"/>
</kw>
<status status="PASS" starttime="20210731 21:39:43.067" endtime="20210731 21:39:43.080"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:43.081" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:43.081" endtime="20210731 21:39:43.085"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:44.586" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:43.086" endtime="20210731 21:39:44.586"/>
</kw>
<status status="PASS" starttime="20210731 21:39:43.080" endtime="20210731 21:39:44.587"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:44.588" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:44.588" endtime="20210731 21:39:44.588"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:44.589" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:44.588" endtime="20210731 21:39:44.589"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:44.589" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:44.589" endtime="20210731 21:39:44.589"/>
</kw>
<msg timestamp="20210731 21:39:44.589" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:44.587" endtime="20210731 21:39:44.589"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:44.590" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:44.590" endtime="20210731 21:39:44.591"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.587" endtime="20210731 21:39:44.591"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:44.591" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:44.591" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:44.591" endtime="20210731 21:39:44.592"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.591" endtime="20210731 21:39:44.592"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:44.593" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:44.593" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:44.592" endtime="20210731 21:39:44.593"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:44.593" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:44.593" endtime="20210731 21:39:44.594"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:44.594" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:44.594" endtime="20210731 21:39:44.594"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:44.594" endtime="20210731 21:39:44.595"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:44.595" endtime="20210731 21:39:44.596"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.594" endtime="20210731 21:39:44.596"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:44.596" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:44.596" endtime="20210731 21:39:44.596"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:44.597" endtime="20210731 21:39:44.597"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:44.598" endtime="20210731 21:39:44.598"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.596" endtime="20210731 21:39:44.598"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:44.598" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:44.598" endtime="20210731 21:39:44.598"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:44.599" endtime="20210731 21:39:44.599"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:44.600" endtime="20210731 21:39:44.600"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.598" endtime="20210731 21:39:44.600"/>
</iter>
<status status="PASS" starttime="20210731 21:39:44.594" endtime="20210731 21:39:44.600"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:44.601" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:44.600" endtime="20210731 21:39:44.601"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.592" endtime="20210731 21:39:44.601"/>
</kw>
<status status="PASS" starttime="20210731 21:39:43.045" endtime="20210731 21:39:44.601"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:44.603" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:44.602" endtime="20210731 21:39:44.603"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:44.603" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210731 21:39:44.603" endtime="20210731 21:39:44.603"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:44.615" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:44.616" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:44.603" endtime="20210731 21:39:44.616"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:44.616" endtime="20210731 21:39:44.616"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:44.616" endtime="20210731 21:39:44.616"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:44.603" endtime="20210731 21:39:44.616"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:44.603" endtime="20210731 21:39:44.616"/>
</for>
<status status="FAIL" starttime="20210731 21:39:44.602" endtime="20210731 21:39:44.616"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:44.601" endtime="20210731 21:39:44.617"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:44.618" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:44.618" endtime="20210731 21:39:44.618"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:44.619" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210731 21:39:44.618" endtime="20210731 21:39:44.619"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:44.624" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:44.624" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:44.619" endtime="20210731 21:39:44.624"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:44.624" endtime="20210731 21:39:44.624"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:44.624" endtime="20210731 21:39:44.624"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:44.619" endtime="20210731 21:39:44.624"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:44.619" endtime="20210731 21:39:44.624"/>
</for>
<status status="FAIL" starttime="20210731 21:39:44.617" endtime="20210731 21:39:44.625"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:44.617" endtime="20210731 21:39:44.625"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:44.626" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:44.626" endtime="20210731 21:39:44.626"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:44.626" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210731 21:39:44.626" endtime="20210731 21:39:44.627"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:44.648" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:44.648" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:44.627" endtime="20210731 21:39:44.648"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:44.648" endtime="20210731 21:39:44.648"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:44.648" endtime="20210731 21:39:44.648"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:44.627" endtime="20210731 21:39:44.648"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:44.627" endtime="20210731 21:39:44.648"/>
</for>
<status status="FAIL" starttime="20210731 21:39:44.625" endtime="20210731 21:39:44.649"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:44.625" endtime="20210731 21:39:44.649"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:44.601" endtime="20210731 21:39:44.649"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:44.656" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:44.668" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:44.668" level="INFO">${pids} = 9638
9645
9649</msg>
<status status="PASS" starttime="20210731 21:39:44.650" endtime="20210731 21:39:44.668"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:44.669" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:44.669" endtime="20210731 21:39:44.669"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:44.670" level="INFO">${pids} = ['9638', '9645', '9649']</msg>
<status status="PASS" starttime="20210731 21:39:44.670" endtime="20210731 21:39:44.670"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9638</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:44.674" level="INFO">Running command 'kill 9638 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:44.671" endtime="20210731 21:39:44.675"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.671" endtime="20210731 21:39:44.675"/>
</iter>
<iter>
<var name="${pid}">9645</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:44.690" level="INFO">Running command 'kill 9645 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:44.676" endtime="20210731 21:39:44.691"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.675" endtime="20210731 21:39:44.691"/>
</iter>
<iter>
<var name="${pid}">9649</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:44.694" level="INFO">Running command 'kill 9649 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:44.691" endtime="20210731 21:39:44.695"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.691" endtime="20210731 21:39:44.695"/>
</iter>
<status status="PASS" starttime="20210731 21:39:44.670" endtime="20210731 21:39:44.695"/>
</for>
<status status="PASS" starttime="20210731 21:39:44.670" endtime="20210731 21:39:44.695"/>
</branch>
<status status="PASS" starttime="20210731 21:39:44.670" endtime="20210731 21:39:44.695"/>
</if>
<status status="PASS" starttime="20210731 21:39:44.649" endtime="20210731 21:39:44.695"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012!?abc012!?abc012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:43.044" endtime="20210731 21:39:44.696">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t84" name="With Each Valid Token, Updating Password Of Each System User With abc!?.Z Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:44.701" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:44.712" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:44.712" level="INFO">${pids} = 9678</msg>
<status status="PASS" starttime="20210731 21:39:44.698" endtime="20210731 21:39:44.713"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:44.714" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:44.713" endtime="20210731 21:39:44.714"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:44.714" level="INFO">${pids} = ['9678']</msg>
<status status="PASS" starttime="20210731 21:39:44.714" endtime="20210731 21:39:44.714"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9678</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:44.718" level="INFO">Running command 'kill 9678 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:44.715" endtime="20210731 21:39:44.719"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.715" endtime="20210731 21:39:44.719"/>
</iter>
<status status="PASS" starttime="20210731 21:39:44.715" endtime="20210731 21:39:44.719"/>
</for>
<status status="PASS" starttime="20210731 21:39:44.714" endtime="20210731 21:39:44.719"/>
</branch>
<status status="PASS" starttime="20210731 21:39:44.714" endtime="20210731 21:39:44.719"/>
</if>
<status status="PASS" starttime="20210731 21:39:44.697" endtime="20210731 21:39:44.719"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:44.720" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:44.720" endtime="20210731 21:39:44.720"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:44.721" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:44.721" endtime="20210731 21:39:44.721"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:44.722" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:44.721" endtime="20210731 21:39:44.722"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:44.722" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:44.722" endtime="20210731 21:39:44.722"/>
</kw>
<msg timestamp="20210731 21:39:44.722" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:44.720" endtime="20210731 21:39:44.723"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:44.730" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:44.723" endtime="20210731 21:39:44.731"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.719" endtime="20210731 21:39:44.732"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:44.733" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:44.733" endtime="20210731 21:39:44.738"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:46.239" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:44.738" endtime="20210731 21:39:46.239"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.732" endtime="20210731 21:39:46.240"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:46.241" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:46.241" endtime="20210731 21:39:46.241"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:46.241" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:46.241" endtime="20210731 21:39:46.241"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:46.242" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:46.242" endtime="20210731 21:39:46.242"/>
</kw>
<msg timestamp="20210731 21:39:46.242" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:46.240" endtime="20210731 21:39:46.242"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:46.243" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:46.242" endtime="20210731 21:39:46.243"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.240" endtime="20210731 21:39:46.243"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:46.244" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:46.244" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:46.244" endtime="20210731 21:39:46.244"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.244" endtime="20210731 21:39:46.244"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:46.246" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:46.246" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:46.245" endtime="20210731 21:39:46.246"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:46.246" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:46.246" endtime="20210731 21:39:46.246"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:46.247" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:46.247" endtime="20210731 21:39:46.247"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:46.247" endtime="20210731 21:39:46.248"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:46.248" endtime="20210731 21:39:46.248"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.247" endtime="20210731 21:39:46.248"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:46.249" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:46.249" endtime="20210731 21:39:46.249"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:46.249" endtime="20210731 21:39:46.250"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:46.250" endtime="20210731 21:39:46.250"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.249" endtime="20210731 21:39:46.251"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:46.251" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:46.251" endtime="20210731 21:39:46.251"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:46.251" endtime="20210731 21:39:46.252"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:46.252" endtime="20210731 21:39:46.252"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.251" endtime="20210731 21:39:46.252"/>
</iter>
<status status="PASS" starttime="20210731 21:39:46.246" endtime="20210731 21:39:46.252"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:46.253" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:46.253" endtime="20210731 21:39:46.253"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.245" endtime="20210731 21:39:46.253"/>
</kw>
<status status="PASS" starttime="20210731 21:39:44.697" endtime="20210731 21:39:46.253"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:46.255" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:46.254" endtime="20210731 21:39:46.255"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:46.255" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210731 21:39:46.255" endtime="20210731 21:39:46.255"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:46.267" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:46.267" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:46.256" endtime="20210731 21:39:46.267"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:46.267" endtime="20210731 21:39:46.268"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:46.268" endtime="20210731 21:39:46.268"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:46.256" endtime="20210731 21:39:46.268"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:46.255" endtime="20210731 21:39:46.268"/>
</for>
<status status="FAIL" starttime="20210731 21:39:46.254" endtime="20210731 21:39:46.268"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:46.254" endtime="20210731 21:39:46.268"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:46.269" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:46.269" endtime="20210731 21:39:46.269"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:46.270" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210731 21:39:46.269" endtime="20210731 21:39:46.270"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:46.275" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:46.275" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:46.270" endtime="20210731 21:39:46.275"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:46.275" endtime="20210731 21:39:46.275"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:46.275" endtime="20210731 21:39:46.275"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:46.270" endtime="20210731 21:39:46.275"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:46.270" endtime="20210731 21:39:46.275"/>
</for>
<status status="FAIL" starttime="20210731 21:39:46.268" endtime="20210731 21:39:46.276"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:46.268" endtime="20210731 21:39:46.276"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:46.277" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:46.276" endtime="20210731 21:39:46.277"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:46.277" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210731 21:39:46.277" endtime="20210731 21:39:46.277"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:46.292" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:46.293" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:46.278" endtime="20210731 21:39:46.293"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:46.293" endtime="20210731 21:39:46.293"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:46.293" endtime="20210731 21:39:46.293"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:46.278" endtime="20210731 21:39:46.293"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:46.278" endtime="20210731 21:39:46.293"/>
</for>
<status status="FAIL" starttime="20210731 21:39:46.276" endtime="20210731 21:39:46.294"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:46.276" endtime="20210731 21:39:46.295"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:46.253" endtime="20210731 21:39:46.295"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:46.300" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:46.311" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:46.311" level="INFO">${pids} = 9701
9708
9712</msg>
<status status="PASS" starttime="20210731 21:39:46.296" endtime="20210731 21:39:46.311"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:46.312" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:46.312" endtime="20210731 21:39:46.312"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:46.313" level="INFO">${pids} = ['9701', '9708', '9712']</msg>
<status status="PASS" starttime="20210731 21:39:46.313" endtime="20210731 21:39:46.313"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9701</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:46.318" level="INFO">Running command 'kill 9701 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:46.314" endtime="20210731 21:39:46.318"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.314" endtime="20210731 21:39:46.318"/>
</iter>
<iter>
<var name="${pid}">9708</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:46.322" level="INFO">Running command 'kill 9708 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:46.319" endtime="20210731 21:39:46.322"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.318" endtime="20210731 21:39:46.323"/>
</iter>
<iter>
<var name="${pid}">9712</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:46.326" level="INFO">Running command 'kill 9712 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:46.323" endtime="20210731 21:39:46.327"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.323" endtime="20210731 21:39:46.327"/>
</iter>
<status status="PASS" starttime="20210731 21:39:46.313" endtime="20210731 21:39:46.327"/>
</for>
<status status="PASS" starttime="20210731 21:39:46.313" endtime="20210731 21:39:46.327"/>
</branch>
<status status="PASS" starttime="20210731 21:39:46.312" endtime="20210731 21:39:46.327"/>
</if>
<status status="PASS" starttime="20210731 21:39:46.295" endtime="20210731 21:39:46.327"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.Z'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:44.696" endtime="20210731 21:39:46.327">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t85" name="With Each Valid Token, Updating Password Of Each System User With abc!?.ZA Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:46.342" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:46.354" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:46.354" level="INFO">${pids} = 9741</msg>
<status status="PASS" starttime="20210731 21:39:46.330" endtime="20210731 21:39:46.354"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:46.355" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:46.355" endtime="20210731 21:39:46.355"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:46.356" level="INFO">${pids} = ['9741']</msg>
<status status="PASS" starttime="20210731 21:39:46.356" endtime="20210731 21:39:46.356"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9741</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:46.360" level="INFO">Running command 'kill 9741 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:46.357" endtime="20210731 21:39:46.360"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.357" endtime="20210731 21:39:46.361"/>
</iter>
<status status="PASS" starttime="20210731 21:39:46.356" endtime="20210731 21:39:46.361"/>
</for>
<status status="PASS" starttime="20210731 21:39:46.356" endtime="20210731 21:39:46.361"/>
</branch>
<status status="PASS" starttime="20210731 21:39:46.355" endtime="20210731 21:39:46.361"/>
</if>
<status status="PASS" starttime="20210731 21:39:46.330" endtime="20210731 21:39:46.361"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:46.362" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:46.362" endtime="20210731 21:39:46.362"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:46.363" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:46.363" endtime="20210731 21:39:46.363"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:46.363" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:46.363" endtime="20210731 21:39:46.363"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:46.364" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:46.364" endtime="20210731 21:39:46.364"/>
</kw>
<msg timestamp="20210731 21:39:46.364" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:46.362" endtime="20210731 21:39:46.364"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:46.394" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:46.367" endtime="20210731 21:39:46.396"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.361" endtime="20210731 21:39:46.397"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:46.398" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:46.398" endtime="20210731 21:39:46.403"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:47.904" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:46.403" endtime="20210731 21:39:47.904"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.397" endtime="20210731 21:39:47.904"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:47.906" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:47.906" endtime="20210731 21:39:47.906"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:47.906" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:47.906" endtime="20210731 21:39:47.906"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:47.907" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:47.906" endtime="20210731 21:39:47.907"/>
</kw>
<msg timestamp="20210731 21:39:47.907" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:47.905" endtime="20210731 21:39:47.907"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:47.908" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:47.907" endtime="20210731 21:39:47.909"/>
</kw>
<status status="PASS" starttime="20210731 21:39:47.905" endtime="20210731 21:39:47.909"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:47.909" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:47.909" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:47.909" endtime="20210731 21:39:47.910"/>
</kw>
<status status="PASS" starttime="20210731 21:39:47.909" endtime="20210731 21:39:47.910"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:47.911" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:47.911" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:47.910" endtime="20210731 21:39:47.911"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:47.911" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:47.911" endtime="20210731 21:39:47.911"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:47.912" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:47.912" endtime="20210731 21:39:47.912"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:47.912" endtime="20210731 21:39:47.913"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:47.913" endtime="20210731 21:39:47.914"/>
</kw>
<status status="PASS" starttime="20210731 21:39:47.912" endtime="20210731 21:39:47.914"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:47.914" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:47.914" endtime="20210731 21:39:47.914"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:47.914" endtime="20210731 21:39:47.915"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:47.915" endtime="20210731 21:39:47.916"/>
</kw>
<status status="PASS" starttime="20210731 21:39:47.914" endtime="20210731 21:39:47.916"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:47.916" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:47.916" endtime="20210731 21:39:47.916"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:47.916" endtime="20210731 21:39:47.917"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:47.917" endtime="20210731 21:39:47.918"/>
</kw>
<status status="PASS" starttime="20210731 21:39:47.916" endtime="20210731 21:39:47.918"/>
</iter>
<status status="PASS" starttime="20210731 21:39:47.911" endtime="20210731 21:39:47.918"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:47.918" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:47.918" endtime="20210731 21:39:47.918"/>
</kw>
<status status="PASS" starttime="20210731 21:39:47.910" endtime="20210731 21:39:47.918"/>
</kw>
<status status="PASS" starttime="20210731 21:39:46.329" endtime="20210731 21:39:47.918"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:47.920" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:47.919" endtime="20210731 21:39:47.920"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:47.920" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210731 21:39:47.920" endtime="20210731 21:39:47.920"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:47.933" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:47.933" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:47.921" endtime="20210731 21:39:47.933"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:47.933" endtime="20210731 21:39:47.933"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:47.934" endtime="20210731 21:39:47.934"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:47.921" endtime="20210731 21:39:47.934"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:47.921" endtime="20210731 21:39:47.934"/>
</for>
<status status="FAIL" starttime="20210731 21:39:47.919" endtime="20210731 21:39:47.934"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:47.919" endtime="20210731 21:39:47.934"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:47.935" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:47.935" endtime="20210731 21:39:47.935"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:47.936" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210731 21:39:47.935" endtime="20210731 21:39:47.936"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:47.941" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:47.941" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:47.936" endtime="20210731 21:39:47.941"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:47.941" endtime="20210731 21:39:47.941"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:47.941" endtime="20210731 21:39:47.941"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:47.936" endtime="20210731 21:39:47.941"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:47.936" endtime="20210731 21:39:47.941"/>
</for>
<status status="FAIL" starttime="20210731 21:39:47.934" endtime="20210731 21:39:47.942"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:47.934" endtime="20210731 21:39:47.942"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:47.943" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:47.943" endtime="20210731 21:39:47.943"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:47.943" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210731 21:39:47.943" endtime="20210731 21:39:47.943"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:47.951" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:47.951" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:47.944" endtime="20210731 21:39:47.952"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:47.952" endtime="20210731 21:39:47.952"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:47.952" endtime="20210731 21:39:47.952"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:47.944" endtime="20210731 21:39:47.952"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:47.944" endtime="20210731 21:39:47.952"/>
</for>
<status status="FAIL" starttime="20210731 21:39:47.942" endtime="20210731 21:39:47.952"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:47.942" endtime="20210731 21:39:47.952"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:47.919" endtime="20210731 21:39:47.952"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:47.970" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:47.992" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:47.992" level="INFO">${pids} = 9764
9771
9776</msg>
<status status="PASS" starttime="20210731 21:39:47.954" endtime="20210731 21:39:47.992"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:47.993" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:47.993" endtime="20210731 21:39:47.993"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:47.994" level="INFO">${pids} = ['9764', '9771', '9776']</msg>
<status status="PASS" starttime="20210731 21:39:47.994" endtime="20210731 21:39:47.994"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9764</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:47.998" level="INFO">Running command 'kill 9764 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:47.995" endtime="20210731 21:39:47.998"/>
</kw>
<status status="PASS" starttime="20210731 21:39:47.994" endtime="20210731 21:39:47.998"/>
</iter>
<iter>
<var name="${pid}">9771</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:48.002" level="INFO">Running command 'kill 9771 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:47.999" endtime="20210731 21:39:48.003"/>
</kw>
<status status="PASS" starttime="20210731 21:39:47.999" endtime="20210731 21:39:48.003"/>
</iter>
<iter>
<var name="${pid}">9776</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:48.007" level="INFO">Running command 'kill 9776 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:48.003" endtime="20210731 21:39:48.008"/>
</kw>
<status status="PASS" starttime="20210731 21:39:48.003" endtime="20210731 21:39:48.008"/>
</iter>
<status status="PASS" starttime="20210731 21:39:47.994" endtime="20210731 21:39:48.008"/>
</for>
<status status="PASS" starttime="20210731 21:39:47.994" endtime="20210731 21:39:48.008"/>
</branch>
<status status="PASS" starttime="20210731 21:39:47.993" endtime="20210731 21:39:48.008"/>
</if>
<status status="PASS" starttime="20210731 21:39:47.953" endtime="20210731 21:39:48.008"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.ZA'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:46.328" endtime="20210731 21:39:48.009">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t86" name="With Each Valid Token, Updating Password Of Each System User With abc!?.ZAabc!?.ZAabc!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:48.015" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:48.029" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:48.029" level="INFO">${pids} = 9805</msg>
<status status="PASS" starttime="20210731 21:39:48.011" endtime="20210731 21:39:48.029"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:48.030" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:48.029" endtime="20210731 21:39:48.030"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:48.031" level="INFO">${pids} = ['9805']</msg>
<status status="PASS" starttime="20210731 21:39:48.030" endtime="20210731 21:39:48.031"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9805</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:48.035" level="INFO">Running command 'kill 9805 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:48.031" endtime="20210731 21:39:48.035"/>
</kw>
<status status="PASS" starttime="20210731 21:39:48.031" endtime="20210731 21:39:48.035"/>
</iter>
<status status="PASS" starttime="20210731 21:39:48.031" endtime="20210731 21:39:48.035"/>
</for>
<status status="PASS" starttime="20210731 21:39:48.030" endtime="20210731 21:39:48.035"/>
</branch>
<status status="PASS" starttime="20210731 21:39:48.030" endtime="20210731 21:39:48.035"/>
</if>
<status status="PASS" starttime="20210731 21:39:48.011" endtime="20210731 21:39:48.036"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:48.038" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:48.037" endtime="20210731 21:39:48.038"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:48.039" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:48.038" endtime="20210731 21:39:48.039"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:48.039" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:48.039" endtime="20210731 21:39:48.039"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:48.040" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:48.039" endtime="20210731 21:39:48.040"/>
</kw>
<msg timestamp="20210731 21:39:48.040" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:48.038" endtime="20210731 21:39:48.040"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:48.044" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:48.040" endtime="20210731 21:39:48.045"/>
</kw>
<status status="PASS" starttime="20210731 21:39:48.036" endtime="20210731 21:39:48.046"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:48.047" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:48.047" endtime="20210731 21:39:48.051"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:49.552" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:48.051" endtime="20210731 21:39:49.552"/>
</kw>
<status status="PASS" starttime="20210731 21:39:48.046" endtime="20210731 21:39:49.553"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:49.554" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:49.554" endtime="20210731 21:39:49.554"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:49.555" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:49.554" endtime="20210731 21:39:49.555"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:49.555" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:49.555" endtime="20210731 21:39:49.555"/>
</kw>
<msg timestamp="20210731 21:39:49.555" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:49.553" endtime="20210731 21:39:49.555"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:49.556" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:49.556" endtime="20210731 21:39:49.557"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.553" endtime="20210731 21:39:49.557"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:49.557" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:49.557" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:49.557" endtime="20210731 21:39:49.558"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.557" endtime="20210731 21:39:49.558"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:49.559" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:49.559" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:49.558" endtime="20210731 21:39:49.559"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:49.559" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:49.559" endtime="20210731 21:39:49.559"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:49.560" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:49.560" endtime="20210731 21:39:49.560"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:49.560" endtime="20210731 21:39:49.561"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:49.561" endtime="20210731 21:39:49.561"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.560" endtime="20210731 21:39:49.561"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:49.562" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:49.562" endtime="20210731 21:39:49.562"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:49.562" endtime="20210731 21:39:49.563"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:49.563" endtime="20210731 21:39:49.563"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.562" endtime="20210731 21:39:49.563"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:49.564" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:49.564" endtime="20210731 21:39:49.564"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:49.564" endtime="20210731 21:39:49.565"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:49.565" endtime="20210731 21:39:49.565"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.564" endtime="20210731 21:39:49.565"/>
</iter>
<status status="PASS" starttime="20210731 21:39:49.559" endtime="20210731 21:39:49.566"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:49.566" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:49.566" endtime="20210731 21:39:49.566"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.558" endtime="20210731 21:39:49.566"/>
</kw>
<status status="PASS" starttime="20210731 21:39:48.010" endtime="20210731 21:39:49.566"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:49.568" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:49.567" endtime="20210731 21:39:49.568"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:49.568" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:49.568" endtime="20210731 21:39:49.568"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:49.581" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:49.581" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:49.569" endtime="20210731 21:39:49.581"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:49.582" endtime="20210731 21:39:49.582"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:49.582" endtime="20210731 21:39:49.582"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:49.568" endtime="20210731 21:39:49.582"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:49.568" endtime="20210731 21:39:49.582"/>
</for>
<status status="FAIL" starttime="20210731 21:39:49.567" endtime="20210731 21:39:49.582"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:49.567" endtime="20210731 21:39:49.582"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:49.583" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:49.583" endtime="20210731 21:39:49.584"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:49.584" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:49.584" endtime="20210731 21:39:49.584"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:49.589" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:49.589" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:49.584" endtime="20210731 21:39:49.589"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:49.589" endtime="20210731 21:39:49.589"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:49.590" endtime="20210731 21:39:49.590"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:49.584" endtime="20210731 21:39:49.590"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:49.584" endtime="20210731 21:39:49.590"/>
</for>
<status status="FAIL" starttime="20210731 21:39:49.582" endtime="20210731 21:39:49.590"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:49.582" endtime="20210731 21:39:49.590"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:49.591" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:49.591" endtime="20210731 21:39:49.591"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:49.592" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:49.591" endtime="20210731 21:39:49.592"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:49.610" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:49.611" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:49.592" endtime="20210731 21:39:49.611"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:49.611" endtime="20210731 21:39:49.611"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:49.611" endtime="20210731 21:39:49.611"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:49.592" endtime="20210731 21:39:49.611"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:49.592" endtime="20210731 21:39:49.612"/>
</for>
<status status="FAIL" starttime="20210731 21:39:49.590" endtime="20210731 21:39:49.612"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:49.590" endtime="20210731 21:39:49.612"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:49.566" endtime="20210731 21:39:49.612"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:49.619" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:49.638" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:49.638" level="INFO">${pids} = 9828
9835
9839</msg>
<status status="PASS" starttime="20210731 21:39:49.613" endtime="20210731 21:39:49.638"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:49.640" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:49.639" endtime="20210731 21:39:49.640"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:49.641" level="INFO">${pids} = ['9828', '9835', '9839']</msg>
<status status="PASS" starttime="20210731 21:39:49.640" endtime="20210731 21:39:49.641"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9828</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:49.646" level="INFO">Running command 'kill 9828 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:49.641" endtime="20210731 21:39:49.646"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.641" endtime="20210731 21:39:49.646"/>
</iter>
<iter>
<var name="${pid}">9835</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:49.650" level="INFO">Running command 'kill 9835 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:49.647" endtime="20210731 21:39:49.651"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.646" endtime="20210731 21:39:49.651"/>
</iter>
<iter>
<var name="${pid}">9839</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:49.657" level="INFO">Running command 'kill 9839 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:49.652" endtime="20210731 21:39:49.657"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.651" endtime="20210731 21:39:49.657"/>
</iter>
<status status="PASS" starttime="20210731 21:39:49.641" endtime="20210731 21:39:49.657"/>
</for>
<status status="PASS" starttime="20210731 21:39:49.640" endtime="20210731 21:39:49.657"/>
</branch>
<status status="PASS" starttime="20210731 21:39:49.640" endtime="20210731 21:39:49.657"/>
</if>
<status status="PASS" starttime="20210731 21:39:49.612" endtime="20210731 21:39:49.658"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.ZAabc!?.ZAabc!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:48.009" endtime="20210731 21:39:49.658">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t87" name="With Each Valid Token, Updating Password Of Each System User With abc!?.6 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:49.664" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:49.678" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:49.678" level="INFO">${pids} = 9868</msg>
<status status="PASS" starttime="20210731 21:39:49.660" endtime="20210731 21:39:49.678"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:49.679" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:49.679" endtime="20210731 21:39:49.679"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:49.680" level="INFO">${pids} = ['9868']</msg>
<status status="PASS" starttime="20210731 21:39:49.680" endtime="20210731 21:39:49.680"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9868</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:49.683" level="INFO">Running command 'kill 9868 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:49.680" endtime="20210731 21:39:49.684"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.680" endtime="20210731 21:39:49.684"/>
</iter>
<status status="PASS" starttime="20210731 21:39:49.680" endtime="20210731 21:39:49.684"/>
</for>
<status status="PASS" starttime="20210731 21:39:49.679" endtime="20210731 21:39:49.684"/>
</branch>
<status status="PASS" starttime="20210731 21:39:49.679" endtime="20210731 21:39:49.684"/>
</if>
<status status="PASS" starttime="20210731 21:39:49.660" endtime="20210731 21:39:49.684"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:49.686" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:49.685" endtime="20210731 21:39:49.686"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:49.687" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:49.686" endtime="20210731 21:39:49.687"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:49.687" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:49.687" endtime="20210731 21:39:49.687"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:49.688" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:49.687" endtime="20210731 21:39:49.688"/>
</kw>
<msg timestamp="20210731 21:39:49.688" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:49.686" endtime="20210731 21:39:49.688"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:49.693" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:49.688" endtime="20210731 21:39:49.695"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.685" endtime="20210731 21:39:49.695"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:49.696" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:49.696" endtime="20210731 21:39:49.701"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:51.202" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:49.701" endtime="20210731 21:39:51.202"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.695" endtime="20210731 21:39:51.202"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:51.204" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:51.203" endtime="20210731 21:39:51.204"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:51.204" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:51.204" endtime="20210731 21:39:51.204"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:51.205" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:51.204" endtime="20210731 21:39:51.205"/>
</kw>
<msg timestamp="20210731 21:39:51.205" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:51.203" endtime="20210731 21:39:51.205"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:51.206" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:51.205" endtime="20210731 21:39:51.206"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.203" endtime="20210731 21:39:51.206"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:51.207" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:51.207" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:51.207" endtime="20210731 21:39:51.207"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.206" endtime="20210731 21:39:51.207"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:51.208" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:51.208" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:51.208" endtime="20210731 21:39:51.209"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:51.209" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:51.209" endtime="20210731 21:39:51.209"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:51.210" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:51.209" endtime="20210731 21:39:51.210"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:51.210" endtime="20210731 21:39:51.211"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:51.211" endtime="20210731 21:39:51.211"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.209" endtime="20210731 21:39:51.211"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:51.211" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:51.211" endtime="20210731 21:39:51.211"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:51.212" endtime="20210731 21:39:51.212"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:51.212" endtime="20210731 21:39:51.213"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.211" endtime="20210731 21:39:51.213"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:51.213" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:51.213" endtime="20210731 21:39:51.213"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:51.213" endtime="20210731 21:39:51.214"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:51.214" endtime="20210731 21:39:51.215"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.213" endtime="20210731 21:39:51.215"/>
</iter>
<status status="PASS" starttime="20210731 21:39:51.209" endtime="20210731 21:39:51.215"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:51.215" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:51.215" endtime="20210731 21:39:51.215"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.207" endtime="20210731 21:39:51.215"/>
</kw>
<status status="PASS" starttime="20210731 21:39:49.659" endtime="20210731 21:39:51.215"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:51.217" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:51.217" endtime="20210731 21:39:51.217"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:51.217" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210731 21:39:51.217" endtime="20210731 21:39:51.217"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:51.231" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:51.231" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:51.218" endtime="20210731 21:39:51.231"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:51.231" endtime="20210731 21:39:51.231"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:51.231" endtime="20210731 21:39:51.231"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:51.218" endtime="20210731 21:39:51.231"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:51.218" endtime="20210731 21:39:51.232"/>
</for>
<status status="FAIL" starttime="20210731 21:39:51.216" endtime="20210731 21:39:51.232"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:51.216" endtime="20210731 21:39:51.232"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:51.233" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:51.233" endtime="20210731 21:39:51.233"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:51.234" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210731 21:39:51.233" endtime="20210731 21:39:51.234"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:51.239" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:51.239" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:51.234" endtime="20210731 21:39:51.239"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:51.239" endtime="20210731 21:39:51.239"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:51.239" endtime="20210731 21:39:51.239"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:51.234" endtime="20210731 21:39:51.239"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:51.234" endtime="20210731 21:39:51.240"/>
</for>
<status status="FAIL" starttime="20210731 21:39:51.232" endtime="20210731 21:39:51.240"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:51.232" endtime="20210731 21:39:51.240"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:51.241" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:51.241" endtime="20210731 21:39:51.241"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:51.242" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210731 21:39:51.241" endtime="20210731 21:39:51.242"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:51.247" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:51.247" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:51.242" endtime="20210731 21:39:51.247"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:51.248" endtime="20210731 21:39:51.248"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:51.248" endtime="20210731 21:39:51.248"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:51.242" endtime="20210731 21:39:51.248"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:51.242" endtime="20210731 21:39:51.248"/>
</for>
<status status="FAIL" starttime="20210731 21:39:51.240" endtime="20210731 21:39:51.248"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:51.240" endtime="20210731 21:39:51.248"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:51.216" endtime="20210731 21:39:51.248"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:51.265" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:51.280" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:51.280" level="INFO">${pids} = 9891
9898
9902</msg>
<status status="PASS" starttime="20210731 21:39:51.249" endtime="20210731 21:39:51.280"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:51.281" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:51.280" endtime="20210731 21:39:51.281"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:51.282" level="INFO">${pids} = ['9891', '9898', '9902']</msg>
<status status="PASS" starttime="20210731 21:39:51.282" endtime="20210731 21:39:51.282"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9891</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:51.296" level="INFO">Running command 'kill 9891 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:51.283" endtime="20210731 21:39:51.296"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.282" endtime="20210731 21:39:51.296"/>
</iter>
<iter>
<var name="${pid}">9898</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:51.301" level="INFO">Running command 'kill 9898 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:51.297" endtime="20210731 21:39:51.301"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.297" endtime="20210731 21:39:51.301"/>
</iter>
<iter>
<var name="${pid}">9902</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:51.306" level="INFO">Running command 'kill 9902 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:51.302" endtime="20210731 21:39:51.307"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.302" endtime="20210731 21:39:51.307"/>
</iter>
<status status="PASS" starttime="20210731 21:39:51.282" endtime="20210731 21:39:51.307"/>
</for>
<status status="PASS" starttime="20210731 21:39:51.281" endtime="20210731 21:39:51.307"/>
</branch>
<status status="PASS" starttime="20210731 21:39:51.281" endtime="20210731 21:39:51.307"/>
</if>
<status status="PASS" starttime="20210731 21:39:51.249" endtime="20210731 21:39:51.307"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.6'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:49.659" endtime="20210731 21:39:51.308">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t88" name="With Each Valid Token, Updating Password Of Each System User With abc!?.67 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:51.313" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:51.328" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:51.329" level="INFO">${pids} = 9931</msg>
<status status="PASS" starttime="20210731 21:39:51.310" endtime="20210731 21:39:51.329"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:51.330" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:51.329" endtime="20210731 21:39:51.330"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:51.330" level="INFO">${pids} = ['9931']</msg>
<status status="PASS" starttime="20210731 21:39:51.330" endtime="20210731 21:39:51.330"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9931</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:51.334" level="INFO">Running command 'kill 9931 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:51.331" endtime="20210731 21:39:51.335"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.331" endtime="20210731 21:39:51.335"/>
</iter>
<status status="PASS" starttime="20210731 21:39:51.331" endtime="20210731 21:39:51.335"/>
</for>
<status status="PASS" starttime="20210731 21:39:51.330" endtime="20210731 21:39:51.335"/>
</branch>
<status status="PASS" starttime="20210731 21:39:51.330" endtime="20210731 21:39:51.335"/>
</if>
<status status="PASS" starttime="20210731 21:39:51.310" endtime="20210731 21:39:51.336"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:51.337" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:51.337" endtime="20210731 21:39:51.337"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:51.338" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:51.338" endtime="20210731 21:39:51.338"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:51.339" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:51.339" endtime="20210731 21:39:51.339"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:51.339" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:51.339" endtime="20210731 21:39:51.339"/>
</kw>
<msg timestamp="20210731 21:39:51.340" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:51.337" endtime="20210731 21:39:51.340"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:51.343" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:51.340" endtime="20210731 21:39:51.345"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.336" endtime="20210731 21:39:51.345"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:51.347" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:51.346" endtime="20210731 21:39:51.351"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:52.852" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:51.351" endtime="20210731 21:39:52.852"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.346" endtime="20210731 21:39:52.852"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:52.854" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:52.854" endtime="20210731 21:39:52.854"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:52.854" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:52.854" endtime="20210731 21:39:52.854"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:52.855" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:52.855" endtime="20210731 21:39:52.855"/>
</kw>
<msg timestamp="20210731 21:39:52.855" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:52.853" endtime="20210731 21:39:52.855"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:52.856" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:52.855" endtime="20210731 21:39:52.856"/>
</kw>
<status status="PASS" starttime="20210731 21:39:52.853" endtime="20210731 21:39:52.856"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:52.857" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:52.857" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:52.857" endtime="20210731 21:39:52.857"/>
</kw>
<status status="PASS" starttime="20210731 21:39:52.857" endtime="20210731 21:39:52.858"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:52.859" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:52.859" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:52.858" endtime="20210731 21:39:52.859"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:52.859" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:52.859" endtime="20210731 21:39:52.859"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:52.860" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:52.859" endtime="20210731 21:39:52.860"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:52.860" endtime="20210731 21:39:52.861"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:52.861" endtime="20210731 21:39:52.861"/>
</kw>
<status status="PASS" starttime="20210731 21:39:52.859" endtime="20210731 21:39:52.861"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:52.862" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:52.862" endtime="20210731 21:39:52.862"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:52.862" endtime="20210731 21:39:52.863"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:52.863" endtime="20210731 21:39:52.863"/>
</kw>
<status status="PASS" starttime="20210731 21:39:52.861" endtime="20210731 21:39:52.863"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:52.864" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:52.863" endtime="20210731 21:39:52.864"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:52.864" endtime="20210731 21:39:52.865"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:52.865" endtime="20210731 21:39:52.865"/>
</kw>
<status status="PASS" starttime="20210731 21:39:52.863" endtime="20210731 21:39:52.865"/>
</iter>
<status status="PASS" starttime="20210731 21:39:52.859" endtime="20210731 21:39:52.865"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:52.866" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:52.865" endtime="20210731 21:39:52.866"/>
</kw>
<status status="PASS" starttime="20210731 21:39:52.858" endtime="20210731 21:39:52.866"/>
</kw>
<status status="PASS" starttime="20210731 21:39:51.309" endtime="20210731 21:39:52.866"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:52.867" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:52.867" endtime="20210731 21:39:52.867"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:52.868" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210731 21:39:52.868" endtime="20210731 21:39:52.868"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:52.879" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:52.879" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:52.868" endtime="20210731 21:39:52.879"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:52.880" endtime="20210731 21:39:52.880"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:52.880" endtime="20210731 21:39:52.880"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:52.868" endtime="20210731 21:39:52.880"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:52.868" endtime="20210731 21:39:52.880"/>
</for>
<status status="FAIL" starttime="20210731 21:39:52.866" endtime="20210731 21:39:52.880"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:52.866" endtime="20210731 21:39:52.880"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:52.881" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:52.881" endtime="20210731 21:39:52.881"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:52.882" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210731 21:39:52.881" endtime="20210731 21:39:52.882"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:52.886" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:52.887" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:52.882" endtime="20210731 21:39:52.887"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:52.887" endtime="20210731 21:39:52.887"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:52.887" endtime="20210731 21:39:52.887"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:52.882" endtime="20210731 21:39:52.887"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:52.882" endtime="20210731 21:39:52.887"/>
</for>
<status status="FAIL" starttime="20210731 21:39:52.880" endtime="20210731 21:39:52.887"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:52.880" endtime="20210731 21:39:52.887"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:52.888" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:52.888" endtime="20210731 21:39:52.889"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:52.889" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210731 21:39:52.889" endtime="20210731 21:39:52.889"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:52.895" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:52.895" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:52.890" endtime="20210731 21:39:52.895"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:52.895" endtime="20210731 21:39:52.895"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:52.895" endtime="20210731 21:39:52.895"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:52.889" endtime="20210731 21:39:52.895"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:52.889" endtime="20210731 21:39:52.895"/>
</for>
<status status="FAIL" starttime="20210731 21:39:52.887" endtime="20210731 21:39:52.896"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:52.887" endtime="20210731 21:39:52.896"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:52.866" endtime="20210731 21:39:52.896"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:52.912" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:52.923" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:52.923" level="INFO">${pids} = 9954
9961
9966</msg>
<status status="PASS" starttime="20210731 21:39:52.897" endtime="20210731 21:39:52.923"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:52.925" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:52.924" endtime="20210731 21:39:52.925"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:52.925" level="INFO">${pids} = ['9954', '9961', '9966']</msg>
<status status="PASS" starttime="20210731 21:39:52.925" endtime="20210731 21:39:52.926"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9954</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:52.932" level="INFO">Running command 'kill 9954 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:52.926" endtime="20210731 21:39:52.932"/>
</kw>
<status status="PASS" starttime="20210731 21:39:52.926" endtime="20210731 21:39:52.932"/>
</iter>
<iter>
<var name="${pid}">9961</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:52.943" level="INFO">Running command 'kill 9961 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:52.933" endtime="20210731 21:39:52.944"/>
</kw>
<status status="PASS" starttime="20210731 21:39:52.932" endtime="20210731 21:39:52.944"/>
</iter>
<iter>
<var name="${pid}">9966</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:52.948" level="INFO">Running command 'kill 9966 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:52.945" endtime="20210731 21:39:52.948"/>
</kw>
<status status="PASS" starttime="20210731 21:39:52.944" endtime="20210731 21:39:52.948"/>
</iter>
<status status="PASS" starttime="20210731 21:39:52.926" endtime="20210731 21:39:52.948"/>
</for>
<status status="PASS" starttime="20210731 21:39:52.925" endtime="20210731 21:39:52.948"/>
</branch>
<status status="PASS" starttime="20210731 21:39:52.925" endtime="20210731 21:39:52.948"/>
</if>
<status status="PASS" starttime="20210731 21:39:52.896" endtime="20210731 21:39:52.949"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.67'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:51.308" endtime="20210731 21:39:52.949">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t89" name="With Each Valid Token, Updating Password Of Each System User With abc!?.67abc!?.67abc!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:52.954" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:52.972" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:52.972" level="INFO">${pids} = 9995</msg>
<status status="PASS" starttime="20210731 21:39:52.951" endtime="20210731 21:39:52.972"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:52.973" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:52.972" endtime="20210731 21:39:52.973"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:52.974" level="INFO">${pids} = ['9995']</msg>
<status status="PASS" starttime="20210731 21:39:52.974" endtime="20210731 21:39:52.974"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">9995</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:53.002" level="INFO">Running command 'kill 9995 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:52.975" endtime="20210731 21:39:53.003"/>
</kw>
<status status="PASS" starttime="20210731 21:39:52.974" endtime="20210731 21:39:53.003"/>
</iter>
<status status="PASS" starttime="20210731 21:39:52.974" endtime="20210731 21:39:53.003"/>
</for>
<status status="PASS" starttime="20210731 21:39:52.973" endtime="20210731 21:39:53.003"/>
</branch>
<status status="PASS" starttime="20210731 21:39:52.973" endtime="20210731 21:39:53.003"/>
</if>
<status status="PASS" starttime="20210731 21:39:52.951" endtime="20210731 21:39:53.004"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:53.005" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:53.005" endtime="20210731 21:39:53.005"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:53.006" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:53.006" endtime="20210731 21:39:53.006"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:53.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:53.007" endtime="20210731 21:39:53.007"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:53.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:53.007" endtime="20210731 21:39:53.007"/>
</kw>
<msg timestamp="20210731 21:39:53.008" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:53.005" endtime="20210731 21:39:53.008"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:53.011" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:53.008" endtime="20210731 21:39:53.013"/>
</kw>
<status status="PASS" starttime="20210731 21:39:53.004" endtime="20210731 21:39:53.014"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:53.015" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:53.015" endtime="20210731 21:39:53.020"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:54.521" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:53.020" endtime="20210731 21:39:54.521"/>
</kw>
<status status="PASS" starttime="20210731 21:39:53.014" endtime="20210731 21:39:54.522"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:54.523" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:54.523" endtime="20210731 21:39:54.523"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:54.523" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:54.523" endtime="20210731 21:39:54.523"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:54.524" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:54.524" endtime="20210731 21:39:54.524"/>
</kw>
<msg timestamp="20210731 21:39:54.524" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:54.522" endtime="20210731 21:39:54.524"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:54.525" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:54.524" endtime="20210731 21:39:54.525"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.522" endtime="20210731 21:39:54.525"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:54.526" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:54.526" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:54.526" endtime="20210731 21:39:54.526"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.526" endtime="20210731 21:39:54.526"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:54.527" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:54.528" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:54.527" endtime="20210731 21:39:54.528"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:54.528" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:54.528" endtime="20210731 21:39:54.528"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:54.529" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:54.528" endtime="20210731 21:39:54.529"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:54.529" endtime="20210731 21:39:54.530"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:54.530" endtime="20210731 21:39:54.530"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.528" endtime="20210731 21:39:54.530"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:54.531" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:54.531" endtime="20210731 21:39:54.531"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:54.531" endtime="20210731 21:39:54.532"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:54.532" endtime="20210731 21:39:54.532"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.530" endtime="20210731 21:39:54.532"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:54.533" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:54.532" endtime="20210731 21:39:54.533"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:54.533" endtime="20210731 21:39:54.534"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:54.534" endtime="20210731 21:39:54.534"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.532" endtime="20210731 21:39:54.534"/>
</iter>
<status status="PASS" starttime="20210731 21:39:54.528" endtime="20210731 21:39:54.534"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:54.535" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:54.534" endtime="20210731 21:39:54.535"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.527" endtime="20210731 21:39:54.535"/>
</kw>
<status status="PASS" starttime="20210731 21:39:52.951" endtime="20210731 21:39:54.535"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:54.536" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:54.536" endtime="20210731 21:39:54.536"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:54.537" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:54.537" endtime="20210731 21:39:54.537"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:54.548" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:54.548" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:54.537" endtime="20210731 21:39:54.548"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:54.549" endtime="20210731 21:39:54.549"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:54.549" endtime="20210731 21:39:54.549"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:54.537" endtime="20210731 21:39:54.549"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:54.537" endtime="20210731 21:39:54.549"/>
</for>
<status status="FAIL" starttime="20210731 21:39:54.536" endtime="20210731 21:39:54.549"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:54.535" endtime="20210731 21:39:54.549"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:54.551" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:54.550" endtime="20210731 21:39:54.551"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:54.551" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:54.551" endtime="20210731 21:39:54.551"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:54.557" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:54.557" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:54.552" endtime="20210731 21:39:54.557"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:54.557" endtime="20210731 21:39:54.557"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:54.557" endtime="20210731 21:39:54.557"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:54.551" endtime="20210731 21:39:54.557"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:54.551" endtime="20210731 21:39:54.557"/>
</for>
<status status="FAIL" starttime="20210731 21:39:54.550" endtime="20210731 21:39:54.558"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:54.549" endtime="20210731 21:39:54.558"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:54.559" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:54.558" endtime="20210731 21:39:54.559"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:54.559" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210731 21:39:54.559" endtime="20210731 21:39:54.559"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:54.564" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:54.564" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:54.560" endtime="20210731 21:39:54.564"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:54.564" endtime="20210731 21:39:54.564"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:54.564" endtime="20210731 21:39:54.564"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:54.560" endtime="20210731 21:39:54.564"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:54.559" endtime="20210731 21:39:54.564"/>
</for>
<status status="FAIL" starttime="20210731 21:39:54.558" endtime="20210731 21:39:54.565"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:54.558" endtime="20210731 21:39:54.565"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:54.535" endtime="20210731 21:39:54.565"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:54.579" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:54.590" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:54.590" level="INFO">${pids} = 10018
10025
10030</msg>
<status status="PASS" starttime="20210731 21:39:54.566" endtime="20210731 21:39:54.590"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:54.591" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:54.591" endtime="20210731 21:39:54.591"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:54.592" level="INFO">${pids} = ['10018', '10025', '10030']</msg>
<status status="PASS" starttime="20210731 21:39:54.592" endtime="20210731 21:39:54.592"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10018</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:54.597" level="INFO">Running command 'kill 10018 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:54.593" endtime="20210731 21:39:54.598"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.592" endtime="20210731 21:39:54.598"/>
</iter>
<iter>
<var name="${pid}">10025</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:54.609" level="INFO">Running command 'kill 10025 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:54.598" endtime="20210731 21:39:54.610"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.598" endtime="20210731 21:39:54.610"/>
</iter>
<iter>
<var name="${pid}">10030</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:54.614" level="INFO">Running command 'kill 10030 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:54.611" endtime="20210731 21:39:54.615"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.610" endtime="20210731 21:39:54.615"/>
</iter>
<status status="PASS" starttime="20210731 21:39:54.592" endtime="20210731 21:39:54.615"/>
</for>
<status status="PASS" starttime="20210731 21:39:54.591" endtime="20210731 21:39:54.615"/>
</branch>
<status status="PASS" starttime="20210731 21:39:54.591" endtime="20210731 21:39:54.615"/>
</if>
<status status="PASS" starttime="20210731 21:39:54.565" endtime="20210731 21:39:54.615"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.67abc!?.67abc!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:52.950" endtime="20210731 21:39:54.615">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t90" name="With Each Valid Token, Updating Password Of Each System User With ABC456. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:54.620" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:54.635" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:54.635" level="INFO">${pids} = 10059</msg>
<status status="PASS" starttime="20210731 21:39:54.618" endtime="20210731 21:39:54.635"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:54.636" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:54.636" endtime="20210731 21:39:54.636"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:54.637" level="INFO">${pids} = ['10059']</msg>
<status status="PASS" starttime="20210731 21:39:54.637" endtime="20210731 21:39:54.637"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10059</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:54.641" level="INFO">Running command 'kill 10059 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:54.637" endtime="20210731 21:39:54.642"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.637" endtime="20210731 21:39:54.642"/>
</iter>
<status status="PASS" starttime="20210731 21:39:54.637" endtime="20210731 21:39:54.642"/>
</for>
<status status="PASS" starttime="20210731 21:39:54.636" endtime="20210731 21:39:54.642"/>
</branch>
<status status="PASS" starttime="20210731 21:39:54.636" endtime="20210731 21:39:54.642"/>
</if>
<status status="PASS" starttime="20210731 21:39:54.617" endtime="20210731 21:39:54.643"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:54.670" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:54.643" endtime="20210731 21:39:54.671"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:54.672" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:54.671" endtime="20210731 21:39:54.672"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:54.672" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:54.672" endtime="20210731 21:39:54.672"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:54.672" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:54.672" endtime="20210731 21:39:54.673"/>
</kw>
<msg timestamp="20210731 21:39:54.673" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:54.671" endtime="20210731 21:39:54.673"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:54.679" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:54.673" endtime="20210731 21:39:54.681"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.643" endtime="20210731 21:39:54.681"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:54.683" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:54.682" endtime="20210731 21:39:54.689"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:56.190" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:54.689" endtime="20210731 21:39:56.190"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.682" endtime="20210731 21:39:56.190"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:56.192" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:56.191" endtime="20210731 21:39:56.192"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:56.192" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:56.192" endtime="20210731 21:39:56.192"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:56.193" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:56.192" endtime="20210731 21:39:56.193"/>
</kw>
<msg timestamp="20210731 21:39:56.193" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:56.191" endtime="20210731 21:39:56.193"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:56.193" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:56.193" endtime="20210731 21:39:56.194"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.191" endtime="20210731 21:39:56.194"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:56.195" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:56.195" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:56.195" endtime="20210731 21:39:56.195"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.194" endtime="20210731 21:39:56.195"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:56.196" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:56.197" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:56.196" endtime="20210731 21:39:56.197"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:56.197" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:56.197" endtime="20210731 21:39:56.197"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:56.198" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:56.197" endtime="20210731 21:39:56.198"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:56.198" endtime="20210731 21:39:56.199"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:56.199" endtime="20210731 21:39:56.199"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.197" endtime="20210731 21:39:56.199"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:56.200" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:56.200" endtime="20210731 21:39:56.200"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:56.200" endtime="20210731 21:39:56.201"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:56.201" endtime="20210731 21:39:56.201"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.199" endtime="20210731 21:39:56.201"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:56.202" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:56.201" endtime="20210731 21:39:56.202"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:56.202" endtime="20210731 21:39:56.203"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:56.203" endtime="20210731 21:39:56.203"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.201" endtime="20210731 21:39:56.203"/>
</iter>
<status status="PASS" starttime="20210731 21:39:56.197" endtime="20210731 21:39:56.203"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:56.204" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:56.203" endtime="20210731 21:39:56.204"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.195" endtime="20210731 21:39:56.204"/>
</kw>
<status status="PASS" starttime="20210731 21:39:54.617" endtime="20210731 21:39:56.204"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:56.205" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:56.205" endtime="20210731 21:39:56.205"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:56.206" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210731 21:39:56.206" endtime="20210731 21:39:56.206"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:56.217" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:56.218" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:56.206" endtime="20210731 21:39:56.218"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:56.218" endtime="20210731 21:39:56.218"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:56.218" endtime="20210731 21:39:56.218"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:56.206" endtime="20210731 21:39:56.218"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:56.206" endtime="20210731 21:39:56.218"/>
</for>
<status status="FAIL" starttime="20210731 21:39:56.204" endtime="20210731 21:39:56.218"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:56.204" endtime="20210731 21:39:56.219"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:56.220" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:56.219" endtime="20210731 21:39:56.220"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:56.220" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210731 21:39:56.220" endtime="20210731 21:39:56.220"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:56.225" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:56.225" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:56.221" endtime="20210731 21:39:56.225"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:56.226" endtime="20210731 21:39:56.226"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:56.226" endtime="20210731 21:39:56.226"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:56.221" endtime="20210731 21:39:56.226"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:56.220" endtime="20210731 21:39:56.226"/>
</for>
<status status="FAIL" starttime="20210731 21:39:56.219" endtime="20210731 21:39:56.226"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:56.219" endtime="20210731 21:39:56.226"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:56.227" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:56.227" endtime="20210731 21:39:56.227"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:56.228" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210731 21:39:56.227" endtime="20210731 21:39:56.228"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:56.232" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:56.233" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:56.228" endtime="20210731 21:39:56.233"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:56.234" endtime="20210731 21:39:56.234"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:56.234" endtime="20210731 21:39:56.234"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:56.228" endtime="20210731 21:39:56.234"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:56.228" endtime="20210731 21:39:56.234"/>
</for>
<status status="FAIL" starttime="20210731 21:39:56.226" endtime="20210731 21:39:56.234"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:56.226" endtime="20210731 21:39:56.234"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:56.204" endtime="20210731 21:39:56.235"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:56.248" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:56.261" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:56.261" level="INFO">${pids} = 10083
10090
10095</msg>
<status status="PASS" starttime="20210731 21:39:56.236" endtime="20210731 21:39:56.261"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:56.262" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:56.262" endtime="20210731 21:39:56.263"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:56.263" level="INFO">${pids} = ['10083', '10090', '10095']</msg>
<status status="PASS" starttime="20210731 21:39:56.263" endtime="20210731 21:39:56.263"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10083</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:56.277" level="INFO">Running command 'kill 10083 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:56.264" endtime="20210731 21:39:56.278"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.264" endtime="20210731 21:39:56.278"/>
</iter>
<iter>
<var name="${pid}">10090</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:56.283" level="INFO">Running command 'kill 10090 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:56.279" endtime="20210731 21:39:56.283"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.278" endtime="20210731 21:39:56.284"/>
</iter>
<iter>
<var name="${pid}">10095</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:56.287" level="INFO">Running command 'kill 10095 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:56.284" endtime="20210731 21:39:56.288"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.284" endtime="20210731 21:39:56.288"/>
</iter>
<status status="PASS" starttime="20210731 21:39:56.263" endtime="20210731 21:39:56.288"/>
</for>
<status status="PASS" starttime="20210731 21:39:56.263" endtime="20210731 21:39:56.288"/>
</branch>
<status status="PASS" starttime="20210731 21:39:56.263" endtime="20210731 21:39:56.288"/>
</if>
<status status="PASS" starttime="20210731 21:39:56.235" endtime="20210731 21:39:56.289"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:54.616" endtime="20210731 21:39:56.289">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t91" name="With Each Valid Token, Updating Password Of Each System User With ABC456.? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:56.299" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:56.313" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:56.313" level="INFO">${pids} = 10125</msg>
<status status="PASS" starttime="20210731 21:39:56.291" endtime="20210731 21:39:56.313"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:56.314" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:56.313" endtime="20210731 21:39:56.314"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:56.315" level="INFO">${pids} = ['10125']</msg>
<status status="PASS" starttime="20210731 21:39:56.314" endtime="20210731 21:39:56.315"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10125</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:56.343" level="INFO">Running command 'kill 10125 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:56.315" endtime="20210731 21:39:56.343"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.315" endtime="20210731 21:39:56.343"/>
</iter>
<status status="PASS" starttime="20210731 21:39:56.315" endtime="20210731 21:39:56.343"/>
</for>
<status status="PASS" starttime="20210731 21:39:56.314" endtime="20210731 21:39:56.344"/>
</branch>
<status status="PASS" starttime="20210731 21:39:56.314" endtime="20210731 21:39:56.344"/>
</if>
<status status="PASS" starttime="20210731 21:39:56.291" endtime="20210731 21:39:56.344"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:56.345" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:56.345" endtime="20210731 21:39:56.345"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:56.346" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:56.346" endtime="20210731 21:39:56.346"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:56.346" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:56.346" endtime="20210731 21:39:56.346"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:56.347" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:56.347" endtime="20210731 21:39:56.347"/>
</kw>
<msg timestamp="20210731 21:39:56.347" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:56.345" endtime="20210731 21:39:56.347"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:56.351" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:56.347" endtime="20210731 21:39:56.352"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.344" endtime="20210731 21:39:56.353"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:56.354" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:56.353" endtime="20210731 21:39:56.358"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:57.860" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:56.359" endtime="20210731 21:39:57.860"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.353" endtime="20210731 21:39:57.860"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:57.862" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:57.861" endtime="20210731 21:39:57.862"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:57.862" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:57.862" endtime="20210731 21:39:57.862"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:57.863" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:57.862" endtime="20210731 21:39:57.863"/>
</kw>
<msg timestamp="20210731 21:39:57.863" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:57.861" endtime="20210731 21:39:57.863"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:57.864" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:57.863" endtime="20210731 21:39:57.864"/>
</kw>
<status status="PASS" starttime="20210731 21:39:57.860" endtime="20210731 21:39:57.864"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:57.865" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:57.865" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:57.864" endtime="20210731 21:39:57.865"/>
</kw>
<status status="PASS" starttime="20210731 21:39:57.864" endtime="20210731 21:39:57.865"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:57.866" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:57.866" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:57.866" endtime="20210731 21:39:57.866"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:57.867" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:57.866" endtime="20210731 21:39:57.867"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:57.867" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:57.867" endtime="20210731 21:39:57.867"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:57.868" endtime="20210731 21:39:57.868"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:57.868" endtime="20210731 21:39:57.869"/>
</kw>
<status status="PASS" starttime="20210731 21:39:57.867" endtime="20210731 21:39:57.869"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:57.869" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:57.869" endtime="20210731 21:39:57.869"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:57.869" endtime="20210731 21:39:57.870"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:57.870" endtime="20210731 21:39:57.871"/>
</kw>
<status status="PASS" starttime="20210731 21:39:57.869" endtime="20210731 21:39:57.871"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:57.871" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:57.871" endtime="20210731 21:39:57.871"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:57.871" endtime="20210731 21:39:57.872"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:57.872" endtime="20210731 21:39:57.873"/>
</kw>
<status status="PASS" starttime="20210731 21:39:57.871" endtime="20210731 21:39:57.873"/>
</iter>
<status status="PASS" starttime="20210731 21:39:57.867" endtime="20210731 21:39:57.873"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:57.873" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:57.873" endtime="20210731 21:39:57.873"/>
</kw>
<status status="PASS" starttime="20210731 21:39:57.865" endtime="20210731 21:39:57.873"/>
</kw>
<status status="PASS" starttime="20210731 21:39:56.290" endtime="20210731 21:39:57.874"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:57.875" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:57.875" endtime="20210731 21:39:57.875"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:57.875" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210731 21:39:57.875" endtime="20210731 21:39:57.875"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:57.888" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:57.888" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:57.876" endtime="20210731 21:39:57.889"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:57.889" endtime="20210731 21:39:57.889"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:57.889" endtime="20210731 21:39:57.889"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:57.876" endtime="20210731 21:39:57.889"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:57.876" endtime="20210731 21:39:57.889"/>
</for>
<status status="FAIL" starttime="20210731 21:39:57.874" endtime="20210731 21:39:57.889"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:57.874" endtime="20210731 21:39:57.889"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:57.891" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:57.890" endtime="20210731 21:39:57.891"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:57.891" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210731 21:39:57.891" endtime="20210731 21:39:57.891"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:57.896" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:57.896" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:57.891" endtime="20210731 21:39:57.896"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:57.897" endtime="20210731 21:39:57.897"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:57.897" endtime="20210731 21:39:57.897"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:57.891" endtime="20210731 21:39:57.897"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:57.891" endtime="20210731 21:39:57.897"/>
</for>
<status status="FAIL" starttime="20210731 21:39:57.890" endtime="20210731 21:39:57.897"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:57.889" endtime="20210731 21:39:57.897"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:57.898" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:57.898" endtime="20210731 21:39:57.898"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:57.899" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210731 21:39:57.899" endtime="20210731 21:39:57.899"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:57.915" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:57.915" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:57.899" endtime="20210731 21:39:57.915"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:57.915" endtime="20210731 21:39:57.915"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:57.915" endtime="20210731 21:39:57.915"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:57.899" endtime="20210731 21:39:57.916"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:57.899" endtime="20210731 21:39:57.916"/>
</for>
<status status="FAIL" starttime="20210731 21:39:57.897" endtime="20210731 21:39:57.916"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:57.897" endtime="20210731 21:39:57.916"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:57.874" endtime="20210731 21:39:57.916"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:57.921" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:57.933" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:57.933" level="INFO">${pids} = 10148
10155
10160</msg>
<status status="PASS" starttime="20210731 21:39:57.917" endtime="20210731 21:39:57.933"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:57.934" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:57.933" endtime="20210731 21:39:57.934"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:57.936" level="INFO">${pids} = ['10148', '10155', '10160']</msg>
<status status="PASS" starttime="20210731 21:39:57.935" endtime="20210731 21:39:57.936"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10148</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:57.949" level="INFO">Running command 'kill 10148 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:57.936" endtime="20210731 21:39:57.949"/>
</kw>
<status status="PASS" starttime="20210731 21:39:57.936" endtime="20210731 21:39:57.949"/>
</iter>
<iter>
<var name="${pid}">10155</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:57.953" level="INFO">Running command 'kill 10155 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:57.950" endtime="20210731 21:39:57.955"/>
</kw>
<status status="PASS" starttime="20210731 21:39:57.950" endtime="20210731 21:39:57.955"/>
</iter>
<iter>
<var name="${pid}">10160</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:57.959" level="INFO">Running command 'kill 10160 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:57.955" endtime="20210731 21:39:57.960"/>
</kw>
<status status="PASS" starttime="20210731 21:39:57.955" endtime="20210731 21:39:57.960"/>
</iter>
<status status="PASS" starttime="20210731 21:39:57.936" endtime="20210731 21:39:57.960"/>
</for>
<status status="PASS" starttime="20210731 21:39:57.935" endtime="20210731 21:39:57.960"/>
</branch>
<status status="PASS" starttime="20210731 21:39:57.934" endtime="20210731 21:39:57.960"/>
</if>
<status status="PASS" starttime="20210731 21:39:57.916" endtime="20210731 21:39:57.961"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:56.289" endtime="20210731 21:39:57.961">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t92" name="With Each Valid Token, Updating Password Of Each System User With ABC456.?ABC456.?ABC456 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:57.982" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:57.995" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:57.995" level="INFO">${pids} = 10189</msg>
<status status="PASS" starttime="20210731 21:39:57.965" endtime="20210731 21:39:57.995"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:57.996" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:57.996" endtime="20210731 21:39:57.996"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:57.997" level="INFO">${pids} = ['10189']</msg>
<status status="PASS" starttime="20210731 21:39:57.997" endtime="20210731 21:39:57.997"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10189</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:58.002" level="INFO">Running command 'kill 10189 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:57.998" endtime="20210731 21:39:58.003"/>
</kw>
<status status="PASS" starttime="20210731 21:39:57.998" endtime="20210731 21:39:58.003"/>
</iter>
<status status="PASS" starttime="20210731 21:39:57.997" endtime="20210731 21:39:58.003"/>
</for>
<status status="PASS" starttime="20210731 21:39:57.997" endtime="20210731 21:39:58.003"/>
</branch>
<status status="PASS" starttime="20210731 21:39:57.997" endtime="20210731 21:39:58.003"/>
</if>
<status status="PASS" starttime="20210731 21:39:57.964" endtime="20210731 21:39:58.004"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:58.005" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:58.005" endtime="20210731 21:39:58.005"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:58.006" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:58.006" endtime="20210731 21:39:58.006"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:58.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:58.006" endtime="20210731 21:39:58.007"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:58.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:58.007" endtime="20210731 21:39:58.007"/>
</kw>
<msg timestamp="20210731 21:39:58.007" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:58.005" endtime="20210731 21:39:58.007"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:58.011" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:58.008" endtime="20210731 21:39:58.013"/>
</kw>
<status status="PASS" starttime="20210731 21:39:58.004" endtime="20210731 21:39:58.013"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:58.015" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:58.014" endtime="20210731 21:39:58.043"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:39:59.545" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:58.044" endtime="20210731 21:39:59.545"/>
</kw>
<status status="PASS" starttime="20210731 21:39:58.013" endtime="20210731 21:39:59.545"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:59.547" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:59.546" endtime="20210731 21:39:59.547"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:59.547" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:59.547" endtime="20210731 21:39:59.547"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:59.547" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:59.547" endtime="20210731 21:39:59.548"/>
</kw>
<msg timestamp="20210731 21:39:59.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:59.546" endtime="20210731 21:39:59.548"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:39:59.548" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:39:59.548" endtime="20210731 21:39:59.549"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.545" endtime="20210731 21:39:59.549"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:39:59.550" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:39:59.550" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:39:59.549" endtime="20210731 21:39:59.550"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.549" endtime="20210731 21:39:59.550"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:39:59.551" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:39:59.551" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:39:59.550" endtime="20210731 21:39:59.551"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:39:59.551" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:39:59.551" endtime="20210731 21:39:59.552"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:59.553" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:59.552" endtime="20210731 21:39:59.553"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:59.553" endtime="20210731 21:39:59.554"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:59.554" endtime="20210731 21:39:59.554"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.552" endtime="20210731 21:39:59.554"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:59.555" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:59.554" endtime="20210731 21:39:59.555"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:59.555" endtime="20210731 21:39:59.556"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:59.556" endtime="20210731 21:39:59.556"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.554" endtime="20210731 21:39:59.556"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:59.557" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:39:59.556" endtime="20210731 21:39:59.557"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:39:59.557" endtime="20210731 21:39:59.558"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:39:59.558" endtime="20210731 21:39:59.558"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.556" endtime="20210731 21:39:59.558"/>
</iter>
<status status="PASS" starttime="20210731 21:39:59.552" endtime="20210731 21:39:59.558"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:39:59.559" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:39:59.558" endtime="20210731 21:39:59.559"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.550" endtime="20210731 21:39:59.559"/>
</kw>
<status status="PASS" starttime="20210731 21:39:57.964" endtime="20210731 21:39:59.559"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:59.560" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:39:59.560" endtime="20210731 21:39:59.560"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:59.561" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210731 21:39:59.561" endtime="20210731 21:39:59.561"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:59.571" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:59.572" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:59.561" endtime="20210731 21:39:59.572"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:59.572" endtime="20210731 21:39:59.572"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:59.572" endtime="20210731 21:39:59.572"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:59.561" endtime="20210731 21:39:59.572"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:59.561" endtime="20210731 21:39:59.572"/>
</for>
<status status="FAIL" starttime="20210731 21:39:59.559" endtime="20210731 21:39:59.572"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:59.559" endtime="20210731 21:39:59.572"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:59.574" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:39:59.573" endtime="20210731 21:39:59.574"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:59.574" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210731 21:39:59.574" endtime="20210731 21:39:59.574"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:59.579" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:59.579" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:59.575" endtime="20210731 21:39:59.579"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:59.579" endtime="20210731 21:39:59.579"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:59.580" endtime="20210731 21:39:59.580"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:59.575" endtime="20210731 21:39:59.580"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:59.574" endtime="20210731 21:39:59.580"/>
</for>
<status status="FAIL" starttime="20210731 21:39:59.573" endtime="20210731 21:39:59.580"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:59.573" endtime="20210731 21:39:59.580"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:59.581" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:39:59.581" endtime="20210731 21:39:59.581"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:39:59.582" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210731 21:39:59.582" endtime="20210731 21:39:59.582"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:39:59.588" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:39:59.589" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:39:59.582" endtime="20210731 21:39:59.589"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:39:59.589" endtime="20210731 21:39:59.589"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:39:59.589" endtime="20210731 21:39:59.589"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:59.582" endtime="20210731 21:39:59.590"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:59.582" endtime="20210731 21:39:59.590"/>
</for>
<status status="FAIL" starttime="20210731 21:39:59.580" endtime="20210731 21:39:59.590"/>
</kw>
<status status="FAIL" starttime="20210731 21:39:59.580" endtime="20210731 21:39:59.590"/>
</iter>
<status status="FAIL" starttime="20210731 21:39:59.559" endtime="20210731 21:39:59.590"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:59.603" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:59.615" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:59.615" level="INFO">${pids} = 10212
10219
10223</msg>
<status status="PASS" starttime="20210731 21:39:59.591" endtime="20210731 21:39:59.615"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:59.616" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:59.615" endtime="20210731 21:39:59.616"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:59.617" level="INFO">${pids} = ['10212', '10219', '10223']</msg>
<status status="PASS" starttime="20210731 21:39:59.616" endtime="20210731 21:39:59.617"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10212</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:59.622" level="INFO">Running command 'kill 10212 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:59.617" endtime="20210731 21:39:59.622"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.617" endtime="20210731 21:39:59.623"/>
</iter>
<iter>
<var name="${pid}">10219</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:59.634" level="INFO">Running command 'kill 10219 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:59.623" endtime="20210731 21:39:59.635"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.623" endtime="20210731 21:39:59.635"/>
</iter>
<iter>
<var name="${pid}">10223</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:59.639" level="INFO">Running command 'kill 10223 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:59.636" endtime="20210731 21:39:59.640"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.635" endtime="20210731 21:39:59.640"/>
</iter>
<status status="PASS" starttime="20210731 21:39:59.617" endtime="20210731 21:39:59.640"/>
</for>
<status status="PASS" starttime="20210731 21:39:59.616" endtime="20210731 21:39:59.640"/>
</branch>
<status status="PASS" starttime="20210731 21:39:59.616" endtime="20210731 21:39:59.640"/>
</if>
<status status="PASS" starttime="20210731 21:39:59.590" endtime="20210731 21:39:59.641"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.?ABC456.?ABC456'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:57.962" endtime="20210731 21:39:59.641">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t93" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.0 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:39:59.647" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:39:59.660" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:39:59.660" level="INFO">${pids} = 10252</msg>
<status status="PASS" starttime="20210731 21:39:59.643" endtime="20210731 21:39:59.660"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:59.661" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:39:59.661" endtime="20210731 21:39:59.661"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:39:59.662" level="INFO">${pids} = ['10252']</msg>
<status status="PASS" starttime="20210731 21:39:59.662" endtime="20210731 21:39:59.662"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10252</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:59.666" level="INFO">Running command 'kill 10252 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:59.663" endtime="20210731 21:39:59.666"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.662" endtime="20210731 21:39:59.666"/>
</iter>
<status status="PASS" starttime="20210731 21:39:59.662" endtime="20210731 21:39:59.666"/>
</for>
<status status="PASS" starttime="20210731 21:39:59.662" endtime="20210731 21:39:59.666"/>
</branch>
<status status="PASS" starttime="20210731 21:39:59.662" endtime="20210731 21:39:59.666"/>
</if>
<status status="PASS" starttime="20210731 21:39:59.643" endtime="20210731 21:39:59.667"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:59.668" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:59.667" endtime="20210731 21:39:59.668"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:59.669" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:39:59.668" endtime="20210731 21:39:59.669"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:39:59.669" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:39:59.669" endtime="20210731 21:39:59.669"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:39:59.670" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:59.669" endtime="20210731 21:39:59.670"/>
</kw>
<msg timestamp="20210731 21:39:59.670" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:39:59.668" endtime="20210731 21:39:59.670"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:39:59.674" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:39:59.670" endtime="20210731 21:39:59.698"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.667" endtime="20210731 21:39:59.698"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:39:59.700" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:39:59.699" endtime="20210731 21:39:59.706"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:01.207" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:39:59.707" endtime="20210731 21:40:01.207"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.699" endtime="20210731 21:40:01.208"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:01.209" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:01.209" endtime="20210731 21:40:01.209"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:01.210" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:01.209" endtime="20210731 21:40:01.210"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:01.210" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:01.210" endtime="20210731 21:40:01.210"/>
</kw>
<msg timestamp="20210731 21:40:01.210" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:01.208" endtime="20210731 21:40:01.210"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:01.211" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:01.211" endtime="20210731 21:40:01.211"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.208" endtime="20210731 21:40:01.211"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:01.212" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:01.212" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:01.212" endtime="20210731 21:40:01.212"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.212" endtime="20210731 21:40:01.212"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:01.213" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:01.214" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:01.213" endtime="20210731 21:40:01.214"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:01.214" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:01.214" endtime="20210731 21:40:01.214"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:01.215" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:01.214" endtime="20210731 21:40:01.215"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:01.215" endtime="20210731 21:40:01.215"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:01.216" endtime="20210731 21:40:01.216"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.214" endtime="20210731 21:40:01.216"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:01.216" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:01.216" endtime="20210731 21:40:01.216"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:01.216" endtime="20210731 21:40:01.217"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:01.217" endtime="20210731 21:40:01.218"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.216" endtime="20210731 21:40:01.218"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:01.218" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:01.218" endtime="20210731 21:40:01.218"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:01.218" endtime="20210731 21:40:01.219"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:01.219" endtime="20210731 21:40:01.219"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.218" endtime="20210731 21:40:01.219"/>
</iter>
<status status="PASS" starttime="20210731 21:40:01.214" endtime="20210731 21:40:01.219"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:01.220" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:01.220" endtime="20210731 21:40:01.220"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.212" endtime="20210731 21:40:01.220"/>
</kw>
<status status="PASS" starttime="20210731 21:39:59.643" endtime="20210731 21:40:01.220"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:01.222" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:01.221" endtime="20210731 21:40:01.222"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:01.222" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210731 21:40:01.222" endtime="20210731 21:40:01.222"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:01.233" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:01.233" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:01.223" endtime="20210731 21:40:01.233"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:01.233" endtime="20210731 21:40:01.233"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:01.234" endtime="20210731 21:40:01.234"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:01.222" endtime="20210731 21:40:01.234"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:01.222" endtime="20210731 21:40:01.234"/>
</for>
<status status="FAIL" starttime="20210731 21:40:01.221" endtime="20210731 21:40:01.234"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:01.221" endtime="20210731 21:40:01.234"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:01.235" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:40:01.235" endtime="20210731 21:40:01.235"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:01.236" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210731 21:40:01.235" endtime="20210731 21:40:01.236"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:01.240" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:01.241" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:01.236" endtime="20210731 21:40:01.241"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:01.241" endtime="20210731 21:40:01.241"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:01.241" endtime="20210731 21:40:01.241"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:01.236" endtime="20210731 21:40:01.241"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:01.236" endtime="20210731 21:40:01.241"/>
</for>
<status status="FAIL" starttime="20210731 21:40:01.234" endtime="20210731 21:40:01.241"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:01.234" endtime="20210731 21:40:01.241"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:01.243" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:40:01.242" endtime="20210731 21:40:01.243"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:01.243" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210731 21:40:01.243" endtime="20210731 21:40:01.243"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:01.248" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:01.249" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:01.244" endtime="20210731 21:40:01.249"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:01.250" endtime="20210731 21:40:01.250"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:01.250" endtime="20210731 21:40:01.250"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:01.243" endtime="20210731 21:40:01.250"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:01.243" endtime="20210731 21:40:01.250"/>
</for>
<status status="FAIL" starttime="20210731 21:40:01.242" endtime="20210731 21:40:01.250"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:01.242" endtime="20210731 21:40:01.250"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:01.220" endtime="20210731 21:40:01.250"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:01.263" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:01.274" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:01.274" level="INFO">${pids} = 10275
10282
10286</msg>
<status status="PASS" starttime="20210731 21:40:01.251" endtime="20210731 21:40:01.274"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:01.275" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:01.275" endtime="20210731 21:40:01.275"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:01.276" level="INFO">${pids} = ['10275', '10282', '10286']</msg>
<status status="PASS" starttime="20210731 21:40:01.276" endtime="20210731 21:40:01.276"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10275</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:01.289" level="INFO">Running command 'kill 10275 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:01.277" endtime="20210731 21:40:01.291"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.276" endtime="20210731 21:40:01.291"/>
</iter>
<iter>
<var name="${pid}">10282</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:01.295" level="INFO">Running command 'kill 10282 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:01.292" endtime="20210731 21:40:01.296"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.291" endtime="20210731 21:40:01.296"/>
</iter>
<iter>
<var name="${pid}">10286</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:01.300" level="INFO">Running command 'kill 10286 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:01.296" endtime="20210731 21:40:01.300"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.296" endtime="20210731 21:40:01.301"/>
</iter>
<status status="PASS" starttime="20210731 21:40:01.276" endtime="20210731 21:40:01.301"/>
</for>
<status status="PASS" starttime="20210731 21:40:01.276" endtime="20210731 21:40:01.301"/>
</branch>
<status status="PASS" starttime="20210731 21:40:01.275" endtime="20210731 21:40:01.301"/>
</if>
<status status="PASS" starttime="20210731 21:40:01.251" endtime="20210731 21:40:01.301"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.0'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:39:59.642" endtime="20210731 21:40:01.301">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t94" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.01 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:01.306" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:01.319" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:01.319" level="INFO">${pids} = 10315</msg>
<status status="PASS" starttime="20210731 21:40:01.304" endtime="20210731 21:40:01.319"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:01.320" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:01.319" endtime="20210731 21:40:01.320"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:01.321" level="INFO">${pids} = ['10315']</msg>
<status status="PASS" starttime="20210731 21:40:01.320" endtime="20210731 21:40:01.321"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10315</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:01.325" level="INFO">Running command 'kill 10315 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:01.321" endtime="20210731 21:40:01.325"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.321" endtime="20210731 21:40:01.325"/>
</iter>
<status status="PASS" starttime="20210731 21:40:01.321" endtime="20210731 21:40:01.325"/>
</for>
<status status="PASS" starttime="20210731 21:40:01.320" endtime="20210731 21:40:01.325"/>
</branch>
<status status="PASS" starttime="20210731 21:40:01.320" endtime="20210731 21:40:01.325"/>
</if>
<status status="PASS" starttime="20210731 21:40:01.303" endtime="20210731 21:40:01.326"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:01.327" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:01.327" endtime="20210731 21:40:01.327"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:01.328" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:01.328" endtime="20210731 21:40:01.328"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:01.329" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:01.328" endtime="20210731 21:40:01.329"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:01.329" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:01.329" endtime="20210731 21:40:01.329"/>
</kw>
<msg timestamp="20210731 21:40:01.330" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:01.327" endtime="20210731 21:40:01.330"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:01.358" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:01.330" endtime="20210731 21:40:01.360"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.326" endtime="20210731 21:40:01.360"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:01.362" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:01.361" endtime="20210731 21:40:01.367"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:02.868" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:01.367" endtime="20210731 21:40:02.868"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.361" endtime="20210731 21:40:02.868"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:02.870" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:02.869" endtime="20210731 21:40:02.870"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:02.870" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:02.870" endtime="20210731 21:40:02.870"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:02.871" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:02.870" endtime="20210731 21:40:02.871"/>
</kw>
<msg timestamp="20210731 21:40:02.871" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:02.869" endtime="20210731 21:40:02.871"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:02.871" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:02.871" endtime="20210731 21:40:02.872"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.869" endtime="20210731 21:40:02.872"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:02.873" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:02.873" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:02.872" endtime="20210731 21:40:02.873"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.872" endtime="20210731 21:40:02.873"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:02.874" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:02.874" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:02.873" endtime="20210731 21:40:02.874"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:02.875" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:02.874" endtime="20210731 21:40:02.875"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:02.875" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:02.875" endtime="20210731 21:40:02.875"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:02.875" endtime="20210731 21:40:02.876"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:02.876" endtime="20210731 21:40:02.877"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.875" endtime="20210731 21:40:02.877"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:02.877" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:02.877" endtime="20210731 21:40:02.877"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:02.877" endtime="20210731 21:40:02.878"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:02.878" endtime="20210731 21:40:02.879"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.877" endtime="20210731 21:40:02.879"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:02.879" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:02.879" endtime="20210731 21:40:02.879"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:02.879" endtime="20210731 21:40:02.880"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:02.880" endtime="20210731 21:40:02.880"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.879" endtime="20210731 21:40:02.881"/>
</iter>
<status status="PASS" starttime="20210731 21:40:02.875" endtime="20210731 21:40:02.881"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:02.881" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:02.881" endtime="20210731 21:40:02.881"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.873" endtime="20210731 21:40:02.881"/>
</kw>
<status status="PASS" starttime="20210731 21:40:01.303" endtime="20210731 21:40:02.881"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:02.883" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:02.882" endtime="20210731 21:40:02.883"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:02.883" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210731 21:40:02.883" endtime="20210731 21:40:02.883"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:02.895" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:02.895" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:02.884" endtime="20210731 21:40:02.895"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:02.895" endtime="20210731 21:40:02.895"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:02.896" endtime="20210731 21:40:02.896"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:02.883" endtime="20210731 21:40:02.896"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:02.883" endtime="20210731 21:40:02.896"/>
</for>
<status status="FAIL" starttime="20210731 21:40:02.882" endtime="20210731 21:40:02.896"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:02.882" endtime="20210731 21:40:02.896"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:02.897" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:40:02.897" endtime="20210731 21:40:02.897"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:02.898" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210731 21:40:02.897" endtime="20210731 21:40:02.898"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:02.903" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:02.903" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:02.898" endtime="20210731 21:40:02.903"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:02.903" endtime="20210731 21:40:02.903"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:02.903" endtime="20210731 21:40:02.903"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:02.898" endtime="20210731 21:40:02.903"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:02.898" endtime="20210731 21:40:02.903"/>
</for>
<status status="FAIL" starttime="20210731 21:40:02.896" endtime="20210731 21:40:02.903"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:02.896" endtime="20210731 21:40:02.904"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:02.905" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:40:02.904" endtime="20210731 21:40:02.905"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:02.905" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210731 21:40:02.905" endtime="20210731 21:40:02.905"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:02.911" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:02.911" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:02.906" endtime="20210731 21:40:02.911"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:02.912" endtime="20210731 21:40:02.912"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:02.912" endtime="20210731 21:40:02.912"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:02.906" endtime="20210731 21:40:02.912"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:02.905" endtime="20210731 21:40:02.912"/>
</for>
<status status="FAIL" starttime="20210731 21:40:02.904" endtime="20210731 21:40:02.912"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:02.904" endtime="20210731 21:40:02.912"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:02.882" endtime="20210731 21:40:02.912"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:02.927" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:02.938" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:02.939" level="INFO">${pids} = 10338
10345
10351</msg>
<status status="PASS" starttime="20210731 21:40:02.922" endtime="20210731 21:40:02.939"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:02.940" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:02.939" endtime="20210731 21:40:02.940"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:02.941" level="INFO">${pids} = ['10338', '10345', '10351']</msg>
<status status="PASS" starttime="20210731 21:40:02.941" endtime="20210731 21:40:02.941"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10338</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:02.953" level="INFO">Running command 'kill 10338 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:02.941" endtime="20210731 21:40:02.954"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.941" endtime="20210731 21:40:02.954"/>
</iter>
<iter>
<var name="${pid}">10345</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:02.964" level="INFO">Running command 'kill 10345 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:02.955" endtime="20210731 21:40:02.964"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.954" endtime="20210731 21:40:02.964"/>
</iter>
<iter>
<var name="${pid}">10351</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:02.971" level="INFO">Running command 'kill 10351 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:02.965" endtime="20210731 21:40:02.971"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.965" endtime="20210731 21:40:02.971"/>
</iter>
<status status="PASS" starttime="20210731 21:40:02.941" endtime="20210731 21:40:02.971"/>
</for>
<status status="PASS" starttime="20210731 21:40:02.940" endtime="20210731 21:40:02.972"/>
</branch>
<status status="PASS" starttime="20210731 21:40:02.940" endtime="20210731 21:40:02.972"/>
</if>
<status status="PASS" starttime="20210731 21:40:02.913" endtime="20210731 21:40:02.972"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.01'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:01.302" endtime="20210731 21:40:02.972">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t95" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.01ABC!?.01ABC!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:02.978" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:02.992" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:02.992" level="INFO">${pids} = 10380</msg>
<status status="PASS" starttime="20210731 21:40:02.975" endtime="20210731 21:40:02.992"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:02.993" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:02.992" endtime="20210731 21:40:02.993"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:02.994" level="INFO">${pids} = ['10380']</msg>
<status status="PASS" starttime="20210731 21:40:02.994" endtime="20210731 21:40:02.994"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10380</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:02.998" level="INFO">Running command 'kill 10380 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:02.994" endtime="20210731 21:40:02.999"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.994" endtime="20210731 21:40:02.999"/>
</iter>
<status status="PASS" starttime="20210731 21:40:02.994" endtime="20210731 21:40:02.999"/>
</for>
<status status="PASS" starttime="20210731 21:40:02.993" endtime="20210731 21:40:02.999"/>
</branch>
<status status="PASS" starttime="20210731 21:40:02.993" endtime="20210731 21:40:02.999"/>
</if>
<status status="PASS" starttime="20210731 21:40:02.974" endtime="20210731 21:40:02.999"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:03.000" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:03.000" endtime="20210731 21:40:03.001"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:03.004" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:03.001" endtime="20210731 21:40:03.004"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:03.004" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:03.004" endtime="20210731 21:40:03.004"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:03.005" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:03.005" endtime="20210731 21:40:03.005"/>
</kw>
<msg timestamp="20210731 21:40:03.005" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:03.001" endtime="20210731 21:40:03.005"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:03.026" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:03.005" endtime="20210731 21:40:03.036"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.999" endtime="20210731 21:40:03.036"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:03.038" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:03.037" endtime="20210731 21:40:03.044"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:04.545" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:03.045" endtime="20210731 21:40:04.546"/>
</kw>
<status status="PASS" starttime="20210731 21:40:03.037" endtime="20210731 21:40:04.546"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:04.547" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:04.547" endtime="20210731 21:40:04.547"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:04.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:04.547" endtime="20210731 21:40:04.548"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:04.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:04.548" endtime="20210731 21:40:04.548"/>
</kw>
<msg timestamp="20210731 21:40:04.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:04.547" endtime="20210731 21:40:04.548"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:04.549" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:04.549" endtime="20210731 21:40:04.549"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.546" endtime="20210731 21:40:04.550"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:04.550" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:04.550" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:04.550" endtime="20210731 21:40:04.550"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.550" endtime="20210731 21:40:04.551"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:04.551" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:04.552" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:04.551" endtime="20210731 21:40:04.552"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:04.552" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:04.552" endtime="20210731 21:40:04.552"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:04.553" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:04.553" endtime="20210731 21:40:04.553"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:04.553" endtime="20210731 21:40:04.555"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:04.555" endtime="20210731 21:40:04.555"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.552" endtime="20210731 21:40:04.555"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:04.556" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:04.556" endtime="20210731 21:40:04.556"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:04.556" endtime="20210731 21:40:04.557"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:04.557" endtime="20210731 21:40:04.557"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.555" endtime="20210731 21:40:04.558"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:04.558" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:04.558" endtime="20210731 21:40:04.558"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:04.558" endtime="20210731 21:40:04.559"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:04.559" endtime="20210731 21:40:04.559"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.558" endtime="20210731 21:40:04.559"/>
</iter>
<status status="PASS" starttime="20210731 21:40:04.552" endtime="20210731 21:40:04.559"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:04.560" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:04.560" endtime="20210731 21:40:04.560"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.551" endtime="20210731 21:40:04.560"/>
</kw>
<status status="PASS" starttime="20210731 21:40:02.974" endtime="20210731 21:40:04.560"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:04.562" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:04.561" endtime="20210731 21:40:04.562"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:04.562" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210731 21:40:04.562" endtime="20210731 21:40:04.562"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:04.573" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:04.573" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:04.563" endtime="20210731 21:40:04.573"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:04.573" endtime="20210731 21:40:04.573"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:04.573" endtime="20210731 21:40:04.573"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:04.562" endtime="20210731 21:40:04.574"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:04.562" endtime="20210731 21:40:04.574"/>
</for>
<status status="FAIL" starttime="20210731 21:40:04.561" endtime="20210731 21:40:04.574"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:04.561" endtime="20210731 21:40:04.574"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:04.575" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:40:04.575" endtime="20210731 21:40:04.575"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:04.575" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210731 21:40:04.575" endtime="20210731 21:40:04.576"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:04.580" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:04.580" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:04.576" endtime="20210731 21:40:04.580"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:04.580" endtime="20210731 21:40:04.580"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:04.581" endtime="20210731 21:40:04.581"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:04.576" endtime="20210731 21:40:04.581"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:04.576" endtime="20210731 21:40:04.581"/>
</for>
<status status="FAIL" starttime="20210731 21:40:04.574" endtime="20210731 21:40:04.581"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:04.574" endtime="20210731 21:40:04.581"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:04.582" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:40:04.582" endtime="20210731 21:40:04.582"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:04.583" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210731 21:40:04.582" endtime="20210731 21:40:04.583"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:04.587" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:04.588" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:04.583" endtime="20210731 21:40:04.588"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:04.588" endtime="20210731 21:40:04.588"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:04.588" endtime="20210731 21:40:04.588"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:04.583" endtime="20210731 21:40:04.588"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:04.583" endtime="20210731 21:40:04.588"/>
</for>
<status status="FAIL" starttime="20210731 21:40:04.581" endtime="20210731 21:40:04.588"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:04.581" endtime="20210731 21:40:04.589"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:04.560" endtime="20210731 21:40:04.589"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:04.604" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:04.616" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:04.616" level="INFO">${pids} = 10403
10410
10414</msg>
<status status="PASS" starttime="20210731 21:40:04.590" endtime="20210731 21:40:04.616"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:04.617" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:04.617" endtime="20210731 21:40:04.617"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:04.619" level="INFO">${pids} = ['10403', '10410', '10414']</msg>
<status status="PASS" starttime="20210731 21:40:04.618" endtime="20210731 21:40:04.619"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10403</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:04.637" level="INFO">Running command 'kill 10403 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:04.619" endtime="20210731 21:40:04.638"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.619" endtime="20210731 21:40:04.638"/>
</iter>
<iter>
<var name="${pid}">10410</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:04.642" level="INFO">Running command 'kill 10410 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:04.639" endtime="20210731 21:40:04.644"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.638" endtime="20210731 21:40:04.645"/>
</iter>
<iter>
<var name="${pid}">10414</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:04.648" level="INFO">Running command 'kill 10414 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:04.645" endtime="20210731 21:40:04.649"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.645" endtime="20210731 21:40:04.649"/>
</iter>
<status status="PASS" starttime="20210731 21:40:04.619" endtime="20210731 21:40:04.649"/>
</for>
<status status="PASS" starttime="20210731 21:40:04.618" endtime="20210731 21:40:04.649"/>
</branch>
<status status="PASS" starttime="20210731 21:40:04.618" endtime="20210731 21:40:04.649"/>
</if>
<status status="PASS" starttime="20210731 21:40:04.589" endtime="20210731 21:40:04.649"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.01ABC!?.01ABC!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:02.973" endtime="20210731 21:40:04.650">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t96" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aa Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:04.661" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:04.675" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:04.675" level="INFO">${pids} = 10443</msg>
<status status="PASS" starttime="20210731 21:40:04.654" endtime="20210731 21:40:04.675"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:04.676" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:04.676" endtime="20210731 21:40:04.677"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:04.678" level="INFO">${pids} = ['10443']</msg>
<status status="PASS" starttime="20210731 21:40:04.677" endtime="20210731 21:40:04.678"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10443</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:04.684" level="INFO">Running command 'kill 10443 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:04.678" endtime="20210731 21:40:04.685"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.678" endtime="20210731 21:40:04.685"/>
</iter>
<status status="PASS" starttime="20210731 21:40:04.678" endtime="20210731 21:40:04.685"/>
</for>
<status status="PASS" starttime="20210731 21:40:04.677" endtime="20210731 21:40:04.685"/>
</branch>
<status status="PASS" starttime="20210731 21:40:04.677" endtime="20210731 21:40:04.685"/>
</if>
<status status="PASS" starttime="20210731 21:40:04.652" endtime="20210731 21:40:04.685"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:04.687" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:04.686" endtime="20210731 21:40:04.687"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:04.687" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:04.687" endtime="20210731 21:40:04.687"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:04.688" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:04.687" endtime="20210731 21:40:04.688"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:04.688" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:04.688" endtime="20210731 21:40:04.688"/>
</kw>
<msg timestamp="20210731 21:40:04.689" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:04.687" endtime="20210731 21:40:04.689"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:04.692" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:04.689" endtime="20210731 21:40:04.694"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.686" endtime="20210731 21:40:04.694"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:04.696" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:04.695" endtime="20210731 21:40:04.724"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:06.225" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:04.724" endtime="20210731 21:40:06.225"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.695" endtime="20210731 21:40:06.226"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:06.227" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:06.227" endtime="20210731 21:40:06.227"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:06.227" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:06.227" endtime="20210731 21:40:06.227"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:06.228" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:06.228" endtime="20210731 21:40:06.228"/>
</kw>
<msg timestamp="20210731 21:40:06.228" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:06.226" endtime="20210731 21:40:06.228"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:06.229" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:06.228" endtime="20210731 21:40:06.229"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.226" endtime="20210731 21:40:06.229"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:06.230" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:06.230" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:06.230" endtime="20210731 21:40:06.230"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.230" endtime="20210731 21:40:06.230"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:06.232" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:06.232" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:06.231" endtime="20210731 21:40:06.232"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:06.232" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:06.232" endtime="20210731 21:40:06.232"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:06.233" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:06.233" endtime="20210731 21:40:06.233"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:06.233" endtime="20210731 21:40:06.234"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:06.234" endtime="20210731 21:40:06.234"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.233" endtime="20210731 21:40:06.234"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:06.235" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:06.235" endtime="20210731 21:40:06.235"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:06.235" endtime="20210731 21:40:06.236"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:06.236" endtime="20210731 21:40:06.236"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.235" endtime="20210731 21:40:06.236"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:06.237" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:06.237" endtime="20210731 21:40:06.237"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:06.237" endtime="20210731 21:40:06.238"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:06.238" endtime="20210731 21:40:06.238"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.236" endtime="20210731 21:40:06.238"/>
</iter>
<status status="PASS" starttime="20210731 21:40:06.232" endtime="20210731 21:40:06.238"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:06.239" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:06.238" endtime="20210731 21:40:06.239"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.231" endtime="20210731 21:40:06.239"/>
</kw>
<status status="PASS" starttime="20210731 21:40:04.651" endtime="20210731 21:40:06.239"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:06.240" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:06.240" endtime="20210731 21:40:06.241"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:06.241" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210731 21:40:06.241" endtime="20210731 21:40:06.241"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:06.253" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:06.253" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:06.241" endtime="20210731 21:40:06.253"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:06.254" endtime="20210731 21:40:06.254"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:06.254" endtime="20210731 21:40:06.254"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:06.241" endtime="20210731 21:40:06.254"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:06.241" endtime="20210731 21:40:06.254"/>
</for>
<status status="FAIL" starttime="20210731 21:40:06.240" endtime="20210731 21:40:06.254"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:06.240" endtime="20210731 21:40:06.254"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:06.255" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:40:06.255" endtime="20210731 21:40:06.255"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:06.256" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210731 21:40:06.256" endtime="20210731 21:40:06.256"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:06.261" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:06.261" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:06.256" endtime="20210731 21:40:06.261"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:06.261" endtime="20210731 21:40:06.261"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:06.261" endtime="20210731 21:40:06.261"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:06.256" endtime="20210731 21:40:06.262"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:06.256" endtime="20210731 21:40:06.262"/>
</for>
<status status="FAIL" starttime="20210731 21:40:06.254" endtime="20210731 21:40:06.262"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:06.254" endtime="20210731 21:40:06.262"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:06.263" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:40:06.263" endtime="20210731 21:40:06.263"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:06.264" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210731 21:40:06.263" endtime="20210731 21:40:06.264"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:06.268" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:06.268" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:06.264" endtime="20210731 21:40:06.268"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:06.268" endtime="20210731 21:40:06.268"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:06.268" endtime="20210731 21:40:06.269"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:06.264" endtime="20210731 21:40:06.269"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:06.264" endtime="20210731 21:40:06.269"/>
</for>
<status status="FAIL" starttime="20210731 21:40:06.262" endtime="20210731 21:40:06.269"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:06.262" endtime="20210731 21:40:06.269"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:06.239" endtime="20210731 21:40:06.269"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:06.282" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:06.294" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:06.294" level="INFO">${pids} = 10467
10474
10478</msg>
<status status="PASS" starttime="20210731 21:40:06.270" endtime="20210731 21:40:06.294"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:06.295" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:06.294" endtime="20210731 21:40:06.295"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:06.296" level="INFO">${pids} = ['10467', '10474', '10478']</msg>
<status status="PASS" starttime="20210731 21:40:06.295" endtime="20210731 21:40:06.296"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10467</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:06.300" level="INFO">Running command 'kill 10467 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:06.296" endtime="20210731 21:40:06.301"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.296" endtime="20210731 21:40:06.301"/>
</iter>
<iter>
<var name="${pid}">10474</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:06.313" level="INFO">Running command 'kill 10474 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:06.301" endtime="20210731 21:40:06.314"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.301" endtime="20210731 21:40:06.314"/>
</iter>
<iter>
<var name="${pid}">10478</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:06.318" level="INFO">Running command 'kill 10478 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:06.315" endtime="20210731 21:40:06.319"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.314" endtime="20210731 21:40:06.319"/>
</iter>
<status status="PASS" starttime="20210731 21:40:06.296" endtime="20210731 21:40:06.319"/>
</for>
<status status="PASS" starttime="20210731 21:40:06.295" endtime="20210731 21:40:06.319"/>
</branch>
<status status="PASS" starttime="20210731 21:40:06.295" endtime="20210731 21:40:06.319"/>
</if>
<status status="PASS" starttime="20210731 21:40:06.269" endtime="20210731 21:40:06.319"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aa'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:04.650" endtime="20210731 21:40:06.319">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t97" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:06.326" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:06.340" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:06.340" level="INFO">${pids} = 10507</msg>
<status status="PASS" starttime="20210731 21:40:06.322" endtime="20210731 21:40:06.340"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:06.341" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:06.341" endtime="20210731 21:40:06.341"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:06.342" level="INFO">${pids} = ['10507']</msg>
<status status="PASS" starttime="20210731 21:40:06.342" endtime="20210731 21:40:06.342"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10507</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:06.348" level="INFO">Running command 'kill 10507 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:06.342" endtime="20210731 21:40:06.349"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.342" endtime="20210731 21:40:06.349"/>
</iter>
<status status="PASS" starttime="20210731 21:40:06.342" endtime="20210731 21:40:06.349"/>
</for>
<status status="PASS" starttime="20210731 21:40:06.341" endtime="20210731 21:40:06.349"/>
</branch>
<status status="PASS" starttime="20210731 21:40:06.341" endtime="20210731 21:40:06.349"/>
</if>
<status status="PASS" starttime="20210731 21:40:06.322" endtime="20210731 21:40:06.349"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:06.350" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:06.350" endtime="20210731 21:40:06.350"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:06.351" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:06.351" endtime="20210731 21:40:06.351"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:06.352" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:06.351" endtime="20210731 21:40:06.352"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:06.352" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:06.352" endtime="20210731 21:40:06.352"/>
</kw>
<msg timestamp="20210731 21:40:06.352" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:06.351" endtime="20210731 21:40:06.352"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:06.375" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:06.352" endtime="20210731 21:40:06.377"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.349" endtime="20210731 21:40:06.377"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:06.379" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:06.378" endtime="20210731 21:40:06.383"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:07.884" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:06.384" endtime="20210731 21:40:07.884"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.378" endtime="20210731 21:40:07.885"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:07.886" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:07.886" endtime="20210731 21:40:07.886"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:07.887" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:07.886" endtime="20210731 21:40:07.887"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:07.887" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:07.887" endtime="20210731 21:40:07.887"/>
</kw>
<msg timestamp="20210731 21:40:07.887" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:07.886" endtime="20210731 21:40:07.888"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:07.888" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:07.888" endtime="20210731 21:40:07.889"/>
</kw>
<status status="PASS" starttime="20210731 21:40:07.885" endtime="20210731 21:40:07.889"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:07.889" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:07.889" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:07.889" endtime="20210731 21:40:07.890"/>
</kw>
<status status="PASS" starttime="20210731 21:40:07.889" endtime="20210731 21:40:07.890"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:07.891" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:07.891" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:07.890" endtime="20210731 21:40:07.891"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:07.891" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:07.891" endtime="20210731 21:40:07.891"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:07.892" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:07.892" endtime="20210731 21:40:07.892"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:07.892" endtime="20210731 21:40:07.893"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:07.894" endtime="20210731 21:40:07.894"/>
</kw>
<status status="PASS" starttime="20210731 21:40:07.892" endtime="20210731 21:40:07.894"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:07.894" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:07.894" endtime="20210731 21:40:07.894"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:07.895" endtime="20210731 21:40:07.895"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:07.896" endtime="20210731 21:40:07.896"/>
</kw>
<status status="PASS" starttime="20210731 21:40:07.894" endtime="20210731 21:40:07.896"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:07.897" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:07.896" endtime="20210731 21:40:07.897"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:07.897" endtime="20210731 21:40:07.898"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:07.898" endtime="20210731 21:40:07.898"/>
</kw>
<status status="PASS" starttime="20210731 21:40:07.896" endtime="20210731 21:40:07.898"/>
</iter>
<status status="PASS" starttime="20210731 21:40:07.892" endtime="20210731 21:40:07.898"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:07.899" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:07.898" endtime="20210731 21:40:07.899"/>
</kw>
<status status="PASS" starttime="20210731 21:40:07.890" endtime="20210731 21:40:07.899"/>
</kw>
<status status="PASS" starttime="20210731 21:40:06.321" endtime="20210731 21:40:07.899"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:07.900" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:07.900" endtime="20210731 21:40:07.900"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:07.901" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210731 21:40:07.901" endtime="20210731 21:40:07.901"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:07.912" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:07.912" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:07.901" endtime="20210731 21:40:07.912"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:07.913" endtime="20210731 21:40:07.913"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:07.913" endtime="20210731 21:40:07.913"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:07.901" endtime="20210731 21:40:07.913"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:07.901" endtime="20210731 21:40:07.913"/>
</for>
<status status="FAIL" starttime="20210731 21:40:07.899" endtime="20210731 21:40:07.913"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:07.899" endtime="20210731 21:40:07.913"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:07.915" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:40:07.914" endtime="20210731 21:40:07.915"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:07.915" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210731 21:40:07.915" endtime="20210731 21:40:07.915"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:07.920" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:07.920" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:07.916" endtime="20210731 21:40:07.920"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:07.921" endtime="20210731 21:40:07.921"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:07.921" endtime="20210731 21:40:07.921"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:07.915" endtime="20210731 21:40:07.921"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:07.915" endtime="20210731 21:40:07.921"/>
</for>
<status status="FAIL" starttime="20210731 21:40:07.914" endtime="20210731 21:40:07.921"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:07.913" endtime="20210731 21:40:07.921"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:07.923" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:40:07.922" endtime="20210731 21:40:07.923"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:07.923" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210731 21:40:07.923" endtime="20210731 21:40:07.923"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:07.931" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:07.931" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:07.924" endtime="20210731 21:40:07.931"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:07.931" endtime="20210731 21:40:07.931"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:07.940" endtime="20210731 21:40:07.940"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:07.924" endtime="20210731 21:40:07.940"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:07.923" endtime="20210731 21:40:07.940"/>
</for>
<status status="FAIL" starttime="20210731 21:40:07.922" endtime="20210731 21:40:07.940"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:07.921" endtime="20210731 21:40:07.940"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:07.899" endtime="20210731 21:40:07.941"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:07.946" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:07.958" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:07.958" level="INFO">${pids} = 10530
10537
10542</msg>
<status status="PASS" starttime="20210731 21:40:07.942" endtime="20210731 21:40:07.959"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:07.960" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:07.959" endtime="20210731 21:40:07.960"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:07.961" level="INFO">${pids} = ['10530', '10537', '10542']</msg>
<status status="PASS" starttime="20210731 21:40:07.960" endtime="20210731 21:40:07.961"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10530</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:07.966" level="INFO">Running command 'kill 10530 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:07.961" endtime="20210731 21:40:07.967"/>
</kw>
<status status="PASS" starttime="20210731 21:40:07.961" endtime="20210731 21:40:07.967"/>
</iter>
<iter>
<var name="${pid}">10537</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:07.985" level="INFO">Running command 'kill 10537 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:07.967" endtime="20210731 21:40:07.986"/>
</kw>
<status status="PASS" starttime="20210731 21:40:07.967" endtime="20210731 21:40:07.986"/>
</iter>
<iter>
<var name="${pid}">10542</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:07.990" level="INFO">Running command 'kill 10542 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:07.986" endtime="20210731 21:40:07.990"/>
</kw>
<status status="PASS" starttime="20210731 21:40:07.986" endtime="20210731 21:40:07.990"/>
</iter>
<status status="PASS" starttime="20210731 21:40:07.961" endtime="20210731 21:40:07.991"/>
</for>
<status status="PASS" starttime="20210731 21:40:07.960" endtime="20210731 21:40:07.991"/>
</branch>
<status status="PASS" starttime="20210731 21:40:07.960" endtime="20210731 21:40:07.991"/>
</if>
<status status="PASS" starttime="20210731 21:40:07.941" endtime="20210731 21:40:07.991"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:06.320" endtime="20210731 21:40:07.991">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t98" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aab012!.Aab012!.A Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:07.996" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:08.009" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:08.009" level="INFO">${pids} = 10571</msg>
<status status="PASS" starttime="20210731 21:40:07.993" endtime="20210731 21:40:08.009"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:08.010" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:08.010" endtime="20210731 21:40:08.010"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:08.011" level="INFO">${pids} = ['10571']</msg>
<status status="PASS" starttime="20210731 21:40:08.011" endtime="20210731 21:40:08.011"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10571</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:08.015" level="INFO">Running command 'kill 10571 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:08.011" endtime="20210731 21:40:08.015"/>
</kw>
<status status="PASS" starttime="20210731 21:40:08.011" endtime="20210731 21:40:08.015"/>
</iter>
<status status="PASS" starttime="20210731 21:40:08.011" endtime="20210731 21:40:08.015"/>
</for>
<status status="PASS" starttime="20210731 21:40:08.011" endtime="20210731 21:40:08.015"/>
</branch>
<status status="PASS" starttime="20210731 21:40:08.010" endtime="20210731 21:40:08.015"/>
</if>
<status status="PASS" starttime="20210731 21:40:07.993" endtime="20210731 21:40:08.016"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:08.017" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:08.016" endtime="20210731 21:40:08.017"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:08.017" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:08.017" endtime="20210731 21:40:08.017"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:08.018" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:08.018" endtime="20210731 21:40:08.018"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:08.018" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:08.018" endtime="20210731 21:40:08.018"/>
</kw>
<msg timestamp="20210731 21:40:08.019" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:08.017" endtime="20210731 21:40:08.019"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:08.025" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:08.019" endtime="20210731 21:40:08.026"/>
</kw>
<status status="PASS" starttime="20210731 21:40:08.016" endtime="20210731 21:40:08.027"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:08.028" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:08.028" endtime="20210731 21:40:08.032"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:09.534" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:08.033" endtime="20210731 21:40:09.534"/>
</kw>
<status status="PASS" starttime="20210731 21:40:08.027" endtime="20210731 21:40:09.535"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:09.536" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:09.536" endtime="20210731 21:40:09.536"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:09.536" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:09.536" endtime="20210731 21:40:09.536"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:09.537" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:09.536" endtime="20210731 21:40:09.537"/>
</kw>
<msg timestamp="20210731 21:40:09.537" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:09.535" endtime="20210731 21:40:09.537"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:09.538" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:09.537" endtime="20210731 21:40:09.538"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.535" endtime="20210731 21:40:09.538"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:09.539" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:09.539" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:09.539" endtime="20210731 21:40:09.540"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.538" endtime="20210731 21:40:09.540"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:09.542" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:09.542" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:09.541" endtime="20210731 21:40:09.542"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:09.543" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:09.542" endtime="20210731 21:40:09.543"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:09.543" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:09.543" endtime="20210731 21:40:09.544"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:09.544" endtime="20210731 21:40:09.545"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:09.545" endtime="20210731 21:40:09.546"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.543" endtime="20210731 21:40:09.546"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:09.546" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:09.546" endtime="20210731 21:40:09.547"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:09.547" endtime="20210731 21:40:09.548"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:09.548" endtime="20210731 21:40:09.549"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.546" endtime="20210731 21:40:09.549"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:09.550" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:09.549" endtime="20210731 21:40:09.550"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:09.550" endtime="20210731 21:40:09.551"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:09.551" endtime="20210731 21:40:09.552"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.549" endtime="20210731 21:40:09.552"/>
</iter>
<status status="PASS" starttime="20210731 21:40:09.543" endtime="20210731 21:40:09.552"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:09.553" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:09.552" endtime="20210731 21:40:09.553"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.540" endtime="20210731 21:40:09.553"/>
</kw>
<status status="PASS" starttime="20210731 21:40:07.993" endtime="20210731 21:40:09.553"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:09.555" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:09.555" endtime="20210731 21:40:09.555"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:09.557" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210731 21:40:09.556" endtime="20210731 21:40:09.557"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:09.569" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:09.569" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:09.558" endtime="20210731 21:40:09.569"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:09.570" endtime="20210731 21:40:09.570"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:09.570" endtime="20210731 21:40:09.570"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:09.557" endtime="20210731 21:40:09.570"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:09.557" endtime="20210731 21:40:09.570"/>
</for>
<status status="FAIL" starttime="20210731 21:40:09.554" endtime="20210731 21:40:09.570"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:09.554" endtime="20210731 21:40:09.570"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:09.571" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210731 21:40:09.571" endtime="20210731 21:40:09.571"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:09.572" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210731 21:40:09.571" endtime="20210731 21:40:09.572"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:09.577" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:09.578" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:09.573" endtime="20210731 21:40:09.578"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:09.578" endtime="20210731 21:40:09.578"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:09.578" endtime="20210731 21:40:09.578"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:09.572" endtime="20210731 21:40:09.578"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:09.572" endtime="20210731 21:40:09.578"/>
</for>
<status status="FAIL" starttime="20210731 21:40:09.570" endtime="20210731 21:40:09.578"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:09.570" endtime="20210731 21:40:09.579"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:09.580" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210731 21:40:09.580" endtime="20210731 21:40:09.580"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:09.581" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210731 21:40:09.580" endtime="20210731 21:40:09.581"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:09.596" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:09.596" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:09.581" endtime="20210731 21:40:09.596"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:40:09.596" endtime="20210731 21:40:09.596"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:40:09.598" endtime="20210731 21:40:09.598"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:09.581" endtime="20210731 21:40:09.598"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:09.581" endtime="20210731 21:40:09.598"/>
</for>
<status status="FAIL" starttime="20210731 21:40:09.579" endtime="20210731 21:40:09.598"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:09.579" endtime="20210731 21:40:09.598"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:09.554" endtime="20210731 21:40:09.599"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:09.603" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:09.626" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:09.626" level="INFO">${pids} = 10594
10601
10605</msg>
<status status="PASS" starttime="20210731 21:40:09.600" endtime="20210731 21:40:09.626"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:09.628" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:09.627" endtime="20210731 21:40:09.628"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:09.630" level="INFO">${pids} = ['10594', '10601', '10605']</msg>
<status status="PASS" starttime="20210731 21:40:09.629" endtime="20210731 21:40:09.630"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10594</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:09.634" level="INFO">Running command 'kill 10594 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:09.630" endtime="20210731 21:40:09.634"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.630" endtime="20210731 21:40:09.635"/>
</iter>
<iter>
<var name="${pid}">10601</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:09.641" level="INFO">Running command 'kill 10601 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:09.635" endtime="20210731 21:40:09.644"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.635" endtime="20210731 21:40:09.644"/>
</iter>
<iter>
<var name="${pid}">10605</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:09.648" level="INFO">Running command 'kill 10605 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:09.645" endtime="20210731 21:40:09.648"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.644" endtime="20210731 21:40:09.649"/>
</iter>
<status status="PASS" starttime="20210731 21:40:09.630" endtime="20210731 21:40:09.649"/>
</for>
<status status="PASS" starttime="20210731 21:40:09.628" endtime="20210731 21:40:09.649"/>
</branch>
<status status="PASS" starttime="20210731 21:40:09.628" endtime="20210731 21:40:09.649"/>
</if>
<status status="PASS" starttime="20210731 21:40:09.599" endtime="20210731 21:40:09.649"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aab012!.Aab012!.A'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-PASSWORD-CANNOT-BE-UPDATED</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:07.992" endtime="20210731 21:40:09.649">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t99" name="With Each Valid Token, Updating First Name Of Each System User With '' Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:09.655" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:09.669" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:09.669" level="INFO">${pids} = 10634</msg>
<status status="PASS" starttime="20210731 21:40:09.652" endtime="20210731 21:40:09.669"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:09.670" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:09.670" endtime="20210731 21:40:09.670"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:09.671" level="INFO">${pids} = ['10634']</msg>
<status status="PASS" starttime="20210731 21:40:09.671" endtime="20210731 21:40:09.671"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10634</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:09.680" level="INFO">Running command 'kill 10634 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:09.672" endtime="20210731 21:40:09.681"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.672" endtime="20210731 21:40:09.681"/>
</iter>
<status status="PASS" starttime="20210731 21:40:09.671" endtime="20210731 21:40:09.681"/>
</for>
<status status="PASS" starttime="20210731 21:40:09.671" endtime="20210731 21:40:09.681"/>
</branch>
<status status="PASS" starttime="20210731 21:40:09.671" endtime="20210731 21:40:09.681"/>
</if>
<status status="PASS" starttime="20210731 21:40:09.651" endtime="20210731 21:40:09.682"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:09.683" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:09.682" endtime="20210731 21:40:09.683"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:09.684" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:09.683" endtime="20210731 21:40:09.684"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:09.684" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:09.684" endtime="20210731 21:40:09.684"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:09.684" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:09.684" endtime="20210731 21:40:09.685"/>
</kw>
<msg timestamp="20210731 21:40:09.685" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:09.683" endtime="20210731 21:40:09.685"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:09.689" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:09.685" endtime="20210731 21:40:09.691"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.682" endtime="20210731 21:40:09.691"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:09.692" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:09.692" endtime="20210731 21:40:09.715"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:11.217" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:09.715" endtime="20210731 21:40:11.217"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.691" endtime="20210731 21:40:11.217"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:11.219" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:11.218" endtime="20210731 21:40:11.219"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:11.219" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:11.219" endtime="20210731 21:40:11.219"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:11.220" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:11.219" endtime="20210731 21:40:11.220"/>
</kw>
<msg timestamp="20210731 21:40:11.220" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:11.218" endtime="20210731 21:40:11.220"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:11.221" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:11.220" endtime="20210731 21:40:11.221"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.218" endtime="20210731 21:40:11.221"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:11.222" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:11.222" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:11.222" endtime="20210731 21:40:11.222"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.221" endtime="20210731 21:40:11.222"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:11.223" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:11.223" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:11.223" endtime="20210731 21:40:11.223"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:11.224" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:11.224" endtime="20210731 21:40:11.224"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:11.224" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:11.224" endtime="20210731 21:40:11.224"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:11.225" endtime="20210731 21:40:11.225"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:11.226" endtime="20210731 21:40:11.226"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.224" endtime="20210731 21:40:11.226"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:11.226" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:11.226" endtime="20210731 21:40:11.226"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:11.226" endtime="20210731 21:40:11.227"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:11.227" endtime="20210731 21:40:11.228"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.226" endtime="20210731 21:40:11.228"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:11.228" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:11.228" endtime="20210731 21:40:11.228"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:11.228" endtime="20210731 21:40:11.229"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:11.229" endtime="20210731 21:40:11.230"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.228" endtime="20210731 21:40:11.230"/>
</iter>
<status status="PASS" starttime="20210731 21:40:11.224" endtime="20210731 21:40:11.230"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:11.230" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:11.230" endtime="20210731 21:40:11.230"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.222" endtime="20210731 21:40:11.231"/>
</kw>
<status status="PASS" starttime="20210731 21:40:09.651" endtime="20210731 21:40:11.231"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:11.234" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:11.231" endtime="20210731 21:40:11.234"/>
</kw>
<msg timestamp="20210731 21:40:11.234" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:11.231" endtime="20210731 21:40:11.234"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>An empty first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:11.235" endtime="20210731 21:40:11.235"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.235" endtime="20210731 21:40:11.236"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:11.237" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:11.237" endtime="20210731 21:40:11.237"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:11.238" level="INFO">${payload} = {'firstname': ''}</msg>
<status status="PASS" starttime="20210731 21:40:11.237" endtime="20210731 21:40:11.238"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:11.249" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:11.250" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:11.238" endtime="20210731 21:40:11.250"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:11.250" endtime="20210731 21:40:11.250"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:11.250" endtime="20210731 21:40:11.250"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:11.238" endtime="20210731 21:40:11.250"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:11.238" endtime="20210731 21:40:11.250"/>
</for>
<status status="FAIL" starttime="20210731 21:40:11.236" endtime="20210731 21:40:11.251"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:11.236" endtime="20210731 21:40:11.251"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:11.236" endtime="20210731 21:40:11.251"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:11.255" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:11.273" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:11.273" level="INFO">${pids} = 10657
10664
10666</msg>
<status status="PASS" starttime="20210731 21:40:11.251" endtime="20210731 21:40:11.273"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:11.274" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:11.274" endtime="20210731 21:40:11.274"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:11.275" level="INFO">${pids} = ['10657', '10664', '10666']</msg>
<status status="PASS" starttime="20210731 21:40:11.275" endtime="20210731 21:40:11.275"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10657</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:11.280" level="INFO">Running command 'kill 10657 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:11.276" endtime="20210731 21:40:11.281"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.276" endtime="20210731 21:40:11.282"/>
</iter>
<iter>
<var name="${pid}">10664</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:11.285" level="INFO">Running command 'kill 10664 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:11.282" endtime="20210731 21:40:11.288"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.282" endtime="20210731 21:40:11.288"/>
</iter>
<iter>
<var name="${pid}">10666</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:11.294" level="INFO">Running command 'kill 10666 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:11.288" endtime="20210731 21:40:11.295"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.288" endtime="20210731 21:40:11.295"/>
</iter>
<status status="PASS" starttime="20210731 21:40:11.275" endtime="20210731 21:40:11.295"/>
</for>
<status status="PASS" starttime="20210731 21:40:11.275" endtime="20210731 21:40:11.295"/>
</branch>
<status status="PASS" starttime="20210731 21:40:11.275" endtime="20210731 21:40:11.295"/>
</if>
<status status="PASS" starttime="20210731 21:40:11.251" endtime="20210731 21:40:11.296"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": ''
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-FIRSTNAME-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:09.650" endtime="20210731 21:40:11.296">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t100" name="With Each Valid Token, Updating First Name Of Each System User With Hakan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:11.301" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:11.313" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:11.313" level="INFO">${pids} = 10695</msg>
<status status="PASS" starttime="20210731 21:40:11.298" endtime="20210731 21:40:11.313"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:11.314" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:11.313" endtime="20210731 21:40:11.314"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:11.315" level="INFO">${pids} = ['10695']</msg>
<status status="PASS" starttime="20210731 21:40:11.314" endtime="20210731 21:40:11.315"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10695</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:11.319" level="INFO">Running command 'kill 10695 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:11.315" endtime="20210731 21:40:11.320"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.315" endtime="20210731 21:40:11.320"/>
</iter>
<status status="PASS" starttime="20210731 21:40:11.315" endtime="20210731 21:40:11.320"/>
</for>
<status status="PASS" starttime="20210731 21:40:11.314" endtime="20210731 21:40:11.320"/>
</branch>
<status status="PASS" starttime="20210731 21:40:11.314" endtime="20210731 21:40:11.320"/>
</if>
<status status="PASS" starttime="20210731 21:40:11.298" endtime="20210731 21:40:11.321"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:11.322" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:11.322" endtime="20210731 21:40:11.322"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:11.323" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:11.323" endtime="20210731 21:40:11.323"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:11.323" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:11.323" endtime="20210731 21:40:11.323"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:11.324" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:11.323" endtime="20210731 21:40:11.324"/>
</kw>
<msg timestamp="20210731 21:40:11.324" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:11.322" endtime="20210731 21:40:11.324"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:11.329" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:11.324" endtime="20210731 21:40:11.331"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.321" endtime="20210731 21:40:11.332"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:11.333" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:11.333" endtime="20210731 21:40:11.338"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:12.839" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:11.338" endtime="20210731 21:40:12.839"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.332" endtime="20210731 21:40:12.839"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:12.841" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:12.840" endtime="20210731 21:40:12.841"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:12.841" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:12.841" endtime="20210731 21:40:12.841"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:12.842" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:12.841" endtime="20210731 21:40:12.842"/>
</kw>
<msg timestamp="20210731 21:40:12.842" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:12.840" endtime="20210731 21:40:12.842"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:12.843" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:12.842" endtime="20210731 21:40:12.843"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.840" endtime="20210731 21:40:12.843"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:12.844" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:12.844" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:12.844" endtime="20210731 21:40:12.844"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.843" endtime="20210731 21:40:12.844"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:12.845" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:12.845" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:12.845" endtime="20210731 21:40:12.845"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:12.845" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:12.845" endtime="20210731 21:40:12.845"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:12.846" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:12.846" endtime="20210731 21:40:12.846"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:12.846" endtime="20210731 21:40:12.847"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:12.847" endtime="20210731 21:40:12.848"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.846" endtime="20210731 21:40:12.848"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:12.848" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:12.848" endtime="20210731 21:40:12.849"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:12.849" endtime="20210731 21:40:12.850"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:12.850" endtime="20210731 21:40:12.850"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.848" endtime="20210731 21:40:12.850"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:12.850" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:12.850" endtime="20210731 21:40:12.850"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:12.851" endtime="20210731 21:40:12.851"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:12.851" endtime="20210731 21:40:12.852"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.850" endtime="20210731 21:40:12.852"/>
</iter>
<status status="PASS" starttime="20210731 21:40:12.845" endtime="20210731 21:40:12.852"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:12.852" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:12.852" endtime="20210731 21:40:12.852"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.844" endtime="20210731 21:40:12.853"/>
</kw>
<status status="PASS" starttime="20210731 21:40:11.297" endtime="20210731 21:40:12.853"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:12.856" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:12.853" endtime="20210731 21:40:12.856"/>
</kw>
<msg timestamp="20210731 21:40:12.856" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:12.853" endtime="20210731 21:40:12.856"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A first name containing more than 2 characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:12.857" endtime="20210731 21:40:12.857"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.857" endtime="20210731 21:40:12.858"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:12.859" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:12.859" endtime="20210731 21:40:12.859"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:12.860" level="INFO">${payload} = {'firstname': 'Hakan'}</msg>
<status status="PASS" starttime="20210731 21:40:12.859" endtime="20210731 21:40:12.860"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:12.870" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:12.871" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:12.860" endtime="20210731 21:40:12.871"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:12.871" endtime="20210731 21:40:12.871"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:12.871" endtime="20210731 21:40:12.871"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:12.860" endtime="20210731 21:40:12.871"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:12.860" endtime="20210731 21:40:12.871"/>
</for>
<status status="FAIL" starttime="20210731 21:40:12.858" endtime="20210731 21:40:12.872"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:12.858" endtime="20210731 21:40:12.872"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:12.858" endtime="20210731 21:40:12.872"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:12.876" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:12.899" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:12.899" level="INFO">${pids} = 10718
10725
10728</msg>
<status status="PASS" starttime="20210731 21:40:12.873" endtime="20210731 21:40:12.899"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:12.900" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:12.899" endtime="20210731 21:40:12.900"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:12.901" level="INFO">${pids} = ['10718', '10725', '10728']</msg>
<status status="PASS" starttime="20210731 21:40:12.900" endtime="20210731 21:40:12.901"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10718</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:12.905" level="INFO">Running command 'kill 10718 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:12.901" endtime="20210731 21:40:12.905"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.901" endtime="20210731 21:40:12.905"/>
</iter>
<iter>
<var name="${pid}">10725</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:12.909" level="INFO">Running command 'kill 10725 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:12.906" endtime="20210731 21:40:12.910"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.905" endtime="20210731 21:40:12.910"/>
</iter>
<iter>
<var name="${pid}">10728</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:12.915" level="INFO">Running command 'kill 10728 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:12.910" endtime="20210731 21:40:12.916"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.910" endtime="20210731 21:40:12.916"/>
</iter>
<status status="PASS" starttime="20210731 21:40:12.901" endtime="20210731 21:40:12.916"/>
</for>
<status status="PASS" starttime="20210731 21:40:12.900" endtime="20210731 21:40:12.916"/>
</branch>
<status status="PASS" starttime="20210731 21:40:12.900" endtime="20210731 21:40:12.916"/>
</if>
<status status="PASS" starttime="20210731 21:40:12.872" endtime="20210731 21:40:12.916"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Hakan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</tag>
<tag>REQ-API-FIRSTNAME-VALID</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-NO-PHONE</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:11.296" endtime="20210731 21:40:12.916">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t101" name="With Each Valid Token, Updating First Name Of Each System User With Hakan123!?. Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:12.922" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:12.935" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:12.936" level="INFO">${pids} = 10757</msg>
<status status="PASS" starttime="20210731 21:40:12.919" endtime="20210731 21:40:12.936"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:12.937" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:12.936" endtime="20210731 21:40:12.937"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:12.938" level="INFO">${pids} = ['10757']</msg>
<status status="PASS" starttime="20210731 21:40:12.937" endtime="20210731 21:40:12.939"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10757</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:12.942" level="INFO">Running command 'kill 10757 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:12.939" endtime="20210731 21:40:12.948"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.939" endtime="20210731 21:40:12.948"/>
</iter>
<status status="PASS" starttime="20210731 21:40:12.939" endtime="20210731 21:40:12.948"/>
</for>
<status status="PASS" starttime="20210731 21:40:12.937" endtime="20210731 21:40:12.948"/>
</branch>
<status status="PASS" starttime="20210731 21:40:12.937" endtime="20210731 21:40:12.948"/>
</if>
<status status="PASS" starttime="20210731 21:40:12.918" endtime="20210731 21:40:12.948"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:12.950" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:12.949" endtime="20210731 21:40:12.950"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:12.951" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:12.950" endtime="20210731 21:40:12.951"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:12.951" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:12.951" endtime="20210731 21:40:12.951"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:12.951" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:12.951" endtime="20210731 21:40:12.952"/>
</kw>
<msg timestamp="20210731 21:40:12.952" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:12.950" endtime="20210731 21:40:12.952"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:12.958" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:12.952" endtime="20210731 21:40:12.960"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.949" endtime="20210731 21:40:12.960"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:12.961" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:12.961" endtime="20210731 21:40:12.972"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:14.473" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:12.972" endtime="20210731 21:40:14.473"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.960" endtime="20210731 21:40:14.474"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:14.475" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:14.475" endtime="20210731 21:40:14.475"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:14.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:14.475" endtime="20210731 21:40:14.476"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:14.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:14.476" endtime="20210731 21:40:14.476"/>
</kw>
<msg timestamp="20210731 21:40:14.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:14.474" endtime="20210731 21:40:14.476"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:14.477" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:14.477" endtime="20210731 21:40:14.477"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.474" endtime="20210731 21:40:14.478"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:14.478" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:14.478" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:14.478" endtime="20210731 21:40:14.478"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.478" endtime="20210731 21:40:14.479"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:14.479" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:14.480" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:14.479" endtime="20210731 21:40:14.480"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:14.480" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:14.480" endtime="20210731 21:40:14.480"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:14.481" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:14.480" endtime="20210731 21:40:14.481"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:14.481" endtime="20210731 21:40:14.482"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:14.482" endtime="20210731 21:40:14.482"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.480" endtime="20210731 21:40:14.482"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:14.483" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:14.482" endtime="20210731 21:40:14.483"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:14.483" endtime="20210731 21:40:14.484"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:14.484" endtime="20210731 21:40:14.484"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.482" endtime="20210731 21:40:14.484"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:14.485" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:14.484" endtime="20210731 21:40:14.485"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:14.485" endtime="20210731 21:40:14.486"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:14.486" endtime="20210731 21:40:14.486"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.484" endtime="20210731 21:40:14.486"/>
</iter>
<status status="PASS" starttime="20210731 21:40:14.480" endtime="20210731 21:40:14.486"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:14.487" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:14.486" endtime="20210731 21:40:14.487"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.479" endtime="20210731 21:40:14.487"/>
</kw>
<status status="PASS" starttime="20210731 21:40:12.918" endtime="20210731 21:40:14.487"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:14.491" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:14.488" endtime="20210731 21:40:14.491"/>
</kw>
<msg timestamp="20210731 21:40:14.491" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:14.487" endtime="20210731 21:40:14.491"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A name containing numbers and non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:14.492" endtime="20210731 21:40:14.493"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.491" endtime="20210731 21:40:14.493"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:14.494" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:14.494" endtime="20210731 21:40:14.494"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:14.495" level="INFO">${payload} = {'firstname': 'Hakan123!?.'}</msg>
<status status="PASS" starttime="20210731 21:40:14.495" endtime="20210731 21:40:14.495"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:14.506" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:14.506" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:14.495" endtime="20210731 21:40:14.506"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:14.506" endtime="20210731 21:40:14.506"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:14.506" endtime="20210731 21:40:14.506"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:14.495" endtime="20210731 21:40:14.507"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:14.495" endtime="20210731 21:40:14.507"/>
</for>
<status status="FAIL" starttime="20210731 21:40:14.493" endtime="20210731 21:40:14.507"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:14.493" endtime="20210731 21:40:14.507"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:14.493" endtime="20210731 21:40:14.507"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:14.512" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:14.523" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:14.523" level="INFO">${pids} = 10780
10787
10789</msg>
<status status="PASS" starttime="20210731 21:40:14.508" endtime="20210731 21:40:14.524"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:14.525" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:14.524" endtime="20210731 21:40:14.525"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:14.525" level="INFO">${pids} = ['10780', '10787', '10789']</msg>
<status status="PASS" starttime="20210731 21:40:14.525" endtime="20210731 21:40:14.525"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10780</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:14.541" level="INFO">Running command 'kill 10780 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:14.526" endtime="20210731 21:40:14.542"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.526" endtime="20210731 21:40:14.542"/>
</iter>
<iter>
<var name="${pid}">10787</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:14.547" level="INFO">Running command 'kill 10787 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:14.542" endtime="20210731 21:40:14.547"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.542" endtime="20210731 21:40:14.547"/>
</iter>
<iter>
<var name="${pid}">10789</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:14.551" level="INFO">Running command 'kill 10789 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:14.548" endtime="20210731 21:40:14.551"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.548" endtime="20210731 21:40:14.552"/>
</iter>
<status status="PASS" starttime="20210731 21:40:14.525" endtime="20210731 21:40:14.552"/>
</for>
<status status="PASS" starttime="20210731 21:40:14.525" endtime="20210731 21:40:14.552"/>
</branch>
<status status="PASS" starttime="20210731 21:40:14.525" endtime="20210731 21:40:14.552"/>
</if>
<status status="PASS" starttime="20210731 21:40:14.507" endtime="20210731 21:40:14.552"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Hakan123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-FIRSTNAME-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:12.917" endtime="20210731 21:40:14.552">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t102" name="With Each Valid Token, Updating First Name Of Each System User With Ha Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:14.558" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:14.571" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:14.571" level="INFO">${pids} = 10818</msg>
<status status="PASS" starttime="20210731 21:40:14.555" endtime="20210731 21:40:14.571"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:14.572" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:14.572" endtime="20210731 21:40:14.572"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:14.573" level="INFO">${pids} = ['10818']</msg>
<status status="PASS" starttime="20210731 21:40:14.573" endtime="20210731 21:40:14.573"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10818</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:14.577" level="INFO">Running command 'kill 10818 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:14.574" endtime="20210731 21:40:14.578"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.574" endtime="20210731 21:40:14.578"/>
</iter>
<status status="PASS" starttime="20210731 21:40:14.573" endtime="20210731 21:40:14.578"/>
</for>
<status status="PASS" starttime="20210731 21:40:14.573" endtime="20210731 21:40:14.578"/>
</branch>
<status status="PASS" starttime="20210731 21:40:14.573" endtime="20210731 21:40:14.578"/>
</if>
<status status="PASS" starttime="20210731 21:40:14.554" endtime="20210731 21:40:14.578"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:14.580" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:14.579" endtime="20210731 21:40:14.580"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:14.581" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:14.580" endtime="20210731 21:40:14.581"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:14.582" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:14.581" endtime="20210731 21:40:14.582"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:14.582" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:14.582" endtime="20210731 21:40:14.582"/>
</kw>
<msg timestamp="20210731 21:40:14.582" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:14.580" endtime="20210731 21:40:14.582"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:14.588" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:14.583" endtime="20210731 21:40:14.590"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.578" endtime="20210731 21:40:14.590"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:14.591" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:14.591" endtime="20210731 21:40:14.595"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:16.097" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:14.596" endtime="20210731 21:40:16.097"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.590" endtime="20210731 21:40:16.097"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:16.099" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:16.099" endtime="20210731 21:40:16.099"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:16.099" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:16.099" endtime="20210731 21:40:16.099"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:16.100" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:16.099" endtime="20210731 21:40:16.100"/>
</kw>
<msg timestamp="20210731 21:40:16.100" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:16.098" endtime="20210731 21:40:16.100"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:16.101" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:16.100" endtime="20210731 21:40:16.101"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.098" endtime="20210731 21:40:16.101"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:16.102" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:16.102" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:16.102" endtime="20210731 21:40:16.102"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.101" endtime="20210731 21:40:16.102"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:16.103" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:16.103" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:16.103" endtime="20210731 21:40:16.103"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:16.104" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:16.103" endtime="20210731 21:40:16.104"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:16.104" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:16.104" endtime="20210731 21:40:16.104"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:16.104" endtime="20210731 21:40:16.105"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:16.106" endtime="20210731 21:40:16.106"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.104" endtime="20210731 21:40:16.106"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:16.106" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:16.106" endtime="20210731 21:40:16.106"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:16.106" endtime="20210731 21:40:16.107"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:16.107" endtime="20210731 21:40:16.108"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.106" endtime="20210731 21:40:16.108"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:16.108" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:16.108" endtime="20210731 21:40:16.108"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:16.108" endtime="20210731 21:40:16.109"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:16.109" endtime="20210731 21:40:16.110"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.108" endtime="20210731 21:40:16.110"/>
</iter>
<status status="PASS" starttime="20210731 21:40:16.104" endtime="20210731 21:40:16.110"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:16.110" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:16.110" endtime="20210731 21:40:16.110"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.102" endtime="20210731 21:40:16.111"/>
</kw>
<status status="PASS" starttime="20210731 21:40:14.554" endtime="20210731 21:40:16.111"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:16.114" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:16.111" endtime="20210731 21:40:16.114"/>
</kw>
<msg timestamp="20210731 21:40:16.114" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:16.111" endtime="20210731 21:40:16.115"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A minimum 2 characters first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:16.115" endtime="20210731 21:40:16.116"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.115" endtime="20210731 21:40:16.116"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:16.117" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:16.117" endtime="20210731 21:40:16.117"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:16.118" level="INFO">${payload} = {'firstname': 'Ha'}</msg>
<status status="PASS" starttime="20210731 21:40:16.117" endtime="20210731 21:40:16.118"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:16.129" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:16.129" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:16.118" endtime="20210731 21:40:16.129"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:16.129" endtime="20210731 21:40:16.129"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:16.130" endtime="20210731 21:40:16.130"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:16.118" endtime="20210731 21:40:16.130"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:16.118" endtime="20210731 21:40:16.130"/>
</for>
<status status="FAIL" starttime="20210731 21:40:16.116" endtime="20210731 21:40:16.130"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:16.116" endtime="20210731 21:40:16.130"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:16.116" endtime="20210731 21:40:16.130"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:16.134" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:16.156" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:16.157" level="INFO">${pids} = 10841
10848
10850</msg>
<status status="PASS" starttime="20210731 21:40:16.131" endtime="20210731 21:40:16.157"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:16.158" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:16.157" endtime="20210731 21:40:16.158"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:16.158" level="INFO">${pids} = ['10841', '10848', '10850']</msg>
<status status="PASS" starttime="20210731 21:40:16.158" endtime="20210731 21:40:16.158"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10841</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:16.162" level="INFO">Running command 'kill 10841 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:16.159" endtime="20210731 21:40:16.162"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.159" endtime="20210731 21:40:16.163"/>
</iter>
<iter>
<var name="${pid}">10848</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:16.166" level="INFO">Running command 'kill 10848 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:16.163" endtime="20210731 21:40:16.169"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.163" endtime="20210731 21:40:16.169"/>
</iter>
<iter>
<var name="${pid}">10850</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:16.173" level="INFO">Running command 'kill 10850 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:16.170" endtime="20210731 21:40:16.174"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.170" endtime="20210731 21:40:16.174"/>
</iter>
<status status="PASS" starttime="20210731 21:40:16.158" endtime="20210731 21:40:16.174"/>
</for>
<status status="PASS" starttime="20210731 21:40:16.158" endtime="20210731 21:40:16.174"/>
</branch>
<status status="PASS" starttime="20210731 21:40:16.158" endtime="20210731 21:40:16.174"/>
</if>
<status status="PASS" starttime="20210731 21:40:16.130" endtime="20210731 21:40:16.175"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha'
}
Then, each request should fail with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</tag>
<tag>REQ-API-FIRSTNAME-VALID</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-NO-PHONE</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:14.553" endtime="20210731 21:40:16.175">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t103" name="With Each Valid Token, Updating First Name Of Each System User With Ha Xu Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:16.180" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:16.196" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:16.196" level="INFO">${pids} = 10879</msg>
<status status="PASS" starttime="20210731 21:40:16.177" endtime="20210731 21:40:16.196"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:16.197" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:16.196" endtime="20210731 21:40:16.197"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:16.198" level="INFO">${pids} = ['10879']</msg>
<status status="PASS" starttime="20210731 21:40:16.198" endtime="20210731 21:40:16.198"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10879</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:16.203" level="INFO">Running command 'kill 10879 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:16.198" endtime="20210731 21:40:16.203"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.198" endtime="20210731 21:40:16.203"/>
</iter>
<status status="PASS" starttime="20210731 21:40:16.198" endtime="20210731 21:40:16.203"/>
</for>
<status status="PASS" starttime="20210731 21:40:16.197" endtime="20210731 21:40:16.203"/>
</branch>
<status status="PASS" starttime="20210731 21:40:16.197" endtime="20210731 21:40:16.203"/>
</if>
<status status="PASS" starttime="20210731 21:40:16.177" endtime="20210731 21:40:16.204"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:16.205" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:16.205" endtime="20210731 21:40:16.205"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:16.206" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:16.206" endtime="20210731 21:40:16.206"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:16.206" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:16.206" endtime="20210731 21:40:16.206"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:16.207" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:16.207" endtime="20210731 21:40:16.207"/>
</kw>
<msg timestamp="20210731 21:40:16.207" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:16.205" endtime="20210731 21:40:16.207"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:16.211" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:16.207" endtime="20210731 21:40:16.214"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.204" endtime="20210731 21:40:16.225"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:16.227" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:16.226" endtime="20210731 21:40:16.241"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:17.743" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:16.242" endtime="20210731 21:40:17.743"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.226" endtime="20210731 21:40:17.743"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:17.745" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:17.744" endtime="20210731 21:40:17.745"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:17.746" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:17.745" endtime="20210731 21:40:17.746"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:17.746" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:17.746" endtime="20210731 21:40:17.746"/>
</kw>
<msg timestamp="20210731 21:40:17.746" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:17.744" endtime="20210731 21:40:17.746"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:17.747" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:17.747" endtime="20210731 21:40:17.747"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.744" endtime="20210731 21:40:17.748"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:17.748" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:17.748" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:17.748" endtime="20210731 21:40:17.748"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.748" endtime="20210731 21:40:17.749"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:17.749" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:17.749" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:17.749" endtime="20210731 21:40:17.749"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:17.750" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:17.750" endtime="20210731 21:40:17.750"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:17.750" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:17.750" endtime="20210731 21:40:17.750"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:17.751" endtime="20210731 21:40:17.751"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:17.752" endtime="20210731 21:40:17.752"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.750" endtime="20210731 21:40:17.752"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:17.752" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:17.752" endtime="20210731 21:40:17.752"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:17.752" endtime="20210731 21:40:17.753"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:17.753" endtime="20210731 21:40:17.754"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.752" endtime="20210731 21:40:17.754"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:17.754" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:17.754" endtime="20210731 21:40:17.754"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:17.754" endtime="20210731 21:40:17.755"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:17.755" endtime="20210731 21:40:17.756"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.754" endtime="20210731 21:40:17.756"/>
</iter>
<status status="PASS" starttime="20210731 21:40:17.750" endtime="20210731 21:40:17.756"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:17.756" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:17.756" endtime="20210731 21:40:17.756"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.749" endtime="20210731 21:40:17.757"/>
</kw>
<status status="PASS" starttime="20210731 21:40:16.177" endtime="20210731 21:40:17.757"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:17.761" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:17.758" endtime="20210731 21:40:17.761"/>
</kw>
<msg timestamp="20210731 21:40:17.761" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:17.757" endtime="20210731 21:40:17.761"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>minimum 2 characters first names for each first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:17.762" endtime="20210731 21:40:17.762"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.761" endtime="20210731 21:40:17.762"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:17.764" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:17.764" endtime="20210731 21:40:17.764"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:17.764" level="INFO">${payload} = {'firstname': 'Ha Xu'}</msg>
<status status="PASS" starttime="20210731 21:40:17.764" endtime="20210731 21:40:17.765"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:17.778" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:17.778" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:17.765" endtime="20210731 21:40:17.778"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:17.778" endtime="20210731 21:40:17.778"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:17.778" endtime="20210731 21:40:17.779"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:17.765" endtime="20210731 21:40:17.779"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:17.765" endtime="20210731 21:40:17.779"/>
</for>
<status status="FAIL" starttime="20210731 21:40:17.763" endtime="20210731 21:40:17.779"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:17.763" endtime="20210731 21:40:17.779"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:17.762" endtime="20210731 21:40:17.779"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:17.783" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:17.807" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:17.807" level="INFO">${pids} = 10902
10909
10912</msg>
<status status="PASS" starttime="20210731 21:40:17.780" endtime="20210731 21:40:17.807"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:17.808" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:17.808" endtime="20210731 21:40:17.808"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:17.810" level="INFO">${pids} = ['10902', '10909', '10912']</msg>
<status status="PASS" starttime="20210731 21:40:17.809" endtime="20210731 21:40:17.810"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10902</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:17.814" level="INFO">Running command 'kill 10902 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:17.810" endtime="20210731 21:40:17.814"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.810" endtime="20210731 21:40:17.814"/>
</iter>
<iter>
<var name="${pid}">10909</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:17.818" level="INFO">Running command 'kill 10909 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:17.815" endtime="20210731 21:40:17.819"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.814" endtime="20210731 21:40:17.819"/>
</iter>
<iter>
<var name="${pid}">10912</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:17.823" level="INFO">Running command 'kill 10912 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:17.819" endtime="20210731 21:40:17.823"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.819" endtime="20210731 21:40:17.823"/>
</iter>
<status status="PASS" starttime="20210731 21:40:17.810" endtime="20210731 21:40:17.823"/>
</for>
<status status="PASS" starttime="20210731 21:40:17.809" endtime="20210731 21:40:17.824"/>
</branch>
<status status="PASS" starttime="20210731 21:40:17.809" endtime="20210731 21:40:17.824"/>
</if>
<status status="PASS" starttime="20210731 21:40:17.779" endtime="20210731 21:40:17.824"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha Xu'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</tag>
<tag>REQ-API-FIRSTNAME-VALID</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-NO-PHONE</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:16.176" endtime="20210731 21:40:17.824">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t104" name="With Each Valid Token, Updating First Name Of Each System User With H Xu Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:17.829" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:17.844" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:17.844" level="INFO">${pids} = 10941</msg>
<status status="PASS" starttime="20210731 21:40:17.826" endtime="20210731 21:40:17.844"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:17.845" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:17.844" endtime="20210731 21:40:17.845"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:17.846" level="INFO">${pids} = ['10941']</msg>
<status status="PASS" starttime="20210731 21:40:17.846" endtime="20210731 21:40:17.846"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10941</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:17.849" level="INFO">Running command 'kill 10941 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:17.846" endtime="20210731 21:40:17.850"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.846" endtime="20210731 21:40:17.850"/>
</iter>
<status status="PASS" starttime="20210731 21:40:17.846" endtime="20210731 21:40:17.850"/>
</for>
<status status="PASS" starttime="20210731 21:40:17.845" endtime="20210731 21:40:17.850"/>
</branch>
<status status="PASS" starttime="20210731 21:40:17.845" endtime="20210731 21:40:17.850"/>
</if>
<status status="PASS" starttime="20210731 21:40:17.826" endtime="20210731 21:40:17.850"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:17.852" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:17.851" endtime="20210731 21:40:17.852"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:17.853" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:17.852" endtime="20210731 21:40:17.853"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:17.853" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:17.853" endtime="20210731 21:40:17.853"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:17.854" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:17.853" endtime="20210731 21:40:17.854"/>
</kw>
<msg timestamp="20210731 21:40:17.854" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:17.852" endtime="20210731 21:40:17.854"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:17.858" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:17.854" endtime="20210731 21:40:17.860"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.851" endtime="20210731 21:40:17.860"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:17.862" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:17.861" endtime="20210731 21:40:17.865"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:19.367" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:17.866" endtime="20210731 21:40:19.367"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.861" endtime="20210731 21:40:19.367"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:19.368" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:19.368" endtime="20210731 21:40:19.368"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:19.369" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:19.368" endtime="20210731 21:40:19.369"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:19.369" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:19.369" endtime="20210731 21:40:19.369"/>
</kw>
<msg timestamp="20210731 21:40:19.370" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:19.368" endtime="20210731 21:40:19.370"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:19.370" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:19.370" endtime="20210731 21:40:19.371"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.367" endtime="20210731 21:40:19.371"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:19.371" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:19.371" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:19.371" endtime="20210731 21:40:19.372"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.371" endtime="20210731 21:40:19.372"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:19.372" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:19.372" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:19.372" endtime="20210731 21:40:19.373"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:19.373" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:19.373" endtime="20210731 21:40:19.373"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:19.374" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:19.373" endtime="20210731 21:40:19.374"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:19.374" endtime="20210731 21:40:19.375"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:19.375" endtime="20210731 21:40:19.375"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.373" endtime="20210731 21:40:19.375"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:19.376" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:19.375" endtime="20210731 21:40:19.376"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:19.376" endtime="20210731 21:40:19.377"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:19.377" endtime="20210731 21:40:19.377"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.375" endtime="20210731 21:40:19.377"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:19.378" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:19.377" endtime="20210731 21:40:19.378"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:19.378" endtime="20210731 21:40:19.379"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:19.379" endtime="20210731 21:40:19.379"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.377" endtime="20210731 21:40:19.379"/>
</iter>
<status status="PASS" starttime="20210731 21:40:19.373" endtime="20210731 21:40:19.379"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:19.380" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:19.379" endtime="20210731 21:40:19.380"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.372" endtime="20210731 21:40:19.380"/>
</kw>
<status status="PASS" starttime="20210731 21:40:17.826" endtime="20210731 21:40:19.380"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:19.384" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:19.381" endtime="20210731 21:40:19.384"/>
</kw>
<msg timestamp="20210731 21:40:19.384" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:19.380" endtime="20210731 21:40:19.384"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The first first name is invalid with only 1 letter, the second first name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:19.385" endtime="20210731 21:40:19.385"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.384" endtime="20210731 21:40:19.385"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:19.387" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:19.386" endtime="20210731 21:40:19.387"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:19.387" level="INFO">${payload} = {'firstname': 'H Xu'}</msg>
<status status="PASS" starttime="20210731 21:40:19.387" endtime="20210731 21:40:19.387"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:19.397" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:19.398" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:19.388" endtime="20210731 21:40:19.398"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:19.398" endtime="20210731 21:40:19.398"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:19.398" endtime="20210731 21:40:19.398"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:19.388" endtime="20210731 21:40:19.398"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:19.387" endtime="20210731 21:40:19.398"/>
</for>
<status status="FAIL" starttime="20210731 21:40:19.386" endtime="20210731 21:40:19.398"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:19.386" endtime="20210731 21:40:19.399"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:19.385" endtime="20210731 21:40:19.399"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:19.402" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:19.426" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:19.426" level="INFO">${pids} = 10964
10971
10973</msg>
<status status="PASS" starttime="20210731 21:40:19.399" endtime="20210731 21:40:19.426"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:19.427" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:19.426" endtime="20210731 21:40:19.427"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:19.428" level="INFO">${pids} = ['10964', '10971', '10973']</msg>
<status status="PASS" starttime="20210731 21:40:19.427" endtime="20210731 21:40:19.428"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">10964</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:19.434" level="INFO">Running command 'kill 10964 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:19.428" endtime="20210731 21:40:19.435"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.428" endtime="20210731 21:40:19.435"/>
</iter>
<iter>
<var name="${pid}">10971</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:19.440" level="INFO">Running command 'kill 10971 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:19.435" endtime="20210731 21:40:19.441"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.435" endtime="20210731 21:40:19.441"/>
</iter>
<iter>
<var name="${pid}">10973</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:19.445" level="INFO">Running command 'kill 10973 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:19.442" endtime="20210731 21:40:19.446"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.441" endtime="20210731 21:40:19.446"/>
</iter>
<status status="PASS" starttime="20210731 21:40:19.428" endtime="20210731 21:40:19.446"/>
</for>
<status status="PASS" starttime="20210731 21:40:19.427" endtime="20210731 21:40:19.446"/>
</branch>
<status status="PASS" starttime="20210731 21:40:19.427" endtime="20210731 21:40:19.446"/>
</if>
<status status="PASS" starttime="20210731 21:40:19.399" endtime="20210731 21:40:19.446"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'H Xu'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-FIRSTNAME-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:17.825" endtime="20210731 21:40:19.446">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t105" name="With Each Valid Token, Updating First Name Of Each System User With Ha X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:19.452" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:19.464" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:19.464" level="INFO">${pids} = 11002</msg>
<status status="PASS" starttime="20210731 21:40:19.449" endtime="20210731 21:40:19.464"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:19.466" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:19.465" endtime="20210731 21:40:19.466"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:19.467" level="INFO">${pids} = ['11002']</msg>
<status status="PASS" starttime="20210731 21:40:19.467" endtime="20210731 21:40:19.467"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11002</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:19.471" level="INFO">Running command 'kill 11002 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:19.467" endtime="20210731 21:40:19.471"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.467" endtime="20210731 21:40:19.471"/>
</iter>
<status status="PASS" starttime="20210731 21:40:19.467" endtime="20210731 21:40:19.471"/>
</for>
<status status="PASS" starttime="20210731 21:40:19.466" endtime="20210731 21:40:19.471"/>
</branch>
<status status="PASS" starttime="20210731 21:40:19.466" endtime="20210731 21:40:19.472"/>
</if>
<status status="PASS" starttime="20210731 21:40:19.448" endtime="20210731 21:40:19.472"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:19.473" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:19.473" endtime="20210731 21:40:19.474"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:19.474" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:19.474" endtime="20210731 21:40:19.474"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:19.475" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:19.475" endtime="20210731 21:40:19.475"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:19.475" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:19.475" endtime="20210731 21:40:19.476"/>
</kw>
<msg timestamp="20210731 21:40:19.476" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:19.474" endtime="20210731 21:40:19.476"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:19.482" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:19.476" endtime="20210731 21:40:19.483"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.472" endtime="20210731 21:40:19.484"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:19.485" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:19.485" endtime="20210731 21:40:19.490"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:20.991" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:19.490" endtime="20210731 21:40:20.992"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.484" endtime="20210731 21:40:20.992"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:20.993" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:20.993" endtime="20210731 21:40:20.994"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:20.994" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:20.994" endtime="20210731 21:40:20.994"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:20.994" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:20.994" endtime="20210731 21:40:20.994"/>
</kw>
<msg timestamp="20210731 21:40:20.995" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:20.993" endtime="20210731 21:40:20.995"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:20.995" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:20.995" endtime="20210731 21:40:20.996"/>
</kw>
<status status="PASS" starttime="20210731 21:40:20.992" endtime="20210731 21:40:20.996"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:20.996" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:20.996" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:20.996" endtime="20210731 21:40:20.997"/>
</kw>
<status status="PASS" starttime="20210731 21:40:20.996" endtime="20210731 21:40:20.997"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:20.998" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:20.998" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:20.997" endtime="20210731 21:40:20.998"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:20.998" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:20.998" endtime="20210731 21:40:20.998"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:20.999" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:20.999" endtime="20210731 21:40:20.999"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:20.999" endtime="20210731 21:40:21.000"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:21.000" endtime="20210731 21:40:21.000"/>
</kw>
<status status="PASS" starttime="20210731 21:40:20.998" endtime="20210731 21:40:21.001"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:21.001" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:21.001" endtime="20210731 21:40:21.001"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:21.001" endtime="20210731 21:40:21.002"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:21.003" endtime="20210731 21:40:21.003"/>
</kw>
<status status="PASS" starttime="20210731 21:40:21.001" endtime="20210731 21:40:21.003"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:21.003" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:21.003" endtime="20210731 21:40:21.003"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:21.004" endtime="20210731 21:40:21.004"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:21.005" endtime="20210731 21:40:21.005"/>
</kw>
<status status="PASS" starttime="20210731 21:40:21.003" endtime="20210731 21:40:21.005"/>
</iter>
<status status="PASS" starttime="20210731 21:40:20.998" endtime="20210731 21:40:21.005"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:21.006" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:21.005" endtime="20210731 21:40:21.006"/>
</kw>
<status status="PASS" starttime="20210731 21:40:20.997" endtime="20210731 21:40:21.006"/>
</kw>
<status status="PASS" starttime="20210731 21:40:19.448" endtime="20210731 21:40:21.006"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:21.010" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:21.007" endtime="20210731 21:40:21.010"/>
</kw>
<msg timestamp="20210731 21:40:21.010" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:21.006" endtime="20210731 21:40:21.010"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The second first name is invalid with only 1 letter, the first first name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:21.011" endtime="20210731 21:40:21.012"/>
</kw>
<status status="PASS" starttime="20210731 21:40:21.010" endtime="20210731 21:40:21.012"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:21.013" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:21.013" endtime="20210731 21:40:21.013"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:21.014" level="INFO">${payload} = {'firstname': 'Ha X'}</msg>
<status status="PASS" starttime="20210731 21:40:21.013" endtime="20210731 21:40:21.014"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:21.024" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:21.025" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:21.014" endtime="20210731 21:40:21.025"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:21.025" endtime="20210731 21:40:21.025"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:21.025" endtime="20210731 21:40:21.025"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:21.014" endtime="20210731 21:40:21.025"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:21.014" endtime="20210731 21:40:21.025"/>
</for>
<status status="FAIL" starttime="20210731 21:40:21.012" endtime="20210731 21:40:21.025"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:21.012" endtime="20210731 21:40:21.025"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:21.012" endtime="20210731 21:40:21.025"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:21.029" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:21.053" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:21.053" level="INFO">${pids} = 11025
11032
11034</msg>
<status status="PASS" starttime="20210731 21:40:21.026" endtime="20210731 21:40:21.053"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:21.054" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:21.053" endtime="20210731 21:40:21.054"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:21.055" level="INFO">${pids} = ['11025', '11032', '11034']</msg>
<status status="PASS" starttime="20210731 21:40:21.054" endtime="20210731 21:40:21.055"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11025</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:21.059" level="INFO">Running command 'kill 11025 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:21.055" endtime="20210731 21:40:21.059"/>
</kw>
<status status="PASS" starttime="20210731 21:40:21.055" endtime="20210731 21:40:21.059"/>
</iter>
<iter>
<var name="${pid}">11032</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:21.063" level="INFO">Running command 'kill 11032 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:21.060" endtime="20210731 21:40:21.063"/>
</kw>
<status status="PASS" starttime="20210731 21:40:21.059" endtime="20210731 21:40:21.063"/>
</iter>
<iter>
<var name="${pid}">11034</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:21.067" level="INFO">Running command 'kill 11034 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:21.064" endtime="20210731 21:40:21.067"/>
</kw>
<status status="PASS" starttime="20210731 21:40:21.063" endtime="20210731 21:40:21.067"/>
</iter>
<status status="PASS" starttime="20210731 21:40:21.055" endtime="20210731 21:40:21.067"/>
</for>
<status status="PASS" starttime="20210731 21:40:21.054" endtime="20210731 21:40:21.068"/>
</branch>
<status status="PASS" starttime="20210731 21:40:21.054" endtime="20210731 21:40:21.068"/>
</if>
<status status="PASS" starttime="20210731 21:40:21.026" endtime="20210731 21:40:21.068"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha X'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-FIRSTNAME-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:19.447" endtime="20210731 21:40:21.068">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t106" name="With Each Valid Token, Updating First Name Of Each System User With H X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:21.074" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:21.087" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:21.087" level="INFO">${pids} = 11063</msg>
<status status="PASS" starttime="20210731 21:40:21.070" endtime="20210731 21:40:21.087"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:21.088" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:21.088" endtime="20210731 21:40:21.088"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:21.089" level="INFO">${pids} = ['11063']</msg>
<status status="PASS" starttime="20210731 21:40:21.089" endtime="20210731 21:40:21.089"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11063</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:21.093" level="INFO">Running command 'kill 11063 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:21.090" endtime="20210731 21:40:21.094"/>
</kw>
<status status="PASS" starttime="20210731 21:40:21.090" endtime="20210731 21:40:21.094"/>
</iter>
<status status="PASS" starttime="20210731 21:40:21.089" endtime="20210731 21:40:21.094"/>
</for>
<status status="PASS" starttime="20210731 21:40:21.089" endtime="20210731 21:40:21.094"/>
</branch>
<status status="PASS" starttime="20210731 21:40:21.088" endtime="20210731 21:40:21.094"/>
</if>
<status status="PASS" starttime="20210731 21:40:21.070" endtime="20210731 21:40:21.094"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:21.096" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:21.095" endtime="20210731 21:40:21.096"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:21.097" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:21.096" endtime="20210731 21:40:21.097"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:21.097" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:21.097" endtime="20210731 21:40:21.097"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:21.098" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:21.097" endtime="20210731 21:40:21.098"/>
</kw>
<msg timestamp="20210731 21:40:21.098" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:21.096" endtime="20210731 21:40:21.098"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:21.104" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:21.098" endtime="20210731 21:40:21.106"/>
</kw>
<status status="PASS" starttime="20210731 21:40:21.095" endtime="20210731 21:40:21.106"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:21.108" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:21.107" endtime="20210731 21:40:21.112"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:22.614" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:21.113" endtime="20210731 21:40:22.614"/>
</kw>
<status status="PASS" starttime="20210731 21:40:21.106" endtime="20210731 21:40:22.614"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:22.615" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:22.615" endtime="20210731 21:40:22.615"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:22.616" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:22.616" endtime="20210731 21:40:22.616"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:22.616" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:22.616" endtime="20210731 21:40:22.616"/>
</kw>
<msg timestamp="20210731 21:40:22.617" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:22.615" endtime="20210731 21:40:22.617"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:22.617" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:22.617" endtime="20210731 21:40:22.618"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.614" endtime="20210731 21:40:22.618"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:22.618" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:22.618" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:22.618" endtime="20210731 21:40:22.619"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.618" endtime="20210731 21:40:22.619"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:22.619" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:22.620" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:22.619" endtime="20210731 21:40:22.620"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:22.620" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:22.620" endtime="20210731 21:40:22.620"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:22.621" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:22.620" endtime="20210731 21:40:22.621"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:22.621" endtime="20210731 21:40:22.622"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:22.622" endtime="20210731 21:40:22.622"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.620" endtime="20210731 21:40:22.622"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:22.623" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:22.622" endtime="20210731 21:40:22.623"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:22.623" endtime="20210731 21:40:22.624"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:22.624" endtime="20210731 21:40:22.624"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.622" endtime="20210731 21:40:22.624"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:22.625" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:22.624" endtime="20210731 21:40:22.625"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:22.625" endtime="20210731 21:40:22.626"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:22.626" endtime="20210731 21:40:22.626"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.624" endtime="20210731 21:40:22.626"/>
</iter>
<status status="PASS" starttime="20210731 21:40:22.620" endtime="20210731 21:40:22.626"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:22.627" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:22.626" endtime="20210731 21:40:22.627"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.619" endtime="20210731 21:40:22.627"/>
</kw>
<status status="PASS" starttime="20210731 21:40:21.070" endtime="20210731 21:40:22.627"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:22.630" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:22.627" endtime="20210731 21:40:22.630"/>
</kw>
<msg timestamp="20210731 21:40:22.631" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:22.627" endtime="20210731 21:40:22.631"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The both first names are invalid with only 1 letter</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:22.631" endtime="20210731 21:40:22.632"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.631" endtime="20210731 21:40:22.632"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:22.633" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:22.633" endtime="20210731 21:40:22.633"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:22.634" level="INFO">${payload} = {'firstname': 'H X'}</msg>
<status status="PASS" starttime="20210731 21:40:22.633" endtime="20210731 21:40:22.634"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:22.644" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:22.644" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:22.634" endtime="20210731 21:40:22.644"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:22.645" endtime="20210731 21:40:22.645"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:22.645" endtime="20210731 21:40:22.645"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:22.634" endtime="20210731 21:40:22.645"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:22.634" endtime="20210731 21:40:22.645"/>
</for>
<status status="FAIL" starttime="20210731 21:40:22.632" endtime="20210731 21:40:22.645"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:22.632" endtime="20210731 21:40:22.646"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:22.632" endtime="20210731 21:40:22.646"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:22.650" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:22.670" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:22.670" level="INFO">${pids} = 11086
11093
11096</msg>
<status status="PASS" starttime="20210731 21:40:22.646" endtime="20210731 21:40:22.670"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:22.671" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:22.671" endtime="20210731 21:40:22.671"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:22.672" level="INFO">${pids} = ['11086', '11093', '11096']</msg>
<status status="PASS" starttime="20210731 21:40:22.672" endtime="20210731 21:40:22.672"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11086</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:22.677" level="INFO">Running command 'kill 11086 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:22.673" endtime="20210731 21:40:22.678"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.672" endtime="20210731 21:40:22.678"/>
</iter>
<iter>
<var name="${pid}">11093</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:22.682" level="INFO">Running command 'kill 11093 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:22.679" endtime="20210731 21:40:22.683"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.678" endtime="20210731 21:40:22.683"/>
</iter>
<iter>
<var name="${pid}">11096</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:22.687" level="INFO">Running command 'kill 11096 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:22.684" endtime="20210731 21:40:22.688"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.683" endtime="20210731 21:40:22.688"/>
</iter>
<status status="PASS" starttime="20210731 21:40:22.672" endtime="20210731 21:40:22.688"/>
</for>
<status status="PASS" starttime="20210731 21:40:22.672" endtime="20210731 21:40:22.688"/>
</branch>
<status status="PASS" starttime="20210731 21:40:22.671" endtime="20210731 21:40:22.688"/>
</if>
<status status="PASS" starttime="20210731 21:40:22.646" endtime="20210731 21:40:22.688"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'H X'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-FIRSTNAME-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:21.069" endtime="20210731 21:40:22.688">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t107" name="With Each Valid Token, Updating First Name Of Each System User With Helena123 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:22.694" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:22.708" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:22.708" level="INFO">${pids} = 11125</msg>
<status status="PASS" starttime="20210731 21:40:22.691" endtime="20210731 21:40:22.708"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:22.710" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:22.709" endtime="20210731 21:40:22.710"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:22.710" level="INFO">${pids} = ['11125']</msg>
<status status="PASS" starttime="20210731 21:40:22.710" endtime="20210731 21:40:22.710"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11125</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:22.714" level="INFO">Running command 'kill 11125 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:22.711" endtime="20210731 21:40:22.715"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.711" endtime="20210731 21:40:22.715"/>
</iter>
<status status="PASS" starttime="20210731 21:40:22.710" endtime="20210731 21:40:22.715"/>
</for>
<status status="PASS" starttime="20210731 21:40:22.710" endtime="20210731 21:40:22.715"/>
</branch>
<status status="PASS" starttime="20210731 21:40:22.710" endtime="20210731 21:40:22.715"/>
</if>
<status status="PASS" starttime="20210731 21:40:22.690" endtime="20210731 21:40:22.715"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:22.717" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:22.716" endtime="20210731 21:40:22.717"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:22.718" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:22.718" endtime="20210731 21:40:22.718"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:22.719" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:22.719" endtime="20210731 21:40:22.719"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:22.719" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:22.719" endtime="20210731 21:40:22.719"/>
</kw>
<msg timestamp="20210731 21:40:22.719" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:22.718" endtime="20210731 21:40:22.719"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:22.724" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:22.720" endtime="20210731 21:40:22.725"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.716" endtime="20210731 21:40:22.726"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:22.727" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:22.727" endtime="20210731 21:40:22.731"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:24.233" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:22.732" endtime="20210731 21:40:24.233"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.726" endtime="20210731 21:40:24.234"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:24.235" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:24.235" endtime="20210731 21:40:24.235"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:24.235" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:24.235" endtime="20210731 21:40:24.235"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:24.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:24.236" endtime="20210731 21:40:24.236"/>
</kw>
<msg timestamp="20210731 21:40:24.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:24.234" endtime="20210731 21:40:24.236"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:24.237" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:24.236" endtime="20210731 21:40:24.237"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.234" endtime="20210731 21:40:24.237"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:24.238" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:24.238" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:24.238" endtime="20210731 21:40:24.239"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.237" endtime="20210731 21:40:24.239"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:24.239" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:24.239" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:24.239" endtime="20210731 21:40:24.239"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:24.240" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:24.240" endtime="20210731 21:40:24.240"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:24.241" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:24.240" endtime="20210731 21:40:24.241"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:24.241" endtime="20210731 21:40:24.242"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:24.242" endtime="20210731 21:40:24.242"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.240" endtime="20210731 21:40:24.242"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:24.242" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:24.242" endtime="20210731 21:40:24.242"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:24.243" endtime="20210731 21:40:24.243"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:24.243" endtime="20210731 21:40:24.244"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.242" endtime="20210731 21:40:24.244"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:24.244" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:24.244" endtime="20210731 21:40:24.244"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:24.244" endtime="20210731 21:40:24.245"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:24.245" endtime="20210731 21:40:24.246"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.244" endtime="20210731 21:40:24.246"/>
</iter>
<status status="PASS" starttime="20210731 21:40:24.240" endtime="20210731 21:40:24.246"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:24.246" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:24.246" endtime="20210731 21:40:24.246"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.239" endtime="20210731 21:40:24.246"/>
</kw>
<status status="PASS" starttime="20210731 21:40:22.690" endtime="20210731 21:40:24.247"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:24.250" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:24.247" endtime="20210731 21:40:24.250"/>
</kw>
<msg timestamp="20210731 21:40:24.250" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:24.247" endtime="20210731 21:40:24.250"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>First name does contain numbers, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:24.251" endtime="20210731 21:40:24.251"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.251" endtime="20210731 21:40:24.252"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:24.253" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:24.253" endtime="20210731 21:40:24.253"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:24.254" level="INFO">${payload} = {'firstname': 'Helena123'}</msg>
<status status="PASS" starttime="20210731 21:40:24.253" endtime="20210731 21:40:24.254"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:24.265" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:24.265" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:24.254" endtime="20210731 21:40:24.265"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:24.265" endtime="20210731 21:40:24.266"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:24.266" endtime="20210731 21:40:24.266"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:24.254" endtime="20210731 21:40:24.266"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:24.254" endtime="20210731 21:40:24.266"/>
</for>
<status status="FAIL" starttime="20210731 21:40:24.252" endtime="20210731 21:40:24.266"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:24.252" endtime="20210731 21:40:24.266"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:24.252" endtime="20210731 21:40:24.266"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:24.270" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:24.285" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:24.285" level="INFO">${pids} = 11148
11155
11157</msg>
<status status="PASS" starttime="20210731 21:40:24.267" endtime="20210731 21:40:24.285"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:24.286" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:24.285" endtime="20210731 21:40:24.286"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:24.286" level="INFO">${pids} = ['11148', '11155', '11157']</msg>
<status status="PASS" starttime="20210731 21:40:24.286" endtime="20210731 21:40:24.287"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11148</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:24.303" level="INFO">Running command 'kill 11148 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:24.287" endtime="20210731 21:40:24.304"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.287" endtime="20210731 21:40:24.304"/>
</iter>
<iter>
<var name="${pid}">11155</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:24.308" level="INFO">Running command 'kill 11155 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:24.304" endtime="20210731 21:40:24.310"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.304" endtime="20210731 21:40:24.310"/>
</iter>
<iter>
<var name="${pid}">11157</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:24.314" level="INFO">Running command 'kill 11157 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:24.311" endtime="20210731 21:40:24.315"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.311" endtime="20210731 21:40:24.315"/>
</iter>
<status status="PASS" starttime="20210731 21:40:24.287" endtime="20210731 21:40:24.315"/>
</for>
<status status="PASS" starttime="20210731 21:40:24.286" endtime="20210731 21:40:24.315"/>
</branch>
<status status="PASS" starttime="20210731 21:40:24.286" endtime="20210731 21:40:24.315"/>
</if>
<status status="PASS" starttime="20210731 21:40:24.266" endtime="20210731 21:40:24.315"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena123'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-FIRSTNAME-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:22.689" endtime="20210731 21:40:24.316">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t108" name="With Each Valid Token, Updating First Name Of Each System User With Helena!.? Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:24.321" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:24.335" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:24.335" level="INFO">${pids} = 11186</msg>
<status status="PASS" starttime="20210731 21:40:24.318" endtime="20210731 21:40:24.335"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:24.337" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:24.336" endtime="20210731 21:40:24.337"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:24.337" level="INFO">${pids} = ['11186']</msg>
<status status="PASS" starttime="20210731 21:40:24.337" endtime="20210731 21:40:24.337"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11186</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:24.342" level="INFO">Running command 'kill 11186 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:24.338" endtime="20210731 21:40:24.342"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.338" endtime="20210731 21:40:24.342"/>
</iter>
<status status="PASS" starttime="20210731 21:40:24.337" endtime="20210731 21:40:24.342"/>
</for>
<status status="PASS" starttime="20210731 21:40:24.337" endtime="20210731 21:40:24.342"/>
</branch>
<status status="PASS" starttime="20210731 21:40:24.337" endtime="20210731 21:40:24.342"/>
</if>
<status status="PASS" starttime="20210731 21:40:24.318" endtime="20210731 21:40:24.343"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:24.344" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:24.343" endtime="20210731 21:40:24.344"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:24.344" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:24.344" endtime="20210731 21:40:24.344"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:24.345" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:24.345" endtime="20210731 21:40:24.345"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:24.345" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:24.345" endtime="20210731 21:40:24.345"/>
</kw>
<msg timestamp="20210731 21:40:24.346" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:24.344" endtime="20210731 21:40:24.346"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:24.353" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:24.346" endtime="20210731 21:40:24.355"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.343" endtime="20210731 21:40:24.355"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:24.357" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:24.356" endtime="20210731 21:40:24.364"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:25.866" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:24.365" endtime="20210731 21:40:25.866"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.356" endtime="20210731 21:40:25.866"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:25.868" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:25.867" endtime="20210731 21:40:25.868"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:25.868" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:25.868" endtime="20210731 21:40:25.868"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:25.869" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:25.868" endtime="20210731 21:40:25.869"/>
</kw>
<msg timestamp="20210731 21:40:25.869" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:25.867" endtime="20210731 21:40:25.869"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:25.869" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:25.869" endtime="20210731 21:40:25.870"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.866" endtime="20210731 21:40:25.870"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:25.871" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:25.871" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:25.871" endtime="20210731 21:40:25.871"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.870" endtime="20210731 21:40:25.871"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:25.872" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:25.872" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:25.872" endtime="20210731 21:40:25.872"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:25.872" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:25.872" endtime="20210731 21:40:25.872"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:25.873" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:25.873" endtime="20210731 21:40:25.873"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:25.873" endtime="20210731 21:40:25.874"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:25.874" endtime="20210731 21:40:25.875"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.873" endtime="20210731 21:40:25.875"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:25.875" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:25.875" endtime="20210731 21:40:25.876"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:25.876" endtime="20210731 21:40:25.876"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:25.877" endtime="20210731 21:40:25.877"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.875" endtime="20210731 21:40:25.877"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:25.877" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:25.877" endtime="20210731 21:40:25.877"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:25.878" endtime="20210731 21:40:25.878"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:25.879" endtime="20210731 21:40:25.879"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.877" endtime="20210731 21:40:25.879"/>
</iter>
<status status="PASS" starttime="20210731 21:40:25.873" endtime="20210731 21:40:25.879"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:25.880" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:25.879" endtime="20210731 21:40:25.880"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.871" endtime="20210731 21:40:25.880"/>
</kw>
<status status="PASS" starttime="20210731 21:40:24.317" endtime="20210731 21:40:25.880"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:25.883" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:25.880" endtime="20210731 21:40:25.883"/>
</kw>
<msg timestamp="20210731 21:40:25.883" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:25.880" endtime="20210731 21:40:25.884"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>First name does contain non alphanumeric characters, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:25.884" endtime="20210731 21:40:25.885"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.884" endtime="20210731 21:40:25.885"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:25.886" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:25.886" endtime="20210731 21:40:25.886"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:25.887" level="INFO">${payload} = {'firstname': 'Helena!.?'}</msg>
<status status="PASS" starttime="20210731 21:40:25.886" endtime="20210731 21:40:25.887"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:25.898" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:25.899" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:25.887" endtime="20210731 21:40:25.899"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:25.899" endtime="20210731 21:40:25.899"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:25.899" endtime="20210731 21:40:25.899"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:25.887" endtime="20210731 21:40:25.899"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:25.887" endtime="20210731 21:40:25.899"/>
</for>
<status status="FAIL" starttime="20210731 21:40:25.885" endtime="20210731 21:40:25.899"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:25.885" endtime="20210731 21:40:25.899"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:25.885" endtime="20210731 21:40:25.899"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:25.904" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:25.924" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:25.924" level="INFO">${pids} = 11209
11216
11219</msg>
<status status="PASS" starttime="20210731 21:40:25.900" endtime="20210731 21:40:25.924"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:25.925" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:25.924" endtime="20210731 21:40:25.925"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:25.926" level="INFO">${pids} = ['11209', '11216', '11219']</msg>
<status status="PASS" starttime="20210731 21:40:25.926" endtime="20210731 21:40:25.926"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11209</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:25.931" level="INFO">Running command 'kill 11209 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:25.926" endtime="20210731 21:40:25.932"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.926" endtime="20210731 21:40:25.932"/>
</iter>
<iter>
<var name="${pid}">11216</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:25.935" level="INFO">Running command 'kill 11216 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:25.932" endtime="20210731 21:40:25.936"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.932" endtime="20210731 21:40:25.936"/>
</iter>
<iter>
<var name="${pid}">11219</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:25.940" level="INFO">Running command 'kill 11219 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:25.936" endtime="20210731 21:40:25.941"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.936" endtime="20210731 21:40:25.941"/>
</iter>
<status status="PASS" starttime="20210731 21:40:25.926" endtime="20210731 21:40:25.941"/>
</for>
<status status="PASS" starttime="20210731 21:40:25.925" endtime="20210731 21:40:25.941"/>
</branch>
<status status="PASS" starttime="20210731 21:40:25.925" endtime="20210731 21:40:25.941"/>
</if>
<status status="PASS" starttime="20210731 21:40:25.900" endtime="20210731 21:40:25.941"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena!.?'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-FIRSTNAME-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:24.316" endtime="20210731 21:40:25.941">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t109" name="With Each Valid Token, Updating First Name Of Each System User With Helena Margaretha Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:25.946" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:25.961" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:25.961" level="INFO">${pids} = 11248</msg>
<status status="PASS" starttime="20210731 21:40:25.943" endtime="20210731 21:40:25.961"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:25.962" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:25.962" endtime="20210731 21:40:25.962"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:25.964" level="INFO">${pids} = ['11248']</msg>
<status status="PASS" starttime="20210731 21:40:25.963" endtime="20210731 21:40:25.964"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11248</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:25.967" level="INFO">Running command 'kill 11248 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:25.964" endtime="20210731 21:40:25.967"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.964" endtime="20210731 21:40:25.968"/>
</iter>
<status status="PASS" starttime="20210731 21:40:25.964" endtime="20210731 21:40:25.968"/>
</for>
<status status="PASS" starttime="20210731 21:40:25.963" endtime="20210731 21:40:25.968"/>
</branch>
<status status="PASS" starttime="20210731 21:40:25.962" endtime="20210731 21:40:25.968"/>
</if>
<status status="PASS" starttime="20210731 21:40:25.943" endtime="20210731 21:40:25.968"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:25.969" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:25.969" endtime="20210731 21:40:25.969"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:25.970" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:25.970" endtime="20210731 21:40:25.970"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:25.970" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:25.970" endtime="20210731 21:40:25.970"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:25.971" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:25.971" endtime="20210731 21:40:25.971"/>
</kw>
<msg timestamp="20210731 21:40:25.971" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:25.969" endtime="20210731 21:40:25.971"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:25.976" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:25.971" endtime="20210731 21:40:25.982"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.968" endtime="20210731 21:40:25.982"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:25.984" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:25.983" endtime="20210731 21:40:25.989"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:27.491" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:25.990" endtime="20210731 21:40:27.491"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.982" endtime="20210731 21:40:27.491"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:27.493" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:27.492" endtime="20210731 21:40:27.493"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:27.493" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:27.493" endtime="20210731 21:40:27.493"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:27.494" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:27.493" endtime="20210731 21:40:27.494"/>
</kw>
<msg timestamp="20210731 21:40:27.494" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:27.492" endtime="20210731 21:40:27.494"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:27.495" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:27.494" endtime="20210731 21:40:27.495"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.491" endtime="20210731 21:40:27.495"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:27.496" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:27.496" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:27.496" endtime="20210731 21:40:27.496"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.495" endtime="20210731 21:40:27.496"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:27.497" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:27.497" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:27.497" endtime="20210731 21:40:27.497"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:27.498" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:27.497" endtime="20210731 21:40:27.498"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:27.498" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:27.498" endtime="20210731 21:40:27.498"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:27.499" endtime="20210731 21:40:27.499"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:27.500" endtime="20210731 21:40:27.500"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.498" endtime="20210731 21:40:27.500"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:27.500" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:27.500" endtime="20210731 21:40:27.500"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:27.501" endtime="20210731 21:40:27.502"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:27.502" endtime="20210731 21:40:27.502"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.500" endtime="20210731 21:40:27.502"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:27.503" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:27.502" endtime="20210731 21:40:27.503"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:27.503" endtime="20210731 21:40:27.504"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:27.504" endtime="20210731 21:40:27.504"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.502" endtime="20210731 21:40:27.504"/>
</iter>
<status status="PASS" starttime="20210731 21:40:27.498" endtime="20210731 21:40:27.504"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:27.505" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:27.504" endtime="20210731 21:40:27.505"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.496" endtime="20210731 21:40:27.505"/>
</kw>
<status status="PASS" starttime="20210731 21:40:25.943" endtime="20210731 21:40:27.505"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:27.510" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:27.506" endtime="20210731 21:40:27.510"/>
</kw>
<msg timestamp="20210731 21:40:27.510" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:27.505" endtime="20210731 21:40:27.510"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>Two valid first names seperated by a single space character</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:27.511" endtime="20210731 21:40:27.512"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.511" endtime="20210731 21:40:27.512"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:27.513" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:27.513" endtime="20210731 21:40:27.513"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:27.514" level="INFO">${payload} = {'firstname': 'Helena Margaretha'}</msg>
<status status="PASS" starttime="20210731 21:40:27.513" endtime="20210731 21:40:27.514"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:27.526" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:27.526" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:27.514" endtime="20210731 21:40:27.526"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:27.526" endtime="20210731 21:40:27.526"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:27.526" endtime="20210731 21:40:27.527"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:27.514" endtime="20210731 21:40:27.527"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:27.514" endtime="20210731 21:40:27.527"/>
</for>
<status status="FAIL" starttime="20210731 21:40:27.512" endtime="20210731 21:40:27.527"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:27.512" endtime="20210731 21:40:27.527"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:27.512" endtime="20210731 21:40:27.527"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:27.531" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:27.550" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:27.550" level="INFO">${pids} = 11271
11278
11281</msg>
<status status="PASS" starttime="20210731 21:40:27.528" endtime="20210731 21:40:27.550"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:27.552" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:27.551" endtime="20210731 21:40:27.552"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:27.553" level="INFO">${pids} = ['11271', '11278', '11281']</msg>
<status status="PASS" starttime="20210731 21:40:27.552" endtime="20210731 21:40:27.553"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11271</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:27.558" level="INFO">Running command 'kill 11271 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:27.554" endtime="20210731 21:40:27.559"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.554" endtime="20210731 21:40:27.559"/>
</iter>
<iter>
<var name="${pid}">11278</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:27.563" level="INFO">Running command 'kill 11278 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:27.559" endtime="20210731 21:40:27.563"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.559" endtime="20210731 21:40:27.563"/>
</iter>
<iter>
<var name="${pid}">11281</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:27.569" level="INFO">Running command 'kill 11281 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:27.564" endtime="20210731 21:40:27.570"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.563" endtime="20210731 21:40:27.570"/>
</iter>
<status status="PASS" starttime="20210731 21:40:27.553" endtime="20210731 21:40:27.570"/>
</for>
<status status="PASS" starttime="20210731 21:40:27.552" endtime="20210731 21:40:27.570"/>
</branch>
<status status="PASS" starttime="20210731 21:40:27.552" endtime="20210731 21:40:27.570"/>
</if>
<status status="PASS" starttime="20210731 21:40:27.527" endtime="20210731 21:40:27.570"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena Margaretha'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</tag>
<tag>REQ-API-FIRSTNAME-VALID</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-NO-PHONE</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:25.942" endtime="20210731 21:40:27.570">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t110" name="With Each Valid Token, Updating First Name Of Each System User With Helena      Margaretha Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:27.576" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:27.590" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:27.590" level="INFO">${pids} = 11310</msg>
<status status="PASS" starttime="20210731 21:40:27.573" endtime="20210731 21:40:27.590"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:27.591" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:27.590" endtime="20210731 21:40:27.591"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:27.592" level="INFO">${pids} = ['11310']</msg>
<status status="PASS" starttime="20210731 21:40:27.591" endtime="20210731 21:40:27.592"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11310</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:27.596" level="INFO">Running command 'kill 11310 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:27.592" endtime="20210731 21:40:27.597"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.592" endtime="20210731 21:40:27.597"/>
</iter>
<status status="PASS" starttime="20210731 21:40:27.592" endtime="20210731 21:40:27.597"/>
</for>
<status status="PASS" starttime="20210731 21:40:27.591" endtime="20210731 21:40:27.597"/>
</branch>
<status status="PASS" starttime="20210731 21:40:27.591" endtime="20210731 21:40:27.597"/>
</if>
<status status="PASS" starttime="20210731 21:40:27.572" endtime="20210731 21:40:27.597"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:27.599" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:27.598" endtime="20210731 21:40:27.599"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:27.600" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:27.599" endtime="20210731 21:40:27.600"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:27.600" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:27.600" endtime="20210731 21:40:27.600"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:27.601" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:27.601" endtime="20210731 21:40:27.601"/>
</kw>
<msg timestamp="20210731 21:40:27.601" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:27.599" endtime="20210731 21:40:27.601"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:27.606" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:27.601" endtime="20210731 21:40:27.607"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.598" endtime="20210731 21:40:27.608"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:27.609" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:27.609" endtime="20210731 21:40:27.614"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:29.115" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:27.614" endtime="20210731 21:40:29.115"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.608" endtime="20210731 21:40:29.115"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:29.116" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:29.116" endtime="20210731 21:40:29.116"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:29.117" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:29.117" endtime="20210731 21:40:29.117"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:29.117" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:29.117" endtime="20210731 21:40:29.117"/>
</kw>
<msg timestamp="20210731 21:40:29.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:29.116" endtime="20210731 21:40:29.118"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:29.118" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:29.118" endtime="20210731 21:40:29.119"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.115" endtime="20210731 21:40:29.119"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:29.119" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:29.119" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:29.119" endtime="20210731 21:40:29.120"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.119" endtime="20210731 21:40:29.120"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:29.120" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:29.120" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:29.120" endtime="20210731 21:40:29.121"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:29.121" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:29.121" endtime="20210731 21:40:29.121"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:29.122" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:29.121" endtime="20210731 21:40:29.122"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:29.122" endtime="20210731 21:40:29.123"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:29.123" endtime="20210731 21:40:29.123"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.121" endtime="20210731 21:40:29.123"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:29.124" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:29.123" endtime="20210731 21:40:29.124"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:29.124" endtime="20210731 21:40:29.125"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:29.125" endtime="20210731 21:40:29.125"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.123" endtime="20210731 21:40:29.125"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:29.125" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:29.125" endtime="20210731 21:40:29.125"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:29.126" endtime="20210731 21:40:29.126"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:29.127" endtime="20210731 21:40:29.127"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.125" endtime="20210731 21:40:29.127"/>
</iter>
<status status="PASS" starttime="20210731 21:40:29.121" endtime="20210731 21:40:29.127"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:29.127" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:29.127" endtime="20210731 21:40:29.127"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.120" endtime="20210731 21:40:29.128"/>
</kw>
<status status="PASS" starttime="20210731 21:40:27.572" endtime="20210731 21:40:29.128"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:29.131" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:29.128" endtime="20210731 21:40:29.131"/>
</kw>
<msg timestamp="20210731 21:40:29.131" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:29.128" endtime="20210731 21:40:29.131"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>Two valid first names seperated by multiple space characters making it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:29.132" endtime="20210731 21:40:29.132"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.131" endtime="20210731 21:40:29.132"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:29.134" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:29.134" endtime="20210731 21:40:29.134"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:29.135" level="INFO">${payload} = {'firstname': 'Helena      Margaretha'}</msg>
<status status="PASS" starttime="20210731 21:40:29.134" endtime="20210731 21:40:29.135"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:29.145" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:29.146" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:29.135" endtime="20210731 21:40:29.146"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:29.146" endtime="20210731 21:40:29.146"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:29.146" endtime="20210731 21:40:29.146"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:29.135" endtime="20210731 21:40:29.146"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:29.135" endtime="20210731 21:40:29.146"/>
</for>
<status status="FAIL" starttime="20210731 21:40:29.133" endtime="20210731 21:40:29.147"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:29.133" endtime="20210731 21:40:29.147"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:29.133" endtime="20210731 21:40:29.147"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:29.151" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:29.175" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:29.176" level="INFO">${pids} = 11333
11340
11342</msg>
<status status="PASS" starttime="20210731 21:40:29.148" endtime="20210731 21:40:29.176"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:29.177" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:29.176" endtime="20210731 21:40:29.177"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:29.177" level="INFO">${pids} = ['11333', '11340', '11342']</msg>
<status status="PASS" starttime="20210731 21:40:29.177" endtime="20210731 21:40:29.178"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11333</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:29.182" level="INFO">Running command 'kill 11333 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:29.178" endtime="20210731 21:40:29.182"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.178" endtime="20210731 21:40:29.182"/>
</iter>
<iter>
<var name="${pid}">11340</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:29.186" level="INFO">Running command 'kill 11340 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:29.183" endtime="20210731 21:40:29.187"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.182" endtime="20210731 21:40:29.187"/>
</iter>
<iter>
<var name="${pid}">11342</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:29.191" level="INFO">Running command 'kill 11342 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:29.187" endtime="20210731 21:40:29.192"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.187" endtime="20210731 21:40:29.192"/>
</iter>
<status status="PASS" starttime="20210731 21:40:29.178" endtime="20210731 21:40:29.192"/>
</for>
<status status="PASS" starttime="20210731 21:40:29.177" endtime="20210731 21:40:29.192"/>
</branch>
<status status="PASS" starttime="20210731 21:40:29.177" endtime="20210731 21:40:29.192"/>
</if>
<status status="PASS" starttime="20210731 21:40:29.147" endtime="20210731 21:40:29.192"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena Margaretha'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-FIRSTNAME-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:27.571" endtime="20210731 21:40:29.192">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t111" name="With Each Valid Token, Updating Last Name Of Each System User With '' Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:29.198" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:29.211" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:29.212" level="INFO">${pids} = 11371</msg>
<status status="PASS" starttime="20210731 21:40:29.195" endtime="20210731 21:40:29.212"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:29.213" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:29.212" endtime="20210731 21:40:29.213"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:29.214" level="INFO">${pids} = ['11371']</msg>
<status status="PASS" starttime="20210731 21:40:29.213" endtime="20210731 21:40:29.214"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11371</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:29.217" level="INFO">Running command 'kill 11371 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:29.214" endtime="20210731 21:40:29.218"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.214" endtime="20210731 21:40:29.218"/>
</iter>
<status status="PASS" starttime="20210731 21:40:29.214" endtime="20210731 21:40:29.218"/>
</for>
<status status="PASS" starttime="20210731 21:40:29.213" endtime="20210731 21:40:29.218"/>
</branch>
<status status="PASS" starttime="20210731 21:40:29.213" endtime="20210731 21:40:29.218"/>
</if>
<status status="PASS" starttime="20210731 21:40:29.194" endtime="20210731 21:40:29.219"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:29.220" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:29.220" endtime="20210731 21:40:29.220"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:29.222" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:29.221" endtime="20210731 21:40:29.222"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:29.222" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:29.222" endtime="20210731 21:40:29.222"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:29.223" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:29.223" endtime="20210731 21:40:29.223"/>
</kw>
<msg timestamp="20210731 21:40:29.224" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:29.220" endtime="20210731 21:40:29.224"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:29.228" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:29.224" endtime="20210731 21:40:29.230"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.219" endtime="20210731 21:40:29.230"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:29.232" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:29.231" endtime="20210731 21:40:29.236"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:30.737" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:29.237" endtime="20210731 21:40:30.738"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.231" endtime="20210731 21:40:30.738"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:30.739" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:30.739" endtime="20210731 21:40:30.739"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:30.740" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:30.740" endtime="20210731 21:40:30.740"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:30.741" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:30.740" endtime="20210731 21:40:30.741"/>
</kw>
<msg timestamp="20210731 21:40:30.741" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:30.739" endtime="20210731 21:40:30.741"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:30.742" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:30.741" endtime="20210731 21:40:30.742"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.738" endtime="20210731 21:40:30.742"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:30.743" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:30.743" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:30.743" endtime="20210731 21:40:30.743"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.742" endtime="20210731 21:40:30.743"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:30.744" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:30.744" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:30.744" endtime="20210731 21:40:30.744"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:30.744" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:30.744" endtime="20210731 21:40:30.744"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:30.745" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:30.745" endtime="20210731 21:40:30.745"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:30.745" endtime="20210731 21:40:30.746"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:30.746" endtime="20210731 21:40:30.747"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.745" endtime="20210731 21:40:30.747"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:30.747" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:30.747" endtime="20210731 21:40:30.747"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:30.747" endtime="20210731 21:40:30.748"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:30.748" endtime="20210731 21:40:30.749"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.747" endtime="20210731 21:40:30.749"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:30.749" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:30.749" endtime="20210731 21:40:30.749"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:30.749" endtime="20210731 21:40:30.750"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:30.750" endtime="20210731 21:40:30.750"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.749" endtime="20210731 21:40:30.750"/>
</iter>
<status status="PASS" starttime="20210731 21:40:30.744" endtime="20210731 21:40:30.751"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:30.751" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:30.751" endtime="20210731 21:40:30.751"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.743" endtime="20210731 21:40:30.751"/>
</kw>
<status status="PASS" starttime="20210731 21:40:29.194" endtime="20210731 21:40:30.751"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:30.755" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:30.752" endtime="20210731 21:40:30.755"/>
</kw>
<msg timestamp="20210731 21:40:30.755" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:30.752" endtime="20210731 21:40:30.755"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>An empty last name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:30.756" endtime="20210731 21:40:30.756"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.755" endtime="20210731 21:40:30.757"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:30.758" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:30.758" endtime="20210731 21:40:30.758"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:30.759" level="INFO">${payload} = {'lastname': ''}</msg>
<status status="PASS" starttime="20210731 21:40:30.758" endtime="20210731 21:40:30.759"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:30.770" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:30.771" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:30.759" endtime="20210731 21:40:30.771"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:30.771" endtime="20210731 21:40:30.771"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:30.771" endtime="20210731 21:40:30.771"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:30.759" endtime="20210731 21:40:30.771"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:30.759" endtime="20210731 21:40:30.771"/>
</for>
<status status="FAIL" starttime="20210731 21:40:30.757" endtime="20210731 21:40:30.771"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:30.757" endtime="20210731 21:40:30.771"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:30.757" endtime="20210731 21:40:30.771"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:30.776" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:30.799" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:30.799" level="INFO">${pids} = 11394
11401
11403</msg>
<status status="PASS" starttime="20210731 21:40:30.772" endtime="20210731 21:40:30.799"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:30.800" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:30.799" endtime="20210731 21:40:30.800"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:30.801" level="INFO">${pids} = ['11394', '11401', '11403']</msg>
<status status="PASS" starttime="20210731 21:40:30.800" endtime="20210731 21:40:30.801"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11394</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:30.806" level="INFO">Running command 'kill 11394 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:30.802" endtime="20210731 21:40:30.806"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.802" endtime="20210731 21:40:30.806"/>
</iter>
<iter>
<var name="${pid}">11401</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:30.810" level="INFO">Running command 'kill 11401 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:30.807" endtime="20210731 21:40:30.811"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.806" endtime="20210731 21:40:30.811"/>
</iter>
<iter>
<var name="${pid}">11403</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:30.815" level="INFO">Running command 'kill 11403 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:30.811" endtime="20210731 21:40:30.815"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.811" endtime="20210731 21:40:30.816"/>
</iter>
<status status="PASS" starttime="20210731 21:40:30.802" endtime="20210731 21:40:30.816"/>
</for>
<status status="PASS" starttime="20210731 21:40:30.800" endtime="20210731 21:40:30.816"/>
</branch>
<status status="PASS" starttime="20210731 21:40:30.800" endtime="20210731 21:40:30.816"/>
</if>
<status status="PASS" starttime="20210731 21:40:30.772" endtime="20210731 21:40:30.816"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": ''
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-NOT-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:29.193" endtime="20210731 21:40:30.816">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t112" name="With Each Valid Token, Updating Last Name Of Each System User With Cuzdan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:30.822" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:30.834" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:30.834" level="INFO">${pids} = 11432</msg>
<status status="PASS" starttime="20210731 21:40:30.818" endtime="20210731 21:40:30.834"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:30.835" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:30.834" endtime="20210731 21:40:30.835"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:30.836" level="INFO">${pids} = ['11432']</msg>
<status status="PASS" starttime="20210731 21:40:30.835" endtime="20210731 21:40:30.836"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11432</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:30.839" level="INFO">Running command 'kill 11432 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:30.836" endtime="20210731 21:40:30.840"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.836" endtime="20210731 21:40:30.840"/>
</iter>
<status status="PASS" starttime="20210731 21:40:30.836" endtime="20210731 21:40:30.840"/>
</for>
<status status="PASS" starttime="20210731 21:40:30.835" endtime="20210731 21:40:30.840"/>
</branch>
<status status="PASS" starttime="20210731 21:40:30.835" endtime="20210731 21:40:30.840"/>
</if>
<status status="PASS" starttime="20210731 21:40:30.818" endtime="20210731 21:40:30.840"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:30.841" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:30.841" endtime="20210731 21:40:30.841"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:30.842" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:30.842" endtime="20210731 21:40:30.842"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:30.842" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:30.842" endtime="20210731 21:40:30.842"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:30.848" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:30.848" endtime="20210731 21:40:30.848"/>
</kw>
<msg timestamp="20210731 21:40:30.849" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:30.841" endtime="20210731 21:40:30.849"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:30.852" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:30.849" endtime="20210731 21:40:30.854"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.840" endtime="20210731 21:40:30.854"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:30.856" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:30.855" endtime="20210731 21:40:30.860"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:32.361" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:30.860" endtime="20210731 21:40:32.361"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.854" endtime="20210731 21:40:32.362"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:32.363" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:32.363" endtime="20210731 21:40:32.363"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:32.363" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:32.363" endtime="20210731 21:40:32.363"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:32.364" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:32.364" endtime="20210731 21:40:32.364"/>
</kw>
<msg timestamp="20210731 21:40:32.364" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:32.362" endtime="20210731 21:40:32.364"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:32.365" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:32.364" endtime="20210731 21:40:32.365"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.362" endtime="20210731 21:40:32.366"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:32.366" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:32.366" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:32.366" endtime="20210731 21:40:32.366"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.366" endtime="20210731 21:40:32.367"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:32.367" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:32.367" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:32.367" endtime="20210731 21:40:32.367"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:32.368" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:32.367" endtime="20210731 21:40:32.368"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:32.368" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:32.368" endtime="20210731 21:40:32.368"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:32.369" endtime="20210731 21:40:32.369"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:32.370" endtime="20210731 21:40:32.370"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.368" endtime="20210731 21:40:32.370"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:32.371" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:32.370" endtime="20210731 21:40:32.371"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:32.371" endtime="20210731 21:40:32.372"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:32.372" endtime="20210731 21:40:32.372"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.370" endtime="20210731 21:40:32.372"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:32.372" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:32.372" endtime="20210731 21:40:32.373"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:32.373" endtime="20210731 21:40:32.373"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:32.374" endtime="20210731 21:40:32.374"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.372" endtime="20210731 21:40:32.374"/>
</iter>
<status status="PASS" starttime="20210731 21:40:32.368" endtime="20210731 21:40:32.374"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:32.375" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:32.374" endtime="20210731 21:40:32.375"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.367" endtime="20210731 21:40:32.375"/>
</kw>
<status status="PASS" starttime="20210731 21:40:30.818" endtime="20210731 21:40:32.375"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:32.378" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:32.375" endtime="20210731 21:40:32.378"/>
</kw>
<msg timestamp="20210731 21:40:32.379" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:32.375" endtime="20210731 21:40:32.379"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>A last name containing more than 2 characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:32.379" endtime="20210731 21:40:32.380"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.379" endtime="20210731 21:40:32.380"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:32.382" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:32.381" endtime="20210731 21:40:32.382"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:32.382" level="INFO">${payload} = {'lastname': 'Cuzdan'}</msg>
<status status="PASS" starttime="20210731 21:40:32.382" endtime="20210731 21:40:32.382"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:32.392" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:32.393" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:32.383" endtime="20210731 21:40:32.393"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:32.393" endtime="20210731 21:40:32.393"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:32.393" endtime="20210731 21:40:32.393"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:32.382" endtime="20210731 21:40:32.393"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:32.382" endtime="20210731 21:40:32.393"/>
</for>
<status status="FAIL" starttime="20210731 21:40:32.380" endtime="20210731 21:40:32.393"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:32.380" endtime="20210731 21:40:32.393"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:32.380" endtime="20210731 21:40:32.393"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:32.398" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:32.417" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:32.419" level="INFO">${pids} = 11455
11462
11465</msg>
<status status="PASS" starttime="20210731 21:40:32.394" endtime="20210731 21:40:32.419"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:32.420" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:32.419" endtime="20210731 21:40:32.420"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:32.421" level="INFO">${pids} = ['11455', '11462', '11465']</msg>
<status status="PASS" starttime="20210731 21:40:32.420" endtime="20210731 21:40:32.421"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11455</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:32.425" level="INFO">Running command 'kill 11455 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:32.421" endtime="20210731 21:40:32.425"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.421" endtime="20210731 21:40:32.425"/>
</iter>
<iter>
<var name="${pid}">11462</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:32.429" level="INFO">Running command 'kill 11462 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:32.426" endtime="20210731 21:40:32.429"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.426" endtime="20210731 21:40:32.429"/>
</iter>
<iter>
<var name="${pid}">11465</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:32.433" level="INFO">Running command 'kill 11465 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:32.430" endtime="20210731 21:40:32.434"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.430" endtime="20210731 21:40:32.434"/>
</iter>
<status status="PASS" starttime="20210731 21:40:32.421" endtime="20210731 21:40:32.434"/>
</for>
<status status="PASS" starttime="20210731 21:40:32.420" endtime="20210731 21:40:32.434"/>
</branch>
<status status="PASS" starttime="20210731 21:40:32.420" endtime="20210731 21:40:32.434"/>
</if>
<status status="PASS" starttime="20210731 21:40:32.394" endtime="20210731 21:40:32.434"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Cuzdan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:30.817" endtime="20210731 21:40:32.435">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t113" name="With Each Valid Token, Updating Last Name Of Each System User With Cuzdan123!?. Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:32.440" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:32.457" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:32.457" level="INFO">${pids} = 11494</msg>
<status status="PASS" starttime="20210731 21:40:32.437" endtime="20210731 21:40:32.457"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:32.458" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:32.458" endtime="20210731 21:40:32.458"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:32.460" level="INFO">${pids} = ['11494']</msg>
<status status="PASS" starttime="20210731 21:40:32.459" endtime="20210731 21:40:32.460"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11494</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:32.472" level="INFO">Running command 'kill 11494 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:32.460" endtime="20210731 21:40:32.473"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.460" endtime="20210731 21:40:32.473"/>
</iter>
<status status="PASS" starttime="20210731 21:40:32.460" endtime="20210731 21:40:32.473"/>
</for>
<status status="PASS" starttime="20210731 21:40:32.459" endtime="20210731 21:40:32.473"/>
</branch>
<status status="PASS" starttime="20210731 21:40:32.459" endtime="20210731 21:40:32.473"/>
</if>
<status status="PASS" starttime="20210731 21:40:32.437" endtime="20210731 21:40:32.474"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:32.475" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:32.475" endtime="20210731 21:40:32.475"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:32.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:32.475" endtime="20210731 21:40:32.476"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:32.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:32.476" endtime="20210731 21:40:32.476"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:32.477" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:32.476" endtime="20210731 21:40:32.477"/>
</kw>
<msg timestamp="20210731 21:40:32.477" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:32.475" endtime="20210731 21:40:32.477"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:32.480" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:32.477" endtime="20210731 21:40:32.481"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.474" endtime="20210731 21:40:32.482"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:32.483" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:32.483" endtime="20210731 21:40:32.511"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:34.013" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:32.512" endtime="20210731 21:40:34.013"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.482" endtime="20210731 21:40:34.013"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:34.015" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:34.014" endtime="20210731 21:40:34.015"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:34.015" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:34.015" endtime="20210731 21:40:34.015"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:34.016" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:34.015" endtime="20210731 21:40:34.016"/>
</kw>
<msg timestamp="20210731 21:40:34.016" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:34.014" endtime="20210731 21:40:34.016"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:34.016" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:34.016" endtime="20210731 21:40:34.017"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.013" endtime="20210731 21:40:34.017"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:34.018" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:34.018" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:34.017" endtime="20210731 21:40:34.018"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.017" endtime="20210731 21:40:34.018"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:34.019" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:34.019" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:34.018" endtime="20210731 21:40:34.019"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:34.019" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:34.019" endtime="20210731 21:40:34.019"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:34.020" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:34.020" endtime="20210731 21:40:34.020"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:34.020" endtime="20210731 21:40:34.021"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:34.021" endtime="20210731 21:40:34.021"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.019" endtime="20210731 21:40:34.021"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:34.022" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:34.022" endtime="20210731 21:40:34.022"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:34.022" endtime="20210731 21:40:34.023"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:34.023" endtime="20210731 21:40:34.023"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.021" endtime="20210731 21:40:34.023"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:34.024" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:34.023" endtime="20210731 21:40:34.024"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:34.024" endtime="20210731 21:40:34.025"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:34.025" endtime="20210731 21:40:34.025"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.023" endtime="20210731 21:40:34.025"/>
</iter>
<status status="PASS" starttime="20210731 21:40:34.019" endtime="20210731 21:40:34.025"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:34.026" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:34.025" endtime="20210731 21:40:34.026"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.018" endtime="20210731 21:40:34.026"/>
</kw>
<status status="PASS" starttime="20210731 21:40:32.436" endtime="20210731 21:40:34.026"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:34.030" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:34.027" endtime="20210731 21:40:34.030"/>
</kw>
<msg timestamp="20210731 21:40:34.030" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:34.026" endtime="20210731 21:40:34.030"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>A last name containing numbers and non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:34.031" endtime="20210731 21:40:34.031"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.030" endtime="20210731 21:40:34.031"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:34.033" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:34.033" endtime="20210731 21:40:34.033"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:34.034" level="INFO">${payload} = {'lastname': 'Cuzdan123!?.'}</msg>
<status status="PASS" starttime="20210731 21:40:34.033" endtime="20210731 21:40:34.034"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:34.045" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:34.046" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:34.034" endtime="20210731 21:40:34.046"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:34.046" endtime="20210731 21:40:34.046"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:34.046" endtime="20210731 21:40:34.046"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:34.034" endtime="20210731 21:40:34.046"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:34.034" endtime="20210731 21:40:34.046"/>
</for>
<status status="FAIL" starttime="20210731 21:40:34.032" endtime="20210731 21:40:34.046"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:34.032" endtime="20210731 21:40:34.046"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:34.032" endtime="20210731 21:40:34.046"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:34.051" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:34.076" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:34.076" level="INFO">${pids} = 11517
11524
11527</msg>
<status status="PASS" starttime="20210731 21:40:34.047" endtime="20210731 21:40:34.076"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:34.077" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:34.076" endtime="20210731 21:40:34.077"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:34.078" level="INFO">${pids} = ['11517', '11524', '11527']</msg>
<status status="PASS" starttime="20210731 21:40:34.078" endtime="20210731 21:40:34.078"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11517</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:34.082" level="INFO">Running command 'kill 11517 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:34.078" endtime="20210731 21:40:34.082"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.078" endtime="20210731 21:40:34.083"/>
</iter>
<iter>
<var name="${pid}">11524</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:34.086" level="INFO">Running command 'kill 11524 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:34.083" endtime="20210731 21:40:34.087"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.083" endtime="20210731 21:40:34.087"/>
</iter>
<iter>
<var name="${pid}">11527</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:34.091" level="INFO">Running command 'kill 11527 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:34.087" endtime="20210731 21:40:34.092"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.087" endtime="20210731 21:40:34.092"/>
</iter>
<status status="PASS" starttime="20210731 21:40:34.078" endtime="20210731 21:40:34.092"/>
</for>
<status status="PASS" starttime="20210731 21:40:34.077" endtime="20210731 21:40:34.092"/>
</branch>
<status status="PASS" starttime="20210731 21:40:34.077" endtime="20210731 21:40:34.092"/>
</if>
<status status="PASS" starttime="20210731 21:40:34.047" endtime="20210731 21:40:34.092"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Cuzdan123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-NOT-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:32.435" endtime="20210731 21:40:34.092">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t114" name="With Each Valid Token, Updating Last Name Of Each System User With Wi Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:34.098" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:34.110" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:34.110" level="INFO">${pids} = 11556</msg>
<status status="PASS" starttime="20210731 21:40:34.094" endtime="20210731 21:40:34.110"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:34.111" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:34.110" endtime="20210731 21:40:34.111"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:34.112" level="INFO">${pids} = ['11556']</msg>
<status status="PASS" starttime="20210731 21:40:34.111" endtime="20210731 21:40:34.112"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11556</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:34.116" level="INFO">Running command 'kill 11556 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:34.112" endtime="20210731 21:40:34.116"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.112" endtime="20210731 21:40:34.116"/>
</iter>
<status status="PASS" starttime="20210731 21:40:34.112" endtime="20210731 21:40:34.116"/>
</for>
<status status="PASS" starttime="20210731 21:40:34.111" endtime="20210731 21:40:34.116"/>
</branch>
<status status="PASS" starttime="20210731 21:40:34.111" endtime="20210731 21:40:34.117"/>
</if>
<status status="PASS" starttime="20210731 21:40:34.094" endtime="20210731 21:40:34.117"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:34.118" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:34.118" endtime="20210731 21:40:34.118"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:34.120" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:34.120" endtime="20210731 21:40:34.120"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:34.120" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:34.120" endtime="20210731 21:40:34.120"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:34.121" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:34.121" endtime="20210731 21:40:34.121"/>
</kw>
<msg timestamp="20210731 21:40:34.121" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:34.119" endtime="20210731 21:40:34.121"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:34.128" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:34.122" endtime="20210731 21:40:34.129"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.117" endtime="20210731 21:40:34.130"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:34.132" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:34.131" endtime="20210731 21:40:34.135"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:35.637" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:34.136" endtime="20210731 21:40:35.637"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.130" endtime="20210731 21:40:35.637"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:35.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:35.638" endtime="20210731 21:40:35.639"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:35.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:35.639" endtime="20210731 21:40:35.639"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:35.640" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:35.639" endtime="20210731 21:40:35.640"/>
</kw>
<msg timestamp="20210731 21:40:35.640" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:35.638" endtime="20210731 21:40:35.640"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:35.641" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:35.640" endtime="20210731 21:40:35.641"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.638" endtime="20210731 21:40:35.641"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:35.642" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:35.642" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:35.642" endtime="20210731 21:40:35.642"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.642" endtime="20210731 21:40:35.643"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:35.643" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:35.643" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:35.643" endtime="20210731 21:40:35.643"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:35.644" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:35.643" endtime="20210731 21:40:35.644"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:35.644" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:35.644" endtime="20210731 21:40:35.644"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:35.645" endtime="20210731 21:40:35.645"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:35.646" endtime="20210731 21:40:35.646"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.644" endtime="20210731 21:40:35.646"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:35.646" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:35.646" endtime="20210731 21:40:35.646"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:35.647" endtime="20210731 21:40:35.647"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:35.648" endtime="20210731 21:40:35.648"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.646" endtime="20210731 21:40:35.648"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:35.648" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:35.648" endtime="20210731 21:40:35.648"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:35.648" endtime="20210731 21:40:35.649"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:35.649" endtime="20210731 21:40:35.650"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.648" endtime="20210731 21:40:35.650"/>
</iter>
<status status="PASS" starttime="20210731 21:40:35.644" endtime="20210731 21:40:35.650"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:35.650" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:35.650" endtime="20210731 21:40:35.650"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.643" endtime="20210731 21:40:35.650"/>
</kw>
<status status="PASS" starttime="20210731 21:40:34.094" endtime="20210731 21:40:35.650"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:35.654" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:35.651" endtime="20210731 21:40:35.654"/>
</kw>
<msg timestamp="20210731 21:40:35.654" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:35.651" endtime="20210731 21:40:35.654"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>2 character last name with only one word</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:35.655" endtime="20210731 21:40:35.655"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.654" endtime="20210731 21:40:35.655"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:35.657" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:35.657" endtime="20210731 21:40:35.657"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:35.658" level="INFO">${payload} = {'lastname': 'Wi'}</msg>
<status status="PASS" starttime="20210731 21:40:35.657" endtime="20210731 21:40:35.658"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:35.668" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:35.669" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:35.658" endtime="20210731 21:40:35.669"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:35.669" endtime="20210731 21:40:35.669"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:35.669" endtime="20210731 21:40:35.670"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:35.658" endtime="20210731 21:40:35.670"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:35.658" endtime="20210731 21:40:35.670"/>
</for>
<status status="FAIL" starttime="20210731 21:40:35.656" endtime="20210731 21:40:35.670"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:35.656" endtime="20210731 21:40:35.670"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:35.656" endtime="20210731 21:40:35.670"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:35.675" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:35.693" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:35.693" level="INFO">${pids} = 11579
11586
11588</msg>
<status status="PASS" starttime="20210731 21:40:35.671" endtime="20210731 21:40:35.693"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:35.694" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:35.694" endtime="20210731 21:40:35.694"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:35.695" level="INFO">${pids} = ['11579', '11586', '11588']</msg>
<status status="PASS" starttime="20210731 21:40:35.695" endtime="20210731 21:40:35.695"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11579</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:35.699" level="INFO">Running command 'kill 11579 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:35.696" endtime="20210731 21:40:35.700"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.695" endtime="20210731 21:40:35.700"/>
</iter>
<iter>
<var name="${pid}">11586</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:35.703" level="INFO">Running command 'kill 11586 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:35.700" endtime="20210731 21:40:35.704"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.700" endtime="20210731 21:40:35.704"/>
</iter>
<iter>
<var name="${pid}">11588</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:35.708" level="INFO">Running command 'kill 11588 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:35.704" endtime="20210731 21:40:35.708"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.704" endtime="20210731 21:40:35.709"/>
</iter>
<status status="PASS" starttime="20210731 21:40:35.695" endtime="20210731 21:40:35.709"/>
</for>
<status status="PASS" starttime="20210731 21:40:35.694" endtime="20210731 21:40:35.709"/>
</branch>
<status status="PASS" starttime="20210731 21:40:35.694" endtime="20210731 21:40:35.709"/>
</if>
<status status="PASS" starttime="20210731 21:40:35.670" endtime="20210731 21:40:35.709"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi'
}
Then, each request should fail with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:34.093" endtime="20210731 21:40:35.709">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t115" name="With Each Valid Token, Updating Last Name Of Each System User With Wi Xi Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:35.715" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:35.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:35.737" level="INFO">${pids} = 11617</msg>
<status status="PASS" starttime="20210731 21:40:35.712" endtime="20210731 21:40:35.737"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:35.738" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:35.738" endtime="20210731 21:40:35.738"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:35.739" level="INFO">${pids} = ['11617']</msg>
<status status="PASS" starttime="20210731 21:40:35.739" endtime="20210731 21:40:35.739"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11617</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:35.748" level="INFO">Running command 'kill 11617 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:35.740" endtime="20210731 21:40:35.750"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.740" endtime="20210731 21:40:35.750"/>
</iter>
<status status="PASS" starttime="20210731 21:40:35.739" endtime="20210731 21:40:35.750"/>
</for>
<status status="PASS" starttime="20210731 21:40:35.739" endtime="20210731 21:40:35.750"/>
</branch>
<status status="PASS" starttime="20210731 21:40:35.739" endtime="20210731 21:40:35.750"/>
</if>
<status status="PASS" starttime="20210731 21:40:35.711" endtime="20210731 21:40:35.750"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:35.752" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:35.751" endtime="20210731 21:40:35.752"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:35.752" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:35.752" endtime="20210731 21:40:35.752"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:35.753" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:35.753" endtime="20210731 21:40:35.753"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:35.754" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:35.753" endtime="20210731 21:40:35.754"/>
</kw>
<msg timestamp="20210731 21:40:35.754" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:35.752" endtime="20210731 21:40:35.754"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:35.757" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:35.754" endtime="20210731 21:40:35.759"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.751" endtime="20210731 21:40:35.760"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:35.761" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:35.760" endtime="20210731 21:40:35.788"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:37.291" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:35.789" endtime="20210731 21:40:37.291"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.760" endtime="20210731 21:40:37.291"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:37.292" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:37.292" endtime="20210731 21:40:37.293"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:37.293" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:37.293" endtime="20210731 21:40:37.293"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:37.293" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:37.293" endtime="20210731 21:40:37.293"/>
</kw>
<msg timestamp="20210731 21:40:37.294" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:37.292" endtime="20210731 21:40:37.294"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:37.294" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:37.294" endtime="20210731 21:40:37.295"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.291" endtime="20210731 21:40:37.295"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:37.296" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:37.296" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:37.295" endtime="20210731 21:40:37.296"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.295" endtime="20210731 21:40:37.296"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:37.297" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:37.297" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:37.297" endtime="20210731 21:40:37.297"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:37.298" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:37.297" endtime="20210731 21:40:37.298"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:37.298" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:37.298" endtime="20210731 21:40:37.299"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:37.299" endtime="20210731 21:40:37.300"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:37.300" endtime="20210731 21:40:37.300"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.298" endtime="20210731 21:40:37.300"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:37.300" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:37.300" endtime="20210731 21:40:37.301"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:37.301" endtime="20210731 21:40:37.302"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:37.302" endtime="20210731 21:40:37.302"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.300" endtime="20210731 21:40:37.302"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:37.302" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:37.302" endtime="20210731 21:40:37.302"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:37.303" endtime="20210731 21:40:37.303"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:37.304" endtime="20210731 21:40:37.304"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.302" endtime="20210731 21:40:37.304"/>
</iter>
<status status="PASS" starttime="20210731 21:40:37.298" endtime="20210731 21:40:37.304"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:37.304" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:37.304" endtime="20210731 21:40:37.305"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.297" endtime="20210731 21:40:37.305"/>
</kw>
<status status="PASS" starttime="20210731 21:40:35.711" endtime="20210731 21:40:37.305"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:37.308" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:37.305" endtime="20210731 21:40:37.308"/>
</kw>
<msg timestamp="20210731 21:40:37.309" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:37.305" endtime="20210731 21:40:37.309"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>2 characters last name with two words</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:37.309" endtime="20210731 21:40:37.310"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.309" endtime="20210731 21:40:37.310"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:37.312" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:37.311" endtime="20210731 21:40:37.312"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:37.312" level="INFO">${payload} = {'lastname': 'Wi Xi'}</msg>
<status status="PASS" starttime="20210731 21:40:37.312" endtime="20210731 21:40:37.312"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:37.322" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:37.323" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:37.313" endtime="20210731 21:40:37.323"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:37.323" endtime="20210731 21:40:37.323"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:37.323" endtime="20210731 21:40:37.323"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:37.312" endtime="20210731 21:40:37.323"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:37.312" endtime="20210731 21:40:37.323"/>
</for>
<status status="FAIL" starttime="20210731 21:40:37.310" endtime="20210731 21:40:37.323"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:37.310" endtime="20210731 21:40:37.324"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:37.310" endtime="20210731 21:40:37.324"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:37.328" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:37.347" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:37.347" level="INFO">${pids} = 11640
11647
11656</msg>
<status status="PASS" starttime="20210731 21:40:37.324" endtime="20210731 21:40:37.347"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:37.348" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:37.347" endtime="20210731 21:40:37.348"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:37.349" level="INFO">${pids} = ['11640', '11647', '11656']</msg>
<status status="PASS" starttime="20210731 21:40:37.348" endtime="20210731 21:40:37.349"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11640</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:37.355" level="INFO">Running command 'kill 11640 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:37.349" endtime="20210731 21:40:37.356"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.349" endtime="20210731 21:40:37.356"/>
</iter>
<iter>
<var name="${pid}">11647</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:37.360" level="INFO">Running command 'kill 11647 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:37.357" endtime="20210731 21:40:37.362"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.356" endtime="20210731 21:40:37.362"/>
</iter>
<iter>
<var name="${pid}">11656</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:37.366" level="INFO">Running command 'kill 11656 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:37.363" endtime="20210731 21:40:37.367"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.362" endtime="20210731 21:40:37.367"/>
</iter>
<status status="PASS" starttime="20210731 21:40:37.349" endtime="20210731 21:40:37.367"/>
</for>
<status status="PASS" starttime="20210731 21:40:37.348" endtime="20210731 21:40:37.367"/>
</branch>
<status status="PASS" starttime="20210731 21:40:37.348" endtime="20210731 21:40:37.367"/>
</if>
<status status="PASS" starttime="20210731 21:40:37.324" endtime="20210731 21:40:37.367"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi Xi'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:35.710" endtime="20210731 21:40:37.367">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t116" name="With Each Valid Token, Updating Last Name Of Each System User With W Xi Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:37.373" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:37.386" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:37.386" level="INFO">${pids} = 11685</msg>
<status status="PASS" starttime="20210731 21:40:37.370" endtime="20210731 21:40:37.386"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:37.388" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:37.387" endtime="20210731 21:40:37.388"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:37.388" level="INFO">${pids} = ['11685']</msg>
<status status="PASS" starttime="20210731 21:40:37.388" endtime="20210731 21:40:37.389"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11685</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:37.392" level="INFO">Running command 'kill 11685 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:37.389" endtime="20210731 21:40:37.393"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.389" endtime="20210731 21:40:37.393"/>
</iter>
<status status="PASS" starttime="20210731 21:40:37.389" endtime="20210731 21:40:37.393"/>
</for>
<status status="PASS" starttime="20210731 21:40:37.388" endtime="20210731 21:40:37.393"/>
</branch>
<status status="PASS" starttime="20210731 21:40:37.388" endtime="20210731 21:40:37.393"/>
</if>
<status status="PASS" starttime="20210731 21:40:37.370" endtime="20210731 21:40:37.394"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:37.395" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:37.394" endtime="20210731 21:40:37.395"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:37.396" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:37.396" endtime="20210731 21:40:37.396"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:37.396" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:37.396" endtime="20210731 21:40:37.396"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:37.397" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:37.396" endtime="20210731 21:40:37.397"/>
</kw>
<msg timestamp="20210731 21:40:37.397" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:37.395" endtime="20210731 21:40:37.397"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:37.403" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:37.398" endtime="20210731 21:40:37.405"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.394" endtime="20210731 21:40:37.406"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:37.408" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:37.407" endtime="20210731 21:40:37.413"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:38.914" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:37.413" endtime="20210731 21:40:38.914"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.406" endtime="20210731 21:40:38.915"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:38.916" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:38.916" endtime="20210731 21:40:38.916"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:38.916" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:38.916" endtime="20210731 21:40:38.916"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:38.917" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:38.917" endtime="20210731 21:40:38.917"/>
</kw>
<msg timestamp="20210731 21:40:38.917" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:38.915" endtime="20210731 21:40:38.917"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:38.918" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:38.917" endtime="20210731 21:40:38.918"/>
</kw>
<status status="PASS" starttime="20210731 21:40:38.915" endtime="20210731 21:40:38.918"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:38.919" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:38.919" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:38.919" endtime="20210731 21:40:38.919"/>
</kw>
<status status="PASS" starttime="20210731 21:40:38.918" endtime="20210731 21:40:38.919"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:38.920" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:38.920" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:38.920" endtime="20210731 21:40:38.920"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:38.921" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:38.921" endtime="20210731 21:40:38.921"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:38.921" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:38.921" endtime="20210731 21:40:38.922"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:38.922" endtime="20210731 21:40:38.923"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:38.923" endtime="20210731 21:40:38.924"/>
</kw>
<status status="PASS" starttime="20210731 21:40:38.921" endtime="20210731 21:40:38.924"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:38.925" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:38.924" endtime="20210731 21:40:38.925"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:38.925" endtime="20210731 21:40:38.926"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:38.926" endtime="20210731 21:40:38.926"/>
</kw>
<status status="PASS" starttime="20210731 21:40:38.924" endtime="20210731 21:40:38.926"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:38.927" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:38.926" endtime="20210731 21:40:38.927"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:38.927" endtime="20210731 21:40:38.927"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:38.928" endtime="20210731 21:40:38.928"/>
</kw>
<status status="PASS" starttime="20210731 21:40:38.926" endtime="20210731 21:40:38.928"/>
</iter>
<status status="PASS" starttime="20210731 21:40:38.921" endtime="20210731 21:40:38.928"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:38.928" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:38.928" endtime="20210731 21:40:38.928"/>
</kw>
<status status="PASS" starttime="20210731 21:40:38.920" endtime="20210731 21:40:38.929"/>
</kw>
<status status="PASS" starttime="20210731 21:40:37.369" endtime="20210731 21:40:38.929"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:38.932" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:38.929" endtime="20210731 21:40:38.932"/>
</kw>
<msg timestamp="20210731 21:40:38.932" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:38.929" endtime="20210731 21:40:38.932"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The first last name is invalid with only 1 letter, the second last name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:38.933" endtime="20210731 21:40:38.934"/>
</kw>
<status status="PASS" starttime="20210731 21:40:38.933" endtime="20210731 21:40:38.934"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:38.935" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:38.935" endtime="20210731 21:40:38.935"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:38.936" level="INFO">${payload} = {'lastname': 'W Xi'}</msg>
<status status="PASS" starttime="20210731 21:40:38.935" endtime="20210731 21:40:38.936"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:38.950" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:38.950" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:38.936" endtime="20210731 21:40:38.950"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:38.950" endtime="20210731 21:40:38.950"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:38.950" endtime="20210731 21:40:38.950"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:38.936" endtime="20210731 21:40:38.950"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:38.936" endtime="20210731 21:40:38.950"/>
</for>
<status status="FAIL" starttime="20210731 21:40:38.934" endtime="20210731 21:40:38.951"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:38.934" endtime="20210731 21:40:38.951"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:38.934" endtime="20210731 21:40:38.951"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:38.955" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:38.966" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:38.966" level="INFO">${pids} = 11708
11715
11717</msg>
<status status="PASS" starttime="20210731 21:40:38.952" endtime="20210731 21:40:38.966"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:38.967" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:38.967" endtime="20210731 21:40:38.967"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:38.968" level="INFO">${pids} = ['11708', '11715', '11717']</msg>
<status status="PASS" starttime="20210731 21:40:38.968" endtime="20210731 21:40:38.968"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11708</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:38.981" level="INFO">Running command 'kill 11708 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:38.969" endtime="20210731 21:40:38.982"/>
</kw>
<status status="PASS" starttime="20210731 21:40:38.968" endtime="20210731 21:40:38.982"/>
</iter>
<iter>
<var name="${pid}">11715</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:38.991" level="INFO">Running command 'kill 11715 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:38.983" endtime="20210731 21:40:38.994"/>
</kw>
<status status="PASS" starttime="20210731 21:40:38.982" endtime="20210731 21:40:38.994"/>
</iter>
<iter>
<var name="${pid}">11717</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:38.998" level="INFO">Running command 'kill 11717 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:38.995" endtime="20210731 21:40:38.999"/>
</kw>
<status status="PASS" starttime="20210731 21:40:38.994" endtime="20210731 21:40:38.999"/>
</iter>
<status status="PASS" starttime="20210731 21:40:38.968" endtime="20210731 21:40:38.999"/>
</for>
<status status="PASS" starttime="20210731 21:40:38.968" endtime="20210731 21:40:38.999"/>
</branch>
<status status="PASS" starttime="20210731 21:40:38.967" endtime="20210731 21:40:38.999"/>
</if>
<status status="PASS" starttime="20210731 21:40:38.951" endtime="20210731 21:40:39.000"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'W Xi'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-NOT-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:37.368" endtime="20210731 21:40:39.000">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t117" name="With Each Valid Token, Updating Last Name Of Each System User With Wi X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:39.007" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:39.023" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:39.024" level="INFO">${pids} = 11748</msg>
<status status="PASS" starttime="20210731 21:40:39.003" endtime="20210731 21:40:39.024"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:39.025" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:39.024" endtime="20210731 21:40:39.025"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:39.027" level="INFO">${pids} = ['11748']</msg>
<status status="PASS" starttime="20210731 21:40:39.026" endtime="20210731 21:40:39.027"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11748</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:39.038" level="INFO">Running command 'kill 11748 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:39.028" endtime="20210731 21:40:39.050"/>
</kw>
<status status="PASS" starttime="20210731 21:40:39.027" endtime="20210731 21:40:39.050"/>
</iter>
<status status="PASS" starttime="20210731 21:40:39.027" endtime="20210731 21:40:39.050"/>
</for>
<status status="PASS" starttime="20210731 21:40:39.025" endtime="20210731 21:40:39.050"/>
</branch>
<status status="PASS" starttime="20210731 21:40:39.025" endtime="20210731 21:40:39.050"/>
</if>
<status status="PASS" starttime="20210731 21:40:39.003" endtime="20210731 21:40:39.051"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:39.052" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:39.052" endtime="20210731 21:40:39.052"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:39.053" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:39.053" endtime="20210731 21:40:39.053"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:39.055" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:39.055" endtime="20210731 21:40:39.055"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:39.056" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:39.055" endtime="20210731 21:40:39.056"/>
</kw>
<msg timestamp="20210731 21:40:39.056" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:39.052" endtime="20210731 21:40:39.056"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:39.066" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:39.056" endtime="20210731 21:40:39.068"/>
</kw>
<status status="PASS" starttime="20210731 21:40:39.051" endtime="20210731 21:40:39.068"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:39.069" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:39.069" endtime="20210731 21:40:39.074"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:40.575" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:39.075" endtime="20210731 21:40:40.576"/>
</kw>
<status status="PASS" starttime="20210731 21:40:39.068" endtime="20210731 21:40:40.576"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:40.577" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:40.577" endtime="20210731 21:40:40.577"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:40.578" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:40.577" endtime="20210731 21:40:40.578"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:40.578" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:40.578" endtime="20210731 21:40:40.578"/>
</kw>
<msg timestamp="20210731 21:40:40.579" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:40.577" endtime="20210731 21:40:40.579"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:40.579" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:40.579" endtime="20210731 21:40:40.580"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.576" endtime="20210731 21:40:40.580"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:40.580" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:40.580" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:40.580" endtime="20210731 21:40:40.581"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.580" endtime="20210731 21:40:40.581"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:40.581" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:40.582" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:40.581" endtime="20210731 21:40:40.582"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:40.582" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:40.582" endtime="20210731 21:40:40.582"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:40.583" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:40.582" endtime="20210731 21:40:40.583"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:40.583" endtime="20210731 21:40:40.584"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:40.584" endtime="20210731 21:40:40.584"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.582" endtime="20210731 21:40:40.584"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:40.585" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:40.584" endtime="20210731 21:40:40.585"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:40.585" endtime="20210731 21:40:40.586"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:40.586" endtime="20210731 21:40:40.586"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.584" endtime="20210731 21:40:40.586"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:40.587" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:40.586" endtime="20210731 21:40:40.587"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:40.587" endtime="20210731 21:40:40.588"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:40.588" endtime="20210731 21:40:40.588"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.586" endtime="20210731 21:40:40.588"/>
</iter>
<status status="PASS" starttime="20210731 21:40:40.582" endtime="20210731 21:40:40.588"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:40.589" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:40.588" endtime="20210731 21:40:40.589"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.581" endtime="20210731 21:40:40.589"/>
</kw>
<status status="PASS" starttime="20210731 21:40:39.003" endtime="20210731 21:40:40.589"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:40.593" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:40.590" endtime="20210731 21:40:40.593"/>
</kw>
<msg timestamp="20210731 21:40:40.593" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:40.589" endtime="20210731 21:40:40.593"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The second last name is invalid with only 1 letter, the first last name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:40.594" endtime="20210731 21:40:40.595"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.594" endtime="20210731 21:40:40.595"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:40.596" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:40.596" endtime="20210731 21:40:40.597"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:40.597" level="INFO">${payload} = {'lastname': 'Wi X'}</msg>
<status status="PASS" starttime="20210731 21:40:40.597" endtime="20210731 21:40:40.597"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:40.609" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:40.609" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:40.598" endtime="20210731 21:40:40.609"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:40.609" endtime="20210731 21:40:40.609"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:40.609" endtime="20210731 21:40:40.610"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:40.597" endtime="20210731 21:40:40.610"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:40.597" endtime="20210731 21:40:40.610"/>
</for>
<status status="FAIL" starttime="20210731 21:40:40.595" endtime="20210731 21:40:40.610"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:40.595" endtime="20210731 21:40:40.610"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:40.595" endtime="20210731 21:40:40.610"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:40.615" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:40.636" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:40.636" level="INFO">${pids} = 11771
11778
11780</msg>
<status status="PASS" starttime="20210731 21:40:40.611" endtime="20210731 21:40:40.636"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:40.637" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:40.636" endtime="20210731 21:40:40.637"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:40.638" level="INFO">${pids} = ['11771', '11778', '11780']</msg>
<status status="PASS" starttime="20210731 21:40:40.637" endtime="20210731 21:40:40.638"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11771</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:40.642" level="INFO">Running command 'kill 11771 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:40.638" endtime="20210731 21:40:40.642"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.638" endtime="20210731 21:40:40.643"/>
</iter>
<iter>
<var name="${pid}">11778</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:40.646" level="INFO">Running command 'kill 11778 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:40.643" endtime="20210731 21:40:40.647"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.643" endtime="20210731 21:40:40.647"/>
</iter>
<iter>
<var name="${pid}">11780</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:40.651" level="INFO">Running command 'kill 11780 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:40.647" endtime="20210731 21:40:40.652"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.647" endtime="20210731 21:40:40.652"/>
</iter>
<status status="PASS" starttime="20210731 21:40:40.638" endtime="20210731 21:40:40.652"/>
</for>
<status status="PASS" starttime="20210731 21:40:40.637" endtime="20210731 21:40:40.652"/>
</branch>
<status status="PASS" starttime="20210731 21:40:40.637" endtime="20210731 21:40:40.652"/>
</if>
<status status="PASS" starttime="20210731 21:40:40.610" endtime="20210731 21:40:40.652"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi X'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-NOT-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:39.001" endtime="20210731 21:40:40.653">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t118" name="With Each Valid Token, Updating Last Name Of Each System User With W X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:40.659" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:40.673" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:40.674" level="INFO">${pids} = 11809</msg>
<status status="PASS" starttime="20210731 21:40:40.655" endtime="20210731 21:40:40.674"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:40.675" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:40.674" endtime="20210731 21:40:40.675"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:40.676" level="INFO">${pids} = ['11809']</msg>
<status status="PASS" starttime="20210731 21:40:40.675" endtime="20210731 21:40:40.676"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11809</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:40.679" level="INFO">Running command 'kill 11809 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:40.676" endtime="20210731 21:40:40.680"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.676" endtime="20210731 21:40:40.680"/>
</iter>
<status status="PASS" starttime="20210731 21:40:40.676" endtime="20210731 21:40:40.680"/>
</for>
<status status="PASS" starttime="20210731 21:40:40.675" endtime="20210731 21:40:40.680"/>
</branch>
<status status="PASS" starttime="20210731 21:40:40.675" endtime="20210731 21:40:40.680"/>
</if>
<status status="PASS" starttime="20210731 21:40:40.655" endtime="20210731 21:40:40.681"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:40.685" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:40.685" endtime="20210731 21:40:40.685"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:40.686" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:40.686" endtime="20210731 21:40:40.686"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:40.687" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:40.686" endtime="20210731 21:40:40.687"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:40.687" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:40.687" endtime="20210731 21:40:40.687"/>
</kw>
<msg timestamp="20210731 21:40:40.687" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:40.686" endtime="20210731 21:40:40.688"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:40.692" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:40.688" endtime="20210731 21:40:40.694"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.681" endtime="20210731 21:40:40.694"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:40.696" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:40.695" endtime="20210731 21:40:40.705"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:42.206" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:40.705" endtime="20210731 21:40:42.206"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.695" endtime="20210731 21:40:42.207"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:42.208" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:42.208" endtime="20210731 21:40:42.208"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:42.209" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:42.208" endtime="20210731 21:40:42.209"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:42.209" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:42.209" endtime="20210731 21:40:42.209"/>
</kw>
<msg timestamp="20210731 21:40:42.210" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:42.208" endtime="20210731 21:40:42.210"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:42.210" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:42.210" endtime="20210731 21:40:42.211"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.207" endtime="20210731 21:40:42.211"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:42.212" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:42.212" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:42.211" endtime="20210731 21:40:42.212"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.211" endtime="20210731 21:40:42.212"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:42.213" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:42.213" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:42.212" endtime="20210731 21:40:42.213"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:42.213" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:42.213" endtime="20210731 21:40:42.213"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:42.214" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:42.214" endtime="20210731 21:40:42.214"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:42.214" endtime="20210731 21:40:42.215"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:42.215" endtime="20210731 21:40:42.216"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.214" endtime="20210731 21:40:42.216"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:42.216" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:42.216" endtime="20210731 21:40:42.216"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:42.216" endtime="20210731 21:40:42.217"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:42.218" endtime="20210731 21:40:42.218"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.216" endtime="20210731 21:40:42.218"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:42.218" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:42.218" endtime="20210731 21:40:42.218"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:42.219" endtime="20210731 21:40:42.220"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:42.220" endtime="20210731 21:40:42.220"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.218" endtime="20210731 21:40:42.220"/>
</iter>
<status status="PASS" starttime="20210731 21:40:42.214" endtime="20210731 21:40:42.220"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:42.221" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:42.220" endtime="20210731 21:40:42.221"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.212" endtime="20210731 21:40:42.221"/>
</kw>
<status status="PASS" starttime="20210731 21:40:40.655" endtime="20210731 21:40:42.221"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:42.225" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:42.222" endtime="20210731 21:40:42.225"/>
</kw>
<msg timestamp="20210731 21:40:42.225" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:42.221" endtime="20210731 21:40:42.225"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The both last names are invalid because they only have 1 letter</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:42.226" endtime="20210731 21:40:42.226"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.225" endtime="20210731 21:40:42.227"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:42.228" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:42.228" endtime="20210731 21:40:42.228"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:42.229" level="INFO">${payload} = {'lastname': 'W X'}</msg>
<status status="PASS" starttime="20210731 21:40:42.228" endtime="20210731 21:40:42.229"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:42.240" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:42.240" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:42.229" endtime="20210731 21:40:42.240"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:42.240" endtime="20210731 21:40:42.241"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:42.241" endtime="20210731 21:40:42.241"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:42.229" endtime="20210731 21:40:42.241"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:42.229" endtime="20210731 21:40:42.241"/>
</for>
<status status="FAIL" starttime="20210731 21:40:42.227" endtime="20210731 21:40:42.241"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:42.227" endtime="20210731 21:40:42.241"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:42.227" endtime="20210731 21:40:42.241"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:42.246" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:42.268" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:42.268" level="INFO">${pids} = 11832
11839
11842</msg>
<status status="PASS" starttime="20210731 21:40:42.242" endtime="20210731 21:40:42.268"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:42.269" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:42.268" endtime="20210731 21:40:42.270"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:42.270" level="INFO">${pids} = ['11832', '11839', '11842']</msg>
<status status="PASS" starttime="20210731 21:40:42.270" endtime="20210731 21:40:42.270"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11832</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:42.274" level="INFO">Running command 'kill 11832 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:42.271" endtime="20210731 21:40:42.275"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.271" endtime="20210731 21:40:42.275"/>
</iter>
<iter>
<var name="${pid}">11839</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:42.280" level="INFO">Running command 'kill 11839 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:42.276" endtime="20210731 21:40:42.280"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.275" endtime="20210731 21:40:42.280"/>
</iter>
<iter>
<var name="${pid}">11842</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:42.284" level="INFO">Running command 'kill 11842 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:42.281" endtime="20210731 21:40:42.285"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.280" endtime="20210731 21:40:42.285"/>
</iter>
<status status="PASS" starttime="20210731 21:40:42.270" endtime="20210731 21:40:42.285"/>
</for>
<status status="PASS" starttime="20210731 21:40:42.270" endtime="20210731 21:40:42.285"/>
</branch>
<status status="PASS" starttime="20210731 21:40:42.270" endtime="20210731 21:40:42.285"/>
</if>
<status status="PASS" starttime="20210731 21:40:42.242" endtime="20210731 21:40:42.286"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'W X'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-NOT-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:40.654" endtime="20210731 21:40:42.286">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t119" name="With Each Valid Token, Updating Last Name Of Each System User With Holm123 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:42.292" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:42.308" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:42.308" level="INFO">${pids} = 11871</msg>
<status status="PASS" starttime="20210731 21:40:42.288" endtime="20210731 21:40:42.308"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:42.309" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:42.308" endtime="20210731 21:40:42.309"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:42.310" level="INFO">${pids} = ['11871']</msg>
<status status="PASS" starttime="20210731 21:40:42.310" endtime="20210731 21:40:42.310"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11871</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:42.317" level="INFO">Running command 'kill 11871 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:42.310" endtime="20210731 21:40:42.318"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.310" endtime="20210731 21:40:42.318"/>
</iter>
<status status="PASS" starttime="20210731 21:40:42.310" endtime="20210731 21:40:42.318"/>
</for>
<status status="PASS" starttime="20210731 21:40:42.309" endtime="20210731 21:40:42.318"/>
</branch>
<status status="PASS" starttime="20210731 21:40:42.309" endtime="20210731 21:40:42.318"/>
</if>
<status status="PASS" starttime="20210731 21:40:42.288" endtime="20210731 21:40:42.319"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:42.320" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:42.320" endtime="20210731 21:40:42.320"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:42.321" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:42.321" endtime="20210731 21:40:42.321"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:42.322" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:42.321" endtime="20210731 21:40:42.322"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:42.322" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:42.322" endtime="20210731 21:40:42.322"/>
</kw>
<msg timestamp="20210731 21:40:42.322" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:42.320" endtime="20210731 21:40:42.322"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:42.326" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:42.323" endtime="20210731 21:40:42.328"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.319" endtime="20210731 21:40:42.328"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:42.330" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:42.329" endtime="20210731 21:40:42.359"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:43.861" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:42.360" endtime="20210731 21:40:43.861"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.329" endtime="20210731 21:40:43.861"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:43.863" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:43.862" endtime="20210731 21:40:43.863"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:43.863" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:43.863" endtime="20210731 21:40:43.863"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:43.863" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:43.863" endtime="20210731 21:40:43.864"/>
</kw>
<msg timestamp="20210731 21:40:43.864" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:43.862" endtime="20210731 21:40:43.864"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:43.864" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:43.864" endtime="20210731 21:40:43.865"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.861" endtime="20210731 21:40:43.865"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:43.866" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:43.866" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:43.865" endtime="20210731 21:40:43.866"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.865" endtime="20210731 21:40:43.866"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:43.867" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:43.867" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:43.867" endtime="20210731 21:40:43.867"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:43.868" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:43.867" endtime="20210731 21:40:43.868"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:43.868" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:43.868" endtime="20210731 21:40:43.868"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:43.869" endtime="20210731 21:40:43.869"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:43.870" endtime="20210731 21:40:43.870"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.868" endtime="20210731 21:40:43.870"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:43.870" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:43.870" endtime="20210731 21:40:43.870"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:43.871" endtime="20210731 21:40:43.872"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:43.872" endtime="20210731 21:40:43.872"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.870" endtime="20210731 21:40:43.872"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:43.872" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:43.872" endtime="20210731 21:40:43.873"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:43.874" endtime="20210731 21:40:43.875"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:43.875" endtime="20210731 21:40:43.875"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.872" endtime="20210731 21:40:43.875"/>
</iter>
<status status="PASS" starttime="20210731 21:40:43.868" endtime="20210731 21:40:43.875"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:43.876" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:43.875" endtime="20210731 21:40:43.876"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.866" endtime="20210731 21:40:43.876"/>
</kw>
<status status="PASS" starttime="20210731 21:40:42.288" endtime="20210731 21:40:43.876"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:43.880" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:43.877" endtime="20210731 21:40:43.880"/>
</kw>
<msg timestamp="20210731 21:40:43.880" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:43.876" endtime="20210731 21:40:43.880"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Last name does contain numbers, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:43.881" endtime="20210731 21:40:43.881"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.880" endtime="20210731 21:40:43.881"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:43.883" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:43.883" endtime="20210731 21:40:43.883"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:43.884" level="INFO">${payload} = {'lastname': 'Holm123'}</msg>
<status status="PASS" starttime="20210731 21:40:43.883" endtime="20210731 21:40:43.884"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:43.895" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:43.895" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:43.884" endtime="20210731 21:40:43.895"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:43.896" endtime="20210731 21:40:43.896"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:43.896" endtime="20210731 21:40:43.896"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:43.884" endtime="20210731 21:40:43.896"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:43.884" endtime="20210731 21:40:43.896"/>
</for>
<status status="FAIL" starttime="20210731 21:40:43.882" endtime="20210731 21:40:43.896"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:43.882" endtime="20210731 21:40:43.896"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:43.881" endtime="20210731 21:40:43.896"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:43.901" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:43.914" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:43.914" level="INFO">${pids} = 11894
11901
11903</msg>
<status status="PASS" starttime="20210731 21:40:43.897" endtime="20210731 21:40:43.914"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:43.915" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:43.914" endtime="20210731 21:40:43.915"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:43.916" level="INFO">${pids} = ['11894', '11901', '11903']</msg>
<status status="PASS" starttime="20210731 21:40:43.915" endtime="20210731 21:40:43.916"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11894</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:43.926" level="INFO">Running command 'kill 11894 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:43.916" endtime="20210731 21:40:43.926"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.916" endtime="20210731 21:40:43.926"/>
</iter>
<iter>
<var name="${pid}">11901</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:43.931" level="INFO">Running command 'kill 11901 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:43.927" endtime="20210731 21:40:43.931"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.927" endtime="20210731 21:40:43.931"/>
</iter>
<iter>
<var name="${pid}">11903</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:43.936" level="INFO">Running command 'kill 11903 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:43.932" endtime="20210731 21:40:43.937"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.931" endtime="20210731 21:40:43.937"/>
</iter>
<status status="PASS" starttime="20210731 21:40:43.916" endtime="20210731 21:40:43.937"/>
</for>
<status status="PASS" starttime="20210731 21:40:43.915" endtime="20210731 21:40:43.937"/>
</branch>
<status status="PASS" starttime="20210731 21:40:43.915" endtime="20210731 21:40:43.937"/>
</if>
<status status="PASS" starttime="20210731 21:40:43.897" endtime="20210731 21:40:43.937"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm123'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-NOT-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:42.287" endtime="20210731 21:40:43.938">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t120" name="With Each Valid Token, Updating Last Name Of Each System User With Holm!.? Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:43.944" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:43.960" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:43.960" level="INFO">${pids} = 11932</msg>
<status status="PASS" starttime="20210731 21:40:43.940" endtime="20210731 21:40:43.960"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:43.961" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:43.960" endtime="20210731 21:40:43.961"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:43.962" level="INFO">${pids} = ['11932']</msg>
<status status="PASS" starttime="20210731 21:40:43.962" endtime="20210731 21:40:43.962"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11932</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:43.968" level="INFO">Running command 'kill 11932 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:43.962" endtime="20210731 21:40:43.969"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.962" endtime="20210731 21:40:43.969"/>
</iter>
<status status="PASS" starttime="20210731 21:40:43.962" endtime="20210731 21:40:43.969"/>
</for>
<status status="PASS" starttime="20210731 21:40:43.961" endtime="20210731 21:40:43.969"/>
</branch>
<status status="PASS" starttime="20210731 21:40:43.961" endtime="20210731 21:40:43.969"/>
</if>
<status status="PASS" starttime="20210731 21:40:43.940" endtime="20210731 21:40:43.970"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:43.971" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:43.971" endtime="20210731 21:40:43.971"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:43.972" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:43.972" endtime="20210731 21:40:43.972"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:43.973" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:43.972" endtime="20210731 21:40:43.973"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:43.973" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:43.973" endtime="20210731 21:40:43.973"/>
</kw>
<msg timestamp="20210731 21:40:43.974" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:43.972" endtime="20210731 21:40:43.974"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:43.978" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:43.974" endtime="20210731 21:40:43.979"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.970" endtime="20210731 21:40:43.980"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:43.982" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:43.981" endtime="20210731 21:40:44.002"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:45.503" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:44.002" endtime="20210731 21:40:45.503"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.980" endtime="20210731 21:40:45.504"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:45.505" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:45.505" endtime="20210731 21:40:45.505"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:45.506" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:45.505" endtime="20210731 21:40:45.506"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:45.506" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:45.506" endtime="20210731 21:40:45.506"/>
</kw>
<msg timestamp="20210731 21:40:45.507" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:45.504" endtime="20210731 21:40:45.507"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:45.507" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:45.507" endtime="20210731 21:40:45.508"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.504" endtime="20210731 21:40:45.508"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:45.509" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:45.509" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:45.509" endtime="20210731 21:40:45.509"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.508" endtime="20210731 21:40:45.510"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:45.511" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:45.511" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:45.510" endtime="20210731 21:40:45.511"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:45.511" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:45.511" endtime="20210731 21:40:45.511"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:45.512" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:45.512" endtime="20210731 21:40:45.512"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:45.513" endtime="20210731 21:40:45.514"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:45.514" endtime="20210731 21:40:45.515"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.512" endtime="20210731 21:40:45.515"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:45.516" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:45.515" endtime="20210731 21:40:45.516"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:45.516" endtime="20210731 21:40:45.517"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:45.517" endtime="20210731 21:40:45.517"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.515" endtime="20210731 21:40:45.517"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:45.517" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:45.517" endtime="20210731 21:40:45.517"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:45.518" endtime="20210731 21:40:45.518"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:45.519" endtime="20210731 21:40:45.519"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.517" endtime="20210731 21:40:45.519"/>
</iter>
<status status="PASS" starttime="20210731 21:40:45.511" endtime="20210731 21:40:45.519"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:45.519" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:45.519" endtime="20210731 21:40:45.519"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.510" endtime="20210731 21:40:45.520"/>
</kw>
<status status="PASS" starttime="20210731 21:40:43.940" endtime="20210731 21:40:45.520"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:45.524" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:45.520" endtime="20210731 21:40:45.524"/>
</kw>
<msg timestamp="20210731 21:40:45.524" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:45.520" endtime="20210731 21:40:45.525"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Last name does contain non alphanumeric characters, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:45.526" endtime="20210731 21:40:45.526"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.525" endtime="20210731 21:40:45.527"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:45.529" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:45.528" endtime="20210731 21:40:45.529"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:45.530" level="INFO">${payload} = {'lastname': 'Holm!.?'}</msg>
<status status="PASS" starttime="20210731 21:40:45.529" endtime="20210731 21:40:45.530"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:45.543" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:45.543" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:45.530" endtime="20210731 21:40:45.543"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:45.543" endtime="20210731 21:40:45.543"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:45.543" endtime="20210731 21:40:45.543"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:45.530" endtime="20210731 21:40:45.543"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:45.530" endtime="20210731 21:40:45.544"/>
</for>
<status status="FAIL" starttime="20210731 21:40:45.527" endtime="20210731 21:40:45.544"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:45.527" endtime="20210731 21:40:45.544"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:45.527" endtime="20210731 21:40:45.544"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:45.549" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:45.567" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:45.567" level="INFO">${pids} = 11955
11962
11965</msg>
<status status="PASS" starttime="20210731 21:40:45.545" endtime="20210731 21:40:45.567"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:45.568" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:45.567" endtime="20210731 21:40:45.568"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:45.569" level="INFO">${pids} = ['11955', '11962', '11965']</msg>
<status status="PASS" starttime="20210731 21:40:45.568" endtime="20210731 21:40:45.569"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11955</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:45.574" level="INFO">Running command 'kill 11955 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:45.569" endtime="20210731 21:40:45.575"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.569" endtime="20210731 21:40:45.575"/>
</iter>
<iter>
<var name="${pid}">11962</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:45.579" level="INFO">Running command 'kill 11962 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:45.576" endtime="20210731 21:40:45.582"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.575" endtime="20210731 21:40:45.582"/>
</iter>
<iter>
<var name="${pid}">11965</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:45.586" level="INFO">Running command 'kill 11965 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:45.582" endtime="20210731 21:40:45.586"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.582" endtime="20210731 21:40:45.586"/>
</iter>
<status status="PASS" starttime="20210731 21:40:45.569" endtime="20210731 21:40:45.586"/>
</for>
<status status="PASS" starttime="20210731 21:40:45.568" endtime="20210731 21:40:45.587"/>
</branch>
<status status="PASS" starttime="20210731 21:40:45.568" endtime="20210731 21:40:45.587"/>
</if>
<status status="PASS" starttime="20210731 21:40:45.544" endtime="20210731 21:40:45.587"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm!.?'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-NOT-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:43.938" endtime="20210731 21:40:45.587">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t121" name="With Each Valid Token, Updating Last Name Of Each System User With Holm Cuzdan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:45.595" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:45.611" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:45.611" level="INFO">${pids} = 11994</msg>
<status status="PASS" starttime="20210731 21:40:45.590" endtime="20210731 21:40:45.611"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:45.612" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:45.611" endtime="20210731 21:40:45.612"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:45.618" level="INFO">${pids} = ['11994']</msg>
<status status="PASS" starttime="20210731 21:40:45.612" endtime="20210731 21:40:45.618"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">11994</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:45.623" level="INFO">Running command 'kill 11994 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:45.618" endtime="20210731 21:40:45.623"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.618" endtime="20210731 21:40:45.624"/>
</iter>
<status status="PASS" starttime="20210731 21:40:45.618" endtime="20210731 21:40:45.624"/>
</for>
<status status="PASS" starttime="20210731 21:40:45.612" endtime="20210731 21:40:45.624"/>
</branch>
<status status="PASS" starttime="20210731 21:40:45.612" endtime="20210731 21:40:45.624"/>
</if>
<status status="PASS" starttime="20210731 21:40:45.590" endtime="20210731 21:40:45.624"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:45.626" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:45.625" endtime="20210731 21:40:45.626"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:45.626" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:45.626" endtime="20210731 21:40:45.626"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:45.627" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:45.627" endtime="20210731 21:40:45.627"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:45.627" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:45.627" endtime="20210731 21:40:45.628"/>
</kw>
<msg timestamp="20210731 21:40:45.628" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:45.626" endtime="20210731 21:40:45.628"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:45.632" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:45.628" endtime="20210731 21:40:45.634"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.624" endtime="20210731 21:40:45.634"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:45.636" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:45.635" endtime="20210731 21:40:45.670"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:47.171" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:45.670" endtime="20210731 21:40:47.172"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.635" endtime="20210731 21:40:47.172"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:47.173" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:47.173" endtime="20210731 21:40:47.173"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:47.174" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:47.174" endtime="20210731 21:40:47.174"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:47.174" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:47.174" endtime="20210731 21:40:47.174"/>
</kw>
<msg timestamp="20210731 21:40:47.175" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:47.172" endtime="20210731 21:40:47.175"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:47.175" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:47.175" endtime="20210731 21:40:47.176"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.172" endtime="20210731 21:40:47.176"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:47.177" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:47.177" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:47.176" endtime="20210731 21:40:47.177"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.176" endtime="20210731 21:40:47.177"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:47.178" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:47.178" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:47.178" endtime="20210731 21:40:47.178"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:47.179" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:47.179" endtime="20210731 21:40:47.179"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:47.180" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:47.179" endtime="20210731 21:40:47.180"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:47.180" endtime="20210731 21:40:47.181"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:47.181" endtime="20210731 21:40:47.182"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.179" endtime="20210731 21:40:47.182"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:47.183" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:47.182" endtime="20210731 21:40:47.183"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:47.183" endtime="20210731 21:40:47.184"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:47.184" endtime="20210731 21:40:47.184"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.182" endtime="20210731 21:40:47.184"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:47.185" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:47.185" endtime="20210731 21:40:47.185"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:47.185" endtime="20210731 21:40:47.186"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:47.186" endtime="20210731 21:40:47.186"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.185" endtime="20210731 21:40:47.186"/>
</iter>
<status status="PASS" starttime="20210731 21:40:47.179" endtime="20210731 21:40:47.186"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:47.187" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:47.187" endtime="20210731 21:40:47.187"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.177" endtime="20210731 21:40:47.187"/>
</kw>
<status status="PASS" starttime="20210731 21:40:45.590" endtime="20210731 21:40:47.187"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:47.191" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:47.188" endtime="20210731 21:40:47.191"/>
</kw>
<msg timestamp="20210731 21:40:47.191" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:47.188" endtime="20210731 21:40:47.191"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Two valid last names seperated by a single space character</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:47.192" endtime="20210731 21:40:47.193"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.192" endtime="20210731 21:40:47.193"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:47.195" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:47.194" endtime="20210731 21:40:47.195"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:47.195" level="INFO">${payload} = {'lastname': 'Holm Cuzdan'}</msg>
<status status="PASS" starttime="20210731 21:40:47.195" endtime="20210731 21:40:47.195"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:47.206" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:47.207" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:47.196" endtime="20210731 21:40:47.207"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:47.207" endtime="20210731 21:40:47.207"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:47.207" endtime="20210731 21:40:47.207"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:47.196" endtime="20210731 21:40:47.207"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:47.195" endtime="20210731 21:40:47.207"/>
</for>
<status status="FAIL" starttime="20210731 21:40:47.194" endtime="20210731 21:40:47.207"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:47.194" endtime="20210731 21:40:47.208"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:47.193" endtime="20210731 21:40:47.208"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:47.212" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:47.224" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:47.224" level="INFO">${pids} = 12017
12024
12027</msg>
<status status="PASS" starttime="20210731 21:40:47.208" endtime="20210731 21:40:47.224"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:47.225" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:47.225" endtime="20210731 21:40:47.225"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:47.226" level="INFO">${pids} = ['12017', '12024', '12027']</msg>
<status status="PASS" starttime="20210731 21:40:47.226" endtime="20210731 21:40:47.226"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12017</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:47.235" level="INFO">Running command 'kill 12017 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:47.227" endtime="20210731 21:40:47.235"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.226" endtime="20210731 21:40:47.235"/>
</iter>
<iter>
<var name="${pid}">12024</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:47.239" level="INFO">Running command 'kill 12024 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:47.236" endtime="20210731 21:40:47.240"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.236" endtime="20210731 21:40:47.240"/>
</iter>
<iter>
<var name="${pid}">12027</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:47.244" level="INFO">Running command 'kill 12027 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:47.241" endtime="20210731 21:40:47.244"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.240" endtime="20210731 21:40:47.245"/>
</iter>
<status status="PASS" starttime="20210731 21:40:47.226" endtime="20210731 21:40:47.245"/>
</for>
<status status="PASS" starttime="20210731 21:40:47.226" endtime="20210731 21:40:47.245"/>
</branch>
<status status="PASS" starttime="20210731 21:40:47.225" endtime="20210731 21:40:47.245"/>
</if>
<status status="PASS" starttime="20210731 21:40:47.208" endtime="20210731 21:40:47.245"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm Cuzdan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:45.588" endtime="20210731 21:40:47.245">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t122" name="With Each Valid Token, Updating Last Name Of Each System User With Holm      Cuzdan Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:47.251" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:47.275" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:47.275" level="INFO">${pids} = 12056</msg>
<status status="PASS" starttime="20210731 21:40:47.248" endtime="20210731 21:40:47.275"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:47.276" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:47.276" endtime="20210731 21:40:47.276"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:47.278" level="INFO">${pids} = ['12056']</msg>
<status status="PASS" starttime="20210731 21:40:47.277" endtime="20210731 21:40:47.278"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12056</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:47.285" level="INFO">Running command 'kill 12056 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:47.279" endtime="20210731 21:40:47.286"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.279" endtime="20210731 21:40:47.286"/>
</iter>
<status status="PASS" starttime="20210731 21:40:47.278" endtime="20210731 21:40:47.286"/>
</for>
<status status="PASS" starttime="20210731 21:40:47.277" endtime="20210731 21:40:47.286"/>
</branch>
<status status="PASS" starttime="20210731 21:40:47.276" endtime="20210731 21:40:47.286"/>
</if>
<status status="PASS" starttime="20210731 21:40:47.247" endtime="20210731 21:40:47.287"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:47.288" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:47.288" endtime="20210731 21:40:47.288"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:47.289" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:47.289" endtime="20210731 21:40:47.289"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:47.289" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:47.289" endtime="20210731 21:40:47.289"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:47.290" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:47.290" endtime="20210731 21:40:47.290"/>
</kw>
<msg timestamp="20210731 21:40:47.290" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:47.288" endtime="20210731 21:40:47.290"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:47.294" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:47.291" endtime="20210731 21:40:47.296"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.287" endtime="20210731 21:40:47.296"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:47.298" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:47.297" endtime="20210731 21:40:47.326"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:48.827" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:47.326" endtime="20210731 21:40:48.827"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.297" endtime="20210731 21:40:48.827"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:48.829" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:48.828" endtime="20210731 21:40:48.829"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:48.829" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:48.829" endtime="20210731 21:40:48.829"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:48.830" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:48.830" endtime="20210731 21:40:48.830"/>
</kw>
<msg timestamp="20210731 21:40:48.830" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:48.828" endtime="20210731 21:40:48.830"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:48.831" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:48.830" endtime="20210731 21:40:48.831"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.828" endtime="20210731 21:40:48.831"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:48.832" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:48.832" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:48.832" endtime="20210731 21:40:48.832"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.832" endtime="20210731 21:40:48.832"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:48.833" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:48.833" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:48.833" endtime="20210731 21:40:48.833"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:48.834" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:48.833" endtime="20210731 21:40:48.834"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:48.834" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:48.834" endtime="20210731 21:40:48.834"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:48.834" endtime="20210731 21:40:48.835"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:48.836" endtime="20210731 21:40:48.836"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.834" endtime="20210731 21:40:48.836"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:48.836" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:48.836" endtime="20210731 21:40:48.836"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:48.836" endtime="20210731 21:40:48.837"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:48.837" endtime="20210731 21:40:48.838"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.836" endtime="20210731 21:40:48.838"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:48.838" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:48.838" endtime="20210731 21:40:48.838"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:48.838" endtime="20210731 21:40:48.839"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:48.839" endtime="20210731 21:40:48.840"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.838" endtime="20210731 21:40:48.840"/>
</iter>
<status status="PASS" starttime="20210731 21:40:48.834" endtime="20210731 21:40:48.840"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:48.840" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:48.840" endtime="20210731 21:40:48.841"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.832" endtime="20210731 21:40:48.841"/>
</kw>
<status status="PASS" starttime="20210731 21:40:47.247" endtime="20210731 21:40:48.841"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:48.844" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:48.841" endtime="20210731 21:40:48.844"/>
</kw>
<msg timestamp="20210731 21:40:48.845" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:48.841" endtime="20210731 21:40:48.845"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Two valid last names seperated by many space characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:48.845" endtime="20210731 21:40:48.846"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.845" endtime="20210731 21:40:48.846"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:48.847" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:48.847" endtime="20210731 21:40:48.847"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:48.848" level="INFO">${payload} = {'lastname': 'Holm      Cuzdan'}</msg>
<status status="PASS" starttime="20210731 21:40:48.847" endtime="20210731 21:40:48.848"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:48.861" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:48.862" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:48.848" endtime="20210731 21:40:48.862"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:48.862" endtime="20210731 21:40:48.862"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:48.862" endtime="20210731 21:40:48.862"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:48.848" endtime="20210731 21:40:48.862"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:48.848" endtime="20210731 21:40:48.863"/>
</for>
<status status="FAIL" starttime="20210731 21:40:48.846" endtime="20210731 21:40:48.863"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:48.846" endtime="20210731 21:40:48.863"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:48.846" endtime="20210731 21:40:48.863"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:48.871" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:48.890" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:48.890" level="INFO">${pids} = 12079
12086
12091</msg>
<status status="PASS" starttime="20210731 21:40:48.864" endtime="20210731 21:40:48.890"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:48.891" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:48.891" endtime="20210731 21:40:48.891"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:48.892" level="INFO">${pids} = ['12079', '12086', '12091']</msg>
<status status="PASS" starttime="20210731 21:40:48.892" endtime="20210731 21:40:48.892"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12079</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:48.897" level="INFO">Running command 'kill 12079 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:48.893" endtime="20210731 21:40:48.897"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.892" endtime="20210731 21:40:48.897"/>
</iter>
<iter>
<var name="${pid}">12086</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:48.902" level="INFO">Running command 'kill 12086 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:48.898" endtime="20210731 21:40:48.902"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.898" endtime="20210731 21:40:48.902"/>
</iter>
<iter>
<var name="${pid}">12091</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:48.906" level="INFO">Running command 'kill 12091 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:48.903" endtime="20210731 21:40:48.907"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.903" endtime="20210731 21:40:48.907"/>
</iter>
<status status="PASS" starttime="20210731 21:40:48.892" endtime="20210731 21:40:48.907"/>
</for>
<status status="PASS" starttime="20210731 21:40:48.892" endtime="20210731 21:40:48.907"/>
</branch>
<status status="PASS" starttime="20210731 21:40:48.891" endtime="20210731 21:40:48.907"/>
</if>
<status status="PASS" starttime="20210731 21:40:48.863" endtime="20210731 21:40:48.907"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm Cuzdan'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-LASTNAME-NOT-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:47.246" endtime="20210731 21:40:48.907">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t123" name="With Each Valid Token, Updating Phone Number Of Each System User With Empty String Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:48.912" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:48.928" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:48.928" level="INFO">${pids} = 12120</msg>
<status status="PASS" starttime="20210731 21:40:48.909" endtime="20210731 21:40:48.928"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:48.929" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:48.928" endtime="20210731 21:40:48.929"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:48.930" level="INFO">${pids} = ['12120']</msg>
<status status="PASS" starttime="20210731 21:40:48.929" endtime="20210731 21:40:48.930"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12120</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:48.938" level="INFO">Running command 'kill 12120 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:48.930" endtime="20210731 21:40:48.939"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.930" endtime="20210731 21:40:48.939"/>
</iter>
<status status="PASS" starttime="20210731 21:40:48.930" endtime="20210731 21:40:48.939"/>
</for>
<status status="PASS" starttime="20210731 21:40:48.929" endtime="20210731 21:40:48.939"/>
</branch>
<status status="PASS" starttime="20210731 21:40:48.929" endtime="20210731 21:40:48.939"/>
</if>
<status status="PASS" starttime="20210731 21:40:48.909" endtime="20210731 21:40:48.940"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:48.941" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:48.941" endtime="20210731 21:40:48.941"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:48.942" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:48.942" endtime="20210731 21:40:48.942"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:48.943" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:48.942" endtime="20210731 21:40:48.943"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:48.943" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:48.943" endtime="20210731 21:40:48.943"/>
</kw>
<msg timestamp="20210731 21:40:48.943" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:48.942" endtime="20210731 21:40:48.943"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:48.947" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:48.943" endtime="20210731 21:40:48.949"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.940" endtime="20210731 21:40:48.949"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:48.950" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:48.950" endtime="20210731 21:40:48.962"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:50.463" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:48.962" endtime="20210731 21:40:50.464"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.949" endtime="20210731 21:40:50.464"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:50.466" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:50.465" endtime="20210731 21:40:50.466"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:50.466" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:50.466" endtime="20210731 21:40:50.466"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:50.466" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:50.466" endtime="20210731 21:40:50.467"/>
</kw>
<msg timestamp="20210731 21:40:50.467" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:50.465" endtime="20210731 21:40:50.467"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:50.467" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:50.467" endtime="20210731 21:40:50.468"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.464" endtime="20210731 21:40:50.468"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:50.470" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:50.470" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:50.468" endtime="20210731 21:40:50.470"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.468" endtime="20210731 21:40:50.470"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:50.471" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:50.471" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:50.471" endtime="20210731 21:40:50.471"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:50.471" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:50.471" endtime="20210731 21:40:50.471"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:50.472" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:50.472" endtime="20210731 21:40:50.472"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:50.472" endtime="20210731 21:40:50.473"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:50.474" endtime="20210731 21:40:50.474"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.472" endtime="20210731 21:40:50.474"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:50.474" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:50.474" endtime="20210731 21:40:50.474"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:50.475" endtime="20210731 21:40:50.476"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:50.476" endtime="20210731 21:40:50.476"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.474" endtime="20210731 21:40:50.476"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:50.476" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:50.476" endtime="20210731 21:40:50.476"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:50.477" endtime="20210731 21:40:50.478"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:50.478" endtime="20210731 21:40:50.478"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.476" endtime="20210731 21:40:50.478"/>
</iter>
<status status="PASS" starttime="20210731 21:40:50.471" endtime="20210731 21:40:50.478"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:50.479" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:50.478" endtime="20210731 21:40:50.479"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.470" endtime="20210731 21:40:50.479"/>
</kw>
<status status="PASS" starttime="20210731 21:40:48.909" endtime="20210731 21:40:50.479"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:50.483" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:50.480" endtime="20210731 21:40:50.483"/>
</kw>
<msg timestamp="20210731 21:40:50.483" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:50.479" endtime="20210731 21:40:50.483"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An empty phone number</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:50.484" endtime="20210731 21:40:50.485"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.483" endtime="20210731 21:40:50.485"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:50.487" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:50.486" endtime="20210731 21:40:50.487"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:50.487" level="INFO">${payload} = {'phone': ''}</msg>
<status status="PASS" starttime="20210731 21:40:50.487" endtime="20210731 21:40:50.487"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:50.498" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:50.498" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:50.488" endtime="20210731 21:40:50.499"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:50.499" endtime="20210731 21:40:50.499"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:50.499" endtime="20210731 21:40:50.499"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:50.488" endtime="20210731 21:40:50.499"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:50.487" endtime="20210731 21:40:50.499"/>
</for>
<status status="FAIL" starttime="20210731 21:40:50.485" endtime="20210731 21:40:50.499"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:50.485" endtime="20210731 21:40:50.499"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:50.485" endtime="20210731 21:40:50.499"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:50.504" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:50.531" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:50.531" level="INFO">${pids} = 12143
12150
12152</msg>
<status status="PASS" starttime="20210731 21:40:50.500" endtime="20210731 21:40:50.531"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:50.532" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:50.531" endtime="20210731 21:40:50.532"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:50.533" level="INFO">${pids} = ['12143', '12150', '12152']</msg>
<status status="PASS" starttime="20210731 21:40:50.533" endtime="20210731 21:40:50.533"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12143</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:50.538" level="INFO">Running command 'kill 12143 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:50.534" endtime="20210731 21:40:50.539"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.534" endtime="20210731 21:40:50.539"/>
</iter>
<iter>
<var name="${pid}">12150</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:50.543" level="INFO">Running command 'kill 12150 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:50.540" endtime="20210731 21:40:50.544"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.539" endtime="20210731 21:40:50.544"/>
</iter>
<iter>
<var name="${pid}">12152</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:50.548" level="INFO">Running command 'kill 12152 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:50.544" endtime="20210731 21:40:50.548"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.544" endtime="20210731 21:40:50.549"/>
</iter>
<status status="PASS" starttime="20210731 21:40:50.533" endtime="20210731 21:40:50.549"/>
</for>
<status status="PASS" starttime="20210731 21:40:50.532" endtime="20210731 21:40:50.549"/>
</branch>
<status status="PASS" starttime="20210731 21:40:50.532" endtime="20210731 21:40:50.549"/>
</if>
<status status="PASS" starttime="20210731 21:40:50.500" endtime="20210731 21:40:50.549"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": ''
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-PHONE-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:48.908" endtime="20210731 21:40:50.549">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t124" name="With Each Valid Token, Updating Phone Number Of Each System User With +358506662712 Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:50.555" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:50.567" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:50.568" level="INFO">${pids} = 12181</msg>
<status status="PASS" starttime="20210731 21:40:50.551" endtime="20210731 21:40:50.568"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:50.569" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:50.568" endtime="20210731 21:40:50.569"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:50.570" level="INFO">${pids} = ['12181']</msg>
<status status="PASS" starttime="20210731 21:40:50.569" endtime="20210731 21:40:50.570"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12181</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:50.574" level="INFO">Running command 'kill 12181 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:50.570" endtime="20210731 21:40:50.574"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.570" endtime="20210731 21:40:50.575"/>
</iter>
<status status="PASS" starttime="20210731 21:40:50.570" endtime="20210731 21:40:50.575"/>
</for>
<status status="PASS" starttime="20210731 21:40:50.569" endtime="20210731 21:40:50.575"/>
</branch>
<status status="PASS" starttime="20210731 21:40:50.569" endtime="20210731 21:40:50.575"/>
</if>
<status status="PASS" starttime="20210731 21:40:50.551" endtime="20210731 21:40:50.575"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:50.576" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:50.576" endtime="20210731 21:40:50.576"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:50.578" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:50.577" endtime="20210731 21:40:50.578"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:50.578" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:50.578" endtime="20210731 21:40:50.578"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:50.579" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:50.578" endtime="20210731 21:40:50.579"/>
</kw>
<msg timestamp="20210731 21:40:50.579" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:50.577" endtime="20210731 21:40:50.579"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:50.585" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:50.579" endtime="20210731 21:40:50.587"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.575" endtime="20210731 21:40:50.588"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:50.589" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:50.588" endtime="20210731 21:40:50.594"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:52.095" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:50.594" endtime="20210731 21:40:52.095"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.588" endtime="20210731 21:40:52.096"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:52.097" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:52.097" endtime="20210731 21:40:52.097"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:52.097" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:52.097" endtime="20210731 21:40:52.097"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:52.098" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:52.098" endtime="20210731 21:40:52.098"/>
</kw>
<msg timestamp="20210731 21:40:52.098" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:52.096" endtime="20210731 21:40:52.098"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:52.099" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:52.098" endtime="20210731 21:40:52.099"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.096" endtime="20210731 21:40:52.099"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:52.100" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:52.100" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:52.100" endtime="20210731 21:40:52.100"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.100" endtime="20210731 21:40:52.100"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:52.101" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:52.101" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:52.101" endtime="20210731 21:40:52.101"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:52.102" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:52.102" endtime="20210731 21:40:52.102"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:52.103" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:52.102" endtime="20210731 21:40:52.103"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:52.103" endtime="20210731 21:40:52.104"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:52.104" endtime="20210731 21:40:52.104"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.102" endtime="20210731 21:40:52.104"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:52.105" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:52.105" endtime="20210731 21:40:52.105"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:52.105" endtime="20210731 21:40:52.106"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:52.106" endtime="20210731 21:40:52.107"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.104" endtime="20210731 21:40:52.107"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:52.107" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:52.107" endtime="20210731 21:40:52.107"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:52.107" endtime="20210731 21:40:52.108"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:52.109" endtime="20210731 21:40:52.109"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.107" endtime="20210731 21:40:52.109"/>
</iter>
<status status="PASS" starttime="20210731 21:40:52.102" endtime="20210731 21:40:52.109"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:52.110" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:52.109" endtime="20210731 21:40:52.110"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.101" endtime="20210731 21:40:52.110"/>
</kw>
<status status="PASS" starttime="20210731 21:40:50.551" endtime="20210731 21:40:52.110"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:52.113" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:52.110" endtime="20210731 21:40:52.113"/>
</kw>
<msg timestamp="20210731 21:40:52.114" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:52.110" endtime="20210731 21:40:52.114"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>A valid phone number with a country code +358</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:52.114" endtime="20210731 21:40:52.115"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.114" endtime="20210731 21:40:52.115"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:52.117" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:52.116" endtime="20210731 21:40:52.117"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:52.117" level="INFO">${payload} = {'phone': '+358506662712'}</msg>
<status status="PASS" starttime="20210731 21:40:52.117" endtime="20210731 21:40:52.117"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:52.128" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:52.128" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:52.118" endtime="20210731 21:40:52.129"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:52.129" endtime="20210731 21:40:52.129"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:52.129" endtime="20210731 21:40:52.129"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:52.118" endtime="20210731 21:40:52.129"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:52.118" endtime="20210731 21:40:52.129"/>
</for>
<status status="FAIL" starttime="20210731 21:40:52.115" endtime="20210731 21:40:52.129"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:52.115" endtime="20210731 21:40:52.129"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:52.115" endtime="20210731 21:40:52.129"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:52.133" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:52.147" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:52.147" level="INFO">${pids} = 12204
12211
12213</msg>
<status status="PASS" starttime="20210731 21:40:52.130" endtime="20210731 21:40:52.147"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:52.148" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:52.147" endtime="20210731 21:40:52.148"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:52.149" level="INFO">${pids} = ['12204', '12211', '12213']</msg>
<status status="PASS" starttime="20210731 21:40:52.148" endtime="20210731 21:40:52.149"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12204</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:52.157" level="INFO">Running command 'kill 12204 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:52.149" endtime="20210731 21:40:52.158"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.149" endtime="20210731 21:40:52.158"/>
</iter>
<iter>
<var name="${pid}">12211</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:52.161" level="INFO">Running command 'kill 12211 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:52.158" endtime="20210731 21:40:52.162"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.158" endtime="20210731 21:40:52.162"/>
</iter>
<iter>
<var name="${pid}">12213</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:52.166" level="INFO">Running command 'kill 12213 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:52.162" endtime="20210731 21:40:52.166"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.162" endtime="20210731 21:40:52.166"/>
</iter>
<status status="PASS" starttime="20210731 21:40:52.149" endtime="20210731 21:40:52.166"/>
</for>
<status status="PASS" starttime="20210731 21:40:52.148" endtime="20210731 21:40:52.166"/>
</branch>
<status status="PASS" starttime="20210731 21:40:52.148" endtime="20210731 21:40:52.166"/>
</if>
<status status="PASS" starttime="20210731 21:40:52.130" endtime="20210731 21:40:52.167"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358506662712'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-PHONE-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:50.550" endtime="20210731 21:40:52.167">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t125" name="With Each Valid Token, Updating Phone Number Of Each System User With +358+50666+2712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:52.180" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:52.214" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:52.214" level="INFO">${pids} = 12242</msg>
<status status="PASS" starttime="20210731 21:40:52.169" endtime="20210731 21:40:52.214"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:52.215" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:52.214" endtime="20210731 21:40:52.215"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:52.217" level="INFO">${pids} = ['12242']</msg>
<status status="PASS" starttime="20210731 21:40:52.216" endtime="20210731 21:40:52.217"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12242</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:52.221" level="INFO">Running command 'kill 12242 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:52.217" endtime="20210731 21:40:52.223"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.217" endtime="20210731 21:40:52.223"/>
</iter>
<status status="PASS" starttime="20210731 21:40:52.217" endtime="20210731 21:40:52.224"/>
</for>
<status status="PASS" starttime="20210731 21:40:52.215" endtime="20210731 21:40:52.224"/>
</branch>
<status status="PASS" starttime="20210731 21:40:52.215" endtime="20210731 21:40:52.224"/>
</if>
<status status="PASS" starttime="20210731 21:40:52.169" endtime="20210731 21:40:52.224"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:52.225" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:52.225" endtime="20210731 21:40:52.225"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:52.226" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:52.226" endtime="20210731 21:40:52.226"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:52.227" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:52.226" endtime="20210731 21:40:52.227"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:52.227" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:52.227" endtime="20210731 21:40:52.227"/>
</kw>
<msg timestamp="20210731 21:40:52.227" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:52.226" endtime="20210731 21:40:52.227"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:52.251" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:52.228" endtime="20210731 21:40:52.256"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.224" endtime="20210731 21:40:52.256"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:52.258" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:52.257" endtime="20210731 21:40:52.272"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:53.773" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:52.272" endtime="20210731 21:40:53.773"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.257" endtime="20210731 21:40:53.774"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:53.775" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:53.775" endtime="20210731 21:40:53.775"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:53.775" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:53.775" endtime="20210731 21:40:53.775"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:53.776" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:53.776" endtime="20210731 21:40:53.776"/>
</kw>
<msg timestamp="20210731 21:40:53.776" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:53.774" endtime="20210731 21:40:53.776"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:53.777" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:53.776" endtime="20210731 21:40:53.777"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.774" endtime="20210731 21:40:53.777"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:53.778" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:53.778" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:53.778" endtime="20210731 21:40:53.778"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.777" endtime="20210731 21:40:53.778"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:53.779" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:53.779" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:53.779" endtime="20210731 21:40:53.779"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:53.779" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:53.779" endtime="20210731 21:40:53.779"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:53.780" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:53.780" endtime="20210731 21:40:53.780"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:53.780" endtime="20210731 21:40:53.781"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:53.781" endtime="20210731 21:40:53.782"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.780" endtime="20210731 21:40:53.782"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:53.782" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:53.782" endtime="20210731 21:40:53.782"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:53.782" endtime="20210731 21:40:53.783"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:53.783" endtime="20210731 21:40:53.783"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.782" endtime="20210731 21:40:53.784"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:53.784" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:53.784" endtime="20210731 21:40:53.784"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:53.784" endtime="20210731 21:40:53.785"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:53.785" endtime="20210731 21:40:53.785"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.784" endtime="20210731 21:40:53.785"/>
</iter>
<status status="PASS" starttime="20210731 21:40:53.780" endtime="20210731 21:40:53.786"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:53.786" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:53.786" endtime="20210731 21:40:53.786"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.778" endtime="20210731 21:40:53.786"/>
</kw>
<status status="PASS" starttime="20210731 21:40:52.168" endtime="20210731 21:40:53.786"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:53.790" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:53.787" endtime="20210731 21:40:53.790"/>
</kw>
<msg timestamp="20210731 21:40:53.790" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:53.786" endtime="20210731 21:40:53.790"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number with a country code with second and third + signs misplaced</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:53.791" endtime="20210731 21:40:53.791"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.790" endtime="20210731 21:40:53.792"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:53.793" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:53.793" endtime="20210731 21:40:53.793"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:53.794" level="INFO">${payload} = {'phone': '+358+50666+2712'}</msg>
<status status="PASS" starttime="20210731 21:40:53.793" endtime="20210731 21:40:53.794"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:53.804" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:53.804" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:53.794" endtime="20210731 21:40:53.804"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:53.804" endtime="20210731 21:40:53.804"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:53.804" endtime="20210731 21:40:53.804"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:53.794" endtime="20210731 21:40:53.804"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:53.794" endtime="20210731 21:40:53.805"/>
</for>
<status status="FAIL" starttime="20210731 21:40:53.792" endtime="20210731 21:40:53.805"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:53.792" endtime="20210731 21:40:53.805"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:53.792" endtime="20210731 21:40:53.805"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:53.809" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:53.820" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:53.820" level="INFO">${pids} = 12266
12273
12275</msg>
<status status="PASS" starttime="20210731 21:40:53.806" endtime="20210731 21:40:53.820"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:53.821" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:53.821" endtime="20210731 21:40:53.821"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:53.822" level="INFO">${pids} = ['12266', '12273', '12275']</msg>
<status status="PASS" starttime="20210731 21:40:53.822" endtime="20210731 21:40:53.822"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12266</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:53.831" level="INFO">Running command 'kill 12266 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:53.823" endtime="20210731 21:40:53.832"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.822" endtime="20210731 21:40:53.832"/>
</iter>
<iter>
<var name="${pid}">12273</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:53.836" level="INFO">Running command 'kill 12273 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:53.833" endtime="20210731 21:40:53.836"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.832" endtime="20210731 21:40:53.836"/>
</iter>
<iter>
<var name="${pid}">12275</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:53.840" level="INFO">Running command 'kill 12275 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:53.837" endtime="20210731 21:40:53.841"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.836" endtime="20210731 21:40:53.841"/>
</iter>
<status status="PASS" starttime="20210731 21:40:53.822" endtime="20210731 21:40:53.841"/>
</for>
<status status="PASS" starttime="20210731 21:40:53.822" endtime="20210731 21:40:53.841"/>
</branch>
<status status="PASS" starttime="20210731 21:40:53.822" endtime="20210731 21:40:53.841"/>
</if>
<status status="PASS" starttime="20210731 21:40:53.805" endtime="20210731 21:40:53.841"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358+50666+2712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-PHONE-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:52.167" endtime="20210731 21:40:53.842">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t126" name="With Each Valid Token, Updating Phone Number Of Each System User With 0+506662712+ Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:53.851" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:53.864" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:53.864" level="INFO">${pids} = 12304</msg>
<status status="PASS" starttime="20210731 21:40:53.844" endtime="20210731 21:40:53.864"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:53.865" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:53.865" endtime="20210731 21:40:53.866"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:53.866" level="INFO">${pids} = ['12304']</msg>
<status status="PASS" starttime="20210731 21:40:53.866" endtime="20210731 21:40:53.866"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12304</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:53.893" level="INFO">Running command 'kill 12304 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:53.867" endtime="20210731 21:40:53.894"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.867" endtime="20210731 21:40:53.894"/>
</iter>
<status status="PASS" starttime="20210731 21:40:53.866" endtime="20210731 21:40:53.894"/>
</for>
<status status="PASS" starttime="20210731 21:40:53.866" endtime="20210731 21:40:53.894"/>
</branch>
<status status="PASS" starttime="20210731 21:40:53.866" endtime="20210731 21:40:53.894"/>
</if>
<status status="PASS" starttime="20210731 21:40:53.843" endtime="20210731 21:40:53.895"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:53.896" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:53.896" endtime="20210731 21:40:53.896"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:53.897" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:53.896" endtime="20210731 21:40:53.897"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:53.897" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:53.897" endtime="20210731 21:40:53.897"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:53.898" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:53.897" endtime="20210731 21:40:53.898"/>
</kw>
<msg timestamp="20210731 21:40:53.898" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:53.896" endtime="20210731 21:40:53.898"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:53.902" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:53.898" endtime="20210731 21:40:53.903"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.895" endtime="20210731 21:40:53.904"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:53.906" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:53.904" endtime="20210731 21:40:53.911"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:55.412" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:53.911" endtime="20210731 21:40:55.412"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.904" endtime="20210731 21:40:55.412"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:55.414" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:55.414" endtime="20210731 21:40:55.414"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:55.414" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:55.414" endtime="20210731 21:40:55.414"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:55.415" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:55.414" endtime="20210731 21:40:55.415"/>
</kw>
<msg timestamp="20210731 21:40:55.415" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:55.413" endtime="20210731 21:40:55.415"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:55.416" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:55.415" endtime="20210731 21:40:55.416"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.413" endtime="20210731 21:40:55.416"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:55.417" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:55.417" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:55.417" endtime="20210731 21:40:55.417"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.416" endtime="20210731 21:40:55.418"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:55.418" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:55.418" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:55.418" endtime="20210731 21:40:55.418"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:55.419" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:55.418" endtime="20210731 21:40:55.419"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:55.419" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:55.419" endtime="20210731 21:40:55.419"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:55.420" endtime="20210731 21:40:55.421"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:55.421" endtime="20210731 21:40:55.421"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.419" endtime="20210731 21:40:55.421"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:55.422" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:55.421" endtime="20210731 21:40:55.422"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:55.422" endtime="20210731 21:40:55.423"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:55.423" endtime="20210731 21:40:55.423"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.421" endtime="20210731 21:40:55.423"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:55.424" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:55.423" endtime="20210731 21:40:55.424"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:55.424" endtime="20210731 21:40:55.425"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:55.425" endtime="20210731 21:40:55.425"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.423" endtime="20210731 21:40:55.425"/>
</iter>
<status status="PASS" starttime="20210731 21:40:55.419" endtime="20210731 21:40:55.425"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:55.426" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:55.425" endtime="20210731 21:40:55.426"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.418" endtime="20210731 21:40:55.426"/>
</kw>
<status status="PASS" starttime="20210731 21:40:53.843" endtime="20210731 21:40:55.426"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:55.430" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:55.427" endtime="20210731 21:40:55.430"/>
</kw>
<msg timestamp="20210731 21:40:55.430" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:55.426" endtime="20210731 21:40:55.430"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number with two + signs misplaced</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:55.431" endtime="20210731 21:40:55.431"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.430" endtime="20210731 21:40:55.431"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:55.433" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:55.433" endtime="20210731 21:40:55.433"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:55.434" level="INFO">${payload} = {'phone': '0+506662712+'}</msg>
<status status="PASS" starttime="20210731 21:40:55.433" endtime="20210731 21:40:55.434"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:55.445" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:55.445" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:55.434" endtime="20210731 21:40:55.445"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:55.445" endtime="20210731 21:40:55.446"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:55.446" endtime="20210731 21:40:55.446"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:55.434" endtime="20210731 21:40:55.446"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:55.434" endtime="20210731 21:40:55.446"/>
</for>
<status status="FAIL" starttime="20210731 21:40:55.432" endtime="20210731 21:40:55.446"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:55.432" endtime="20210731 21:40:55.446"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:55.432" endtime="20210731 21:40:55.446"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:55.450" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:55.477" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:55.477" level="INFO">${pids} = 12327
12334
12337</msg>
<status status="PASS" starttime="20210731 21:40:55.447" endtime="20210731 21:40:55.477"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:55.478" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:55.477" endtime="20210731 21:40:55.478"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:55.479" level="INFO">${pids} = ['12327', '12334', '12337']</msg>
<status status="PASS" starttime="20210731 21:40:55.478" endtime="20210731 21:40:55.479"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12327</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:55.483" level="INFO">Running command 'kill 12327 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:55.479" endtime="20210731 21:40:55.483"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.479" endtime="20210731 21:40:55.483"/>
</iter>
<iter>
<var name="${pid}">12334</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:55.487" level="INFO">Running command 'kill 12334 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:55.484" endtime="20210731 21:40:55.488"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.484" endtime="20210731 21:40:55.488"/>
</iter>
<iter>
<var name="${pid}">12337</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:55.493" level="INFO">Running command 'kill 12337 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:55.489" endtime="20210731 21:40:55.493"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.488" endtime="20210731 21:40:55.494"/>
</iter>
<status status="PASS" starttime="20210731 21:40:55.479" endtime="20210731 21:40:55.494"/>
</for>
<status status="PASS" starttime="20210731 21:40:55.478" endtime="20210731 21:40:55.494"/>
</branch>
<status status="PASS" starttime="20210731 21:40:55.478" endtime="20210731 21:40:55.494"/>
</if>
<status status="PASS" starttime="20210731 21:40:55.447" endtime="20210731 21:40:55.494"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '0+506662712+'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-PHONE-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:53.842" endtime="20210731 21:40:55.494">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t127" name="With Each Valid Token, Updating Phone Number Of Each System User With 0506662712 Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:55.501" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:55.517" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:55.518" level="INFO">${pids} = 12366</msg>
<status status="PASS" starttime="20210731 21:40:55.497" endtime="20210731 21:40:55.518"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:55.519" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:55.518" endtime="20210731 21:40:55.519"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:55.520" level="INFO">${pids} = ['12366']</msg>
<status status="PASS" starttime="20210731 21:40:55.519" endtime="20210731 21:40:55.520"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12366</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:55.526" level="INFO">Running command 'kill 12366 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:55.520" endtime="20210731 21:40:55.526"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.520" endtime="20210731 21:40:55.526"/>
</iter>
<status status="PASS" starttime="20210731 21:40:55.520" endtime="20210731 21:40:55.526"/>
</for>
<status status="PASS" starttime="20210731 21:40:55.519" endtime="20210731 21:40:55.526"/>
</branch>
<status status="PASS" starttime="20210731 21:40:55.519" endtime="20210731 21:40:55.526"/>
</if>
<status status="PASS" starttime="20210731 21:40:55.496" endtime="20210731 21:40:55.527"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:55.528" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:55.528" endtime="20210731 21:40:55.528"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:55.529" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:55.529" endtime="20210731 21:40:55.529"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:55.530" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:55.529" endtime="20210731 21:40:55.530"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:55.530" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:55.530" endtime="20210731 21:40:55.530"/>
</kw>
<msg timestamp="20210731 21:40:55.530" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:55.528" endtime="20210731 21:40:55.530"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:55.534" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:55.530" endtime="20210731 21:40:55.536"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.527" endtime="20210731 21:40:55.536"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:55.538" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:55.537" endtime="20210731 21:40:55.554"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:57.055" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:55.555" endtime="20210731 21:40:57.056"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.537" endtime="20210731 21:40:57.056"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:57.058" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:57.057" endtime="20210731 21:40:57.058"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:57.058" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:57.058" endtime="20210731 21:40:57.058"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:57.058" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:57.058" endtime="20210731 21:40:57.059"/>
</kw>
<msg timestamp="20210731 21:40:57.059" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:57.057" endtime="20210731 21:40:57.059"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:57.059" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:57.059" endtime="20210731 21:40:57.060"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.056" endtime="20210731 21:40:57.060"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:57.061" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:57.061" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:57.060" endtime="20210731 21:40:57.061"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.060" endtime="20210731 21:40:57.061"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:57.062" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:57.062" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:57.062" endtime="20210731 21:40:57.063"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:57.063" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:57.063" endtime="20210731 21:40:57.063"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:57.064" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:57.063" endtime="20210731 21:40:57.064"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:57.064" endtime="20210731 21:40:57.065"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:57.065" endtime="20210731 21:40:57.065"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.063" endtime="20210731 21:40:57.065"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:57.066" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:57.065" endtime="20210731 21:40:57.066"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:57.066" endtime="20210731 21:40:57.067"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:57.067" endtime="20210731 21:40:57.067"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.065" endtime="20210731 21:40:57.067"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:57.068" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:57.067" endtime="20210731 21:40:57.068"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:57.068" endtime="20210731 21:40:57.069"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:57.069" endtime="20210731 21:40:57.069"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.067" endtime="20210731 21:40:57.069"/>
</iter>
<status status="PASS" starttime="20210731 21:40:57.063" endtime="20210731 21:40:57.069"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:57.070" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:57.069" endtime="20210731 21:40:57.070"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.061" endtime="20210731 21:40:57.070"/>
</kw>
<status status="PASS" starttime="20210731 21:40:55.496" endtime="20210731 21:40:57.070"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:57.074" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:57.071" endtime="20210731 21:40:57.074"/>
</kw>
<msg timestamp="20210731 21:40:57.074" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:57.070" endtime="20210731 21:40:57.074"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>A valid phone number without a country code. This assumes Finland</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:57.075" endtime="20210731 21:40:57.075"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.074" endtime="20210731 21:40:57.076"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:57.077" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:57.077" endtime="20210731 21:40:57.077"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:57.078" level="INFO">${payload} = {'phone': '0506662712'}</msg>
<status status="PASS" starttime="20210731 21:40:57.077" endtime="20210731 21:40:57.078"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:57.091" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:57.091" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:57.078" endtime="20210731 21:40:57.091"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:57.092" endtime="20210731 21:40:57.092"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:57.092" endtime="20210731 21:40:57.092"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:57.078" endtime="20210731 21:40:57.092"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:57.078" endtime="20210731 21:40:57.092"/>
</for>
<status status="FAIL" starttime="20210731 21:40:57.076" endtime="20210731 21:40:57.092"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:57.076" endtime="20210731 21:40:57.092"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:57.076" endtime="20210731 21:40:57.092"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:57.096" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:57.120" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:57.120" level="INFO">${pids} = 12389
12396
12398</msg>
<status status="PASS" starttime="20210731 21:40:57.093" endtime="20210731 21:40:57.120"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:57.121" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:57.120" endtime="20210731 21:40:57.121"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:57.122" level="INFO">${pids} = ['12389', '12396', '12398']</msg>
<status status="PASS" starttime="20210731 21:40:57.121" endtime="20210731 21:40:57.122"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12389</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:57.126" level="INFO">Running command 'kill 12389 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:57.122" endtime="20210731 21:40:57.127"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.122" endtime="20210731 21:40:57.127"/>
</iter>
<iter>
<var name="${pid}">12396</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:57.131" level="INFO">Running command 'kill 12396 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:57.128" endtime="20210731 21:40:57.132"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.127" endtime="20210731 21:40:57.132"/>
</iter>
<iter>
<var name="${pid}">12398</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:57.137" level="INFO">Running command 'kill 12398 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:57.133" endtime="20210731 21:40:57.138"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.132" endtime="20210731 21:40:57.138"/>
</iter>
<status status="PASS" starttime="20210731 21:40:57.122" endtime="20210731 21:40:57.138"/>
</for>
<status status="PASS" starttime="20210731 21:40:57.121" endtime="20210731 21:40:57.138"/>
</branch>
<status status="PASS" starttime="20210731 21:40:57.121" endtime="20210731 21:40:57.138"/>
</if>
<status status="PASS" starttime="20210731 21:40:57.092" endtime="20210731 21:40:57.138"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '0506662712'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-PHONE-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:55.495" endtime="20210731 21:40:57.139">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t128" name="With Each Valid Token, Updating Phone Number Of Each System User With +358506abc!#662712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:57.145" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:57.161" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:57.161" level="INFO">${pids} = 12427</msg>
<status status="PASS" starttime="20210731 21:40:57.141" endtime="20210731 21:40:57.161"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:57.162" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:57.162" endtime="20210731 21:40:57.162"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:57.163" level="INFO">${pids} = ['12427']</msg>
<status status="PASS" starttime="20210731 21:40:57.163" endtime="20210731 21:40:57.163"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12427</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:57.170" level="INFO">Running command 'kill 12427 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:57.163" endtime="20210731 21:40:57.171"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.163" endtime="20210731 21:40:57.171"/>
</iter>
<status status="PASS" starttime="20210731 21:40:57.163" endtime="20210731 21:40:57.171"/>
</for>
<status status="PASS" starttime="20210731 21:40:57.163" endtime="20210731 21:40:57.171"/>
</branch>
<status status="PASS" starttime="20210731 21:40:57.162" endtime="20210731 21:40:57.172"/>
</if>
<status status="PASS" starttime="20210731 21:40:57.141" endtime="20210731 21:40:57.172"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:57.173" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:57.173" endtime="20210731 21:40:57.173"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:57.174" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:57.174" endtime="20210731 21:40:57.174"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:57.174" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:57.174" endtime="20210731 21:40:57.174"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:57.175" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:57.175" endtime="20210731 21:40:57.175"/>
</kw>
<msg timestamp="20210731 21:40:57.175" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:57.173" endtime="20210731 21:40:57.175"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:57.179" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:57.175" endtime="20210731 21:40:57.181"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.172" endtime="20210731 21:40:57.181"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:57.183" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:57.182" endtime="20210731 21:40:57.189"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:40:58.691" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:57.190" endtime="20210731 21:40:58.691"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.182" endtime="20210731 21:40:58.691"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:58.693" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:58.692" endtime="20210731 21:40:58.693"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:58.693" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:58.693" endtime="20210731 21:40:58.693"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:58.694" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:58.693" endtime="20210731 21:40:58.694"/>
</kw>
<msg timestamp="20210731 21:40:58.694" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:58.692" endtime="20210731 21:40:58.694"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:40:58.695" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:40:58.694" endtime="20210731 21:40:58.695"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.691" endtime="20210731 21:40:58.695"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:40:58.696" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:40:58.696" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:40:58.696" endtime="20210731 21:40:58.696"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.695" endtime="20210731 21:40:58.696"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:40:58.697" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:40:58.697" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:40:58.697" endtime="20210731 21:40:58.697"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:40:58.698" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:40:58.697" endtime="20210731 21:40:58.698"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:58.698" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:58.698" endtime="20210731 21:40:58.698"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:58.698" endtime="20210731 21:40:58.699"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:58.700" endtime="20210731 21:40:58.700"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.698" endtime="20210731 21:40:58.700"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:58.701" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:58.701" endtime="20210731 21:40:58.701"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:58.701" endtime="20210731 21:40:58.702"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:58.702" endtime="20210731 21:40:58.702"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.700" endtime="20210731 21:40:58.702"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:58.703" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:40:58.703" endtime="20210731 21:40:58.703"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:40:58.703" endtime="20210731 21:40:58.704"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:40:58.704" endtime="20210731 21:40:58.704"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.702" endtime="20210731 21:40:58.704"/>
</iter>
<status status="PASS" starttime="20210731 21:40:58.698" endtime="20210731 21:40:58.704"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:40:58.705" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:40:58.705" endtime="20210731 21:40:58.705"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.696" endtime="20210731 21:40:58.705"/>
</kw>
<status status="PASS" starttime="20210731 21:40:57.140" endtime="20210731 21:40:58.705"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:40:58.709" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:58.706" endtime="20210731 21:40:58.709"/>
</kw>
<msg timestamp="20210731 21:40:58.710" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:40:58.706" endtime="20210731 21:40:58.710"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing letters, non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:40:58.710" endtime="20210731 21:40:58.711"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.710" endtime="20210731 21:40:58.711"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:58.712" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:40:58.712" endtime="20210731 21:40:58.712"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:40:58.713" level="INFO">${payload} = {'phone': '+358506abc!#662712'}</msg>
<status status="PASS" starttime="20210731 21:40:58.713" endtime="20210731 21:40:58.713"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:40:58.724" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:40:58.724" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:40:58.714" endtime="20210731 21:40:58.724"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:58.725" endtime="20210731 21:40:58.725"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:40:58.725" endtime="20210731 21:40:58.725"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:58.713" endtime="20210731 21:40:58.725"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:58.713" endtime="20210731 21:40:58.725"/>
</for>
<status status="FAIL" starttime="20210731 21:40:58.711" endtime="20210731 21:40:58.725"/>
</kw>
<status status="FAIL" starttime="20210731 21:40:58.711" endtime="20210731 21:40:58.725"/>
</iter>
<status status="FAIL" starttime="20210731 21:40:58.711" endtime="20210731 21:40:58.725"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:58.730" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:58.745" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:58.745" level="INFO">${pids} = 12450
12457
12461</msg>
<status status="PASS" starttime="20210731 21:40:58.726" endtime="20210731 21:40:58.745"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:58.746" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:58.746" endtime="20210731 21:40:58.747"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:58.747" level="INFO">${pids} = ['12450', '12457', '12461']</msg>
<status status="PASS" starttime="20210731 21:40:58.747" endtime="20210731 21:40:58.747"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12450</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:58.755" level="INFO">Running command 'kill 12450 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:58.748" endtime="20210731 21:40:58.756"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.748" endtime="20210731 21:40:58.756"/>
</iter>
<iter>
<var name="${pid}">12457</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:58.760" level="INFO">Running command 'kill 12457 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:58.757" endtime="20210731 21:40:58.761"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.756" endtime="20210731 21:40:58.761"/>
</iter>
<iter>
<var name="${pid}">12461</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:58.765" level="INFO">Running command 'kill 12461 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:58.762" endtime="20210731 21:40:58.766"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.762" endtime="20210731 21:40:58.766"/>
</iter>
<status status="PASS" starttime="20210731 21:40:58.747" endtime="20210731 21:40:58.766"/>
</for>
<status status="PASS" starttime="20210731 21:40:58.747" endtime="20210731 21:40:58.766"/>
</branch>
<status status="PASS" starttime="20210731 21:40:58.747" endtime="20210731 21:40:58.766"/>
</if>
<status status="PASS" starttime="20210731 21:40:58.726" endtime="20210731 21:40:58.766"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358506abc!#662712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-PHONE-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:57.139" endtime="20210731 21:40:58.767">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t129" name="With Each Valid Token, Updating Phone Number Of Each System User With 050!?.#662712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:40:58.772" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:40:58.788" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:40:58.788" level="INFO">${pids} = 12490</msg>
<status status="PASS" starttime="20210731 21:40:58.769" endtime="20210731 21:40:58.788"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:58.789" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:40:58.789" endtime="20210731 21:40:58.789"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:40:58.791" level="INFO">${pids} = ['12490']</msg>
<status status="PASS" starttime="20210731 21:40:58.790" endtime="20210731 21:40:58.791"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12490</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:58.802" level="INFO">Running command 'kill 12490 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:58.791" endtime="20210731 21:40:58.803"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.791" endtime="20210731 21:40:58.803"/>
</iter>
<status status="PASS" starttime="20210731 21:40:58.791" endtime="20210731 21:40:58.803"/>
</for>
<status status="PASS" starttime="20210731 21:40:58.790" endtime="20210731 21:40:58.803"/>
</branch>
<status status="PASS" starttime="20210731 21:40:58.790" endtime="20210731 21:40:58.803"/>
</if>
<status status="PASS" starttime="20210731 21:40:58.769" endtime="20210731 21:40:58.803"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:58.805" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:58.804" endtime="20210731 21:40:58.805"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:58.806" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:40:58.806" endtime="20210731 21:40:58.806"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:40:58.807" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:40:58.806" endtime="20210731 21:40:58.807"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:40:58.807" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:58.807" endtime="20210731 21:40:58.807"/>
</kw>
<msg timestamp="20210731 21:40:58.808" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:40:58.805" endtime="20210731 21:40:58.808"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:40:58.811" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:40:58.808" endtime="20210731 21:40:58.814"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.804" endtime="20210731 21:40:58.815"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:40:58.834" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:40:58.816" endtime="20210731 21:40:58.840"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:00.341" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:40:58.840" endtime="20210731 21:41:00.341"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.815" endtime="20210731 21:41:00.342"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:00.343" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:00.343" endtime="20210731 21:41:00.343"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:00.344" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:00.343" endtime="20210731 21:41:00.344"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:00.344" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:00.344" endtime="20210731 21:41:00.344"/>
</kw>
<msg timestamp="20210731 21:41:00.344" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:00.342" endtime="20210731 21:41:00.344"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:00.345" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:00.345" endtime="20210731 21:41:00.346"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.342" endtime="20210731 21:41:00.346"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:00.346" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:00.346" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:00.346" endtime="20210731 21:41:00.347"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.346" endtime="20210731 21:41:00.347"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:00.348" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:00.348" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:00.347" endtime="20210731 21:41:00.348"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:00.348" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:00.348" endtime="20210731 21:41:00.348"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:00.349" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:00.349" endtime="20210731 21:41:00.349"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:00.349" endtime="20210731 21:41:00.350"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:00.350" endtime="20210731 21:41:00.350"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.348" endtime="20210731 21:41:00.350"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:00.351" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:00.351" endtime="20210731 21:41:00.351"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:00.351" endtime="20210731 21:41:00.352"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:00.352" endtime="20210731 21:41:00.353"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.351" endtime="20210731 21:41:00.353"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:00.353" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:00.353" endtime="20210731 21:41:00.353"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:00.353" endtime="20210731 21:41:00.354"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:00.354" endtime="20210731 21:41:00.355"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.353" endtime="20210731 21:41:00.355"/>
</iter>
<status status="PASS" starttime="20210731 21:41:00.348" endtime="20210731 21:41:00.355"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:00.355" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:00.355" endtime="20210731 21:41:00.355"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.347" endtime="20210731 21:41:00.355"/>
</kw>
<status status="PASS" starttime="20210731 21:40:58.768" endtime="20210731 21:41:00.356"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:41:00.360" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:41:00.356" endtime="20210731 21:41:00.360"/>
</kw>
<msg timestamp="20210731 21:41:00.360" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:41:00.356" endtime="20210731 21:41:00.360"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:41:00.361" endtime="20210731 21:41:00.362"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.360" endtime="20210731 21:41:00.362"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:00.363" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:00.363" endtime="20210731 21:41:00.363"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:00.364" level="INFO">${payload} = {'phone': '050!?.#662712'}</msg>
<status status="PASS" starttime="20210731 21:41:00.364" endtime="20210731 21:41:00.364"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:00.377" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:00.377" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:00.364" endtime="20210731 21:41:00.377"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:41:00.377" endtime="20210731 21:41:00.377"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:41:00.378" endtime="20210731 21:41:00.378"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:00.364" endtime="20210731 21:41:00.378"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:00.364" endtime="20210731 21:41:00.378"/>
</for>
<status status="FAIL" starttime="20210731 21:41:00.362" endtime="20210731 21:41:00.378"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:00.362" endtime="20210731 21:41:00.378"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:00.362" endtime="20210731 21:41:00.378"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:00.384" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:00.398" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:00.398" level="INFO">${pids} = 12513
12520
12522</msg>
<status status="PASS" starttime="20210731 21:41:00.379" endtime="20210731 21:41:00.398"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:00.399" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:00.398" endtime="20210731 21:41:00.399"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:00.400" level="INFO">${pids} = ['12513', '12520', '12522']</msg>
<status status="PASS" starttime="20210731 21:41:00.399" endtime="20210731 21:41:00.400"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12513</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:00.405" level="INFO">Running command 'kill 12513 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:00.400" endtime="20210731 21:41:00.405"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.400" endtime="20210731 21:41:00.406"/>
</iter>
<iter>
<var name="${pid}">12520</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:00.410" level="INFO">Running command 'kill 12520 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:00.406" endtime="20210731 21:41:00.411"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.406" endtime="20210731 21:41:00.411"/>
</iter>
<iter>
<var name="${pid}">12522</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:00.416" level="INFO">Running command 'kill 12522 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:00.413" endtime="20210731 21:41:00.417"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.412" endtime="20210731 21:41:00.417"/>
</iter>
<status status="PASS" starttime="20210731 21:41:00.400" endtime="20210731 21:41:00.417"/>
</for>
<status status="PASS" starttime="20210731 21:41:00.399" endtime="20210731 21:41:00.417"/>
</branch>
<status status="PASS" starttime="20210731 21:41:00.399" endtime="20210731 21:41:00.417"/>
</if>
<status status="PASS" starttime="20210731 21:41:00.379" endtime="20210731 21:41:00.418"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '050!?.#662712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-PHONE-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:40:58.767" endtime="20210731 21:41:00.418">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t130" name="With Each Valid Token, Updating Phone Number Of Each System User With +358abc662712xyz Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:00.423" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:00.438" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:00.438" level="INFO">${pids} = 12551</msg>
<status status="PASS" starttime="20210731 21:41:00.420" endtime="20210731 21:41:00.439"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:00.439" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:00.439" endtime="20210731 21:41:00.439"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:00.440" level="INFO">${pids} = ['12551']</msg>
<status status="PASS" starttime="20210731 21:41:00.440" endtime="20210731 21:41:00.440"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12551</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:00.444" level="INFO">Running command 'kill 12551 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:00.441" endtime="20210731 21:41:00.447"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.440" endtime="20210731 21:41:00.447"/>
</iter>
<status status="PASS" starttime="20210731 21:41:00.440" endtime="20210731 21:41:00.447"/>
</for>
<status status="PASS" starttime="20210731 21:41:00.440" endtime="20210731 21:41:00.447"/>
</branch>
<status status="PASS" starttime="20210731 21:41:00.440" endtime="20210731 21:41:00.447"/>
</if>
<status status="PASS" starttime="20210731 21:41:00.420" endtime="20210731 21:41:00.448"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:00.449" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:00.448" endtime="20210731 21:41:00.449"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:00.451" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:00.449" endtime="20210731 21:41:00.451"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:00.451" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:00.451" endtime="20210731 21:41:00.451"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:00.452" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:00.451" endtime="20210731 21:41:00.452"/>
</kw>
<msg timestamp="20210731 21:41:00.452" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:00.449" endtime="20210731 21:41:00.452"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:00.455" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:00.452" endtime="20210731 21:41:00.457"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.448" endtime="20210731 21:41:00.458"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:41:00.459" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:41:00.458" endtime="20210731 21:41:00.463"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:01.965" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:41:00.463" endtime="20210731 21:41:01.965"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.458" endtime="20210731 21:41:01.965"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:01.967" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:01.966" endtime="20210731 21:41:01.967"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:01.967" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:01.967" endtime="20210731 21:41:01.967"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:01.968" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:01.967" endtime="20210731 21:41:01.968"/>
</kw>
<msg timestamp="20210731 21:41:01.968" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:01.966" endtime="20210731 21:41:01.968"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:01.968" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:01.968" endtime="20210731 21:41:01.969"/>
</kw>
<status status="PASS" starttime="20210731 21:41:01.966" endtime="20210731 21:41:01.969"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:01.970" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:01.970" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:01.970" endtime="20210731 21:41:01.970"/>
</kw>
<status status="PASS" starttime="20210731 21:41:01.969" endtime="20210731 21:41:01.970"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:01.971" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:01.971" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:01.971" endtime="20210731 21:41:01.971"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:01.972" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:01.971" endtime="20210731 21:41:01.972"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:01.972" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:01.972" endtime="20210731 21:41:01.972"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:01.973" endtime="20210731 21:41:01.974"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:01.974" endtime="20210731 21:41:01.974"/>
</kw>
<status status="PASS" starttime="20210731 21:41:01.972" endtime="20210731 21:41:01.974"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:01.975" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:01.974" endtime="20210731 21:41:01.975"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:01.975" endtime="20210731 21:41:01.976"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:01.976" endtime="20210731 21:41:01.976"/>
</kw>
<status status="PASS" starttime="20210731 21:41:01.974" endtime="20210731 21:41:01.976"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:01.977" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:01.977" endtime="20210731 21:41:01.977"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:01.977" endtime="20210731 21:41:01.978"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:01.978" endtime="20210731 21:41:01.978"/>
</kw>
<status status="PASS" starttime="20210731 21:41:01.976" endtime="20210731 21:41:01.978"/>
</iter>
<status status="PASS" starttime="20210731 21:41:01.972" endtime="20210731 21:41:01.978"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:01.979" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:01.979" endtime="20210731 21:41:01.979"/>
</kw>
<status status="PASS" starttime="20210731 21:41:01.970" endtime="20210731 21:41:01.979"/>
</kw>
<status status="PASS" starttime="20210731 21:41:00.419" endtime="20210731 21:41:01.979"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:41:01.983" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:41:01.980" endtime="20210731 21:41:01.983"/>
</kw>
<msg timestamp="20210731 21:41:01.983" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:41:01.980" endtime="20210731 21:41:01.983"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing letters in between</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:41:01.984" endtime="20210731 21:41:01.984"/>
</kw>
<status status="PASS" starttime="20210731 21:41:01.983" endtime="20210731 21:41:01.985"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:01.994" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:01.986" endtime="20210731 21:41:01.994"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:01.996" level="INFO">${payload} = {'phone': '+358abc662712xyz'}</msg>
<status status="PASS" starttime="20210731 21:41:01.994" endtime="20210731 21:41:01.998"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:02.008" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:02.009" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:01.998" endtime="20210731 21:41:02.009"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:41:02.009" endtime="20210731 21:41:02.009"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:41:02.009" endtime="20210731 21:41:02.009"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:01.998" endtime="20210731 21:41:02.009"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:01.998" endtime="20210731 21:41:02.009"/>
</for>
<status status="FAIL" starttime="20210731 21:41:01.985" endtime="20210731 21:41:02.009"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:01.985" endtime="20210731 21:41:02.010"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:01.985" endtime="20210731 21:41:02.010"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:02.021" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:02.033" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:02.033" level="INFO">${pids} = 12574
12581
12583</msg>
<status status="PASS" starttime="20210731 21:41:02.010" endtime="20210731 21:41:02.033"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:02.034" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:02.034" endtime="20210731 21:41:02.035"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:02.035" level="INFO">${pids} = ['12574', '12581', '12583']</msg>
<status status="PASS" starttime="20210731 21:41:02.035" endtime="20210731 21:41:02.035"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12574</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:02.041" level="INFO">Running command 'kill 12574 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:02.036" endtime="20210731 21:41:02.041"/>
</kw>
<status status="PASS" starttime="20210731 21:41:02.036" endtime="20210731 21:41:02.042"/>
</iter>
<iter>
<var name="${pid}">12581</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:02.045" level="INFO">Running command 'kill 12581 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:02.042" endtime="20210731 21:41:02.048"/>
</kw>
<status status="PASS" starttime="20210731 21:41:02.042" endtime="20210731 21:41:02.048"/>
</iter>
<iter>
<var name="${pid}">12583</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:02.052" level="INFO">Running command 'kill 12583 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:02.048" endtime="20210731 21:41:02.052"/>
</kw>
<status status="PASS" starttime="20210731 21:41:02.048" endtime="20210731 21:41:02.052"/>
</iter>
<status status="PASS" starttime="20210731 21:41:02.035" endtime="20210731 21:41:02.052"/>
</for>
<status status="PASS" starttime="20210731 21:41:02.035" endtime="20210731 21:41:02.052"/>
</branch>
<status status="PASS" starttime="20210731 21:41:02.035" endtime="20210731 21:41:02.052"/>
</if>
<status status="PASS" starttime="20210731 21:41:02.010" endtime="20210731 21:41:02.053"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358abc662712xyz'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-PHONE-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:41:00.419" endtime="20210731 21:41:02.053">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t131" name="With Each Valid Token, Updating Phone Number Of Each System User With +35840 687 54 53 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:02.067" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:02.079" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:02.079" level="INFO">${pids} = 12612</msg>
<status status="PASS" starttime="20210731 21:41:02.055" endtime="20210731 21:41:02.079"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:02.080" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:02.080" endtime="20210731 21:41:02.080"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:02.081" level="INFO">${pids} = ['12612']</msg>
<status status="PASS" starttime="20210731 21:41:02.081" endtime="20210731 21:41:02.081"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12612</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:02.085" level="INFO">Running command 'kill 12612 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:02.082" endtime="20210731 21:41:02.085"/>
</kw>
<status status="PASS" starttime="20210731 21:41:02.082" endtime="20210731 21:41:02.086"/>
</iter>
<status status="PASS" starttime="20210731 21:41:02.081" endtime="20210731 21:41:02.086"/>
</for>
<status status="PASS" starttime="20210731 21:41:02.081" endtime="20210731 21:41:02.086"/>
</branch>
<status status="PASS" starttime="20210731 21:41:02.081" endtime="20210731 21:41:02.086"/>
</if>
<status status="PASS" starttime="20210731 21:41:02.055" endtime="20210731 21:41:02.086"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:02.087" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:02.087" endtime="20210731 21:41:02.087"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:02.088" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:02.088" endtime="20210731 21:41:02.088"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:02.088" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:02.088" endtime="20210731 21:41:02.088"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:02.089" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:02.088" endtime="20210731 21:41:02.089"/>
</kw>
<msg timestamp="20210731 21:41:02.089" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:02.087" endtime="20210731 21:41:02.089"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:02.115" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:02.089" endtime="20210731 21:41:02.117"/>
</kw>
<status status="PASS" starttime="20210731 21:41:02.086" endtime="20210731 21:41:02.117"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:41:02.119" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:41:02.118" endtime="20210731 21:41:02.123"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:03.624" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:41:02.123" endtime="20210731 21:41:03.624"/>
</kw>
<status status="PASS" starttime="20210731 21:41:02.118" endtime="20210731 21:41:03.625"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:03.626" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:03.626" endtime="20210731 21:41:03.626"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:03.626" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:03.626" endtime="20210731 21:41:03.626"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:03.627" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:03.627" endtime="20210731 21:41:03.627"/>
</kw>
<msg timestamp="20210731 21:41:03.628" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:03.625" endtime="20210731 21:41:03.628"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:03.628" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:03.628" endtime="20210731 21:41:03.629"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.625" endtime="20210731 21:41:03.629"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:03.629" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:03.630" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:03.629" endtime="20210731 21:41:03.630"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.629" endtime="20210731 21:41:03.630"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:03.631" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:03.631" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:03.630" endtime="20210731 21:41:03.631"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:03.631" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:03.631" endtime="20210731 21:41:03.631"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:03.632" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:03.632" endtime="20210731 21:41:03.632"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:03.632" endtime="20210731 21:41:03.633"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:03.633" endtime="20210731 21:41:03.634"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.631" endtime="20210731 21:41:03.634"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:03.634" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:03.634" endtime="20210731 21:41:03.634"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:03.634" endtime="20210731 21:41:03.635"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:03.635" endtime="20210731 21:41:03.636"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.634" endtime="20210731 21:41:03.636"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:03.636" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:03.636" endtime="20210731 21:41:03.636"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:03.636" endtime="20210731 21:41:03.637"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:03.637" endtime="20210731 21:41:03.638"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.636" endtime="20210731 21:41:03.638"/>
</iter>
<status status="PASS" starttime="20210731 21:41:03.631" endtime="20210731 21:41:03.638"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:03.638" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:03.638" endtime="20210731 21:41:03.638"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.630" endtime="20210731 21:41:03.639"/>
</kw>
<status status="PASS" starttime="20210731 21:41:02.054" endtime="20210731 21:41:03.639"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210731 21:41:03.642" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:41:03.639" endtime="20210731 21:41:03.642"/>
</kw>
<msg timestamp="20210731 21:41:03.643" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210731 21:41:03.639" endtime="20210731 21:41:03.643"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing spaces in between digits</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210731 21:41:03.643" endtime="20210731 21:41:03.644"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.643" endtime="20210731 21:41:03.644"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:03.646" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:03.645" endtime="20210731 21:41:03.646"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:03.646" level="INFO">${payload} = {'phone': '+35840 687 54 53'}</msg>
<status status="PASS" starttime="20210731 21:41:03.646" endtime="20210731 21:41:03.646"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:03.657" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:03.658" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:03.647" endtime="20210731 21:41:03.658"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:41:03.658" endtime="20210731 21:41:03.658"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210731 21:41:03.658" endtime="20210731 21:41:03.658"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:03.646" endtime="20210731 21:41:03.658"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:03.646" endtime="20210731 21:41:03.658"/>
</for>
<status status="FAIL" starttime="20210731 21:41:03.644" endtime="20210731 21:41:03.658"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:03.644" endtime="20210731 21:41:03.658"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:03.644" endtime="20210731 21:41:03.658"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:03.663" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:03.686" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:03.686" level="INFO">${pids} = 12635
12642
12645</msg>
<status status="PASS" starttime="20210731 21:41:03.659" endtime="20210731 21:41:03.686"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:03.687" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:03.686" endtime="20210731 21:41:03.687"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:03.689" level="INFO">${pids} = ['12635', '12642', '12645']</msg>
<status status="PASS" starttime="20210731 21:41:03.687" endtime="20210731 21:41:03.689"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12635</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:03.694" level="INFO">Running command 'kill 12635 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:03.689" endtime="20210731 21:41:03.695"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.689" endtime="20210731 21:41:03.695"/>
</iter>
<iter>
<var name="${pid}">12642</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:03.699" level="INFO">Running command 'kill 12642 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:03.696" endtime="20210731 21:41:03.700"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.695" endtime="20210731 21:41:03.700"/>
</iter>
<iter>
<var name="${pid}">12645</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:03.705" level="INFO">Running command 'kill 12645 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:03.700" endtime="20210731 21:41:03.705"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.700" endtime="20210731 21:41:03.706"/>
</iter>
<status status="PASS" starttime="20210731 21:41:03.689" endtime="20210731 21:41:03.706"/>
</for>
<status status="PASS" starttime="20210731 21:41:03.687" endtime="20210731 21:41:03.706"/>
</branch>
<status status="PASS" starttime="20210731 21:41:03.687" endtime="20210731 21:41:03.706"/>
</if>
<status status="PASS" starttime="20210731 21:41:03.659" endtime="20210731 21:41:03.706"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+35840 687 54 53'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-PHONE-NOT-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:41:02.054" endtime="20210731 21:41:03.706">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t132" name="With Each Valid Token, Updating Each System User With Unknown Field Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:03.713" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:03.733" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:03.733" level="INFO">${pids} = 12674</msg>
<status status="PASS" starttime="20210731 21:41:03.709" endtime="20210731 21:41:03.733"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:03.734" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:03.734" endtime="20210731 21:41:03.734"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:03.735" level="INFO">${pids} = ['12674']</msg>
<status status="PASS" starttime="20210731 21:41:03.735" endtime="20210731 21:41:03.735"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12674</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:03.742" level="INFO">Running command 'kill 12674 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:03.736" endtime="20210731 21:41:03.743"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.736" endtime="20210731 21:41:03.743"/>
</iter>
<status status="PASS" starttime="20210731 21:41:03.735" endtime="20210731 21:41:03.743"/>
</for>
<status status="PASS" starttime="20210731 21:41:03.735" endtime="20210731 21:41:03.743"/>
</branch>
<status status="PASS" starttime="20210731 21:41:03.734" endtime="20210731 21:41:03.743"/>
</if>
<status status="PASS" starttime="20210731 21:41:03.709" endtime="20210731 21:41:03.744"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:03.745" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:03.745" endtime="20210731 21:41:03.745"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:03.746" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:03.746" endtime="20210731 21:41:03.746"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:03.746" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:03.746" endtime="20210731 21:41:03.746"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:03.747" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:03.746" endtime="20210731 21:41:03.747"/>
</kw>
<msg timestamp="20210731 21:41:03.747" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:03.745" endtime="20210731 21:41:03.747"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:03.750" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:03.747" endtime="20210731 21:41:03.752"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.744" endtime="20210731 21:41:03.753"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:41:03.754" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:41:03.754" endtime="20210731 21:41:03.775"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:05.276" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:41:03.776" endtime="20210731 21:41:05.277"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.753" endtime="20210731 21:41:05.277"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:05.278" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:05.278" endtime="20210731 21:41:05.278"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:05.279" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:05.278" endtime="20210731 21:41:05.279"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:05.279" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:05.279" endtime="20210731 21:41:05.279"/>
</kw>
<msg timestamp="20210731 21:41:05.279" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:05.278" endtime="20210731 21:41:05.279"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:05.280" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:05.280" endtime="20210731 21:41:05.280"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.277" endtime="20210731 21:41:05.281"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:05.281" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:05.281" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:05.281" endtime="20210731 21:41:05.281"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.281" endtime="20210731 21:41:05.281"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:05.282" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:05.282" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:05.282" endtime="20210731 21:41:05.282"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:05.283" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:05.282" endtime="20210731 21:41:05.283"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:05.283" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:05.283" endtime="20210731 21:41:05.283"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:05.283" endtime="20210731 21:41:05.284"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:05.284" endtime="20210731 21:41:05.285"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.283" endtime="20210731 21:41:05.285"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:05.285" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:05.285" endtime="20210731 21:41:05.285"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:05.286" endtime="20210731 21:41:05.286"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:05.286" endtime="20210731 21:41:05.287"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.285" endtime="20210731 21:41:05.287"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:05.287" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:05.287" endtime="20210731 21:41:05.287"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:05.287" endtime="20210731 21:41:05.288"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:05.288" endtime="20210731 21:41:05.288"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.287" endtime="20210731 21:41:05.288"/>
</iter>
<status status="PASS" starttime="20210731 21:41:05.283" endtime="20210731 21:41:05.288"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:05.289" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:05.289" endtime="20210731 21:41:05.289"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.282" endtime="20210731 21:41:05.289"/>
</kw>
<status status="PASS" starttime="20210731 21:41:03.708" endtime="20210731 21:41:05.289"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:05.290" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210731 21:41:05.290" endtime="20210731 21:41:05.290"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=Hakan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:05.290" endtime="20210731 21:41:05.290"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=Cuzdan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:05.290" endtime="20210731 21:41:05.291"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=+358406875453</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:05.291" endtime="20210731 21:41:05.291"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>alien_field_one=some value</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:05.291" endtime="20210731 21:41:05.291"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${payload}</arg>
<arg>alien_field_one</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:05.293" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:05.292" endtime="20210731 21:41:05.293"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${payload}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210731 21:41:05.293" level="INFO">{'firstname': 'Hakan', 'lastname': 'Cuzdan', 'phone': '+358406875453', 'alien_field_one': 'some value'}</msg>
<status status="PASS" starttime="20210731 21:41:05.293" endtime="20210731 21:41:05.293"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:05.303" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:05.303" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:05.293" endtime="20210731 21:41:05.303"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Unknown field ${first_unknown_field}</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:41:05.304" endtime="20210731 21:41:05.304"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:41:05.304" endtime="20210731 21:41:05.304"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:05.293" endtime="20210731 21:41:05.304"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:05.293" endtime="20210731 21:41:05.304"/>
</for>
<status status="FAIL" starttime="20210731 21:41:05.292" endtime="20210731 21:41:05.304"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:05.292" endtime="20210731 21:41:05.304"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:05.291" endtime="20210731 21:41:05.304"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:05.309" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:05.321" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:05.321" level="INFO">${pids} = 12697
12704
12707</msg>
<status status="PASS" starttime="20210731 21:41:05.305" endtime="20210731 21:41:05.321"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:05.322" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:05.321" endtime="20210731 21:41:05.322"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:05.323" level="INFO">${pids} = ['12697', '12704', '12707']</msg>
<status status="PASS" starttime="20210731 21:41:05.323" endtime="20210731 21:41:05.323"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12697</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:05.337" level="INFO">Running command 'kill 12697 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:05.323" endtime="20210731 21:41:05.337"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.323" endtime="20210731 21:41:05.338"/>
</iter>
<iter>
<var name="${pid}">12704</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:05.342" level="INFO">Running command 'kill 12704 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:05.338" endtime="20210731 21:41:05.342"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.338" endtime="20210731 21:41:05.342"/>
</iter>
<iter>
<var name="${pid}">12707</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:05.346" level="INFO">Running command 'kill 12707 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:05.343" endtime="20210731 21:41:05.347"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.342" endtime="20210731 21:41:05.347"/>
</iter>
<status status="PASS" starttime="20210731 21:41:05.323" endtime="20210731 21:41:05.347"/>
</for>
<status status="PASS" starttime="20210731 21:41:05.322" endtime="20210731 21:41:05.347"/>
</branch>
<status status="PASS" starttime="20210731 21:41:05.322" endtime="20210731 21:41:05.347"/>
</if>
<status status="PASS" starttime="20210731 21:41:05.305" endtime="20210731 21:41:05.347"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"firstname": "Hakan",
"lastname": "Cuzdan",
"phone": '+358406875453',
"alien_field_one": "some value"
}
Note that firstname, lastname and phone are valid, and alien_field_one is not available in user table in SUT.
Then, each request should fail with the following response body:
{
"message": "unknown field alien_field_one",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-FIRSTNAME-VALID</tag>
<tag>REQ-API-LASTNAME-VALID</tag>
<tag>REQ-API-PHONE-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-UNKNOWN-FIELD(S)</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:41:03.707" endtime="20210731 21:41:05.348">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t133" name="With Each Valid Token, Updating Each System User With Multiple Unknown Fields Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:05.366" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:05.379" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:05.379" level="INFO">${pids} = 12736</msg>
<status status="PASS" starttime="20210731 21:41:05.350" endtime="20210731 21:41:05.379"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:05.380" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:05.379" endtime="20210731 21:41:05.380"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:05.381" level="INFO">${pids} = ['12736']</msg>
<status status="PASS" starttime="20210731 21:41:05.380" endtime="20210731 21:41:05.381"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12736</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:05.387" level="INFO">Running command 'kill 12736 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:05.381" endtime="20210731 21:41:05.388"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.381" endtime="20210731 21:41:05.388"/>
</iter>
<status status="PASS" starttime="20210731 21:41:05.381" endtime="20210731 21:41:05.389"/>
</for>
<status status="PASS" starttime="20210731 21:41:05.380" endtime="20210731 21:41:05.389"/>
</branch>
<status status="PASS" starttime="20210731 21:41:05.380" endtime="20210731 21:41:05.389"/>
</if>
<status status="PASS" starttime="20210731 21:41:05.350" endtime="20210731 21:41:05.389"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:05.390" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:05.390" endtime="20210731 21:41:05.390"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:05.391" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:05.391" endtime="20210731 21:41:05.391"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:05.391" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:05.391" endtime="20210731 21:41:05.391"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:05.392" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:05.392" endtime="20210731 21:41:05.392"/>
</kw>
<msg timestamp="20210731 21:41:05.392" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:05.390" endtime="20210731 21:41:05.392"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:05.396" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:05.392" endtime="20210731 21:41:05.397"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.389" endtime="20210731 21:41:05.398"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:41:05.399" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:41:05.399" endtime="20210731 21:41:05.427"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:06.929" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:41:05.428" endtime="20210731 21:41:06.929"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.398" endtime="20210731 21:41:06.929"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:06.931" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:06.930" endtime="20210731 21:41:06.931"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:06.931" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:06.931" endtime="20210731 21:41:06.931"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:06.931" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:06.931" endtime="20210731 21:41:06.932"/>
</kw>
<msg timestamp="20210731 21:41:06.932" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:06.930" endtime="20210731 21:41:06.932"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:06.932" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:06.932" endtime="20210731 21:41:06.934"/>
</kw>
<status status="PASS" starttime="20210731 21:41:06.930" endtime="20210731 21:41:06.934"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:06.935" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:06.935" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:06.935" endtime="20210731 21:41:06.935"/>
</kw>
<status status="PASS" starttime="20210731 21:41:06.935" endtime="20210731 21:41:06.935"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:06.936" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:06.936" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:06.936" endtime="20210731 21:41:06.936"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:06.936" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:06.936" endtime="20210731 21:41:06.936"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:06.939" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:06.937" endtime="20210731 21:41:06.939"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:06.939" endtime="20210731 21:41:06.940"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:06.940" endtime="20210731 21:41:06.941"/>
</kw>
<status status="PASS" starttime="20210731 21:41:06.937" endtime="20210731 21:41:06.941"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:06.941" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:06.941" endtime="20210731 21:41:06.941"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:06.941" endtime="20210731 21:41:06.942"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:06.942" endtime="20210731 21:41:06.943"/>
</kw>
<status status="PASS" starttime="20210731 21:41:06.941" endtime="20210731 21:41:06.943"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:06.943" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:06.943" endtime="20210731 21:41:06.943"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:06.943" endtime="20210731 21:41:06.944"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:06.944" endtime="20210731 21:41:06.944"/>
</kw>
<status status="PASS" starttime="20210731 21:41:06.943" endtime="20210731 21:41:06.944"/>
</iter>
<status status="PASS" starttime="20210731 21:41:06.936" endtime="20210731 21:41:06.944"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:06.945" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:06.945" endtime="20210731 21:41:06.945"/>
</kw>
<status status="PASS" starttime="20210731 21:41:06.935" endtime="20210731 21:41:06.945"/>
</kw>
<status status="PASS" starttime="20210731 21:41:05.349" endtime="20210731 21:41:06.945"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:06.946" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210731 21:41:06.946" endtime="20210731 21:41:06.946"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=Hakan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:06.946" endtime="20210731 21:41:06.946"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=Cuzdan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:06.946" endtime="20210731 21:41:06.947"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=+358406875453</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:06.947" endtime="20210731 21:41:06.947"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>alien_field_one=some value</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:06.947" endtime="20210731 21:41:06.947"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>alien_field_two=some other value</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:06.948" endtime="20210731 21:41:06.948"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${payload}</arg>
<arg>alien_field_one</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:06.949" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:06.949" endtime="20210731 21:41:06.949"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${payload}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210731 21:41:06.950" level="INFO">{'firstname': 'Hakan', 'lastname': 'Cuzdan', 'phone': '+358406875453', 'alien_field_one': 'some value', 'alien_field_two': 'some other value'}</msg>
<status status="PASS" starttime="20210731 21:41:06.950" endtime="20210731 21:41:06.950"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:06.961" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:06.961" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:06.950" endtime="20210731 21:41:06.961"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Unknown field ${first_unknown_field}</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210731 21:41:06.961" endtime="20210731 21:41:06.961"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210731 21:41:06.962" endtime="20210731 21:41:06.962"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:06.950" endtime="20210731 21:41:06.962"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:06.950" endtime="20210731 21:41:06.962"/>
</for>
<status status="FAIL" starttime="20210731 21:41:06.948" endtime="20210731 21:41:06.962"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:06.948" endtime="20210731 21:41:06.962"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:06.948" endtime="20210731 21:41:06.962"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:06.967" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:06.980" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:06.980" level="INFO">${pids} = 12759
12766
12768</msg>
<status status="PASS" starttime="20210731 21:41:06.963" endtime="20210731 21:41:06.980"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:06.981" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:06.981" endtime="20210731 21:41:06.981"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:06.982" level="INFO">${pids} = ['12759', '12766', '12768']</msg>
<status status="PASS" starttime="20210731 21:41:06.982" endtime="20210731 21:41:06.982"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12759</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:06.995" level="INFO">Running command 'kill 12759 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:06.982" endtime="20210731 21:41:06.995"/>
</kw>
<status status="PASS" starttime="20210731 21:41:06.982" endtime="20210731 21:41:06.996"/>
</iter>
<iter>
<var name="${pid}">12766</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:07.002" level="INFO">Running command 'kill 12766 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:06.996" endtime="20210731 21:41:07.004"/>
</kw>
<status status="PASS" starttime="20210731 21:41:06.996" endtime="20210731 21:41:07.004"/>
</iter>
<iter>
<var name="${pid}">12768</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:07.008" level="INFO">Running command 'kill 12768 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:07.005" endtime="20210731 21:41:07.009"/>
</kw>
<status status="PASS" starttime="20210731 21:41:07.004" endtime="20210731 21:41:07.009"/>
</iter>
<status status="PASS" starttime="20210731 21:41:06.982" endtime="20210731 21:41:07.009"/>
</for>
<status status="PASS" starttime="20210731 21:41:06.982" endtime="20210731 21:41:07.009"/>
</branch>
<status status="PASS" starttime="20210731 21:41:06.981" endtime="20210731 21:41:07.009"/>
</if>
<status status="PASS" starttime="20210731 21:41:06.962" endtime="20210731 21:41:07.009"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"firstname": "Hakan",
"lastname": "Cuzdan",
"phone": '+358406875453',
"alien_field_one": "some value",
"alien_field_two": "some other value"
}
Note that firstname, lastname and phone are valid, and alien_field_one is not available in user table in SUT.
Then, each request should fail with the following response body:
{
"message": "unknown field alien_field_one",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<tag>REQ-API-FIRSTNAME-VALID</tag>
<tag>REQ-API-LASTNAME-VALID</tag>
<tag>REQ-API-PHONE-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-UNKNOWN-FIELD(S)</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:41:05.348" endtime="20210731 21:41:07.010">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t134" name="All System Users With A Valid Token Can Update Firstname, Lastname And Phone Of All System Users With Valid Values">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:07.015" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:07.030" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:07.030" level="INFO">${pids} = 12797</msg>
<status status="PASS" starttime="20210731 21:41:07.012" endtime="20210731 21:41:07.030"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:07.031" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:07.030" endtime="20210731 21:41:07.031"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:07.031" level="INFO">${pids} = ['12797']</msg>
<status status="PASS" starttime="20210731 21:41:07.031" endtime="20210731 21:41:07.031"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12797</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:07.035" level="INFO">Running command 'kill 12797 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:07.032" endtime="20210731 21:41:07.036"/>
</kw>
<status status="PASS" starttime="20210731 21:41:07.032" endtime="20210731 21:41:07.036"/>
</iter>
<status status="PASS" starttime="20210731 21:41:07.032" endtime="20210731 21:41:07.036"/>
</for>
<status status="PASS" starttime="20210731 21:41:07.031" endtime="20210731 21:41:07.036"/>
</branch>
<status status="PASS" starttime="20210731 21:41:07.031" endtime="20210731 21:41:07.036"/>
</if>
<status status="PASS" starttime="20210731 21:41:07.011" endtime="20210731 21:41:07.036"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:07.038" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:07.037" endtime="20210731 21:41:07.038"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:07.038" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:07.038" endtime="20210731 21:41:07.038"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:07.039" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:07.039" endtime="20210731 21:41:07.039"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:07.039" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:07.039" endtime="20210731 21:41:07.039"/>
</kw>
<msg timestamp="20210731 21:41:07.040" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:07.038" endtime="20210731 21:41:07.040"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:07.045" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:07.040" endtime="20210731 21:41:07.047"/>
</kw>
<status status="PASS" starttime="20210731 21:41:07.036" endtime="20210731 21:41:07.047"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:41:07.049" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:41:07.048" endtime="20210731 21:41:07.053"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:08.554" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:41:07.053" endtime="20210731 21:41:08.554"/>
</kw>
<status status="PASS" starttime="20210731 21:41:07.048" endtime="20210731 21:41:08.555"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:08.556" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:08.556" endtime="20210731 21:41:08.556"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:08.557" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:08.557" endtime="20210731 21:41:08.557"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:08.557" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:08.557" endtime="20210731 21:41:08.558"/>
</kw>
<msg timestamp="20210731 21:41:08.558" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:08.555" endtime="20210731 21:41:08.558"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:08.558" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:08.558" endtime="20210731 21:41:08.559"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.555" endtime="20210731 21:41:08.559"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:08.560" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:08.560" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:08.559" endtime="20210731 21:41:08.560"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.559" endtime="20210731 21:41:08.560"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:08.561" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:08.561" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:08.560" endtime="20210731 21:41:08.561"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:08.561" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:08.561" endtime="20210731 21:41:08.561"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:08.562" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:08.562" endtime="20210731 21:41:08.562"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:08.562" endtime="20210731 21:41:08.563"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:08.563" endtime="20210731 21:41:08.563"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.561" endtime="20210731 21:41:08.563"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:08.564" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:08.564" endtime="20210731 21:41:08.564"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:08.564" endtime="20210731 21:41:08.565"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:08.565" endtime="20210731 21:41:08.565"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.563" endtime="20210731 21:41:08.565"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:08.566" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:08.566" endtime="20210731 21:41:08.566"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:08.566" endtime="20210731 21:41:08.567"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:08.567" endtime="20210731 21:41:08.567"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.565" endtime="20210731 21:41:08.567"/>
</iter>
<status status="PASS" starttime="20210731 21:41:08.561" endtime="20210731 21:41:08.567"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:08.568" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:08.567" endtime="20210731 21:41:08.568"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.560" endtime="20210731 21:41:08.568"/>
</kw>
<status status="PASS" starttime="20210731 21:41:07.011" endtime="20210731 21:41:08.568"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:08.569" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210731 21:41:08.568" endtime="20210731 21:41:08.569"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=Hakan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:08.569" endtime="20210731 21:41:08.569"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=Cuzdan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:08.569" endtime="20210731 21:41:08.570"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=+358406875453</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:08.570" endtime="20210731 21:41:08.570"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Update Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${payload}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:08.571" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:08.571" endtime="20210731 21:41:08.571"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${payload}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210731 21:41:08.572" level="INFO">{'firstname': 'Hakan', 'lastname': 'Cuzdan', 'phone': '+358406875453'}</msg>
<status status="PASS" starttime="20210731 21:41:08.571" endtime="20210731 21:41:08.572"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:08.583" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:08.584" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:08.572" endtime="20210731 21:41:08.584"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Updated</arg>
<arg>status=SUCCESS</arg>
<status status="NOT RUN" starttime="20210731 21:41:08.584" endtime="20210731 21:41:08.584"/>
</kw>
<kw name="Verify System User's Data Updated In Database With Payload">
<arg>${system_user}</arg>
<arg>${payload}</arg>
<status status="NOT RUN" starttime="20210731 21:41:08.584" endtime="20210731 21:41:08.584"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:08.572" endtime="20210731 21:41:08.584"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:08.572" endtime="20210731 21:41:08.584"/>
</for>
<status status="FAIL" starttime="20210731 21:41:08.570" endtime="20210731 21:41:08.585"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:08.570" endtime="20210731 21:41:08.585"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:08.570" endtime="20210731 21:41:08.585"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:08.591" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:08.610" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:08.610" level="INFO">${pids} = 12820
12827
12830</msg>
<status status="PASS" starttime="20210731 21:41:08.586" endtime="20210731 21:41:08.610"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:08.612" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:08.611" endtime="20210731 21:41:08.612"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:08.612" level="INFO">${pids} = ['12820', '12827', '12830']</msg>
<status status="PASS" starttime="20210731 21:41:08.612" endtime="20210731 21:41:08.612"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12820</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:08.619" level="INFO">Running command 'kill 12820 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:08.613" endtime="20210731 21:41:08.619"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.613" endtime="20210731 21:41:08.619"/>
</iter>
<iter>
<var name="${pid}">12827</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:08.623" level="INFO">Running command 'kill 12827 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:08.620" endtime="20210731 21:41:08.624"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.619" endtime="20210731 21:41:08.624"/>
</iter>
<iter>
<var name="${pid}">12830</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:08.628" level="INFO">Running command 'kill 12830 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:08.624" endtime="20210731 21:41:08.629"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.624" endtime="20210731 21:41:08.629"/>
</iter>
<status status="PASS" starttime="20210731 21:41:08.613" endtime="20210731 21:41:08.629"/>
</for>
<status status="PASS" starttime="20210731 21:41:08.612" endtime="20210731 21:41:08.629"/>
</branch>
<status status="PASS" starttime="20210731 21:41:08.612" endtime="20210731 21:41:08.629"/>
</if>
<status status="PASS" starttime="20210731 21:41:08.585" endtime="20210731 21:41:08.629"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"firstname": "Hakan",
"lastname": "Cuzdan",
"phone": '+358406875453'
}
Note that firstname, lastname and phone are valid.
Then, each request should pass with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</tag>
<tag>REQ-API-FIRSTNAME-VALID</tag>
<tag>REQ-API-LASTNAME-VALID</tag>
<tag>REQ-API-NO-UNKNOWN-FIELD</tag>
<tag>REQ-API-PHONE-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:41:07.010" endtime="20210731 21:41:08.629">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t135" name="All System Users With A Valid Token Can Update Firstname And Lastname Of All System Users With Valid Values">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:08.635" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:08.648" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:08.648" level="INFO">${pids} = 12859</msg>
<status status="PASS" starttime="20210731 21:41:08.632" endtime="20210731 21:41:08.649"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:08.650" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:08.649" endtime="20210731 21:41:08.650"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:08.650" level="INFO">${pids} = ['12859']</msg>
<status status="PASS" starttime="20210731 21:41:08.650" endtime="20210731 21:41:08.650"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12859</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:08.654" level="INFO">Running command 'kill 12859 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:08.651" endtime="20210731 21:41:08.655"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.651" endtime="20210731 21:41:08.655"/>
</iter>
<status status="PASS" starttime="20210731 21:41:08.650" endtime="20210731 21:41:08.655"/>
</for>
<status status="PASS" starttime="20210731 21:41:08.650" endtime="20210731 21:41:08.655"/>
</branch>
<status status="PASS" starttime="20210731 21:41:08.650" endtime="20210731 21:41:08.655"/>
</if>
<status status="PASS" starttime="20210731 21:41:08.631" endtime="20210731 21:41:08.655"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:08.657" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:08.656" endtime="20210731 21:41:08.657"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:08.659" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:08.658" endtime="20210731 21:41:08.659"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:08.659" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:08.659" endtime="20210731 21:41:08.659"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:08.660" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:08.660" endtime="20210731 21:41:08.660"/>
</kw>
<msg timestamp="20210731 21:41:08.660" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:08.657" endtime="20210731 21:41:08.660"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:08.665" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:08.660" endtime="20210731 21:41:08.666"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.656" endtime="20210731 21:41:08.667"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:41:08.668" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:41:08.667" endtime="20210731 21:41:08.672"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:10.174" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:41:08.673" endtime="20210731 21:41:10.174"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.667" endtime="20210731 21:41:10.174"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:10.176" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:10.175" endtime="20210731 21:41:10.176"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:10.176" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:10.176" endtime="20210731 21:41:10.176"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:10.177" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:10.176" endtime="20210731 21:41:10.177"/>
</kw>
<msg timestamp="20210731 21:41:10.177" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:10.175" endtime="20210731 21:41:10.177"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:10.178" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:10.177" endtime="20210731 21:41:10.178"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.175" endtime="20210731 21:41:10.178"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:10.179" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:10.179" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:10.179" endtime="20210731 21:41:10.179"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.178" endtime="20210731 21:41:10.179"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:10.180" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:10.180" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:10.180" endtime="20210731 21:41:10.180"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:10.180" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:10.180" endtime="20210731 21:41:10.180"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:10.181" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:10.181" endtime="20210731 21:41:10.181"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:10.181" endtime="20210731 21:41:10.182"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:10.182" endtime="20210731 21:41:10.183"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.181" endtime="20210731 21:41:10.183"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:10.183" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:10.183" endtime="20210731 21:41:10.183"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:10.184" endtime="20210731 21:41:10.184"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:10.185" endtime="20210731 21:41:10.185"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.183" endtime="20210731 21:41:10.185"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:10.185" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:10.185" endtime="20210731 21:41:10.185"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:10.185" endtime="20210731 21:41:10.186"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:10.186" endtime="20210731 21:41:10.187"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.185" endtime="20210731 21:41:10.187"/>
</iter>
<status status="PASS" starttime="20210731 21:41:10.181" endtime="20210731 21:41:10.187"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:10.187" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:10.187" endtime="20210731 21:41:10.187"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.179" endtime="20210731 21:41:10.188"/>
</kw>
<status status="PASS" starttime="20210731 21:41:08.631" endtime="20210731 21:41:10.188"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:10.188" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210731 21:41:10.188" endtime="20210731 21:41:10.188"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=Hakan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:10.188" endtime="20210731 21:41:10.189"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=Cuzdan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:10.189" endtime="20210731 21:41:10.189"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Update Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${payload}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:10.190" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:10.190" endtime="20210731 21:41:10.191"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${payload}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210731 21:41:10.191" level="INFO">{'firstname': 'Hakan', 'lastname': 'Cuzdan'}</msg>
<status status="PASS" starttime="20210731 21:41:10.191" endtime="20210731 21:41:10.191"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:10.201" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:10.201" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:10.192" endtime="20210731 21:41:10.201"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Updated</arg>
<arg>status=SUCCESS</arg>
<status status="NOT RUN" starttime="20210731 21:41:10.201" endtime="20210731 21:41:10.202"/>
</kw>
<kw name="Verify System User's Data Updated In Database With Payload">
<arg>${system_user}</arg>
<arg>${payload}</arg>
<status status="NOT RUN" starttime="20210731 21:41:10.202" endtime="20210731 21:41:10.202"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:10.191" endtime="20210731 21:41:10.202"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:10.191" endtime="20210731 21:41:10.202"/>
</for>
<status status="FAIL" starttime="20210731 21:41:10.189" endtime="20210731 21:41:10.202"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:10.189" endtime="20210731 21:41:10.202"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:10.189" endtime="20210731 21:41:10.202"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:10.206" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:10.218" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:10.218" level="INFO">${pids} = 12882
12889
12891</msg>
<status status="PASS" starttime="20210731 21:41:10.203" endtime="20210731 21:41:10.218"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:10.219" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:10.219" endtime="20210731 21:41:10.219"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:10.220" level="INFO">${pids} = ['12882', '12889', '12891']</msg>
<status status="PASS" starttime="20210731 21:41:10.220" endtime="20210731 21:41:10.220"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12882</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:10.231" level="INFO">Running command 'kill 12882 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:10.220" endtime="20210731 21:41:10.232"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.220" endtime="20210731 21:41:10.232"/>
</iter>
<iter>
<var name="${pid}">12889</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:10.238" level="INFO">Running command 'kill 12889 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:10.232" endtime="20210731 21:41:10.239"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.232" endtime="20210731 21:41:10.239"/>
</iter>
<iter>
<var name="${pid}">12891</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:10.243" level="INFO">Running command 'kill 12891 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:10.240" endtime="20210731 21:41:10.244"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.239" endtime="20210731 21:41:10.244"/>
</iter>
<status status="PASS" starttime="20210731 21:41:10.220" endtime="20210731 21:41:10.244"/>
</for>
<status status="PASS" starttime="20210731 21:41:10.220" endtime="20210731 21:41:10.244"/>
</branch>
<status status="PASS" starttime="20210731 21:41:10.219" endtime="20210731 21:41:10.244"/>
</if>
<status status="PASS" starttime="20210731 21:41:10.202" endtime="20210731 21:41:10.245"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"firstname": "Hakan",
"lastname": "Cuzdan"
}
Note that firstname, lastname are valid.
Then, each request should pass with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</tag>
<tag>REQ-API-FIRSTNAME-VALID</tag>
<tag>REQ-API-LASTNAME-VALID</tag>
<tag>REQ-API-NO-PHONE</tag>
<tag>REQ-API-NO-UNKNOWN-FIELD</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:41:08.630" endtime="20210731 21:41:10.245">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t136" name="All System Users With A Valid Token Can Update Firstname And Phone Of All System Users With Valid Values">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:10.261" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:10.275" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:10.275" level="INFO">${pids} = 12920</msg>
<status status="PASS" starttime="20210731 21:41:10.247" endtime="20210731 21:41:10.275"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:10.276" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:10.275" endtime="20210731 21:41:10.276"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:10.277" level="INFO">${pids} = ['12920']</msg>
<status status="PASS" starttime="20210731 21:41:10.276" endtime="20210731 21:41:10.277"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12920</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:10.284" level="INFO">Running command 'kill 12920 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:10.277" endtime="20210731 21:41:10.284"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.277" endtime="20210731 21:41:10.284"/>
</iter>
<status status="PASS" starttime="20210731 21:41:10.277" endtime="20210731 21:41:10.284"/>
</for>
<status status="PASS" starttime="20210731 21:41:10.276" endtime="20210731 21:41:10.285"/>
</branch>
<status status="PASS" starttime="20210731 21:41:10.276" endtime="20210731 21:41:10.285"/>
</if>
<status status="PASS" starttime="20210731 21:41:10.247" endtime="20210731 21:41:10.285"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:10.286" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:10.286" endtime="20210731 21:41:10.286"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:10.287" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:10.287" endtime="20210731 21:41:10.288"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:10.288" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:10.288" endtime="20210731 21:41:10.288"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:10.288" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:10.288" endtime="20210731 21:41:10.288"/>
</kw>
<msg timestamp="20210731 21:41:10.289" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:10.286" endtime="20210731 21:41:10.289"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:10.314" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:10.289" endtime="20210731 21:41:10.316"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.285" endtime="20210731 21:41:10.316"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:41:10.317" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:41:10.317" endtime="20210731 21:41:10.322"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:11.824" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:41:10.323" endtime="20210731 21:41:11.824"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.316" endtime="20210731 21:41:11.824"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:11.826" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:11.825" endtime="20210731 21:41:11.826"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:11.826" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:11.826" endtime="20210731 21:41:11.826"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:11.827" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:11.826" endtime="20210731 21:41:11.827"/>
</kw>
<msg timestamp="20210731 21:41:11.827" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:11.825" endtime="20210731 21:41:11.827"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:11.827" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:11.827" endtime="20210731 21:41:11.828"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.825" endtime="20210731 21:41:11.828"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:11.829" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:11.829" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:11.829" endtime="20210731 21:41:11.829"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.828" endtime="20210731 21:41:11.829"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:11.830" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:11.830" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:11.830" endtime="20210731 21:41:11.830"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:11.830" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:11.830" endtime="20210731 21:41:11.830"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:11.831" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:11.831" endtime="20210731 21:41:11.831"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:11.831" endtime="20210731 21:41:11.832"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:11.833" endtime="20210731 21:41:11.833"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.831" endtime="20210731 21:41:11.833"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:11.833" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:11.833" endtime="20210731 21:41:11.833"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:11.834" endtime="20210731 21:41:11.834"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:11.834" endtime="20210731 21:41:11.835"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.833" endtime="20210731 21:41:11.835"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:11.835" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:11.835" endtime="20210731 21:41:11.835"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:11.835" endtime="20210731 21:41:11.836"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:11.836" endtime="20210731 21:41:11.837"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.835" endtime="20210731 21:41:11.837"/>
</iter>
<status status="PASS" starttime="20210731 21:41:11.831" endtime="20210731 21:41:11.837"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:11.837" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:11.837" endtime="20210731 21:41:11.837"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.829" endtime="20210731 21:41:11.838"/>
</kw>
<status status="PASS" starttime="20210731 21:41:10.246" endtime="20210731 21:41:11.838"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:11.838" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210731 21:41:11.838" endtime="20210731 21:41:11.838"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=Hakan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:11.839" endtime="20210731 21:41:11.839"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=+358406875453</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:11.839" endtime="20210731 21:41:11.839"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Update Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${payload}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:11.841" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:11.840" endtime="20210731 21:41:11.841"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${payload}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210731 21:41:11.841" level="INFO">{'firstname': 'Hakan', 'phone': '+358406875453'}</msg>
<status status="PASS" starttime="20210731 21:41:11.841" endtime="20210731 21:41:11.841"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:11.853" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:11.854" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:11.842" endtime="20210731 21:41:11.854"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Updated</arg>
<arg>status=SUCCESS</arg>
<status status="NOT RUN" starttime="20210731 21:41:11.854" endtime="20210731 21:41:11.855"/>
</kw>
<kw name="Verify System User's Data Updated In Database With Payload">
<arg>${system_user}</arg>
<arg>${payload}</arg>
<status status="NOT RUN" starttime="20210731 21:41:11.855" endtime="20210731 21:41:11.855"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:11.842" endtime="20210731 21:41:11.855"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:11.842" endtime="20210731 21:41:11.855"/>
</for>
<status status="FAIL" starttime="20210731 21:41:11.840" endtime="20210731 21:41:11.855"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:11.840" endtime="20210731 21:41:11.855"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:11.840" endtime="20210731 21:41:11.855"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:11.860" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:11.884" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:11.884" level="INFO">${pids} = 12943
12950
12952</msg>
<status status="PASS" starttime="20210731 21:41:11.856" endtime="20210731 21:41:11.884"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:11.885" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:11.884" endtime="20210731 21:41:11.885"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:11.886" level="INFO">${pids} = ['12943', '12950', '12952']</msg>
<status status="PASS" starttime="20210731 21:41:11.886" endtime="20210731 21:41:11.886"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12943</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:11.890" level="INFO">Running command 'kill 12943 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:11.886" endtime="20210731 21:41:11.891"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.886" endtime="20210731 21:41:11.891"/>
</iter>
<iter>
<var name="${pid}">12950</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:11.895" level="INFO">Running command 'kill 12950 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:11.892" endtime="20210731 21:41:11.898"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.891" endtime="20210731 21:41:11.898"/>
</iter>
<iter>
<var name="${pid}">12952</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:11.902" level="INFO">Running command 'kill 12952 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:11.898" endtime="20210731 21:41:11.902"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.898" endtime="20210731 21:41:11.902"/>
</iter>
<status status="PASS" starttime="20210731 21:41:11.886" endtime="20210731 21:41:11.902"/>
</for>
<status status="PASS" starttime="20210731 21:41:11.885" endtime="20210731 21:41:11.903"/>
</branch>
<status status="PASS" starttime="20210731 21:41:11.885" endtime="20210731 21:41:11.903"/>
</if>
<status status="PASS" starttime="20210731 21:41:11.856" endtime="20210731 21:41:11.903"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"firstname": "Hakan",
"phone": '+358406875453'
}
Note that firstname and phone are valid.
Then, each request should pass with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</tag>
<tag>REQ-API-FIRSTNAME-VALID</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-NO-UNKNOWN-FIELD</tag>
<tag>REQ-API-PHONE-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:41:10.245" endtime="20210731 21:41:11.903">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t137" name="All System Users With A Valid Token Can Update Lastname And Phone Of All System Users With Valid Values">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:11.909" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:11.922" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:11.922" level="INFO">${pids} = 12981</msg>
<status status="PASS" starttime="20210731 21:41:11.905" endtime="20210731 21:41:11.922"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:11.923" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:11.922" endtime="20210731 21:41:11.923"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:11.924" level="INFO">${pids} = ['12981']</msg>
<status status="PASS" starttime="20210731 21:41:11.923" endtime="20210731 21:41:11.924"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">12981</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:11.928" level="INFO">Running command 'kill 12981 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:11.924" endtime="20210731 21:41:11.928"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.924" endtime="20210731 21:41:11.928"/>
</iter>
<status status="PASS" starttime="20210731 21:41:11.924" endtime="20210731 21:41:11.928"/>
</for>
<status status="PASS" starttime="20210731 21:41:11.923" endtime="20210731 21:41:11.928"/>
</branch>
<status status="PASS" starttime="20210731 21:41:11.923" endtime="20210731 21:41:11.928"/>
</if>
<status status="PASS" starttime="20210731 21:41:11.905" endtime="20210731 21:41:11.929"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:11.930" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:11.930" endtime="20210731 21:41:11.930"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:11.931" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:11.930" endtime="20210731 21:41:11.931"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:11.931" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:11.931" endtime="20210731 21:41:11.931"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:11.932" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:11.931" endtime="20210731 21:41:11.932"/>
</kw>
<msg timestamp="20210731 21:41:11.932" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:11.930" endtime="20210731 21:41:11.932"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:11.938" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:11.932" endtime="20210731 21:41:11.940"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.929" endtime="20210731 21:41:11.941"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:41:11.942" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:41:11.942" endtime="20210731 21:41:11.947"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:13.448" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:41:11.947" endtime="20210731 21:41:13.448"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.941" endtime="20210731 21:41:13.448"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:13.450" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:13.450" endtime="20210731 21:41:13.450"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:13.451" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:13.450" endtime="20210731 21:41:13.451"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:13.451" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:13.451" endtime="20210731 21:41:13.451"/>
</kw>
<msg timestamp="20210731 21:41:13.451" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:13.449" endtime="20210731 21:41:13.451"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:13.452" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:13.452" endtime="20210731 21:41:13.452"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.449" endtime="20210731 21:41:13.453"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:13.454" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:13.455" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:13.453" endtime="20210731 21:41:13.455"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.453" endtime="20210731 21:41:13.455"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:13.456" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:13.456" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:13.455" endtime="20210731 21:41:13.456"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:13.456" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:13.456" endtime="20210731 21:41:13.456"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:13.457" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:13.457" endtime="20210731 21:41:13.457"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:13.457" endtime="20210731 21:41:13.459"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:13.459" endtime="20210731 21:41:13.459"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.456" endtime="20210731 21:41:13.459"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:13.460" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:13.460" endtime="20210731 21:41:13.460"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:13.460" endtime="20210731 21:41:13.461"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:13.461" endtime="20210731 21:41:13.462"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.460" endtime="20210731 21:41:13.462"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:13.462" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:13.462" endtime="20210731 21:41:13.462"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:13.462" endtime="20210731 21:41:13.463"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:13.463" endtime="20210731 21:41:13.464"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.462" endtime="20210731 21:41:13.464"/>
</iter>
<status status="PASS" starttime="20210731 21:41:13.456" endtime="20210731 21:41:13.464"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:13.464" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:13.464" endtime="20210731 21:41:13.464"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.455" endtime="20210731 21:41:13.464"/>
</kw>
<status status="PASS" starttime="20210731 21:41:11.905" endtime="20210731 21:41:13.464"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:13.465" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210731 21:41:13.465" endtime="20210731 21:41:13.465"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=Cuzdan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:13.465" endtime="20210731 21:41:13.465"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=+358406875453</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:13.466" endtime="20210731 21:41:13.466"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Update Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${payload}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:13.467" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:13.467" endtime="20210731 21:41:13.467"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${payload}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210731 21:41:13.467" level="INFO">{'lastname': 'Cuzdan', 'phone': '+358406875453'}</msg>
<status status="PASS" starttime="20210731 21:41:13.467" endtime="20210731 21:41:13.468"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:13.480" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:13.480" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:13.468" endtime="20210731 21:41:13.480"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Updated</arg>
<arg>status=SUCCESS</arg>
<status status="NOT RUN" starttime="20210731 21:41:13.480" endtime="20210731 21:41:13.480"/>
</kw>
<kw name="Verify System User's Data Updated In Database With Payload">
<arg>${system_user}</arg>
<arg>${payload}</arg>
<status status="NOT RUN" starttime="20210731 21:41:13.480" endtime="20210731 21:41:13.480"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:13.468" endtime="20210731 21:41:13.480"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:13.468" endtime="20210731 21:41:13.480"/>
</for>
<status status="FAIL" starttime="20210731 21:41:13.466" endtime="20210731 21:41:13.481"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:13.466" endtime="20210731 21:41:13.481"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:13.466" endtime="20210731 21:41:13.481"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:13.485" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:13.506" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:13.506" level="INFO">${pids} = 13004
13011
13018</msg>
<status status="PASS" starttime="20210731 21:41:13.481" endtime="20210731 21:41:13.506"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:13.507" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:13.506" endtime="20210731 21:41:13.507"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:13.509" level="INFO">${pids} = ['13004', '13011', '13018']</msg>
<status status="PASS" starttime="20210731 21:41:13.508" endtime="20210731 21:41:13.509"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13004</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:13.516" level="INFO">Running command 'kill 13004 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:13.510" endtime="20210731 21:41:13.516"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.510" endtime="20210731 21:41:13.516"/>
</iter>
<iter>
<var name="${pid}">13011</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:13.521" level="INFO">Running command 'kill 13011 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:13.517" endtime="20210731 21:41:13.524"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.516" endtime="20210731 21:41:13.524"/>
</iter>
<iter>
<var name="${pid}">13018</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:13.530" level="INFO">Running command 'kill 13018 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:13.525" endtime="20210731 21:41:13.530"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.524" endtime="20210731 21:41:13.530"/>
</iter>
<status status="PASS" starttime="20210731 21:41:13.509" endtime="20210731 21:41:13.530"/>
</for>
<status status="PASS" starttime="20210731 21:41:13.508" endtime="20210731 21:41:13.531"/>
</branch>
<status status="PASS" starttime="20210731 21:41:13.507" endtime="20210731 21:41:13.531"/>
</if>
<status status="PASS" starttime="20210731 21:41:13.481" endtime="20210731 21:41:13.531"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"lastname": "Cuzdan",
"phone": '+358406875453'
}
Note that lastname and phone are valid.
Then, each request should pass with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</tag>
<tag>REQ-API-LASTNAME-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-UNKNOWN-FIELD</tag>
<tag>REQ-API-PHONE-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:41:11.904" endtime="20210731 21:41:13.531">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t138" name="All System Users With A Valid Token Can Update Firstname Of All System Users With Valid Values">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:13.537" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:13.554" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:13.554" level="INFO">${pids} = 13047</msg>
<status status="PASS" starttime="20210731 21:41:13.533" endtime="20210731 21:41:13.554"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:13.555" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:13.554" endtime="20210731 21:41:13.555"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:13.556" level="INFO">${pids} = ['13047']</msg>
<status status="PASS" starttime="20210731 21:41:13.556" endtime="20210731 21:41:13.556"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13047</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:13.564" level="INFO">Running command 'kill 13047 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:13.556" endtime="20210731 21:41:13.564"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.556" endtime="20210731 21:41:13.565"/>
</iter>
<status status="PASS" starttime="20210731 21:41:13.556" endtime="20210731 21:41:13.565"/>
</for>
<status status="PASS" starttime="20210731 21:41:13.555" endtime="20210731 21:41:13.565"/>
</branch>
<status status="PASS" starttime="20210731 21:41:13.555" endtime="20210731 21:41:13.565"/>
</if>
<status status="PASS" starttime="20210731 21:41:13.533" endtime="20210731 21:41:13.565"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:13.566" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:13.566" endtime="20210731 21:41:13.567"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:13.567" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:13.567" endtime="20210731 21:41:13.567"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:13.568" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:13.567" endtime="20210731 21:41:13.568"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:13.568" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:13.568" endtime="20210731 21:41:13.568"/>
</kw>
<msg timestamp="20210731 21:41:13.568" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:13.567" endtime="20210731 21:41:13.568"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:13.572" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:13.569" endtime="20210731 21:41:13.574"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.566" endtime="20210731 21:41:13.575"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:41:13.577" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:41:13.576" endtime="20210731 21:41:13.613"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:15.115" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:41:13.614" endtime="20210731 21:41:15.115"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.575" endtime="20210731 21:41:15.115"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:15.117" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:15.116" endtime="20210731 21:41:15.117"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:15.117" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:15.117" endtime="20210731 21:41:15.117"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:15.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:15.117" endtime="20210731 21:41:15.118"/>
</kw>
<msg timestamp="20210731 21:41:15.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:15.116" endtime="20210731 21:41:15.118"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:15.119" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:15.118" endtime="20210731 21:41:15.119"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.116" endtime="20210731 21:41:15.119"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:15.120" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:15.120" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:15.120" endtime="20210731 21:41:15.120"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.119" endtime="20210731 21:41:15.120"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:15.121" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:15.121" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:15.121" endtime="20210731 21:41:15.121"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:15.122" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:15.122" endtime="20210731 21:41:15.122"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:15.123" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:15.122" endtime="20210731 21:41:15.123"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:15.123" endtime="20210731 21:41:15.124"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:15.124" endtime="20210731 21:41:15.124"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.122" endtime="20210731 21:41:15.124"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:15.125" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:15.125" endtime="20210731 21:41:15.125"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:15.125" endtime="20210731 21:41:15.126"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:15.127" endtime="20210731 21:41:15.127"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.125" endtime="20210731 21:41:15.127"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:15.127" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:15.127" endtime="20210731 21:41:15.127"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:15.128" endtime="20210731 21:41:15.128"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:15.129" endtime="20210731 21:41:15.129"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.127" endtime="20210731 21:41:15.129"/>
</iter>
<status status="PASS" starttime="20210731 21:41:15.122" endtime="20210731 21:41:15.129"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:15.130" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:15.129" endtime="20210731 21:41:15.130"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.121" endtime="20210731 21:41:15.130"/>
</kw>
<status status="PASS" starttime="20210731 21:41:13.533" endtime="20210731 21:41:15.130"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:15.130" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210731 21:41:15.130" endtime="20210731 21:41:15.130"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=Hakan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:15.131" endtime="20210731 21:41:15.131"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Update Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${payload}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:15.132" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:15.132" endtime="20210731 21:41:15.132"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${payload}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210731 21:41:15.133" level="INFO">{'firstname': 'Hakan'}</msg>
<status status="PASS" starttime="20210731 21:41:15.132" endtime="20210731 21:41:15.133"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:15.145" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:15.145" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:15.134" endtime="20210731 21:41:15.146"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Updated</arg>
<arg>status=SUCCESS</arg>
<status status="NOT RUN" starttime="20210731 21:41:15.146" endtime="20210731 21:41:15.146"/>
</kw>
<kw name="Verify System User's Data Updated In Database With Payload">
<arg>${system_user}</arg>
<arg>${payload}</arg>
<status status="NOT RUN" starttime="20210731 21:41:15.146" endtime="20210731 21:41:15.146"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:15.133" endtime="20210731 21:41:15.146"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:15.133" endtime="20210731 21:41:15.146"/>
</for>
<status status="FAIL" starttime="20210731 21:41:15.131" endtime="20210731 21:41:15.146"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:15.131" endtime="20210731 21:41:15.146"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:15.131" endtime="20210731 21:41:15.146"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:15.150" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:15.176" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:15.177" level="INFO">${pids} = 13070
13077
13079</msg>
<status status="PASS" starttime="20210731 21:41:15.147" endtime="20210731 21:41:15.177"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:15.178" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:15.177" endtime="20210731 21:41:15.178"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:15.179" level="INFO">${pids} = ['13070', '13077', '13079']</msg>
<status status="PASS" starttime="20210731 21:41:15.178" endtime="20210731 21:41:15.179"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13070</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:15.186" level="INFO">Running command 'kill 13070 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:15.179" endtime="20210731 21:41:15.187"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.179" endtime="20210731 21:41:15.187"/>
</iter>
<iter>
<var name="${pid}">13077</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:15.193" level="INFO">Running command 'kill 13077 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:15.188" endtime="20210731 21:41:15.194"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.187" endtime="20210731 21:41:15.194"/>
</iter>
<iter>
<var name="${pid}">13079</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:15.199" level="INFO">Running command 'kill 13079 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:15.194" endtime="20210731 21:41:15.199"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.194" endtime="20210731 21:41:15.199"/>
</iter>
<status status="PASS" starttime="20210731 21:41:15.179" endtime="20210731 21:41:15.199"/>
</for>
<status status="PASS" starttime="20210731 21:41:15.178" endtime="20210731 21:41:15.199"/>
</branch>
<status status="PASS" starttime="20210731 21:41:15.178" endtime="20210731 21:41:15.199"/>
</if>
<status status="PASS" starttime="20210731 21:41:15.147" endtime="20210731 21:41:15.200"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"firstname": "Hakan"
}
Note that firstname is valid.
Then, each request should pass with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</tag>
<tag>REQ-API-FIRSTNAME-VALID</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-NO-PHONE</tag>
<tag>REQ-API-NO-UNKNOWN-FIELD</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:41:13.532" endtime="20210731 21:41:15.200">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t139" name="All System Users With A Valid Token Can Update Lastname Of All System Users With Valid Values">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:15.205" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:15.222" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:15.222" level="INFO">${pids} = 13108</msg>
<status status="PASS" starttime="20210731 21:41:15.202" endtime="20210731 21:41:15.222"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:15.223" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:15.223" endtime="20210731 21:41:15.223"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:15.225" level="INFO">${pids} = ['13108']</msg>
<status status="PASS" starttime="20210731 21:41:15.224" endtime="20210731 21:41:15.225"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13108</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:15.230" level="INFO">Running command 'kill 13108 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:15.226" endtime="20210731 21:41:15.231"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.226" endtime="20210731 21:41:15.231"/>
</iter>
<status status="PASS" starttime="20210731 21:41:15.225" endtime="20210731 21:41:15.231"/>
</for>
<status status="PASS" starttime="20210731 21:41:15.224" endtime="20210731 21:41:15.231"/>
</branch>
<status status="PASS" starttime="20210731 21:41:15.224" endtime="20210731 21:41:15.231"/>
</if>
<status status="PASS" starttime="20210731 21:41:15.202" endtime="20210731 21:41:15.232"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:15.233" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:15.233" endtime="20210731 21:41:15.233"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:15.234" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:15.234" endtime="20210731 21:41:15.234"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:15.235" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:15.234" endtime="20210731 21:41:15.235"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:15.235" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:15.235" endtime="20210731 21:41:15.235"/>
</kw>
<msg timestamp="20210731 21:41:15.235" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:15.233" endtime="20210731 21:41:15.235"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:15.240" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:15.235" endtime="20210731 21:41:15.243"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.232" endtime="20210731 21:41:15.243"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:41:15.247" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:41:15.246" endtime="20210731 21:41:15.278"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:16.779" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:41:15.278" endtime="20210731 21:41:16.779"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.243" endtime="20210731 21:41:16.780"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:16.781" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:16.781" endtime="20210731 21:41:16.781"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:16.782" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:16.781" endtime="20210731 21:41:16.782"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:16.782" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:16.782" endtime="20210731 21:41:16.782"/>
</kw>
<msg timestamp="20210731 21:41:16.783" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:16.780" endtime="20210731 21:41:16.783"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:16.783" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:16.783" endtime="20210731 21:41:16.784"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.780" endtime="20210731 21:41:16.784"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:16.784" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:16.784" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:16.784" endtime="20210731 21:41:16.785"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.784" endtime="20210731 21:41:16.785"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:16.785" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:16.786" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:16.785" endtime="20210731 21:41:16.786"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:16.786" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:16.786" endtime="20210731 21:41:16.786"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:16.787" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:16.786" endtime="20210731 21:41:16.787"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:16.787" endtime="20210731 21:41:16.788"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:16.788" endtime="20210731 21:41:16.788"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.786" endtime="20210731 21:41:16.788"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:16.789" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:16.788" endtime="20210731 21:41:16.789"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:16.789" endtime="20210731 21:41:16.790"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:16.790" endtime="20210731 21:41:16.790"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.788" endtime="20210731 21:41:16.790"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:16.791" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:16.790" endtime="20210731 21:41:16.791"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:16.791" endtime="20210731 21:41:16.792"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:16.792" endtime="20210731 21:41:16.793"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.790" endtime="20210731 21:41:16.793"/>
</iter>
<status status="PASS" starttime="20210731 21:41:16.786" endtime="20210731 21:41:16.793"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:16.793" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:16.793" endtime="20210731 21:41:16.793"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.785" endtime="20210731 21:41:16.794"/>
</kw>
<status status="PASS" starttime="20210731 21:41:15.201" endtime="20210731 21:41:16.794"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:16.794" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210731 21:41:16.794" endtime="20210731 21:41:16.794"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=Cuzdan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:16.794" endtime="20210731 21:41:16.795"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Update Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${payload}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:16.796" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:16.796" endtime="20210731 21:41:16.796"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${payload}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210731 21:41:16.796" level="INFO">{'lastname': 'Cuzdan'}</msg>
<status status="PASS" starttime="20210731 21:41:16.796" endtime="20210731 21:41:16.796"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:16.810" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:16.810" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:16.797" endtime="20210731 21:41:16.811"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Updated</arg>
<arg>status=SUCCESS</arg>
<status status="NOT RUN" starttime="20210731 21:41:16.811" endtime="20210731 21:41:16.811"/>
</kw>
<kw name="Verify System User's Data Updated In Database With Payload">
<arg>${system_user}</arg>
<arg>${payload}</arg>
<status status="NOT RUN" starttime="20210731 21:41:16.811" endtime="20210731 21:41:16.811"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:16.797" endtime="20210731 21:41:16.811"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:16.796" endtime="20210731 21:41:16.811"/>
</for>
<status status="FAIL" starttime="20210731 21:41:16.795" endtime="20210731 21:41:16.811"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:16.795" endtime="20210731 21:41:16.811"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:16.795" endtime="20210731 21:41:16.812"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:16.816" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:16.836" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:16.836" level="INFO">${pids} = 13131
13138
13140</msg>
<status status="PASS" starttime="20210731 21:41:16.812" endtime="20210731 21:41:16.836"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:16.837" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:16.836" endtime="20210731 21:41:16.837"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:16.838" level="INFO">${pids} = ['13131', '13138', '13140']</msg>
<status status="PASS" starttime="20210731 21:41:16.837" endtime="20210731 21:41:16.838"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13131</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:16.849" level="INFO">Running command 'kill 13131 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:16.838" endtime="20210731 21:41:16.849"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.838" endtime="20210731 21:41:16.850"/>
</iter>
<iter>
<var name="${pid}">13138</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:16.853" level="INFO">Running command 'kill 13138 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:16.850" endtime="20210731 21:41:16.855"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.850" endtime="20210731 21:41:16.855"/>
</iter>
<iter>
<var name="${pid}">13140</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:16.860" level="INFO">Running command 'kill 13140 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:16.856" endtime="20210731 21:41:16.860"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.855" endtime="20210731 21:41:16.861"/>
</iter>
<status status="PASS" starttime="20210731 21:41:16.838" endtime="20210731 21:41:16.861"/>
</for>
<status status="PASS" starttime="20210731 21:41:16.837" endtime="20210731 21:41:16.861"/>
</branch>
<status status="PASS" starttime="20210731 21:41:16.837" endtime="20210731 21:41:16.861"/>
</if>
<status status="PASS" starttime="20210731 21:41:16.812" endtime="20210731 21:41:16.861"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"lastname": "Cuzdan"
}
Note that firstname, lastname and phone are valid.
Then, each request should pass with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</tag>
<tag>REQ-API-LASTNAME-VALID</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-PHONE</tag>
<tag>REQ-API-NO-UNKNOWN-FIELD</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:41:15.200" endtime="20210731 21:41:16.861">We expected a JSON, but received text/html</status>
</test>
<test id="s1-s3-t140" name="All System Users With A Valid Token Can Update Phone Of All System Users With Valid Values">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:16.867" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:16.880" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:16.880" level="INFO">${pids} = 13169</msg>
<status status="PASS" starttime="20210731 21:41:16.864" endtime="20210731 21:41:16.880"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:16.881" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:16.880" endtime="20210731 21:41:16.881"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:16.882" level="INFO">${pids} = ['13169']</msg>
<status status="PASS" starttime="20210731 21:41:16.881" endtime="20210731 21:41:16.882"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13169</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:16.886" level="INFO">Running command 'kill 13169 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:16.882" endtime="20210731 21:41:16.886"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.882" endtime="20210731 21:41:16.886"/>
</iter>
<status status="PASS" starttime="20210731 21:41:16.882" endtime="20210731 21:41:16.886"/>
</for>
<status status="PASS" starttime="20210731 21:41:16.881" endtime="20210731 21:41:16.887"/>
</branch>
<status status="PASS" starttime="20210731 21:41:16.881" endtime="20210731 21:41:16.887"/>
</if>
<status status="PASS" starttime="20210731 21:41:16.863" endtime="20210731 21:41:16.887"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:16.888" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:16.888" endtime="20210731 21:41:16.888"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:16.889" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:16.889" endtime="20210731 21:41:16.889"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:16.890" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:16.889" endtime="20210731 21:41:16.890"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:16.890" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:16.890" endtime="20210731 21:41:16.890"/>
</kw>
<msg timestamp="20210731 21:41:16.891" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:16.888" endtime="20210731 21:41:16.891"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:16.899" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:16.891" endtime="20210731 21:41:16.901"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.887" endtime="20210731 21:41:16.902"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210731 21:41:16.903" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210731 21:41:16.902" endtime="20210731 21:41:16.908"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210731 21:41:18.410" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210731 21:41:16.909" endtime="20210731 21:41:18.410"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.902" endtime="20210731 21:41:18.410"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:18.411" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210731 21:41:18.411" endtime="20210731 21:41:18.411"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210731 21:41:18.412" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210731 21:41:18.412" endtime="20210731 21:41:18.412"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210731 21:41:18.412" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:18.412" endtime="20210731 21:41:18.412"/>
</kw>
<msg timestamp="20210731 21:41:18.413" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210731 21:41:18.411" endtime="20210731 21:41:18.413"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210731 21:41:18.413" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210731 21:41:18.413" endtime="20210731 21:41:18.413"/>
</kw>
<status status="PASS" starttime="20210731 21:41:18.410" endtime="20210731 21:41:18.414"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210731 21:41:18.414" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210731 21:41:18.414" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210731 21:41:18.414" endtime="20210731 21:41:18.414"/>
</kw>
<status status="PASS" starttime="20210731 21:41:18.414" endtime="20210731 21:41:18.415"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210731 21:41:18.415" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210731 21:41:18.415" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210731 21:41:18.415" endtime="20210731 21:41:18.415"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210731 21:41:18.416" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210731 21:41:18.416" endtime="20210731 21:41:18.416"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:18.417" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:18.416" endtime="20210731 21:41:18.417"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:18.417" endtime="20210731 21:41:18.418"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:18.418" endtime="20210731 21:41:18.418"/>
</kw>
<status status="PASS" starttime="20210731 21:41:18.416" endtime="20210731 21:41:18.418"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:18.419" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:18.418" endtime="20210731 21:41:18.419"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:18.419" endtime="20210731 21:41:18.420"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:18.420" endtime="20210731 21:41:18.420"/>
</kw>
<status status="PASS" starttime="20210731 21:41:18.418" endtime="20210731 21:41:18.420"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:18.421" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210731 21:41:18.420" endtime="20210731 21:41:18.421"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:18.421" endtime="20210731 21:41:18.422"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210731 21:41:18.422" endtime="20210731 21:41:18.422"/>
</kw>
<status status="PASS" starttime="20210731 21:41:18.420" endtime="20210731 21:41:18.422"/>
</iter>
<status status="PASS" starttime="20210731 21:41:18.416" endtime="20210731 21:41:18.422"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210731 21:41:18.423" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210731 21:41:18.422" endtime="20210731 21:41:18.423"/>
</kw>
<status status="PASS" starttime="20210731 21:41:18.415" endtime="20210731 21:41:18.423"/>
</kw>
<status status="PASS" starttime="20210731 21:41:16.863" endtime="20210731 21:41:18.423"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:18.423" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210731 21:41:18.423" endtime="20210731 21:41:18.424"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=+358406875453</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210731 21:41:18.424" endtime="20210731 21:41:18.424"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Update Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${payload}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210731 21:41:18.426" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210731 21:41:18.426" endtime="20210731 21:41:18.426"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${payload}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20210731 21:41:18.427" level="INFO">{'phone': '+358406875453'}</msg>
<status status="PASS" starttime="20210731 21:41:18.426" endtime="20210731 21:41:18.427"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210731 21:41:18.438" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210731 21:41:18.438" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210731 21:41:18.427" endtime="20210731 21:41:18.438"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Updated</arg>
<arg>status=SUCCESS</arg>
<status status="NOT RUN" starttime="20210731 21:41:18.438" endtime="20210731 21:41:18.439"/>
</kw>
<kw name="Verify System User's Data Updated In Database With Payload">
<arg>${system_user}</arg>
<arg>${payload}</arg>
<status status="NOT RUN" starttime="20210731 21:41:18.439" endtime="20210731 21:41:18.439"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:18.427" endtime="20210731 21:41:18.439"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:18.427" endtime="20210731 21:41:18.439"/>
</for>
<status status="FAIL" starttime="20210731 21:41:18.425" endtime="20210731 21:41:18.439"/>
</kw>
<status status="FAIL" starttime="20210731 21:41:18.425" endtime="20210731 21:41:18.439"/>
</iter>
<status status="FAIL" starttime="20210731 21:41:18.424" endtime="20210731 21:41:18.439"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210731 21:41:18.444" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210731 21:41:18.459" level="INFO">${rc} = 0</msg>
<msg timestamp="20210731 21:41:18.459" level="INFO">${pids} = 13192
13199
13202</msg>
<status status="PASS" starttime="20210731 21:41:18.440" endtime="20210731 21:41:18.459"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:18.460" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210731 21:41:18.459" endtime="20210731 21:41:18.460"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210731 21:41:18.461" level="INFO">${pids} = ['13192', '13199', '13202']</msg>
<status status="PASS" starttime="20210731 21:41:18.460" endtime="20210731 21:41:18.461"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">13192</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:18.469" level="INFO">Running command 'kill 13192 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:18.461" endtime="20210731 21:41:18.470"/>
</kw>
<status status="PASS" starttime="20210731 21:41:18.461" endtime="20210731 21:41:18.470"/>
</iter>
<iter>
<var name="${pid}">13199</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:18.474" level="INFO">Running command 'kill 13199 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:18.471" endtime="20210731 21:41:18.475"/>
</kw>
<status status="PASS" starttime="20210731 21:41:18.470" endtime="20210731 21:41:18.475"/>
</iter>
<iter>
<var name="${pid}">13202</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210731 21:41:18.480" level="INFO">Running command 'kill 13202 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210731 21:41:18.476" endtime="20210731 21:41:18.480"/>
</kw>
<status status="PASS" starttime="20210731 21:41:18.475" endtime="20210731 21:41:18.480"/>
</iter>
<status status="PASS" starttime="20210731 21:41:18.461" endtime="20210731 21:41:18.481"/>
</for>
<status status="PASS" starttime="20210731 21:41:18.460" endtime="20210731 21:41:18.481"/>
</branch>
<status status="PASS" starttime="20210731 21:41:18.460" endtime="20210731 21:41:18.481"/>
</if>
<status status="PASS" starttime="20210731 21:41:18.440" endtime="20210731 21:41:18.481"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"phone": '+358406875453'
}
Note that phone is valid.
Then, each request should pass with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that &lt;username&gt;'s data in the database has changed.</doc>
<tag>REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</tag>
<tag>REQ-API-NO-FIRSTNAME</tag>
<tag>REQ-API-NO-LASTNAME</tag>
<tag>REQ-API-NO-UNKNOWN-FIELD</tag>
<tag>REQ-API-PHONE-VALID</tag>
<tag>REQ-API-REQUEST-BODY-JSON</tag>
<tag>REQ-API-VALID-TOKEN</tag>
<tag>REQ-API-VALID-USERNAME-IN-URL</tag>
<status status="FAIL" starttime="20210731 21:41:16.862" endtime="20210731 21:41:18.481">We expected a JSON, but received text/html</status>
</test>
<doc>This test suite contains test cases for CRF Demo API.
Documentation for the API can be found:
https://github.com/Interview-demoapp/Flasky
The acceptance criteria we verify here is
"3: As an API Consumer, if authenticated, I can update personal information of users"
Definitions
(1) System User: The user, who is registered to the system under test with a valid token
(2) API User: The user, who calls the API to update personal information of the system user</doc>
<status status="FAIL" starttime="20210731 21:37:25.838" endtime="20210731 21:41:18.490"/>
</suite>
<status status="FAIL" starttime="20210731 21:37:21.279" endtime="20210731 21:41:18.519"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="143" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="11" skip="0">REQ-API-CAN-UPDATE-SUPPORTED-FIELDS</stat>
<stat pass="0" fail="8" skip="0">REQ-API-FIRSTNAME-NOT-VALID</stat>
<stat pass="0" fail="10" skip="0">REQ-API-FIRSTNAME-VALID</stat>
<stat pass="0" fail="8" skip="0">REQ-API-LASTNAME-NOT-VALID</stat>
<stat pass="0" fail="10" skip="0">REQ-API-LASTNAME-VALID</stat>
<stat pass="0" fail="24" skip="0">REQ-API-NO-FIRSTNAME</stat>
<stat pass="0" fail="16" skip="0">REQ-API-NO-LASTNAME</stat>
<stat pass="0" fail="7" skip="0">REQ-API-NO-PHONE</stat>
<stat pass="0" fail="7" skip="0">REQ-API-NO-UNKNOWN-FIELD</stat>
<stat pass="0" fail="55" skip="0">REQ-API-PASSWORD-CANNOT-BE-UPDATED</stat>
<stat pass="0" fail="7" skip="0">REQ-API-PHONE-NOT-VALID</stat>
<stat pass="0" fail="8" skip="0">REQ-API-PHONE-VALID</stat>
<stat pass="0" fail="140" skip="0">REQ-API-REQUEST-BODY-JSON</stat>
<stat pass="0" fail="2" skip="0">REQ-API-UNKNOWN-FIELD(S)</stat>
<stat pass="0" fail="43" skip="0">REQ-API-USERNAME-CANNOT-BE-UPDATED</stat>
<stat pass="0" fail="140" skip="0">REQ-API-VALID-TOKEN</stat>
<stat pass="0" fail="140" skip="0">REQ-API-VALID-USERNAME-IN-URL</stat>
</tag>
<suite>
<stat pass="4" fail="143" skip="0" id="s1" name="API">API</stat>
<stat pass="1" fail="2" skip="0" id="s1-s1" name="1-Reviewing-Users">API.1-Reviewing-Users</stat>
<stat pass="3" fail="1" skip="0" id="s1-s2" name="2-Getting-Personal-Information">API.2-Getting-Personal-Information</stat>
<stat pass="0" fail="140" skip="0" id="s1-s3" name="3-Updating-Personal-Information">API.3-Updating-Personal-Information</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20210731 21:37:25.708" level="ERROR">HTTP error occurred: 500 Server Error: INTERNAL SERVER ERROR for url: http://0.0.0.0:8080/api/users/non-existing-user</msg>
<msg timestamp="20210731 21:37:25.718" level="ERROR">HTTP error occurred: 500 Server Error: INTERNAL SERVER ERROR for url: http://0.0.0.0:8080/api/users/non-existing-user</msg>
<msg timestamp="20210731 21:37:25.732" level="ERROR">HTTP error occurred: 500 Server Error: INTERNAL SERVER ERROR for url: http://0.0.0.0:8080/api/users/non-existing-user</msg>
<msg timestamp="20210731 21:38:44.513" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFG Results In "Field update not allowed"' executed in test suite 'API.3-Updating-Personal-Information'.</msg>
<msg timestamp="20210731 21:38:46.211" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFGH Results In "Field update not allowed"' executed in test suite 'API.3-Updating-Personal-Information'.</msg>
<msg timestamp="20210731 21:38:47.898" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFGHJKLMNPRSTOÖUÜVYZ Results In "Field update not allowed"' executed in test suite 'API.3-Updating-Personal-Information'.</msg>
<msg timestamp="20210731 21:39:14.610" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD012 Results In "Field update not allowed"' executed in test suite 'API.3-Updating-Personal-Information'.</msg>
<msg timestamp="20210731 21:39:16.301" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD0123 Results In "Field update not allowed"' executed in test suite 'API.3-Updating-Personal-Information'.</msg>
<msg timestamp="20210731 21:39:19.699" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD!?. Results In "Field update not allowed"' executed in test suite 'API.3-Updating-Personal-Information'.</msg>
</errors>
</robot>
