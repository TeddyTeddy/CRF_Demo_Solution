<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0.3 (Python 3.7.4 on linux)" generated="20210730 17:40:20.121" rpa="false" schemaversion="2">
<suite id="s1" name="3-Updating-Personal-Information" source="/home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/Tests/API/3-Updating-Personal-Information.robot">
<kw name="Import DataManager" library="Common" type="SETUP">
<kw name="Convert Suite Variables To Correct Types" library="Common">
<doc>This keyword is needed because parameters passed by command line
to robot (i.e. -v variable_name:value) are of string types.
In run command we pass 2 parameters to robot:
robot -d Results/ -v DATA_SET_LENGTH:100 -v USE_EXISTING_FORM_DATA_SET:True -v BROWSER:chromium -P CustomLibs Tests/
So, we have the following variables passed as strings:
- DATA_SET_LENGTH:100
- USE_EXISTING_FORM_DATA_SET:True
We need to convert:
- DATA_SET_LENGTH to int (i.e. integer)
- USE_EXISTING_FORM_DATA_SET to bool (i.e. boolean)
Later these values will be used while loading DataManager.robot resource.</doc>
<kw name="Evaluate" library="BuiltIn">
<var>${DATA_SET_LENGTH}</var>
<arg>int($DATA_SET_LENGTH)</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:20.673" level="INFO">${DATA_SET_LENGTH} = 100</msg>
<status status="PASS" starttime="20210730 17:40:20.670" endtime="20210730 17:40:20.673"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${USE_EXISTING_FORM_DATA_SET}</var>
<arg>$USE_EXISTING_FORM_DATA_SET=='True'</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:20.674" level="INFO">${USE_EXISTING_FORM_DATA_SET} = True</msg>
<status status="PASS" starttime="20210730 17:40:20.673" endtime="20210730 17:40:20.674"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${DATA_SET_LENGTH}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:20.674" level="INFO">${DATA_SET_LENGTH} = 100</msg>
<status status="PASS" starttime="20210730 17:40:20.674" endtime="20210730 17:40:20.674"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${USE_EXISTING_FORM_DATA_SET}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:20.675" level="INFO">${USE_EXISTING_FORM_DATA_SET} = True</msg>
<status status="PASS" starttime="20210730 17:40:20.674" endtime="20210730 17:40:20.675"/>
</kw>
<status status="PASS" starttime="20210730 17:40:20.670" endtime="20210730 17:40:20.675"/>
</kw>
<kw name="Import Resource" library="BuiltIn">
<arg>${EXECDIR}${/}Resources${/}DataManager.robot</arg>
<doc>Imports a resource file with the given path.</doc>
<status status="PASS" starttime="20210730 17:40:20.675" endtime="20210730 17:40:20.682"/>
</kw>
<status status="PASS" starttime="20210730 17:40:20.669" endtime="20210730 17:40:20.682"/>
</kw>
<test id="s1-t1" name="With Each Valid Token, Updating Username Of Each System User With '' Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:20.687" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:20.697" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:20.697" level="INFO">${pids} = 18813</msg>
<status status="PASS" starttime="20210730 17:40:20.684" endtime="20210730 17:40:20.697"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:20.698" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:20.697" endtime="20210730 17:40:20.698"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:20.698" level="INFO">${pids} = ['18813']</msg>
<status status="PASS" starttime="20210730 17:40:20.698" endtime="20210730 17:40:20.699"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18813</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:20.702" level="INFO">Running command 'kill 18813 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:20.699" endtime="20210730 17:40:20.702"/>
</kw>
<status status="PASS" starttime="20210730 17:40:20.699" endtime="20210730 17:40:20.702"/>
</iter>
<status status="PASS" starttime="20210730 17:40:20.699" endtime="20210730 17:40:20.702"/>
</for>
<status status="PASS" starttime="20210730 17:40:20.698" endtime="20210730 17:40:20.702"/>
</branch>
<status status="PASS" starttime="20210730 17:40:20.698" endtime="20210730 17:40:20.702"/>
</if>
<status status="PASS" starttime="20210730 17:40:20.683" endtime="20210730 17:40:20.702"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:20.703" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:20.703" endtime="20210730 17:40:20.703"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:20.704" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:20.703" endtime="20210730 17:40:20.704"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:20.704" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:20.704" endtime="20210730 17:40:20.704"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:20.704" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:20.704" endtime="20210730 17:40:20.704"/>
</kw>
<msg timestamp="20210730 17:40:20.705" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:20.703" endtime="20210730 17:40:20.705"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:20.707" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:20.705" endtime="20210730 17:40:20.709"/>
</kw>
<status status="PASS" starttime="20210730 17:40:20.702" endtime="20210730 17:40:20.709"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:20.711" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:20.710" endtime="20210730 17:40:20.717"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:22.224" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:20.717" endtime="20210730 17:40:22.224"/>
</kw>
<status status="PASS" starttime="20210730 17:40:20.709" endtime="20210730 17:40:22.225"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:22.228" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:22.227" endtime="20210730 17:40:22.228"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:22.228" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:22.228" endtime="20210730 17:40:22.228"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:22.229" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:22.228" endtime="20210730 17:40:22.229"/>
</kw>
<msg timestamp="20210730 17:40:22.229" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:22.226" endtime="20210730 17:40:22.229"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:22.231" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:22.229" endtime="20210730 17:40:22.231"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.225" endtime="20210730 17:40:22.231"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:22.232" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:22.232" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:22.232" endtime="20210730 17:40:22.232"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.231" endtime="20210730 17:40:22.232"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:22.232" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:22.233" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:22.232" endtime="20210730 17:40:22.233"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:22.233" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:22.233" endtime="20210730 17:40:22.233"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:22.234" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:22.233" endtime="20210730 17:40:22.234"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:22.234" endtime="20210730 17:40:22.235"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:22.235" endtime="20210730 17:40:22.235"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.233" endtime="20210730 17:40:22.235"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:22.236" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:22.236" endtime="20210730 17:40:22.236"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:22.236" endtime="20210730 17:40:22.237"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:22.237" endtime="20210730 17:40:22.237"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.236" endtime="20210730 17:40:22.237"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:22.238" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:22.237" endtime="20210730 17:40:22.238"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:22.238" endtime="20210730 17:40:22.239"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:22.239" endtime="20210730 17:40:22.239"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.237" endtime="20210730 17:40:22.239"/>
</iter>
<status status="PASS" starttime="20210730 17:40:22.233" endtime="20210730 17:40:22.239"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:22.240" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:22.239" endtime="20210730 17:40:22.240"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.232" endtime="20210730 17:40:22.240"/>
</kw>
<status status="PASS" starttime="20210730 17:40:20.683" endtime="20210730 17:40:22.240"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:22.241" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:22.241" endtime="20210730 17:40:22.241"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:22.242" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210730 17:40:22.241" endtime="20210730 17:40:22.242"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:22.251" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:22.252" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:22.242" endtime="20210730 17:40:22.252"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:22.252" endtime="20210730 17:40:22.252"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:22.252" endtime="20210730 17:40:22.252"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:22.242" endtime="20210730 17:40:22.252"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:22.242" endtime="20210730 17:40:22.252"/>
</for>
<status status="FAIL" starttime="20210730 17:40:22.240" endtime="20210730 17:40:22.253"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:22.240" endtime="20210730 17:40:22.253"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:22.254" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:22.254" endtime="20210730 17:40:22.254"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:22.255" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210730 17:40:22.254" endtime="20210730 17:40:22.255"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:22.259" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:22.259" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:22.255" endtime="20210730 17:40:22.259"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:22.259" endtime="20210730 17:40:22.259"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:22.259" endtime="20210730 17:40:22.259"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:22.255" endtime="20210730 17:40:22.259"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:22.255" endtime="20210730 17:40:22.259"/>
</for>
<status status="FAIL" starttime="20210730 17:40:22.253" endtime="20210730 17:40:22.260"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:22.253" endtime="20210730 17:40:22.260"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:22.261" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:22.261" endtime="20210730 17:40:22.261"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:22.261" level="INFO">${payload} = {'username': ''}</msg>
<status status="PASS" starttime="20210730 17:40:22.261" endtime="20210730 17:40:22.261"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:22.265" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:22.266" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:22.262" endtime="20210730 17:40:22.266"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:22.266" endtime="20210730 17:40:22.266"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:22.266" endtime="20210730 17:40:22.266"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:22.262" endtime="20210730 17:40:22.266"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:22.261" endtime="20210730 17:40:22.266"/>
</for>
<status status="FAIL" starttime="20210730 17:40:22.260" endtime="20210730 17:40:22.266"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:22.260" endtime="20210730 17:40:22.266"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:22.240" endtime="20210730 17:40:22.266"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:22.270" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:22.279" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:22.279" level="INFO">${pids} = 18836
18843
18849</msg>
<status status="PASS" starttime="20210730 17:40:22.267" endtime="20210730 17:40:22.279"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:22.280" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:22.280" endtime="20210730 17:40:22.280"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:22.281" level="INFO">${pids} = ['18836', '18843', '18849']</msg>
<status status="PASS" starttime="20210730 17:40:22.280" endtime="20210730 17:40:22.281"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18836</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:22.284" level="INFO">Running command 'kill 18836 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:22.281" endtime="20210730 17:40:22.284"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.281" endtime="20210730 17:40:22.284"/>
</iter>
<iter>
<var name="${pid}">18843</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:22.287" level="INFO">Running command 'kill 18843 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:22.285" endtime="20210730 17:40:22.287"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.284" endtime="20210730 17:40:22.287"/>
</iter>
<iter>
<var name="${pid}">18849</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:22.291" level="INFO">Running command 'kill 18849 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:22.288" endtime="20210730 17:40:22.292"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.288" endtime="20210730 17:40:22.292"/>
</iter>
<status status="PASS" starttime="20210730 17:40:22.281" endtime="20210730 17:40:22.292"/>
</for>
<status status="PASS" starttime="20210730 17:40:22.280" endtime="20210730 17:40:22.292"/>
</branch>
<status status="PASS" starttime="20210730 17:40:22.280" endtime="20210730 17:40:22.292"/>
</if>
<status status="PASS" starttime="20210730 17:40:22.266" endtime="20210730 17:40:22.292"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
username as such:
{
"username": ''
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:20.682" endtime="20210730 17:40:22.292">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t2" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤% Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:22.303" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:22.317" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:22.317" level="INFO">${pids} = 18878</msg>
<status status="PASS" starttime="20210730 17:40:22.294" endtime="20210730 17:40:22.317"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:22.318" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:22.317" endtime="20210730 17:40:22.318"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:22.319" level="INFO">${pids} = ['18878']</msg>
<status status="PASS" starttime="20210730 17:40:22.318" endtime="20210730 17:40:22.319"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18878</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:22.323" level="INFO">Running command 'kill 18878 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:22.319" endtime="20210730 17:40:22.323"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.319" endtime="20210730 17:40:22.324"/>
</iter>
<status status="PASS" starttime="20210730 17:40:22.319" endtime="20210730 17:40:22.324"/>
</for>
<status status="PASS" starttime="20210730 17:40:22.318" endtime="20210730 17:40:22.324"/>
</branch>
<status status="PASS" starttime="20210730 17:40:22.318" endtime="20210730 17:40:22.324"/>
</if>
<status status="PASS" starttime="20210730 17:40:22.294" endtime="20210730 17:40:22.324"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:22.325" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:22.324" endtime="20210730 17:40:22.325"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:22.325" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:22.325" endtime="20210730 17:40:22.325"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:22.326" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:22.326" endtime="20210730 17:40:22.326"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:22.326" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:22.326" endtime="20210730 17:40:22.326"/>
</kw>
<msg timestamp="20210730 17:40:22.326" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:22.325" endtime="20210730 17:40:22.326"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:22.329" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:22.326" endtime="20210730 17:40:22.330"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.324" endtime="20210730 17:40:22.330"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:22.331" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:22.331" endtime="20210730 17:40:22.335"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:23.840" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:22.335" endtime="20210730 17:40:23.841"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.331" endtime="20210730 17:40:23.842"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:23.845" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:23.845" endtime="20210730 17:40:23.845"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:23.845" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:23.845" endtime="20210730 17:40:23.845"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:23.846" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:23.845" endtime="20210730 17:40:23.846"/>
</kw>
<msg timestamp="20210730 17:40:23.846" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:23.844" endtime="20210730 17:40:23.846"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:23.847" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:23.846" endtime="20210730 17:40:23.847"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.843" endtime="20210730 17:40:23.847"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:23.848" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:23.848" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:23.848" endtime="20210730 17:40:23.848"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.848" endtime="20210730 17:40:23.848"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:23.849" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:23.849" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:23.849" endtime="20210730 17:40:23.849"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:23.849" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:23.849" endtime="20210730 17:40:23.849"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:23.850" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:23.850" endtime="20210730 17:40:23.850"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:23.850" endtime="20210730 17:40:23.851"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:23.851" endtime="20210730 17:40:23.851"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.850" endtime="20210730 17:40:23.851"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:23.852" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:23.852" endtime="20210730 17:40:23.852"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:23.852" endtime="20210730 17:40:23.853"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:23.853" endtime="20210730 17:40:23.853"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.852" endtime="20210730 17:40:23.853"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:23.853" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:23.853" endtime="20210730 17:40:23.853"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:23.853" endtime="20210730 17:40:23.854"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:23.854" endtime="20210730 17:40:23.854"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.853" endtime="20210730 17:40:23.854"/>
</iter>
<status status="PASS" starttime="20210730 17:40:23.849" endtime="20210730 17:40:23.855"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:23.855" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:23.855" endtime="20210730 17:40:23.855"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.848" endtime="20210730 17:40:23.855"/>
</kw>
<status status="PASS" starttime="20210730 17:40:22.294" endtime="20210730 17:40:23.855"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:23.856" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:23.856" endtime="20210730 17:40:23.856"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:23.857" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 17:40:23.856" endtime="20210730 17:40:23.857"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:23.866" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:23.866" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:23.857" endtime="20210730 17:40:23.866"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:23.866" endtime="20210730 17:40:23.866"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:23.867" endtime="20210730 17:40:23.867"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:23.857" endtime="20210730 17:40:23.867"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:23.857" endtime="20210730 17:40:23.867"/>
</for>
<status status="FAIL" starttime="20210730 17:40:23.856" endtime="20210730 17:40:23.867"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:23.855" endtime="20210730 17:40:23.867"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:23.868" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:23.868" endtime="20210730 17:40:23.868"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:23.868" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 17:40:23.868" endtime="20210730 17:40:23.868"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:23.873" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:23.873" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:23.869" endtime="20210730 17:40:23.873"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:23.873" endtime="20210730 17:40:23.873"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:23.873" endtime="20210730 17:40:23.873"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:23.869" endtime="20210730 17:40:23.873"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:23.868" endtime="20210730 17:40:23.873"/>
</for>
<status status="FAIL" starttime="20210730 17:40:23.867" endtime="20210730 17:40:23.873"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:23.867" endtime="20210730 17:40:23.873"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:23.875" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:23.874" endtime="20210730 17:40:23.875"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:23.875" level="INFO">${payload} = {'username': '!#%&amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 17:40:23.875" endtime="20210730 17:40:23.875"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:23.878" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:23.879" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:23.875" endtime="20210730 17:40:23.879"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:23.879" endtime="20210730 17:40:23.879"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:23.879" endtime="20210730 17:40:23.879"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:23.875" endtime="20210730 17:40:23.879"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:23.875" endtime="20210730 17:40:23.879"/>
</for>
<status status="FAIL" starttime="20210730 17:40:23.874" endtime="20210730 17:40:23.879"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:23.874" endtime="20210730 17:40:23.879"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:23.855" endtime="20210730 17:40:23.879"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:23.889" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:23.897" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:23.897" level="INFO">${pids} = 18901
18908
18915</msg>
<status status="PASS" starttime="20210730 17:40:23.880" endtime="20210730 17:40:23.897"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:23.898" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:23.897" endtime="20210730 17:40:23.898"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:23.899" level="INFO">${pids} = ['18901', '18908', '18915']</msg>
<status status="PASS" starttime="20210730 17:40:23.899" endtime="20210730 17:40:23.899"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18901</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:23.902" level="INFO">Running command 'kill 18901 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:23.899" endtime="20210730 17:40:23.903"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.899" endtime="20210730 17:40:23.903"/>
</iter>
<iter>
<var name="${pid}">18908</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:23.906" level="INFO">Running command 'kill 18908 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:23.903" endtime="20210730 17:40:23.907"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.903" endtime="20210730 17:40:23.907"/>
</iter>
<iter>
<var name="${pid}">18915</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:23.910" level="INFO">Running command 'kill 18915 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:23.907" endtime="20210730 17:40:23.910"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.907" endtime="20210730 17:40:23.910"/>
</iter>
<status status="PASS" starttime="20210730 17:40:23.899" endtime="20210730 17:40:23.910"/>
</for>
<status status="PASS" starttime="20210730 17:40:23.898" endtime="20210730 17:40:23.910"/>
</branch>
<status status="PASS" starttime="20210730 17:40:23.898" endtime="20210730 17:40:23.910"/>
</if>
<status status="PASS" starttime="20210730 17:40:23.879" endtime="20210730 17:40:23.910"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:22.293" endtime="20210730 17:40:23.911">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t3" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%= Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:23.918" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:23.927" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:23.927" level="INFO">${pids} = 18944</msg>
<status status="PASS" starttime="20210730 17:40:23.912" endtime="20210730 17:40:23.927"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:23.928" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:23.927" endtime="20210730 17:40:23.928"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:23.928" level="INFO">${pids} = ['18944']</msg>
<status status="PASS" starttime="20210730 17:40:23.928" endtime="20210730 17:40:23.928"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18944</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:23.931" level="INFO">Running command 'kill 18944 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:23.928" endtime="20210730 17:40:23.931"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.928" endtime="20210730 17:40:23.931"/>
</iter>
<status status="PASS" starttime="20210730 17:40:23.928" endtime="20210730 17:40:23.931"/>
</for>
<status status="PASS" starttime="20210730 17:40:23.928" endtime="20210730 17:40:23.931"/>
</branch>
<status status="PASS" starttime="20210730 17:40:23.928" endtime="20210730 17:40:23.931"/>
</if>
<status status="PASS" starttime="20210730 17:40:23.912" endtime="20210730 17:40:23.932"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:23.933" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:23.933" endtime="20210730 17:40:23.933"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:23.934" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:23.933" endtime="20210730 17:40:23.934"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:23.934" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:23.934" endtime="20210730 17:40:23.934"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:23.935" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:23.934" endtime="20210730 17:40:23.935"/>
</kw>
<msg timestamp="20210730 17:40:23.935" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:23.933" endtime="20210730 17:40:23.935"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:23.941" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:23.935" endtime="20210730 17:40:23.942"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.932" endtime="20210730 17:40:23.942"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:23.944" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:23.943" endtime="20210730 17:40:23.948"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:25.459" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:23.948" endtime="20210730 17:40:25.459"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.943" endtime="20210730 17:40:25.460"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:25.463" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:25.462" endtime="20210730 17:40:25.463"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:25.464" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:25.463" endtime="20210730 17:40:25.464"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:25.464" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:25.464" endtime="20210730 17:40:25.464"/>
</kw>
<msg timestamp="20210730 17:40:25.465" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:25.461" endtime="20210730 17:40:25.465"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:25.466" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:25.465" endtime="20210730 17:40:25.466"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.460" endtime="20210730 17:40:25.466"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:25.467" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:25.467" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:25.467" endtime="20210730 17:40:25.467"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.466" endtime="20210730 17:40:25.467"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:25.467" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:25.468" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:25.467" endtime="20210730 17:40:25.468"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:25.468" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:25.468" endtime="20210730 17:40:25.468"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:25.468" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:25.468" endtime="20210730 17:40:25.468"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:25.468" endtime="20210730 17:40:25.469"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:25.469" endtime="20210730 17:40:25.469"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.468" endtime="20210730 17:40:25.469"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:25.470" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:25.470" endtime="20210730 17:40:25.470"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:25.470" endtime="20210730 17:40:25.471"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:25.471" endtime="20210730 17:40:25.471"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.470" endtime="20210730 17:40:25.471"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:25.472" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:25.472" endtime="20210730 17:40:25.472"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:25.472" endtime="20210730 17:40:25.472"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:25.473" endtime="20210730 17:40:25.473"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.471" endtime="20210730 17:40:25.473"/>
</iter>
<status status="PASS" starttime="20210730 17:40:25.468" endtime="20210730 17:40:25.473"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:25.473" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:25.473" endtime="20210730 17:40:25.473"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.467" endtime="20210730 17:40:25.473"/>
</kw>
<status status="PASS" starttime="20210730 17:40:23.912" endtime="20210730 17:40:25.474"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:25.475" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:25.474" endtime="20210730 17:40:25.475"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:25.475" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210730 17:40:25.475" endtime="20210730 17:40:25.475"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:25.483" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:25.484" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:25.475" endtime="20210730 17:40:25.485"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:25.485" endtime="20210730 17:40:25.485"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:25.485" endtime="20210730 17:40:25.485"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:25.475" endtime="20210730 17:40:25.485"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:25.475" endtime="20210730 17:40:25.485"/>
</for>
<status status="FAIL" starttime="20210730 17:40:25.474" endtime="20210730 17:40:25.485"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:25.474" endtime="20210730 17:40:25.485"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:25.486" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:25.486" endtime="20210730 17:40:25.486"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:25.487" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210730 17:40:25.486" endtime="20210730 17:40:25.487"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:25.491" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:25.491" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:25.487" endtime="20210730 17:40:25.491"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:25.491" endtime="20210730 17:40:25.491"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:25.492" endtime="20210730 17:40:25.492"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:25.487" endtime="20210730 17:40:25.492"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:25.487" endtime="20210730 17:40:25.492"/>
</for>
<status status="FAIL" starttime="20210730 17:40:25.485" endtime="20210730 17:40:25.492"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:25.485" endtime="20210730 17:40:25.492"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:25.493" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:25.493" endtime="20210730 17:40:25.493"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:25.493" level="INFO">${payload} = {'username': '!#%&amp;/¤%='}</msg>
<status status="PASS" starttime="20210730 17:40:25.493" endtime="20210730 17:40:25.493"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:25.497" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:25.497" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:25.494" endtime="20210730 17:40:25.497"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:25.497" endtime="20210730 17:40:25.497"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:25.497" endtime="20210730 17:40:25.497"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:25.494" endtime="20210730 17:40:25.498"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:25.494" endtime="20210730 17:40:25.498"/>
</for>
<status status="FAIL" starttime="20210730 17:40:25.492" endtime="20210730 17:40:25.498"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:25.492" endtime="20210730 17:40:25.498"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:25.474" endtime="20210730 17:40:25.498"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:25.503" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:25.511" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:25.511" level="INFO">${pids} = 18967
18974
18978</msg>
<status status="PASS" starttime="20210730 17:40:25.498" endtime="20210730 17:40:25.511"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:25.512" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:25.512" endtime="20210730 17:40:25.512"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:25.513" level="INFO">${pids} = ['18967', '18974', '18978']</msg>
<status status="PASS" starttime="20210730 17:40:25.513" endtime="20210730 17:40:25.513"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">18967</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:25.516" level="INFO">Running command 'kill 18967 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:25.513" endtime="20210730 17:40:25.516"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.513" endtime="20210730 17:40:25.516"/>
</iter>
<iter>
<var name="${pid}">18974</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:25.519" level="INFO">Running command 'kill 18974 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:25.517" endtime="20210730 17:40:25.521"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.516" endtime="20210730 17:40:25.522"/>
</iter>
<iter>
<var name="${pid}">18978</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:25.525" level="INFO">Running command 'kill 18978 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:25.522" endtime="20210730 17:40:25.525"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.522" endtime="20210730 17:40:25.525"/>
</iter>
<status status="PASS" starttime="20210730 17:40:25.513" endtime="20210730 17:40:25.525"/>
</for>
<status status="PASS" starttime="20210730 17:40:25.513" endtime="20210730 17:40:25.525"/>
</branch>
<status status="PASS" starttime="20210730 17:40:25.512" endtime="20210730 17:40:25.525"/>
</if>
<status status="PASS" starttime="20210730 17:40:25.498" endtime="20210730 17:40:25.525"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%='
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:23.911" endtime="20210730 17:40:25.526">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t4" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%=!()=? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:25.530" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:25.539" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:25.539" level="INFO">${pids} = 19007</msg>
<status status="PASS" starttime="20210730 17:40:25.527" endtime="20210730 17:40:25.539"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:25.540" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:25.540" endtime="20210730 17:40:25.540"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:25.541" level="INFO">${pids} = ['19007']</msg>
<status status="PASS" starttime="20210730 17:40:25.541" endtime="20210730 17:40:25.541"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19007</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:25.544" level="INFO">Running command 'kill 19007 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:25.541" endtime="20210730 17:40:25.544"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.541" endtime="20210730 17:40:25.544"/>
</iter>
<status status="PASS" starttime="20210730 17:40:25.541" endtime="20210730 17:40:25.544"/>
</for>
<status status="PASS" starttime="20210730 17:40:25.541" endtime="20210730 17:40:25.544"/>
</branch>
<status status="PASS" starttime="20210730 17:40:25.540" endtime="20210730 17:40:25.544"/>
</if>
<status status="PASS" starttime="20210730 17:40:25.527" endtime="20210730 17:40:25.545"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:25.546" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:25.545" endtime="20210730 17:40:25.546"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:25.546" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:25.546" endtime="20210730 17:40:25.546"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:25.546" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:25.546" endtime="20210730 17:40:25.547"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:25.547" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:25.547" endtime="20210730 17:40:25.547"/>
</kw>
<msg timestamp="20210730 17:40:25.547" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:25.546" endtime="20210730 17:40:25.547"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:25.551" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:25.547" endtime="20210730 17:40:25.553"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.545" endtime="20210730 17:40:25.554"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:25.555" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:25.555" endtime="20210730 17:40:25.559"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:27.067" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:25.559" endtime="20210730 17:40:27.068"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.554" endtime="20210730 17:40:27.068"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:27.069" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:27.069" endtime="20210730 17:40:27.069"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:27.070" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:27.070" endtime="20210730 17:40:27.070"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:27.070" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:27.070" endtime="20210730 17:40:27.070"/>
</kw>
<msg timestamp="20210730 17:40:27.071" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:27.069" endtime="20210730 17:40:27.071"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:27.071" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:27.071" endtime="20210730 17:40:27.072"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.068" endtime="20210730 17:40:27.072"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:27.073" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:27.073" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:27.072" endtime="20210730 17:40:27.073"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.072" endtime="20210730 17:40:27.073"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:27.073" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:27.074" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:27.073" endtime="20210730 17:40:27.074"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:27.074" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:27.074" endtime="20210730 17:40:27.074"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:27.074" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:27.074" endtime="20210730 17:40:27.075"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:27.075" endtime="20210730 17:40:27.075"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:27.075" endtime="20210730 17:40:27.076"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.074" endtime="20210730 17:40:27.076"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:27.076" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:27.076" endtime="20210730 17:40:27.076"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:27.076" endtime="20210730 17:40:27.077"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:27.077" endtime="20210730 17:40:27.077"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.076" endtime="20210730 17:40:27.077"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:27.077" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:27.077" endtime="20210730 17:40:27.077"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:27.077" endtime="20210730 17:40:27.078"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:27.078" endtime="20210730 17:40:27.078"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.077" endtime="20210730 17:40:27.078"/>
</iter>
<status status="PASS" starttime="20210730 17:40:27.074" endtime="20210730 17:40:27.078"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:27.079" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:27.079" endtime="20210730 17:40:27.079"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.073" endtime="20210730 17:40:27.079"/>
</kw>
<status status="PASS" starttime="20210730 17:40:25.527" endtime="20210730 17:40:27.079"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:27.080" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:27.080" endtime="20210730 17:40:27.080"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:27.080" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210730 17:40:27.080" endtime="20210730 17:40:27.081"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:27.089" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:27.089" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:27.081" endtime="20210730 17:40:27.090"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:27.090" endtime="20210730 17:40:27.090"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:27.090" endtime="20210730 17:40:27.090"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:27.081" endtime="20210730 17:40:27.090"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:27.081" endtime="20210730 17:40:27.090"/>
</for>
<status status="FAIL" starttime="20210730 17:40:27.079" endtime="20210730 17:40:27.090"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:27.079" endtime="20210730 17:40:27.090"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:27.091" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:27.091" endtime="20210730 17:40:27.091"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:27.092" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210730 17:40:27.092" endtime="20210730 17:40:27.092"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:27.096" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:27.096" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:27.092" endtime="20210730 17:40:27.097"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:27.097" endtime="20210730 17:40:27.097"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:27.097" endtime="20210730 17:40:27.097"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:27.092" endtime="20210730 17:40:27.097"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:27.092" endtime="20210730 17:40:27.097"/>
</for>
<status status="FAIL" starttime="20210730 17:40:27.091" endtime="20210730 17:40:27.097"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:27.090" endtime="20210730 17:40:27.097"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%=!()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:27.098" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:27.098" endtime="20210730 17:40:27.098"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:27.098" level="INFO">${payload} = {'username': '!#%&amp;/¤%=!()=?'}</msg>
<status status="PASS" starttime="20210730 17:40:27.098" endtime="20210730 17:40:27.098"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:27.102" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:27.102" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:27.099" endtime="20210730 17:40:27.102"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:27.102" endtime="20210730 17:40:27.102"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:27.102" endtime="20210730 17:40:27.102"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:27.099" endtime="20210730 17:40:27.102"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:27.098" endtime="20210730 17:40:27.102"/>
</for>
<status status="FAIL" starttime="20210730 17:40:27.097" endtime="20210730 17:40:27.103"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:27.097" endtime="20210730 17:40:27.103"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:27.079" endtime="20210730 17:40:27.103"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:27.108" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:27.116" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:27.116" level="INFO">${pids} = 19030
19037
19042</msg>
<status status="PASS" starttime="20210730 17:40:27.104" endtime="20210730 17:40:27.117"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:27.118" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:27.117" endtime="20210730 17:40:27.118"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:27.118" level="INFO">${pids} = ['19030', '19037', '19042']</msg>
<status status="PASS" starttime="20210730 17:40:27.118" endtime="20210730 17:40:27.118"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19030</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:27.122" level="INFO">Running command 'kill 19030 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:27.119" endtime="20210730 17:40:27.122"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.118" endtime="20210730 17:40:27.122"/>
</iter>
<iter>
<var name="${pid}">19037</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:27.125" level="INFO">Running command 'kill 19037 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:27.123" endtime="20210730 17:40:27.127"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.122" endtime="20210730 17:40:27.127"/>
</iter>
<iter>
<var name="${pid}">19042</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:27.130" level="INFO">Running command 'kill 19042 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:27.127" endtime="20210730 17:40:27.130"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.127" endtime="20210730 17:40:27.130"/>
</iter>
<status status="PASS" starttime="20210730 17:40:27.118" endtime="20210730 17:40:27.130"/>
</for>
<status status="PASS" starttime="20210730 17:40:27.118" endtime="20210730 17:40:27.130"/>
</branch>
<status status="PASS" starttime="20210730 17:40:27.118" endtime="20210730 17:40:27.130"/>
</if>
<status status="PASS" starttime="20210730 17:40:27.103" endtime="20210730 17:40:27.130"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%=!()=?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:25.526" endtime="20210730 17:40:27.130">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t5" name="With Each Valid Token, Updating Username Of Each System User With 1234567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:27.135" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:27.146" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:27.146" level="INFO">${pids} = 19071</msg>
<status status="PASS" starttime="20210730 17:40:27.132" endtime="20210730 17:40:27.146"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:27.147" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:27.146" endtime="20210730 17:40:27.147"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:27.147" level="INFO">${pids} = ['19071']</msg>
<status status="PASS" starttime="20210730 17:40:27.147" endtime="20210730 17:40:27.147"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19071</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:27.150" level="INFO">Running command 'kill 19071 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:27.147" endtime="20210730 17:40:27.150"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.147" endtime="20210730 17:40:27.150"/>
</iter>
<status status="PASS" starttime="20210730 17:40:27.147" endtime="20210730 17:40:27.151"/>
</for>
<status status="PASS" starttime="20210730 17:40:27.147" endtime="20210730 17:40:27.151"/>
</branch>
<status status="PASS" starttime="20210730 17:40:27.147" endtime="20210730 17:40:27.151"/>
</if>
<status status="PASS" starttime="20210730 17:40:27.132" endtime="20210730 17:40:27.151"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:27.152" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:27.151" endtime="20210730 17:40:27.152"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:27.153" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:27.152" endtime="20210730 17:40:27.153"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:27.153" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:27.153" endtime="20210730 17:40:27.153"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:27.153" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:27.153" endtime="20210730 17:40:27.153"/>
</kw>
<msg timestamp="20210730 17:40:27.154" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:27.152" endtime="20210730 17:40:27.154"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:27.160" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:27.154" endtime="20210730 17:40:27.161"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.151" endtime="20210730 17:40:27.162"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:27.163" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:27.162" endtime="20210730 17:40:27.167"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:28.668" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:27.167" endtime="20210730 17:40:28.669"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.162" endtime="20210730 17:40:28.670"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:28.672" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:28.672" endtime="20210730 17:40:28.672"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:28.672" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:28.672" endtime="20210730 17:40:28.672"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:28.673" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:28.673" endtime="20210730 17:40:28.673"/>
</kw>
<msg timestamp="20210730 17:40:28.673" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:28.671" endtime="20210730 17:40:28.673"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:28.674" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:28.673" endtime="20210730 17:40:28.674"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.671" endtime="20210730 17:40:28.674"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:28.675" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:28.675" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:28.674" endtime="20210730 17:40:28.675"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.674" endtime="20210730 17:40:28.675"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:28.676" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:28.676" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:28.675" endtime="20210730 17:40:28.676"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:28.676" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:28.676" endtime="20210730 17:40:28.676"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:28.677" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:28.676" endtime="20210730 17:40:28.677"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:28.677" endtime="20210730 17:40:28.678"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:28.678" endtime="20210730 17:40:28.678"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.676" endtime="20210730 17:40:28.678"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:28.678" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:28.678" endtime="20210730 17:40:28.678"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:28.678" endtime="20210730 17:40:28.679"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:28.679" endtime="20210730 17:40:28.679"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.678" endtime="20210730 17:40:28.679"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:28.680" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:28.680" endtime="20210730 17:40:28.680"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:28.680" endtime="20210730 17:40:28.681"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:28.681" endtime="20210730 17:40:28.681"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.680" endtime="20210730 17:40:28.681"/>
</iter>
<status status="PASS" starttime="20210730 17:40:28.676" endtime="20210730 17:40:28.681"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:28.681" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:28.681" endtime="20210730 17:40:28.681"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.675" endtime="20210730 17:40:28.681"/>
</kw>
<status status="PASS" starttime="20210730 17:40:27.131" endtime="20210730 17:40:28.682"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:28.683" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:28.682" endtime="20210730 17:40:28.683"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:28.683" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210730 17:40:28.683" endtime="20210730 17:40:28.683"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:28.691" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:28.692" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:28.683" endtime="20210730 17:40:28.692"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:28.692" endtime="20210730 17:40:28.692"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:28.692" endtime="20210730 17:40:28.692"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:28.683" endtime="20210730 17:40:28.692"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:28.683" endtime="20210730 17:40:28.692"/>
</for>
<status status="FAIL" starttime="20210730 17:40:28.682" endtime="20210730 17:40:28.692"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:28.682" endtime="20210730 17:40:28.692"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:28.694" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:28.694" endtime="20210730 17:40:28.694"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:28.694" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210730 17:40:28.694" endtime="20210730 17:40:28.694"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:28.698" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:28.699" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:28.695" endtime="20210730 17:40:28.699"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:28.699" endtime="20210730 17:40:28.699"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:28.699" endtime="20210730 17:40:28.699"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:28.695" endtime="20210730 17:40:28.699"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:28.695" endtime="20210730 17:40:28.699"/>
</for>
<status status="FAIL" starttime="20210730 17:40:28.693" endtime="20210730 17:40:28.699"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:28.692" endtime="20210730 17:40:28.699"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:28.700" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:28.700" endtime="20210730 17:40:28.700"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:28.701" level="INFO">${payload} = {'username': '1234567'}</msg>
<status status="PASS" starttime="20210730 17:40:28.700" endtime="20210730 17:40:28.701"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:28.704" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:28.705" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:28.701" endtime="20210730 17:40:28.705"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:28.705" endtime="20210730 17:40:28.705"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:28.705" endtime="20210730 17:40:28.705"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:28.701" endtime="20210730 17:40:28.705"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:28.701" endtime="20210730 17:40:28.705"/>
</for>
<status status="FAIL" starttime="20210730 17:40:28.700" endtime="20210730 17:40:28.705"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:28.699" endtime="20210730 17:40:28.705"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:28.682" endtime="20210730 17:40:28.705"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:28.710" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:28.720" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:28.720" level="INFO">${pids} = 19094
19101
19105</msg>
<status status="PASS" starttime="20210730 17:40:28.706" endtime="20210730 17:40:28.720"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:28.721" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:28.721" endtime="20210730 17:40:28.721"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:28.722" level="INFO">${pids} = ['19094', '19101', '19105']</msg>
<status status="PASS" starttime="20210730 17:40:28.722" endtime="20210730 17:40:28.722"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19094</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:28.725" level="INFO">Running command 'kill 19094 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:28.722" endtime="20210730 17:40:28.725"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.722" endtime="20210730 17:40:28.725"/>
</iter>
<iter>
<var name="${pid}">19101</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:28.728" level="INFO">Running command 'kill 19101 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:28.726" endtime="20210730 17:40:28.729"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.726" endtime="20210730 17:40:28.729"/>
</iter>
<iter>
<var name="${pid}">19105</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:28.732" level="INFO">Running command 'kill 19105 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:28.729" endtime="20210730 17:40:28.732"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.729" endtime="20210730 17:40:28.732"/>
</iter>
<status status="PASS" starttime="20210730 17:40:28.722" endtime="20210730 17:40:28.732"/>
</for>
<status status="PASS" starttime="20210730 17:40:28.721" endtime="20210730 17:40:28.732"/>
</branch>
<status status="PASS" starttime="20210730 17:40:28.721" endtime="20210730 17:40:28.733"/>
</if>
<status status="PASS" starttime="20210730 17:40:28.706" endtime="20210730 17:40:28.733"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '1234567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:27.131" endtime="20210730 17:40:28.733">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t6" name="With Each Valid Token, Updating Username Of Each System User With 12345678 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:28.739" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:28.748" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:28.748" level="INFO">${pids} = 19134</msg>
<status status="PASS" starttime="20210730 17:40:28.736" endtime="20210730 17:40:28.748"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:28.749" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:28.748" endtime="20210730 17:40:28.749"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:28.750" level="INFO">${pids} = ['19134']</msg>
<status status="PASS" starttime="20210730 17:40:28.749" endtime="20210730 17:40:28.750"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19134</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:28.753" level="INFO">Running command 'kill 19134 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:28.750" endtime="20210730 17:40:28.753"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.750" endtime="20210730 17:40:28.753"/>
</iter>
<status status="PASS" starttime="20210730 17:40:28.750" endtime="20210730 17:40:28.753"/>
</for>
<status status="PASS" starttime="20210730 17:40:28.749" endtime="20210730 17:40:28.753"/>
</branch>
<status status="PASS" starttime="20210730 17:40:28.749" endtime="20210730 17:40:28.753"/>
</if>
<status status="PASS" starttime="20210730 17:40:28.735" endtime="20210730 17:40:28.753"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:28.754" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:28.754" endtime="20210730 17:40:28.754"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:28.755" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:28.755" endtime="20210730 17:40:28.755"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:28.755" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:28.755" endtime="20210730 17:40:28.755"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:28.756" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:28.755" endtime="20210730 17:40:28.756"/>
</kw>
<msg timestamp="20210730 17:40:28.756" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:28.754" endtime="20210730 17:40:28.756"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:28.760" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:28.756" endtime="20210730 17:40:28.763"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.754" endtime="20210730 17:40:28.763"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:28.764" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:28.764" endtime="20210730 17:40:28.768"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:30.269" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:28.768" endtime="20210730 17:40:30.270"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.764" endtime="20210730 17:40:30.271"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:30.272" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:30.272" endtime="20210730 17:40:30.272"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:30.272" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:30.272" endtime="20210730 17:40:30.272"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:30.273" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:30.272" endtime="20210730 17:40:30.273"/>
</kw>
<msg timestamp="20210730 17:40:30.273" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:30.271" endtime="20210730 17:40:30.273"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:30.273" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:30.273" endtime="20210730 17:40:30.274"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.271" endtime="20210730 17:40:30.274"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:30.274" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:30.274" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:30.274" endtime="20210730 17:40:30.274"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.274" endtime="20210730 17:40:30.274"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:30.275" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:30.275" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:30.275" endtime="20210730 17:40:30.275"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:30.275" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:30.275" endtime="20210730 17:40:30.275"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:30.276" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:30.276" endtime="20210730 17:40:30.276"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:30.276" endtime="20210730 17:40:30.277"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:30.277" endtime="20210730 17:40:30.277"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.276" endtime="20210730 17:40:30.277"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:30.277" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:30.277" endtime="20210730 17:40:30.277"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:30.278" endtime="20210730 17:40:30.278"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:30.278" endtime="20210730 17:40:30.278"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.277" endtime="20210730 17:40:30.279"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:30.279" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:30.279" endtime="20210730 17:40:30.279"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:30.279" endtime="20210730 17:40:30.280"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:30.280" endtime="20210730 17:40:30.280"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.279" endtime="20210730 17:40:30.280"/>
</iter>
<status status="PASS" starttime="20210730 17:40:30.275" endtime="20210730 17:40:30.280"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:30.280" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:30.280" endtime="20210730 17:40:30.280"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.275" endtime="20210730 17:40:30.280"/>
</kw>
<status status="PASS" starttime="20210730 17:40:28.735" endtime="20210730 17:40:30.280"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:30.282" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:30.281" endtime="20210730 17:40:30.282"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:30.282" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210730 17:40:30.282" endtime="20210730 17:40:30.282"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:30.291" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:30.291" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:30.282" endtime="20210730 17:40:30.291"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:30.291" endtime="20210730 17:40:30.291"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:30.292" endtime="20210730 17:40:30.292"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:30.282" endtime="20210730 17:40:30.292"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:30.282" endtime="20210730 17:40:30.292"/>
</for>
<status status="FAIL" starttime="20210730 17:40:30.281" endtime="20210730 17:40:30.292"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:30.281" endtime="20210730 17:40:30.292"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:30.294" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:30.293" endtime="20210730 17:40:30.294"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:30.294" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210730 17:40:30.294" endtime="20210730 17:40:30.294"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:30.298" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:30.298" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:30.294" endtime="20210730 17:40:30.298"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:30.298" endtime="20210730 17:40:30.298"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:30.298" endtime="20210730 17:40:30.298"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:30.294" endtime="20210730 17:40:30.298"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:30.294" endtime="20210730 17:40:30.298"/>
</for>
<status status="FAIL" starttime="20210730 17:40:30.292" endtime="20210730 17:40:30.298"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:30.292" endtime="20210730 17:40:30.298"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:30.299" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:30.299" endtime="20210730 17:40:30.299"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:30.300" level="INFO">${payload} = {'username': '12345678'}</msg>
<status status="PASS" starttime="20210730 17:40:30.299" endtime="20210730 17:40:30.300"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:30.304" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:30.304" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:30.300" endtime="20210730 17:40:30.306"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:30.306" endtime="20210730 17:40:30.306"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:30.306" endtime="20210730 17:40:30.306"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:30.300" endtime="20210730 17:40:30.306"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:30.300" endtime="20210730 17:40:30.306"/>
</for>
<status status="FAIL" starttime="20210730 17:40:30.299" endtime="20210730 17:40:30.306"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:30.298" endtime="20210730 17:40:30.307"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:30.281" endtime="20210730 17:40:30.307"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:30.314" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:30.324" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:30.324" level="INFO">${pids} = 19157
19164
19168</msg>
<status status="PASS" starttime="20210730 17:40:30.308" endtime="20210730 17:40:30.324"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:30.325" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:30.324" endtime="20210730 17:40:30.325"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:30.325" level="INFO">${pids} = ['19157', '19164', '19168']</msg>
<status status="PASS" starttime="20210730 17:40:30.325" endtime="20210730 17:40:30.325"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19157</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:30.328" level="INFO">Running command 'kill 19157 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:30.326" endtime="20210730 17:40:30.329"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.326" endtime="20210730 17:40:30.329"/>
</iter>
<iter>
<var name="${pid}">19164</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:30.331" level="INFO">Running command 'kill 19164 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:30.329" endtime="20210730 17:40:30.331"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.329" endtime="20210730 17:40:30.331"/>
</iter>
<iter>
<var name="${pid}">19168</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:30.335" level="INFO">Running command 'kill 19168 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:30.332" endtime="20210730 17:40:30.335"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.331" endtime="20210730 17:40:30.335"/>
</iter>
<status status="PASS" starttime="20210730 17:40:30.325" endtime="20210730 17:40:30.335"/>
</for>
<status status="PASS" starttime="20210730 17:40:30.325" endtime="20210730 17:40:30.335"/>
</branch>
<status status="PASS" starttime="20210730 17:40:30.325" endtime="20210730 17:40:30.335"/>
</if>
<status status="PASS" starttime="20210730 17:40:30.308" endtime="20210730 17:40:30.336"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:28.734" endtime="20210730 17:40:30.336">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t7" name="With Each Valid Token, Updating Username Of Each System User With 12345678912345 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:30.346" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:30.354" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:30.354" level="INFO">${pids} = 19197</msg>
<status status="PASS" starttime="20210730 17:40:30.343" endtime="20210730 17:40:30.354"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:30.355" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:30.355" endtime="20210730 17:40:30.355"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:30.356" level="INFO">${pids} = ['19197']</msg>
<status status="PASS" starttime="20210730 17:40:30.356" endtime="20210730 17:40:30.356"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19197</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:30.370" level="INFO">Running command 'kill 19197 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:30.357" endtime="20210730 17:40:30.371"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.356" endtime="20210730 17:40:30.371"/>
</iter>
<status status="PASS" starttime="20210730 17:40:30.356" endtime="20210730 17:40:30.371"/>
</for>
<status status="PASS" starttime="20210730 17:40:30.356" endtime="20210730 17:40:30.371"/>
</branch>
<status status="PASS" starttime="20210730 17:40:30.355" endtime="20210730 17:40:30.371"/>
</if>
<status status="PASS" starttime="20210730 17:40:30.342" endtime="20210730 17:40:30.372"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:30.373" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:30.372" endtime="20210730 17:40:30.373"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:30.374" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:30.373" endtime="20210730 17:40:30.374"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:30.374" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:30.374" endtime="20210730 17:40:30.374"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:30.374" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:30.374" endtime="20210730 17:40:30.374"/>
</kw>
<msg timestamp="20210730 17:40:30.375" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:30.373" endtime="20210730 17:40:30.375"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:30.377" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:30.375" endtime="20210730 17:40:30.379"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.372" endtime="20210730 17:40:30.379"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:30.380" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:30.380" endtime="20210730 17:40:30.385"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:31.886" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:30.385" endtime="20210730 17:40:31.886"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.380" endtime="20210730 17:40:31.887"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:31.888" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:31.888" endtime="20210730 17:40:31.888"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:31.889" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:31.889" endtime="20210730 17:40:31.889"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:31.890" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:31.889" endtime="20210730 17:40:31.890"/>
</kw>
<msg timestamp="20210730 17:40:31.890" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:31.888" endtime="20210730 17:40:31.890"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:31.891" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:31.890" endtime="20210730 17:40:31.891"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.887" endtime="20210730 17:40:31.891"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:31.892" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:31.892" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:31.892" endtime="20210730 17:40:31.893"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.892" endtime="20210730 17:40:31.893"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:31.894" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:31.894" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:31.893" endtime="20210730 17:40:31.894"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:31.894" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:31.894" endtime="20210730 17:40:31.894"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:31.895" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:31.895" endtime="20210730 17:40:31.895"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:31.896" endtime="20210730 17:40:31.897"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:31.897" endtime="20210730 17:40:31.897"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.895" endtime="20210730 17:40:31.897"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:31.898" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:31.897" endtime="20210730 17:40:31.898"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:31.898" endtime="20210730 17:40:31.899"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:31.899" endtime="20210730 17:40:31.900"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.897" endtime="20210730 17:40:31.900"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:31.900" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:31.900" endtime="20210730 17:40:31.900"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:31.900" endtime="20210730 17:40:31.901"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:31.901" endtime="20210730 17:40:31.902"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.900" endtime="20210730 17:40:31.902"/>
</iter>
<status status="PASS" starttime="20210730 17:40:31.895" endtime="20210730 17:40:31.902"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:31.903" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:31.902" endtime="20210730 17:40:31.903"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.893" endtime="20210730 17:40:31.903"/>
</kw>
<status status="PASS" starttime="20210730 17:40:30.342" endtime="20210730 17:40:31.903"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:31.904" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:31.904" endtime="20210730 17:40:31.904"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:31.905" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210730 17:40:31.904" endtime="20210730 17:40:31.905"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:31.914" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:31.915" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:31.905" endtime="20210730 17:40:31.915"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:31.915" endtime="20210730 17:40:31.915"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:31.915" endtime="20210730 17:40:31.915"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:31.905" endtime="20210730 17:40:31.915"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:31.905" endtime="20210730 17:40:31.915"/>
</for>
<status status="FAIL" starttime="20210730 17:40:31.903" endtime="20210730 17:40:31.915"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:31.903" endtime="20210730 17:40:31.915"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:31.916" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:31.916" endtime="20210730 17:40:31.916"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:31.917" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210730 17:40:31.916" endtime="20210730 17:40:31.917"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:31.920" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:31.920" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:31.917" endtime="20210730 17:40:31.920"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:31.920" endtime="20210730 17:40:31.921"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:31.921" endtime="20210730 17:40:31.921"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:31.917" endtime="20210730 17:40:31.921"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:31.917" endtime="20210730 17:40:31.921"/>
</for>
<status status="FAIL" starttime="20210730 17:40:31.915" endtime="20210730 17:40:31.921"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:31.915" endtime="20210730 17:40:31.921"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678912345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:31.923" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:31.923" endtime="20210730 17:40:31.923"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:31.923" level="INFO">${payload} = {'username': '12345678912345'}</msg>
<status status="PASS" starttime="20210730 17:40:31.923" endtime="20210730 17:40:31.923"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:31.930" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:31.930" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:31.924" endtime="20210730 17:40:31.930"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:31.930" endtime="20210730 17:40:31.930"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:31.930" endtime="20210730 17:40:31.930"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:31.923" endtime="20210730 17:40:31.931"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:31.923" endtime="20210730 17:40:31.931"/>
</for>
<status status="FAIL" starttime="20210730 17:40:31.922" endtime="20210730 17:40:31.931"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:31.922" endtime="20210730 17:40:31.931"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:31.903" endtime="20210730 17:40:31.931"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:31.936" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:31.944" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:31.944" level="INFO">${pids} = 19220
19227
19232</msg>
<status status="PASS" starttime="20210730 17:40:31.931" endtime="20210730 17:40:31.944"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:31.945" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:31.945" endtime="20210730 17:40:31.945"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:31.946" level="INFO">${pids} = ['19220', '19227', '19232']</msg>
<status status="PASS" starttime="20210730 17:40:31.946" endtime="20210730 17:40:31.946"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19220</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:31.949" level="INFO">Running command 'kill 19220 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:31.946" endtime="20210730 17:40:31.950"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.946" endtime="20210730 17:40:31.950"/>
</iter>
<iter>
<var name="${pid}">19227</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:31.954" level="INFO">Running command 'kill 19227 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:31.951" endtime="20210730 17:40:31.956"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.950" endtime="20210730 17:40:31.956"/>
</iter>
<iter>
<var name="${pid}">19232</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:31.959" level="INFO">Running command 'kill 19232 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:31.956" endtime="20210730 17:40:31.959"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.956" endtime="20210730 17:40:31.959"/>
</iter>
<status status="PASS" starttime="20210730 17:40:31.946" endtime="20210730 17:40:31.959"/>
</for>
<status status="PASS" starttime="20210730 17:40:31.945" endtime="20210730 17:40:31.959"/>
</branch>
<status status="PASS" starttime="20210730 17:40:31.945" endtime="20210730 17:40:31.960"/>
</if>
<status status="PASS" starttime="20210730 17:40:31.931" endtime="20210730 17:40:31.960"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678912345'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:30.336" endtime="20210730 17:40:31.960">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t8" name="With Each Valid Token, Updating Username Of Each System User With abcdefg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:31.965" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:31.974" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:31.974" level="INFO">${pids} = 19261</msg>
<status status="PASS" starttime="20210730 17:40:31.962" endtime="20210730 17:40:31.974"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:31.975" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:31.974" endtime="20210730 17:40:31.975"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:31.975" level="INFO">${pids} = ['19261']</msg>
<status status="PASS" starttime="20210730 17:40:31.975" endtime="20210730 17:40:31.975"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19261</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:31.979" level="INFO">Running command 'kill 19261 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:31.976" endtime="20210730 17:40:31.980"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.975" endtime="20210730 17:40:31.980"/>
</iter>
<status status="PASS" starttime="20210730 17:40:31.975" endtime="20210730 17:40:31.980"/>
</for>
<status status="PASS" starttime="20210730 17:40:31.975" endtime="20210730 17:40:31.980"/>
</branch>
<status status="PASS" starttime="20210730 17:40:31.975" endtime="20210730 17:40:31.980"/>
</if>
<status status="PASS" starttime="20210730 17:40:31.962" endtime="20210730 17:40:31.980"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:31.982" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:31.981" endtime="20210730 17:40:31.982"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:31.982" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:31.982" endtime="20210730 17:40:31.982"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:31.983" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:31.982" endtime="20210730 17:40:31.983"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:31.983" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:31.983" endtime="20210730 17:40:31.983"/>
</kw>
<msg timestamp="20210730 17:40:31.983" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:31.982" endtime="20210730 17:40:31.983"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:31.986" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:31.983" endtime="20210730 17:40:31.988"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.980" endtime="20210730 17:40:31.989"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:31.990" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:31.990" endtime="20210730 17:40:31.995"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:33.496" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:31.995" endtime="20210730 17:40:33.497"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.989" endtime="20210730 17:40:33.499"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:33.508" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:33.508" endtime="20210730 17:40:33.508"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:33.508" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:33.508" endtime="20210730 17:40:33.508"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:33.509" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:33.509" endtime="20210730 17:40:33.509"/>
</kw>
<msg timestamp="20210730 17:40:33.509" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:33.508" endtime="20210730 17:40:33.509"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:33.510" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:33.509" endtime="20210730 17:40:33.510"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.507" endtime="20210730 17:40:33.510"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:33.510" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:33.510" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:33.510" endtime="20210730 17:40:33.511"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.510" endtime="20210730 17:40:33.511"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:33.511" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:33.512" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:33.511" endtime="20210730 17:40:33.512"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:33.512" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:33.512" endtime="20210730 17:40:33.512"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:33.512" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:33.512" endtime="20210730 17:40:33.512"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:33.512" endtime="20210730 17:40:33.513"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:33.513" endtime="20210730 17:40:33.513"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.512" endtime="20210730 17:40:33.514"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:33.514" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:33.514" endtime="20210730 17:40:33.514"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:33.514" endtime="20210730 17:40:33.515"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:33.515" endtime="20210730 17:40:33.515"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.514" endtime="20210730 17:40:33.515"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:33.515" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:33.515" endtime="20210730 17:40:33.515"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:33.515" endtime="20210730 17:40:33.516"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:33.516" endtime="20210730 17:40:33.516"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.515" endtime="20210730 17:40:33.516"/>
</iter>
<status status="PASS" starttime="20210730 17:40:33.512" endtime="20210730 17:40:33.516"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:33.517" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:33.516" endtime="20210730 17:40:33.517"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.511" endtime="20210730 17:40:33.517"/>
</kw>
<status status="PASS" starttime="20210730 17:40:31.961" endtime="20210730 17:40:33.517"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:33.518" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:33.518" endtime="20210730 17:40:33.518"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:33.519" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 17:40:33.518" endtime="20210730 17:40:33.519"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:33.527" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:33.527" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:33.519" endtime="20210730 17:40:33.527"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:33.528" endtime="20210730 17:40:33.528"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:33.528" endtime="20210730 17:40:33.528"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:33.519" endtime="20210730 17:40:33.528"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:33.519" endtime="20210730 17:40:33.528"/>
</for>
<status status="FAIL" starttime="20210730 17:40:33.517" endtime="20210730 17:40:33.528"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:33.517" endtime="20210730 17:40:33.528"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:33.529" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:33.529" endtime="20210730 17:40:33.529"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:33.530" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 17:40:33.529" endtime="20210730 17:40:33.530"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:33.534" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:33.534" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:33.530" endtime="20210730 17:40:33.534"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:33.534" endtime="20210730 17:40:33.534"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:33.534" endtime="20210730 17:40:33.534"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:33.530" endtime="20210730 17:40:33.535"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:33.530" endtime="20210730 17:40:33.535"/>
</for>
<status status="FAIL" starttime="20210730 17:40:33.528" endtime="20210730 17:40:33.535"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:33.528" endtime="20210730 17:40:33.535"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:33.536" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:33.535" endtime="20210730 17:40:33.536"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:33.536" level="INFO">${payload} = {'username': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 17:40:33.536" endtime="20210730 17:40:33.536"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:33.540" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:33.540" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:33.536" endtime="20210730 17:40:33.540"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:33.540" endtime="20210730 17:40:33.540"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:33.540" endtime="20210730 17:40:33.541"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:33.536" endtime="20210730 17:40:33.541"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:33.536" endtime="20210730 17:40:33.541"/>
</for>
<status status="FAIL" starttime="20210730 17:40:33.535" endtime="20210730 17:40:33.542"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:33.535" endtime="20210730 17:40:33.542"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:33.517" endtime="20210730 17:40:33.542"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:33.546" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:33.556" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:33.556" level="INFO">${pids} = 19284
19291
19295</msg>
<status status="PASS" starttime="20210730 17:40:33.542" endtime="20210730 17:40:33.556"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:33.557" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:33.556" endtime="20210730 17:40:33.557"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:33.557" level="INFO">${pids} = ['19284', '19291', '19295']</msg>
<status status="PASS" starttime="20210730 17:40:33.557" endtime="20210730 17:40:33.557"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19284</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:33.560" level="INFO">Running command 'kill 19284 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:33.558" endtime="20210730 17:40:33.561"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.557" endtime="20210730 17:40:33.561"/>
</iter>
<iter>
<var name="${pid}">19291</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:33.564" level="INFO">Running command 'kill 19291 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:33.561" endtime="20210730 17:40:33.564"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.561" endtime="20210730 17:40:33.564"/>
</iter>
<iter>
<var name="${pid}">19295</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:33.568" level="INFO">Running command 'kill 19295 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:33.564" endtime="20210730 17:40:33.568"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.564" endtime="20210730 17:40:33.568"/>
</iter>
<status status="PASS" starttime="20210730 17:40:33.557" endtime="20210730 17:40:33.568"/>
</for>
<status status="PASS" starttime="20210730 17:40:33.557" endtime="20210730 17:40:33.568"/>
</branch>
<status status="PASS" starttime="20210730 17:40:33.557" endtime="20210730 17:40:33.568"/>
</if>
<status status="PASS" starttime="20210730 17:40:33.542" endtime="20210730 17:40:33.568"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:31.960" endtime="20210730 17:40:33.569">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t9" name="With Each Valid Token, Updating Username Of Each System User With abcdefgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:33.574" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:33.585" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:33.585" level="INFO">${pids} = 19324</msg>
<status status="PASS" starttime="20210730 17:40:33.571" endtime="20210730 17:40:33.585"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:33.586" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:33.585" endtime="20210730 17:40:33.586"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:33.586" level="INFO">${pids} = ['19324']</msg>
<status status="PASS" starttime="20210730 17:40:33.586" endtime="20210730 17:40:33.586"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19324</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:33.590" level="INFO">Running command 'kill 19324 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:33.587" endtime="20210730 17:40:33.590"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.586" endtime="20210730 17:40:33.590"/>
</iter>
<status status="PASS" starttime="20210730 17:40:33.586" endtime="20210730 17:40:33.590"/>
</for>
<status status="PASS" starttime="20210730 17:40:33.586" endtime="20210730 17:40:33.590"/>
</branch>
<status status="PASS" starttime="20210730 17:40:33.586" endtime="20210730 17:40:33.590"/>
</if>
<status status="PASS" starttime="20210730 17:40:33.570" endtime="20210730 17:40:33.590"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:33.591" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:33.591" endtime="20210730 17:40:33.591"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:33.592" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:33.592" endtime="20210730 17:40:33.592"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:33.592" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:33.592" endtime="20210730 17:40:33.592"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:33.593" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:33.592" endtime="20210730 17:40:33.593"/>
</kw>
<msg timestamp="20210730 17:40:33.593" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:33.591" endtime="20210730 17:40:33.593"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:33.606" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:33.593" endtime="20210730 17:40:33.608"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.591" endtime="20210730 17:40:33.608"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:33.610" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:33.609" endtime="20210730 17:40:33.613"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:35.114" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:33.614" endtime="20210730 17:40:35.115"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.609" endtime="20210730 17:40:35.115"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:35.118" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:35.118" endtime="20210730 17:40:35.118"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:35.119" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:35.119" endtime="20210730 17:40:35.119"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:35.119" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:35.119" endtime="20210730 17:40:35.120"/>
</kw>
<msg timestamp="20210730 17:40:35.120" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:35.117" endtime="20210730 17:40:35.120"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:35.120" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:35.120" endtime="20210730 17:40:35.120"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.116" endtime="20210730 17:40:35.121"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:35.121" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:35.121" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:35.121" endtime="20210730 17:40:35.122"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.121" endtime="20210730 17:40:35.122"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:35.122" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:35.122" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:35.122" endtime="20210730 17:40:35.122"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:35.123" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:35.122" endtime="20210730 17:40:35.123"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:35.123" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:35.123" endtime="20210730 17:40:35.123"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:35.123" endtime="20210730 17:40:35.124"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:35.124" endtime="20210730 17:40:35.124"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.123" endtime="20210730 17:40:35.124"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:35.125" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:35.125" endtime="20210730 17:40:35.125"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:35.125" endtime="20210730 17:40:35.126"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:35.126" endtime="20210730 17:40:35.126"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.124" endtime="20210730 17:40:35.126"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:35.126" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:35.126" endtime="20210730 17:40:35.126"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:35.126" endtime="20210730 17:40:35.127"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:35.127" endtime="20210730 17:40:35.127"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.126" endtime="20210730 17:40:35.127"/>
</iter>
<status status="PASS" starttime="20210730 17:40:35.123" endtime="20210730 17:40:35.127"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:35.128" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:35.127" endtime="20210730 17:40:35.128"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.122" endtime="20210730 17:40:35.128"/>
</kw>
<status status="PASS" starttime="20210730 17:40:33.570" endtime="20210730 17:40:35.128"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:35.129" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:35.129" endtime="20210730 17:40:35.129"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:35.129" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 17:40:35.129" endtime="20210730 17:40:35.129"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:35.138" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:35.138" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:35.130" endtime="20210730 17:40:35.139"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:35.139" endtime="20210730 17:40:35.139"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:35.139" endtime="20210730 17:40:35.139"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:35.130" endtime="20210730 17:40:35.139"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:35.129" endtime="20210730 17:40:35.139"/>
</for>
<status status="FAIL" starttime="20210730 17:40:35.128" endtime="20210730 17:40:35.139"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:35.128" endtime="20210730 17:40:35.140"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:35.141" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:35.140" endtime="20210730 17:40:35.141"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:35.141" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 17:40:35.141" endtime="20210730 17:40:35.141"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:35.145" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:35.145" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:35.141" endtime="20210730 17:40:35.145"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:35.145" endtime="20210730 17:40:35.146"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:35.146" endtime="20210730 17:40:35.146"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:35.141" endtime="20210730 17:40:35.146"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:35.141" endtime="20210730 17:40:35.146"/>
</for>
<status status="FAIL" starttime="20210730 17:40:35.140" endtime="20210730 17:40:35.146"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:35.140" endtime="20210730 17:40:35.146"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:35.147" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:35.147" endtime="20210730 17:40:35.147"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:35.147" level="INFO">${payload} = {'username': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 17:40:35.147" endtime="20210730 17:40:35.147"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:35.151" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:35.151" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:35.147" endtime="20210730 17:40:35.151"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:35.151" endtime="20210730 17:40:35.151"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:35.151" endtime="20210730 17:40:35.151"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:35.147" endtime="20210730 17:40:35.151"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:35.147" endtime="20210730 17:40:35.151"/>
</for>
<status status="FAIL" starttime="20210730 17:40:35.146" endtime="20210730 17:40:35.152"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:35.146" endtime="20210730 17:40:35.152"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:35.128" endtime="20210730 17:40:35.152"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:35.156" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:35.165" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:35.165" level="INFO">${pids} = 19347
19354
19358</msg>
<status status="PASS" starttime="20210730 17:40:35.152" endtime="20210730 17:40:35.165"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:35.167" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:35.166" endtime="20210730 17:40:35.167"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:35.167" level="INFO">${pids} = ['19347', '19354', '19358']</msg>
<status status="PASS" starttime="20210730 17:40:35.167" endtime="20210730 17:40:35.167"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19347</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:35.170" level="INFO">Running command 'kill 19347 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:35.168" endtime="20210730 17:40:35.171"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.167" endtime="20210730 17:40:35.171"/>
</iter>
<iter>
<var name="${pid}">19354</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:35.174" level="INFO">Running command 'kill 19354 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:35.171" endtime="20210730 17:40:35.175"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.171" endtime="20210730 17:40:35.175"/>
</iter>
<iter>
<var name="${pid}">19358</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:35.178" level="INFO">Running command 'kill 19358 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:35.175" endtime="20210730 17:40:35.178"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.175" endtime="20210730 17:40:35.179"/>
</iter>
<status status="PASS" starttime="20210730 17:40:35.167" endtime="20210730 17:40:35.179"/>
</for>
<status status="PASS" starttime="20210730 17:40:35.167" endtime="20210730 17:40:35.179"/>
</branch>
<status status="PASS" starttime="20210730 17:40:35.167" endtime="20210730 17:40:35.179"/>
</if>
<status status="PASS" starttime="20210730 17:40:35.152" endtime="20210730 17:40:35.179"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:33.569" endtime="20210730 17:40:35.179">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t10" name="With Each Valid Token, Updating Username Of Each System User With abcdefghijklmnprstop Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:35.183" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:35.194" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:35.194" level="INFO">${pids} = 19387</msg>
<status status="PASS" starttime="20210730 17:40:35.181" endtime="20210730 17:40:35.194"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:35.195" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:35.195" endtime="20210730 17:40:35.195"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:35.196" level="INFO">${pids} = ['19387']</msg>
<status status="PASS" starttime="20210730 17:40:35.196" endtime="20210730 17:40:35.196"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19387</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:35.199" level="INFO">Running command 'kill 19387 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:35.196" endtime="20210730 17:40:35.199"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.196" endtime="20210730 17:40:35.199"/>
</iter>
<status status="PASS" starttime="20210730 17:40:35.196" endtime="20210730 17:40:35.199"/>
</for>
<status status="PASS" starttime="20210730 17:40:35.196" endtime="20210730 17:40:35.199"/>
</branch>
<status status="PASS" starttime="20210730 17:40:35.195" endtime="20210730 17:40:35.200"/>
</if>
<status status="PASS" starttime="20210730 17:40:35.181" endtime="20210730 17:40:35.200"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:35.201" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:35.200" endtime="20210730 17:40:35.201"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:35.201" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:35.201" endtime="20210730 17:40:35.201"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:35.202" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:35.202" endtime="20210730 17:40:35.202"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:35.202" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:35.202" endtime="20210730 17:40:35.202"/>
</kw>
<msg timestamp="20210730 17:40:35.202" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:35.201" endtime="20210730 17:40:35.202"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:35.219" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:35.203" endtime="20210730 17:40:35.221"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.200" endtime="20210730 17:40:35.222"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:35.223" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:35.222" endtime="20210730 17:40:35.226"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:36.727" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:35.227" endtime="20210730 17:40:36.728"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.222" endtime="20210730 17:40:36.728"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:36.729" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:36.729" endtime="20210730 17:40:36.729"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:36.729" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:36.729" endtime="20210730 17:40:36.729"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:36.730" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:36.729" endtime="20210730 17:40:36.730"/>
</kw>
<msg timestamp="20210730 17:40:36.730" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:36.728" endtime="20210730 17:40:36.730"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:36.731" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:36.730" endtime="20210730 17:40:36.731"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.728" endtime="20210730 17:40:36.731"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:36.732" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:36.732" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:36.731" endtime="20210730 17:40:36.732"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.731" endtime="20210730 17:40:36.732"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:36.733" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:36.733" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:36.732" endtime="20210730 17:40:36.733"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:36.733" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:36.733" endtime="20210730 17:40:36.733"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:36.734" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:36.734" endtime="20210730 17:40:36.734"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:36.734" endtime="20210730 17:40:36.735"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:36.735" endtime="20210730 17:40:36.735"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.733" endtime="20210730 17:40:36.735"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:36.735" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:36.735" endtime="20210730 17:40:36.735"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:36.735" endtime="20210730 17:40:36.736"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:36.736" endtime="20210730 17:40:36.736"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.735" endtime="20210730 17:40:36.736"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:36.737" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:36.737" endtime="20210730 17:40:36.737"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:36.737" endtime="20210730 17:40:36.738"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:36.738" endtime="20210730 17:40:36.738"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.736" endtime="20210730 17:40:36.738"/>
</iter>
<status status="PASS" starttime="20210730 17:40:36.733" endtime="20210730 17:40:36.738"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:36.739" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:36.738" endtime="20210730 17:40:36.739"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.732" endtime="20210730 17:40:36.739"/>
</kw>
<status status="PASS" starttime="20210730 17:40:35.180" endtime="20210730 17:40:36.739"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:36.740" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:36.740" endtime="20210730 17:40:36.741"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:36.741" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210730 17:40:36.741" endtime="20210730 17:40:36.741"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:36.749" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:36.750" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:36.741" endtime="20210730 17:40:36.750"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:36.750" endtime="20210730 17:40:36.750"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:36.750" endtime="20210730 17:40:36.750"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:36.741" endtime="20210730 17:40:36.750"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:36.741" endtime="20210730 17:40:36.750"/>
</for>
<status status="FAIL" starttime="20210730 17:40:36.739" endtime="20210730 17:40:36.750"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:36.739" endtime="20210730 17:40:36.750"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:36.751" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:36.751" endtime="20210730 17:40:36.751"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:36.752" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210730 17:40:36.751" endtime="20210730 17:40:36.752"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:36.758" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:36.758" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:36.752" endtime="20210730 17:40:36.758"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:36.758" endtime="20210730 17:40:36.758"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:36.758" endtime="20210730 17:40:36.758"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:36.752" endtime="20210730 17:40:36.759"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:36.752" endtime="20210730 17:40:36.759"/>
</for>
<status status="FAIL" starttime="20210730 17:40:36.750" endtime="20210730 17:40:36.759"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:36.750" endtime="20210730 17:40:36.759"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnprstop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:36.760" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:36.759" endtime="20210730 17:40:36.760"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:36.761" level="INFO">${payload} = {'username': 'abcdefghijklmnprstop'}</msg>
<status status="PASS" starttime="20210730 17:40:36.760" endtime="20210730 17:40:36.761"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:36.765" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:36.765" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:36.761" endtime="20210730 17:40:36.766"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:36.766" endtime="20210730 17:40:36.766"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:36.766" endtime="20210730 17:40:36.766"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:36.761" endtime="20210730 17:40:36.766"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:36.761" endtime="20210730 17:40:36.766"/>
</for>
<status status="FAIL" starttime="20210730 17:40:36.759" endtime="20210730 17:40:36.766"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:36.759" endtime="20210730 17:40:36.766"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:36.739" endtime="20210730 17:40:36.766"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:36.770" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:36.782" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:36.783" level="INFO">${pids} = 19410
19417
19429</msg>
<status status="PASS" starttime="20210730 17:40:36.767" endtime="20210730 17:40:36.783"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:36.783" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:36.783" endtime="20210730 17:40:36.784"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:36.784" level="INFO">${pids} = ['19410', '19417', '19429']</msg>
<status status="PASS" starttime="20210730 17:40:36.784" endtime="20210730 17:40:36.784"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19410</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:36.787" level="INFO">Running command 'kill 19410 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:36.784" endtime="20210730 17:40:36.788"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.784" endtime="20210730 17:40:36.788"/>
</iter>
<iter>
<var name="${pid}">19417</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:36.793" level="INFO">Running command 'kill 19417 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:36.788" endtime="20210730 17:40:36.795"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.788" endtime="20210730 17:40:36.795"/>
</iter>
<iter>
<var name="${pid}">19429</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:36.801" level="INFO">Running command 'kill 19429 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:36.795" endtime="20210730 17:40:36.802"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.795" endtime="20210730 17:40:36.802"/>
</iter>
<status status="PASS" starttime="20210730 17:40:36.784" endtime="20210730 17:40:36.802"/>
</for>
<status status="PASS" starttime="20210730 17:40:36.784" endtime="20210730 17:40:36.802"/>
</branch>
<status status="PASS" starttime="20210730 17:40:36.784" endtime="20210730 17:40:36.802"/>
</if>
<status status="PASS" starttime="20210730 17:40:36.767" endtime="20210730 17:40:36.802"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefghijklmnprstop'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:35.180" endtime="20210730 17:40:36.803">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t11" name="With Each Valid Token, Updating Username Of Each System User With hakan12 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:36.809" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:36.821" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:36.822" level="INFO">${pids} = 19458</msg>
<status status="PASS" starttime="20210730 17:40:36.805" endtime="20210730 17:40:36.822"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:36.822" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:36.822" endtime="20210730 17:40:36.822"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:36.823" level="INFO">${pids} = ['19458']</msg>
<status status="PASS" starttime="20210730 17:40:36.823" endtime="20210730 17:40:36.823"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19458</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:36.826" level="INFO">Running command 'kill 19458 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:36.823" endtime="20210730 17:40:36.826"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.823" endtime="20210730 17:40:36.827"/>
</iter>
<status status="PASS" starttime="20210730 17:40:36.823" endtime="20210730 17:40:36.827"/>
</for>
<status status="PASS" starttime="20210730 17:40:36.823" endtime="20210730 17:40:36.827"/>
</branch>
<status status="PASS" starttime="20210730 17:40:36.823" endtime="20210730 17:40:36.827"/>
</if>
<status status="PASS" starttime="20210730 17:40:36.804" endtime="20210730 17:40:36.827"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:36.828" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:36.827" endtime="20210730 17:40:36.828"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:36.828" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:36.828" endtime="20210730 17:40:36.828"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:36.829" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:36.828" endtime="20210730 17:40:36.829"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:36.829" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:36.829" endtime="20210730 17:40:36.829"/>
</kw>
<msg timestamp="20210730 17:40:36.830" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:36.828" endtime="20210730 17:40:36.830"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:36.835" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:36.830" endtime="20210730 17:40:36.836"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.827" endtime="20210730 17:40:36.837"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:36.838" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:36.837" endtime="20210730 17:40:36.843"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:38.344" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:36.844" endtime="20210730 17:40:38.344"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.837" endtime="20210730 17:40:38.344"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:38.346" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:38.346" endtime="20210730 17:40:38.346"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:38.347" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:38.346" endtime="20210730 17:40:38.347"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:38.347" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:38.347" endtime="20210730 17:40:38.347"/>
</kw>
<msg timestamp="20210730 17:40:38.347" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:38.345" endtime="20210730 17:40:38.347"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:38.348" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:38.347" endtime="20210730 17:40:38.348"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.345" endtime="20210730 17:40:38.348"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:38.349" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:38.349" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:38.348" endtime="20210730 17:40:38.349"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.348" endtime="20210730 17:40:38.349"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:38.349" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:38.350" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:38.349" endtime="20210730 17:40:38.350"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:38.350" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:38.350" endtime="20210730 17:40:38.350"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:38.351" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:38.350" endtime="20210730 17:40:38.351"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:38.351" endtime="20210730 17:40:38.351"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:38.351" endtime="20210730 17:40:38.352"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.350" endtime="20210730 17:40:38.352"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:38.352" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:38.352" endtime="20210730 17:40:38.352"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:38.352" endtime="20210730 17:40:38.353"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:38.353" endtime="20210730 17:40:38.353"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.352" endtime="20210730 17:40:38.353"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:38.354" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:38.354" endtime="20210730 17:40:38.354"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:38.354" endtime="20210730 17:40:38.355"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:38.355" endtime="20210730 17:40:38.355"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.354" endtime="20210730 17:40:38.355"/>
</iter>
<status status="PASS" starttime="20210730 17:40:38.350" endtime="20210730 17:40:38.355"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:38.355" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:38.355" endtime="20210730 17:40:38.355"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.349" endtime="20210730 17:40:38.356"/>
</kw>
<status status="PASS" starttime="20210730 17:40:36.804" endtime="20210730 17:40:38.356"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:38.357" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:38.356" endtime="20210730 17:40:38.357"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:38.357" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210730 17:40:38.357" endtime="20210730 17:40:38.357"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:38.368" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:38.369" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:38.357" endtime="20210730 17:40:38.369"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:38.369" endtime="20210730 17:40:38.369"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:38.369" endtime="20210730 17:40:38.369"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:38.357" endtime="20210730 17:40:38.369"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:38.357" endtime="20210730 17:40:38.369"/>
</for>
<status status="FAIL" starttime="20210730 17:40:38.356" endtime="20210730 17:40:38.370"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:38.356" endtime="20210730 17:40:38.370"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:38.372" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:38.371" endtime="20210730 17:40:38.372"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:38.372" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210730 17:40:38.372" endtime="20210730 17:40:38.372"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:38.377" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:38.378" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:38.372" endtime="20210730 17:40:38.378"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:38.378" endtime="20210730 17:40:38.378"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:38.378" endtime="20210730 17:40:38.378"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:38.372" endtime="20210730 17:40:38.378"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:38.372" endtime="20210730 17:40:38.378"/>
</for>
<status status="FAIL" starttime="20210730 17:40:38.370" endtime="20210730 17:40:38.378"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:38.370" endtime="20210730 17:40:38.378"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:38.380" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:38.379" endtime="20210730 17:40:38.380"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:38.380" level="INFO">${payload} = {'username': 'hakan12'}</msg>
<status status="PASS" starttime="20210730 17:40:38.380" endtime="20210730 17:40:38.380"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:38.384" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:38.385" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:38.380" endtime="20210730 17:40:38.385"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:38.385" endtime="20210730 17:40:38.385"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:38.385" endtime="20210730 17:40:38.385"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:38.380" endtime="20210730 17:40:38.385"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:38.380" endtime="20210730 17:40:38.385"/>
</for>
<status status="FAIL" starttime="20210730 17:40:38.378" endtime="20210730 17:40:38.385"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:38.378" endtime="20210730 17:40:38.385"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:38.356" endtime="20210730 17:40:38.386"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:38.390" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:38.399" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:38.399" level="INFO">${pids} = 19482
19489
19498</msg>
<status status="PASS" starttime="20210730 17:40:38.387" endtime="20210730 17:40:38.399"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:38.400" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:38.400" endtime="20210730 17:40:38.400"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:38.401" level="INFO">${pids} = ['19482', '19489', '19498']</msg>
<status status="PASS" starttime="20210730 17:40:38.400" endtime="20210730 17:40:38.401"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19482</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:38.404" level="INFO">Running command 'kill 19482 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:38.401" endtime="20210730 17:40:38.404"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.401" endtime="20210730 17:40:38.404"/>
</iter>
<iter>
<var name="${pid}">19489</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:38.408" level="INFO">Running command 'kill 19489 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:38.405" endtime="20210730 17:40:38.410"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.405" endtime="20210730 17:40:38.410"/>
</iter>
<iter>
<var name="${pid}">19498</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:38.414" level="INFO">Running command 'kill 19498 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:38.410" endtime="20210730 17:40:38.414"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.410" endtime="20210730 17:40:38.414"/>
</iter>
<status status="PASS" starttime="20210730 17:40:38.401" endtime="20210730 17:40:38.414"/>
</for>
<status status="PASS" starttime="20210730 17:40:38.400" endtime="20210730 17:40:38.414"/>
</branch>
<status status="PASS" starttime="20210730 17:40:38.400" endtime="20210730 17:40:38.414"/>
</if>
<status status="PASS" starttime="20210730 17:40:38.386" endtime="20210730 17:40:38.415"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan12'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:36.803" endtime="20210730 17:40:38.415">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t12" name="With Each Valid Token, Updating Username Of Each System User With hakan123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:38.420" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:38.428" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:38.429" level="INFO">${pids} = 19527</msg>
<status status="PASS" starttime="20210730 17:40:38.417" endtime="20210730 17:40:38.429"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:38.430" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:38.429" endtime="20210730 17:40:38.430"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:38.430" level="INFO">${pids} = ['19527']</msg>
<status status="PASS" starttime="20210730 17:40:38.430" endtime="20210730 17:40:38.430"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19527</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:38.435" level="INFO">Running command 'kill 19527 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:38.431" endtime="20210730 17:40:38.436"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.430" endtime="20210730 17:40:38.436"/>
</iter>
<status status="PASS" starttime="20210730 17:40:38.430" endtime="20210730 17:40:38.436"/>
</for>
<status status="PASS" starttime="20210730 17:40:38.430" endtime="20210730 17:40:38.436"/>
</branch>
<status status="PASS" starttime="20210730 17:40:38.430" endtime="20210730 17:40:38.436"/>
</if>
<status status="PASS" starttime="20210730 17:40:38.417" endtime="20210730 17:40:38.436"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:38.437" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:38.437" endtime="20210730 17:40:38.437"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:38.438" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:38.438" endtime="20210730 17:40:38.438"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:38.438" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:38.438" endtime="20210730 17:40:38.438"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:38.439" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:38.438" endtime="20210730 17:40:38.439"/>
</kw>
<msg timestamp="20210730 17:40:38.439" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:38.437" endtime="20210730 17:40:38.439"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:38.442" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:38.439" endtime="20210730 17:40:38.444"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.436" endtime="20210730 17:40:38.444"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:38.445" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:38.445" endtime="20210730 17:40:38.450"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:39.953" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:38.450" endtime="20210730 17:40:39.954"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.444" endtime="20210730 17:40:39.954"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:39.955" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:39.955" endtime="20210730 17:40:39.955"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:39.956" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:39.955" endtime="20210730 17:40:39.956"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:39.956" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:39.956" endtime="20210730 17:40:39.956"/>
</kw>
<msg timestamp="20210730 17:40:39.956" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:39.955" endtime="20210730 17:40:39.956"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:39.957" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:39.956" endtime="20210730 17:40:39.957"/>
</kw>
<status status="PASS" starttime="20210730 17:40:39.954" endtime="20210730 17:40:39.957"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:39.958" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:39.958" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:39.957" endtime="20210730 17:40:39.958"/>
</kw>
<status status="PASS" starttime="20210730 17:40:39.957" endtime="20210730 17:40:39.958"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:39.958" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:39.959" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:39.958" endtime="20210730 17:40:39.959"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:39.959" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:39.959" endtime="20210730 17:40:39.959"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:39.960" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:39.959" endtime="20210730 17:40:39.960"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:39.960" endtime="20210730 17:40:39.960"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:39.960" endtime="20210730 17:40:39.961"/>
</kw>
<status status="PASS" starttime="20210730 17:40:39.959" endtime="20210730 17:40:39.961"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:39.961" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:39.961" endtime="20210730 17:40:39.961"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:39.961" endtime="20210730 17:40:39.962"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:39.962" endtime="20210730 17:40:39.962"/>
</kw>
<status status="PASS" starttime="20210730 17:40:39.961" endtime="20210730 17:40:39.962"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:39.963" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:39.963" endtime="20210730 17:40:39.963"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:39.963" endtime="20210730 17:40:39.963"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:39.964" endtime="20210730 17:40:39.964"/>
</kw>
<status status="PASS" starttime="20210730 17:40:39.962" endtime="20210730 17:40:39.964"/>
</iter>
<status status="PASS" starttime="20210730 17:40:39.959" endtime="20210730 17:40:39.964"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:39.964" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:39.964" endtime="20210730 17:40:39.964"/>
</kw>
<status status="PASS" starttime="20210730 17:40:39.958" endtime="20210730 17:40:39.964"/>
</kw>
<status status="PASS" starttime="20210730 17:40:38.416" endtime="20210730 17:40:39.964"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:39.966" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:39.965" endtime="20210730 17:40:39.966"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:39.966" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210730 17:40:39.966" endtime="20210730 17:40:39.966"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:39.975" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:39.975" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:39.966" endtime="20210730 17:40:39.975"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:39.975" endtime="20210730 17:40:39.975"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:39.975" endtime="20210730 17:40:39.975"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:39.966" endtime="20210730 17:40:39.975"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:39.966" endtime="20210730 17:40:39.975"/>
</for>
<status status="FAIL" starttime="20210730 17:40:39.965" endtime="20210730 17:40:39.976"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:39.965" endtime="20210730 17:40:39.976"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:39.977" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:39.976" endtime="20210730 17:40:39.977"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:39.977" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210730 17:40:39.977" endtime="20210730 17:40:39.977"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:39.982" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:39.982" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:39.978" endtime="20210730 17:40:39.982"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:39.982" endtime="20210730 17:40:39.982"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:39.982" endtime="20210730 17:40:39.982"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:39.978" endtime="20210730 17:40:39.982"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:39.977" endtime="20210730 17:40:39.982"/>
</for>
<status status="FAIL" starttime="20210730 17:40:39.976" endtime="20210730 17:40:39.982"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:39.976" endtime="20210730 17:40:39.982"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:39.983" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:39.983" endtime="20210730 17:40:39.983"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:39.984" level="INFO">${payload} = {'username': 'hakan123'}</msg>
<status status="PASS" starttime="20210730 17:40:39.984" endtime="20210730 17:40:39.984"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:39.988" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:39.989" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:39.984" endtime="20210730 17:40:39.989"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:39.989" endtime="20210730 17:40:39.989"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:39.989" endtime="20210730 17:40:39.989"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:39.984" endtime="20210730 17:40:39.989"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:39.984" endtime="20210730 17:40:39.989"/>
</for>
<status status="FAIL" starttime="20210730 17:40:39.982" endtime="20210730 17:40:39.989"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:39.982" endtime="20210730 17:40:39.989"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:39.965" endtime="20210730 17:40:39.989"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:39.993" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:40.005" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:40.005" level="INFO">${pids} = 19550
19557
19562</msg>
<status status="PASS" starttime="20210730 17:40:39.990" endtime="20210730 17:40:40.005"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:40.006" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:40.005" endtime="20210730 17:40:40.006"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:40.006" level="INFO">${pids} = ['19550', '19557', '19562']</msg>
<status status="PASS" starttime="20210730 17:40:40.006" endtime="20210730 17:40:40.006"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19550</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:40.010" level="INFO">Running command 'kill 19550 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:40.007" endtime="20210730 17:40:40.011"/>
</kw>
<status status="PASS" starttime="20210730 17:40:40.007" endtime="20210730 17:40:40.011"/>
</iter>
<iter>
<var name="${pid}">19557</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:40.025" level="INFO">Running command 'kill 19557 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:40.011" endtime="20210730 17:40:40.026"/>
</kw>
<status status="PASS" starttime="20210730 17:40:40.011" endtime="20210730 17:40:40.026"/>
</iter>
<iter>
<var name="${pid}">19562</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:40.029" level="INFO">Running command 'kill 19562 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:40.026" endtime="20210730 17:40:40.030"/>
</kw>
<status status="PASS" starttime="20210730 17:40:40.026" endtime="20210730 17:40:40.030"/>
</iter>
<status status="PASS" starttime="20210730 17:40:40.006" endtime="20210730 17:40:40.030"/>
</for>
<status status="PASS" starttime="20210730 17:40:40.006" endtime="20210730 17:40:40.030"/>
</branch>
<status status="PASS" starttime="20210730 17:40:40.006" endtime="20210730 17:40:40.030"/>
</if>
<status status="PASS" starttime="20210730 17:40:39.990" endtime="20210730 17:40:40.030"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:38.415" endtime="20210730 17:40:40.030">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t13" name="With Each Valid Token, Updating Username Of Each System User With hakan123456789123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:40.035" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:40.045" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:40.045" level="INFO">${pids} = 19591</msg>
<status status="PASS" starttime="20210730 17:40:40.032" endtime="20210730 17:40:40.045"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:40.046" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:40.046" endtime="20210730 17:40:40.046"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:40.047" level="INFO">${pids} = ['19591']</msg>
<status status="PASS" starttime="20210730 17:40:40.046" endtime="20210730 17:40:40.047"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19591</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:40.056" level="INFO">Running command 'kill 19591 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:40.047" endtime="20210730 17:40:40.057"/>
</kw>
<status status="PASS" starttime="20210730 17:40:40.047" endtime="20210730 17:40:40.057"/>
</iter>
<status status="PASS" starttime="20210730 17:40:40.047" endtime="20210730 17:40:40.057"/>
</for>
<status status="PASS" starttime="20210730 17:40:40.046" endtime="20210730 17:40:40.057"/>
</branch>
<status status="PASS" starttime="20210730 17:40:40.046" endtime="20210730 17:40:40.057"/>
</if>
<status status="PASS" starttime="20210730 17:40:40.032" endtime="20210730 17:40:40.057"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:40.058" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:40.058" endtime="20210730 17:40:40.058"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:40.059" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:40.059" endtime="20210730 17:40:40.059"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:40.060" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:40.059" endtime="20210730 17:40:40.060"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:40.060" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:40.060" endtime="20210730 17:40:40.060"/>
</kw>
<msg timestamp="20210730 17:40:40.060" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:40.058" endtime="20210730 17:40:40.060"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:40.066" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:40.060" endtime="20210730 17:40:40.086"/>
</kw>
<status status="PASS" starttime="20210730 17:40:40.057" endtime="20210730 17:40:40.086"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:40.087" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:40.087" endtime="20210730 17:40:40.100"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:41.602" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:40.100" endtime="20210730 17:40:41.602"/>
</kw>
<status status="PASS" starttime="20210730 17:40:40.086" endtime="20210730 17:40:41.602"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:41.604" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:41.604" endtime="20210730 17:40:41.604"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:41.605" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:41.604" endtime="20210730 17:40:41.605"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:41.605" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:41.605" endtime="20210730 17:40:41.605"/>
</kw>
<msg timestamp="20210730 17:40:41.606" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:41.603" endtime="20210730 17:40:41.606"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:41.606" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:41.606" endtime="20210730 17:40:41.607"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.603" endtime="20210730 17:40:41.607"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:41.608" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:41.608" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:41.608" endtime="20210730 17:40:41.608"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.607" endtime="20210730 17:40:41.608"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:41.609" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:41.610" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:41.609" endtime="20210730 17:40:41.610"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:41.610" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:41.610" endtime="20210730 17:40:41.610"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:41.611" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:41.611" endtime="20210730 17:40:41.611"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:41.611" endtime="20210730 17:40:41.612"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:41.613" endtime="20210730 17:40:41.613"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.610" endtime="20210730 17:40:41.613"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:41.614" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:41.613" endtime="20210730 17:40:41.614"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:41.614" endtime="20210730 17:40:41.615"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:41.615" endtime="20210730 17:40:41.615"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.613" endtime="20210730 17:40:41.615"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:41.616" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:41.616" endtime="20210730 17:40:41.616"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:41.616" endtime="20210730 17:40:41.617"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:41.617" endtime="20210730 17:40:41.618"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.616" endtime="20210730 17:40:41.618"/>
</iter>
<status status="PASS" starttime="20210730 17:40:41.610" endtime="20210730 17:40:41.618"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:41.618" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:41.618" endtime="20210730 17:40:41.618"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.609" endtime="20210730 17:40:41.618"/>
</kw>
<status status="PASS" starttime="20210730 17:40:40.031" endtime="20210730 17:40:41.618"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:41.620" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:41.619" endtime="20210730 17:40:41.620"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:41.620" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210730 17:40:41.620" endtime="20210730 17:40:41.620"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:41.632" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:41.632" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:41.621" endtime="20210730 17:40:41.632"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:41.633" endtime="20210730 17:40:41.633"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:41.633" endtime="20210730 17:40:41.633"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:41.621" endtime="20210730 17:40:41.633"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:41.620" endtime="20210730 17:40:41.633"/>
</for>
<status status="FAIL" starttime="20210730 17:40:41.619" endtime="20210730 17:40:41.633"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:41.619" endtime="20210730 17:40:41.633"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:41.634" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:41.634" endtime="20210730 17:40:41.634"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:41.635" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210730 17:40:41.634" endtime="20210730 17:40:41.635"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:41.638" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:41.639" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:41.635" endtime="20210730 17:40:41.639"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:41.639" endtime="20210730 17:40:41.639"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:41.639" endtime="20210730 17:40:41.639"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:41.635" endtime="20210730 17:40:41.639"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:41.635" endtime="20210730 17:40:41.639"/>
</for>
<status status="FAIL" starttime="20210730 17:40:41.633" endtime="20210730 17:40:41.639"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:41.633" endtime="20210730 17:40:41.639"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=hakan123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:41.640" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:41.640" endtime="20210730 17:40:41.640"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:41.640" level="INFO">${payload} = {'username': 'hakan123456789123456789'}</msg>
<status status="PASS" starttime="20210730 17:40:41.640" endtime="20210730 17:40:41.640"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:41.644" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:41.644" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:41.641" endtime="20210730 17:40:41.644"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:41.644" endtime="20210730 17:40:41.644"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:41.644" endtime="20210730 17:40:41.645"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:41.641" endtime="20210730 17:40:41.645"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:41.640" endtime="20210730 17:40:41.645"/>
</for>
<status status="FAIL" starttime="20210730 17:40:41.639" endtime="20210730 17:40:41.645"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:41.639" endtime="20210730 17:40:41.645"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:41.619" endtime="20210730 17:40:41.645"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:41.654" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:41.662" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:41.662" level="INFO">${pids} = 19614
19621
19628</msg>
<status status="PASS" starttime="20210730 17:40:41.646" endtime="20210730 17:40:41.662"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:41.663" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:41.663" endtime="20210730 17:40:41.663"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:41.664" level="INFO">${pids} = ['19614', '19621', '19628']</msg>
<status status="PASS" starttime="20210730 17:40:41.664" endtime="20210730 17:40:41.664"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19614</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:41.667" level="INFO">Running command 'kill 19614 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:41.664" endtime="20210730 17:40:41.668"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.664" endtime="20210730 17:40:41.668"/>
</iter>
<iter>
<var name="${pid}">19621</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:41.670" level="INFO">Running command 'kill 19621 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:41.668" endtime="20210730 17:40:41.671"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.668" endtime="20210730 17:40:41.671"/>
</iter>
<iter>
<var name="${pid}">19628</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:41.674" level="INFO">Running command 'kill 19628 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:41.671" endtime="20210730 17:40:41.675"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.671" endtime="20210730 17:40:41.675"/>
</iter>
<status status="PASS" starttime="20210730 17:40:41.664" endtime="20210730 17:40:41.675"/>
</for>
<status status="PASS" starttime="20210730 17:40:41.663" endtime="20210730 17:40:41.675"/>
</branch>
<status status="PASS" starttime="20210730 17:40:41.663" endtime="20210730 17:40:41.675"/>
</if>
<status status="PASS" starttime="20210730 17:40:41.646" endtime="20210730 17:40:41.675"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'hakan123456789123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:40.031" endtime="20210730 17:40:41.675">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t14" name="With Each Valid Token, Updating Username Of Each System User With #¤%123! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:41.682" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:41.691" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:41.691" level="INFO">${pids} = 19657</msg>
<status status="PASS" starttime="20210730 17:40:41.677" endtime="20210730 17:40:41.691"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:41.692" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:41.691" endtime="20210730 17:40:41.692"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:41.693" level="INFO">${pids} = ['19657']</msg>
<status status="PASS" starttime="20210730 17:40:41.692" endtime="20210730 17:40:41.693"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19657</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:41.697" level="INFO">Running command 'kill 19657 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:41.693" endtime="20210730 17:40:41.698"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.693" endtime="20210730 17:40:41.698"/>
</iter>
<status status="PASS" starttime="20210730 17:40:41.693" endtime="20210730 17:40:41.698"/>
</for>
<status status="PASS" starttime="20210730 17:40:41.692" endtime="20210730 17:40:41.698"/>
</branch>
<status status="PASS" starttime="20210730 17:40:41.692" endtime="20210730 17:40:41.698"/>
</if>
<status status="PASS" starttime="20210730 17:40:41.677" endtime="20210730 17:40:41.698"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:41.699" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:41.699" endtime="20210730 17:40:41.699"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:41.700" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:41.700" endtime="20210730 17:40:41.700"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:41.700" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:41.700" endtime="20210730 17:40:41.700"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:41.701" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:41.700" endtime="20210730 17:40:41.701"/>
</kw>
<msg timestamp="20210730 17:40:41.701" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:41.699" endtime="20210730 17:40:41.701"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:41.704" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:41.701" endtime="20210730 17:40:41.706"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.699" endtime="20210730 17:40:41.706"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:41.709" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:41.708" endtime="20210730 17:40:41.715"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:43.222" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:41.715" endtime="20210730 17:40:43.223"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.706" endtime="20210730 17:40:43.224"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:43.227" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:43.227" endtime="20210730 17:40:43.227"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:43.228" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:43.227" endtime="20210730 17:40:43.228"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:43.228" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:43.228" endtime="20210730 17:40:43.228"/>
</kw>
<msg timestamp="20210730 17:40:43.228" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:43.226" endtime="20210730 17:40:43.228"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:43.229" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:43.228" endtime="20210730 17:40:43.229"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.225" endtime="20210730 17:40:43.229"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:43.230" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:43.230" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:43.230" endtime="20210730 17:40:43.230"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.229" endtime="20210730 17:40:43.230"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:43.231" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:43.231" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:43.231" endtime="20210730 17:40:43.231"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:43.231" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:43.231" endtime="20210730 17:40:43.231"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:43.232" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:43.231" endtime="20210730 17:40:43.232"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:43.232" endtime="20210730 17:40:43.233"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:43.233" endtime="20210730 17:40:43.233"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.231" endtime="20210730 17:40:43.233"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:43.233" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:43.233" endtime="20210730 17:40:43.233"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:43.233" endtime="20210730 17:40:43.234"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:43.234" endtime="20210730 17:40:43.234"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.233" endtime="20210730 17:40:43.234"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:43.235" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:43.234" endtime="20210730 17:40:43.235"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:43.235" endtime="20210730 17:40:43.235"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:43.236" endtime="20210730 17:40:43.236"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.234" endtime="20210730 17:40:43.236"/>
</iter>
<status status="PASS" starttime="20210730 17:40:43.231" endtime="20210730 17:40:43.236"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:43.236" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:43.236" endtime="20210730 17:40:43.236"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.230" endtime="20210730 17:40:43.236"/>
</kw>
<status status="PASS" starttime="20210730 17:40:41.676" endtime="20210730 17:40:43.236"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:43.239" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:43.237" endtime="20210730 17:40:43.239"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:43.239" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210730 17:40:43.239" endtime="20210730 17:40:43.239"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:43.248" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:43.248" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:43.240" endtime="20210730 17:40:43.248"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:43.249" endtime="20210730 17:40:43.249"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:43.249" endtime="20210730 17:40:43.249"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:43.240" endtime="20210730 17:40:43.249"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:43.239" endtime="20210730 17:40:43.249"/>
</for>
<status status="FAIL" starttime="20210730 17:40:43.237" endtime="20210730 17:40:43.249"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:43.237" endtime="20210730 17:40:43.249"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:43.250" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:43.250" endtime="20210730 17:40:43.250"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:43.251" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210730 17:40:43.250" endtime="20210730 17:40:43.251"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:43.255" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:43.255" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:43.251" endtime="20210730 17:40:43.255"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:43.255" endtime="20210730 17:40:43.255"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:43.255" endtime="20210730 17:40:43.255"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:43.251" endtime="20210730 17:40:43.255"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:43.251" endtime="20210730 17:40:43.255"/>
</for>
<status status="FAIL" starttime="20210730 17:40:43.249" endtime="20210730 17:40:43.255"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:43.249" endtime="20210730 17:40:43.255"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:43.256" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:43.256" endtime="20210730 17:40:43.257"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:43.257" level="INFO">${payload} = {'username': '#¤%123!'}</msg>
<status status="PASS" starttime="20210730 17:40:43.257" endtime="20210730 17:40:43.257"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:43.261" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:43.262" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:43.257" endtime="20210730 17:40:43.262"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:43.262" endtime="20210730 17:40:43.262"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:43.262" endtime="20210730 17:40:43.262"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:43.257" endtime="20210730 17:40:43.262"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:43.257" endtime="20210730 17:40:43.262"/>
</for>
<status status="FAIL" starttime="20210730 17:40:43.256" endtime="20210730 17:40:43.262"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:43.256" endtime="20210730 17:40:43.262"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:43.237" endtime="20210730 17:40:43.263"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:43.270" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:43.278" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:43.278" level="INFO">${pids} = 19680
19687
19691</msg>
<status status="PASS" starttime="20210730 17:40:43.264" endtime="20210730 17:40:43.278"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:43.279" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:43.278" endtime="20210730 17:40:43.279"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:43.280" level="INFO">${pids} = ['19680', '19687', '19691']</msg>
<status status="PASS" starttime="20210730 17:40:43.279" endtime="20210730 17:40:43.280"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19680</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:43.283" level="INFO">Running command 'kill 19680 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:43.280" endtime="20210730 17:40:43.284"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.280" endtime="20210730 17:40:43.284"/>
</iter>
<iter>
<var name="${pid}">19687</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:43.287" level="INFO">Running command 'kill 19687 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:43.284" endtime="20210730 17:40:43.287"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.284" endtime="20210730 17:40:43.287"/>
</iter>
<iter>
<var name="${pid}">19691</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:43.291" level="INFO">Running command 'kill 19691 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:43.287" endtime="20210730 17:40:43.291"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.287" endtime="20210730 17:40:43.291"/>
</iter>
<status status="PASS" starttime="20210730 17:40:43.280" endtime="20210730 17:40:43.292"/>
</for>
<status status="PASS" starttime="20210730 17:40:43.279" endtime="20210730 17:40:43.292"/>
</branch>
<status status="PASS" starttime="20210730 17:40:43.279" endtime="20210730 17:40:43.292"/>
</if>
<status status="PASS" starttime="20210730 17:40:43.263" endtime="20210730 17:40:43.292"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:41.676" endtime="20210730 17:40:43.292">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t15" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp; Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:43.300" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:43.309" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:43.310" level="INFO">${pids} = 19720</msg>
<status status="PASS" starttime="20210730 17:40:43.297" endtime="20210730 17:40:43.310"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:43.312" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:43.312" endtime="20210730 17:40:43.312"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:43.323" level="INFO">${pids} = ['19720']</msg>
<status status="PASS" starttime="20210730 17:40:43.322" endtime="20210730 17:40:43.323"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19720</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:43.329" level="INFO">Running command 'kill 19720 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:43.323" endtime="20210730 17:40:43.332"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.323" endtime="20210730 17:40:43.332"/>
</iter>
<status status="PASS" starttime="20210730 17:40:43.323" endtime="20210730 17:40:43.332"/>
</for>
<status status="PASS" starttime="20210730 17:40:43.322" endtime="20210730 17:40:43.332"/>
</branch>
<status status="PASS" starttime="20210730 17:40:43.312" endtime="20210730 17:40:43.332"/>
</if>
<status status="PASS" starttime="20210730 17:40:43.296" endtime="20210730 17:40:43.332"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:43.333" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:43.333" endtime="20210730 17:40:43.333"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:43.334" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:43.334" endtime="20210730 17:40:43.334"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:43.335" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:43.334" endtime="20210730 17:40:43.335"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:43.335" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:43.335" endtime="20210730 17:40:43.335"/>
</kw>
<msg timestamp="20210730 17:40:43.335" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:43.333" endtime="20210730 17:40:43.335"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:43.341" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:43.336" endtime="20210730 17:40:43.343"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.332" endtime="20210730 17:40:43.343"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:43.344" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:43.344" endtime="20210730 17:40:43.349"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:44.851" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:43.349" endtime="20210730 17:40:44.851"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.343" endtime="20210730 17:40:44.852"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:44.855" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:44.855" endtime="20210730 17:40:44.855"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:44.855" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:44.855" endtime="20210730 17:40:44.855"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:44.856" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:44.856" endtime="20210730 17:40:44.856"/>
</kw>
<msg timestamp="20210730 17:40:44.856" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:44.854" endtime="20210730 17:40:44.856"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:44.857" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:44.856" endtime="20210730 17:40:44.857"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.853" endtime="20210730 17:40:44.857"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:44.858" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:44.858" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:44.857" endtime="20210730 17:40:44.858"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.857" endtime="20210730 17:40:44.858"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:44.859" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:44.859" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:44.858" endtime="20210730 17:40:44.859"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:44.859" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:44.859" endtime="20210730 17:40:44.859"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:44.860" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:44.859" endtime="20210730 17:40:44.860"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:44.860" endtime="20210730 17:40:44.861"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:44.861" endtime="20210730 17:40:44.861"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.859" endtime="20210730 17:40:44.861"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:44.861" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:44.861" endtime="20210730 17:40:44.861"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:44.861" endtime="20210730 17:40:44.862"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:44.862" endtime="20210730 17:40:44.862"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.861" endtime="20210730 17:40:44.862"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:44.863" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:44.863" endtime="20210730 17:40:44.863"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:44.863" endtime="20210730 17:40:44.864"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:44.864" endtime="20210730 17:40:44.864"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.862" endtime="20210730 17:40:44.864"/>
</iter>
<status status="PASS" starttime="20210730 17:40:44.859" endtime="20210730 17:40:44.864"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:44.864" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:44.864" endtime="20210730 17:40:44.864"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.858" endtime="20210730 17:40:44.864"/>
</kw>
<status status="PASS" starttime="20210730 17:40:43.296" endtime="20210730 17:40:44.865"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:44.866" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:44.865" endtime="20210730 17:40:44.866"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:44.867" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210730 17:40:44.866" endtime="20210730 17:40:44.867"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:44.875" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:44.876" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:44.867" endtime="20210730 17:40:44.876"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:44.876" endtime="20210730 17:40:44.876"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:44.876" endtime="20210730 17:40:44.876"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:44.867" endtime="20210730 17:40:44.876"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:44.867" endtime="20210730 17:40:44.876"/>
</for>
<status status="FAIL" starttime="20210730 17:40:44.865" endtime="20210730 17:40:44.876"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:44.865" endtime="20210730 17:40:44.876"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:44.877" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:44.877" endtime="20210730 17:40:44.877"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:44.878" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210730 17:40:44.878" endtime="20210730 17:40:44.878"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:44.882" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:44.882" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:44.878" endtime="20210730 17:40:44.882"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:44.882" endtime="20210730 17:40:44.882"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:44.882" endtime="20210730 17:40:44.882"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:44.878" endtime="20210730 17:40:44.882"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:44.878" endtime="20210730 17:40:44.882"/>
</for>
<status status="FAIL" starttime="20210730 17:40:44.876" endtime="20210730 17:40:44.882"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:44.876" endtime="20210730 17:40:44.882"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:44.883" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:44.883" endtime="20210730 17:40:44.883"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:44.884" level="INFO">${payload} = {'username': '#¤%123!&amp;'}</msg>
<status status="PASS" starttime="20210730 17:40:44.884" endtime="20210730 17:40:44.884"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:44.887" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:44.887" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:44.884" endtime="20210730 17:40:44.887"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:44.887" endtime="20210730 17:40:44.887"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:44.887" endtime="20210730 17:40:44.888"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:44.884" endtime="20210730 17:40:44.888"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:44.884" endtime="20210730 17:40:44.888"/>
</for>
<status status="FAIL" starttime="20210730 17:40:44.883" endtime="20210730 17:40:44.888"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:44.883" endtime="20210730 17:40:44.888"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:44.865" endtime="20210730 17:40:44.888"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:44.895" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:44.905" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:44.905" level="INFO">${pids} = 19743
19750
19758</msg>
<status status="PASS" starttime="20210730 17:40:44.889" endtime="20210730 17:40:44.905"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:44.906" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:44.905" endtime="20210730 17:40:44.906"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:44.907" level="INFO">${pids} = ['19743', '19750', '19758']</msg>
<status status="PASS" starttime="20210730 17:40:44.906" endtime="20210730 17:40:44.907"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19743</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:44.910" level="INFO">Running command 'kill 19743 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:44.907" endtime="20210730 17:40:44.910"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.907" endtime="20210730 17:40:44.910"/>
</iter>
<iter>
<var name="${pid}">19750</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:44.913" level="INFO">Running command 'kill 19750 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:44.911" endtime="20210730 17:40:44.914"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.910" endtime="20210730 17:40:44.914"/>
</iter>
<iter>
<var name="${pid}">19758</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:44.917" level="INFO">Running command 'kill 19758 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:44.914" endtime="20210730 17:40:44.917"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.914" endtime="20210730 17:40:44.917"/>
</iter>
<status status="PASS" starttime="20210730 17:40:44.907" endtime="20210730 17:40:44.917"/>
</for>
<status status="PASS" starttime="20210730 17:40:44.906" endtime="20210730 17:40:44.917"/>
</branch>
<status status="PASS" starttime="20210730 17:40:44.906" endtime="20210730 17:40:44.917"/>
</if>
<status status="PASS" starttime="20210730 17:40:44.888" endtime="20210730 17:40:44.917"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:43.293" endtime="20210730 17:40:44.918">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t16" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp;7683##()=?@#¤%&amp;34567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:44.923" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:44.935" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:44.935" level="INFO">${pids} = 19787</msg>
<status status="PASS" starttime="20210730 17:40:44.920" endtime="20210730 17:40:44.935"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:44.936" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:44.935" endtime="20210730 17:40:44.936"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:44.937" level="INFO">${pids} = ['19787']</msg>
<status status="PASS" starttime="20210730 17:40:44.937" endtime="20210730 17:40:44.937"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19787</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:44.941" level="INFO">Running command 'kill 19787 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:44.937" endtime="20210730 17:40:44.941"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.937" endtime="20210730 17:40:44.941"/>
</iter>
<status status="PASS" starttime="20210730 17:40:44.937" endtime="20210730 17:40:44.941"/>
</for>
<status status="PASS" starttime="20210730 17:40:44.936" endtime="20210730 17:40:44.941"/>
</branch>
<status status="PASS" starttime="20210730 17:40:44.936" endtime="20210730 17:40:44.941"/>
</if>
<status status="PASS" starttime="20210730 17:40:44.919" endtime="20210730 17:40:44.941"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:44.943" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:44.942" endtime="20210730 17:40:44.943"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:44.943" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:44.943" endtime="20210730 17:40:44.943"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:44.944" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:44.944" endtime="20210730 17:40:44.944"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:44.944" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:44.944" endtime="20210730 17:40:44.944"/>
</kw>
<msg timestamp="20210730 17:40:44.945" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:44.943" endtime="20210730 17:40:44.945"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:44.959" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:44.945" endtime="20210730 17:40:44.960"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.942" endtime="20210730 17:40:44.960"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:44.961" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:44.961" endtime="20210730 17:40:44.965"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:46.467" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:44.965" endtime="20210730 17:40:46.468"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.960" endtime="20210730 17:40:46.469"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:46.475" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:46.474" endtime="20210730 17:40:46.475"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:46.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:46.475" endtime="20210730 17:40:46.476"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:46.477" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:46.476" endtime="20210730 17:40:46.478"/>
</kw>
<msg timestamp="20210730 17:40:46.478" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:46.472" endtime="20210730 17:40:46.478"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:46.479" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:46.479" endtime="20210730 17:40:46.480"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.470" endtime="20210730 17:40:46.480"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:46.482" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:46.482" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:46.481" endtime="20210730 17:40:46.482"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.481" endtime="20210730 17:40:46.482"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:46.484" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:46.484" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:46.483" endtime="20210730 17:40:46.484"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:46.484" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:46.484" endtime="20210730 17:40:46.484"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:46.486" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:46.485" endtime="20210730 17:40:46.486"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:46.486" endtime="20210730 17:40:46.487"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:46.487" endtime="20210730 17:40:46.488"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.485" endtime="20210730 17:40:46.488"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:46.488" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:46.488" endtime="20210730 17:40:46.488"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:46.489" endtime="20210730 17:40:46.490"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:46.490" endtime="20210730 17:40:46.490"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.488" endtime="20210730 17:40:46.490"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:46.491" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:46.490" endtime="20210730 17:40:46.491"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:46.491" endtime="20210730 17:40:46.492"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:46.492" endtime="20210730 17:40:46.493"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.490" endtime="20210730 17:40:46.493"/>
</iter>
<status status="PASS" starttime="20210730 17:40:46.485" endtime="20210730 17:40:46.493"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:46.493" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:46.493" endtime="20210730 17:40:46.493"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.483" endtime="20210730 17:40:46.494"/>
</kw>
<status status="PASS" starttime="20210730 17:40:44.919" endtime="20210730 17:40:46.494"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:46.495" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:46.495" endtime="20210730 17:40:46.495"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:46.496" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 17:40:46.496" endtime="20210730 17:40:46.496"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:46.505" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:46.506" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:46.496" endtime="20210730 17:40:46.506"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:46.506" endtime="20210730 17:40:46.506"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:46.506" endtime="20210730 17:40:46.506"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:46.496" endtime="20210730 17:40:46.506"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:46.496" endtime="20210730 17:40:46.506"/>
</for>
<status status="FAIL" starttime="20210730 17:40:46.494" endtime="20210730 17:40:46.507"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:46.494" endtime="20210730 17:40:46.507"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:46.508" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:46.507" endtime="20210730 17:40:46.508"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:46.508" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 17:40:46.508" endtime="20210730 17:40:46.508"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:46.512" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:46.512" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:46.508" endtime="20210730 17:40:46.512"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:46.512" endtime="20210730 17:40:46.512"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:46.512" endtime="20210730 17:40:46.512"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:46.508" endtime="20210730 17:40:46.512"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:46.508" endtime="20210730 17:40:46.512"/>
</for>
<status status="FAIL" starttime="20210730 17:40:46.507" endtime="20210730 17:40:46.512"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:46.507" endtime="20210730 17:40:46.512"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##()=?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:46.513" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:46.513" endtime="20210730 17:40:46.513"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:46.514" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##()=?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 17:40:46.513" endtime="20210730 17:40:46.514"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:46.517" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:46.517" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:46.514" endtime="20210730 17:40:46.517"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:46.517" endtime="20210730 17:40:46.517"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:46.517" endtime="20210730 17:40:46.518"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:46.514" endtime="20210730 17:40:46.518"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:46.514" endtime="20210730 17:40:46.518"/>
</for>
<status status="FAIL" starttime="20210730 17:40:46.512" endtime="20210730 17:40:46.518"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:46.512" endtime="20210730 17:40:46.518"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:46.494" endtime="20210730 17:40:46.518"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:46.522" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:46.532" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:46.532" level="INFO">${pids} = 19810
19817
19822</msg>
<status status="PASS" starttime="20210730 17:40:46.518" endtime="20210730 17:40:46.532"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:46.533" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:46.532" endtime="20210730 17:40:46.533"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:46.533" level="INFO">${pids} = ['19810', '19817', '19822']</msg>
<status status="PASS" starttime="20210730 17:40:46.533" endtime="20210730 17:40:46.533"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19810</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:46.537" level="INFO">Running command 'kill 19810 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:46.534" endtime="20210730 17:40:46.537"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.533" endtime="20210730 17:40:46.537"/>
</iter>
<iter>
<var name="${pid}">19817</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:46.540" level="INFO">Running command 'kill 19817 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:46.537" endtime="20210730 17:40:46.541"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.537" endtime="20210730 17:40:46.541"/>
</iter>
<iter>
<var name="${pid}">19822</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:46.545" level="INFO">Running command 'kill 19822 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:46.541" endtime="20210730 17:40:46.545"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.541" endtime="20210730 17:40:46.546"/>
</iter>
<status status="PASS" starttime="20210730 17:40:46.533" endtime="20210730 17:40:46.546"/>
</for>
<status status="PASS" starttime="20210730 17:40:46.533" endtime="20210730 17:40:46.546"/>
</branch>
<status status="PASS" starttime="20210730 17:40:46.533" endtime="20210730 17:40:46.546"/>
</if>
<status status="PASS" starttime="20210730 17:40:46.518" endtime="20210730 17:40:46.546"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;7683##()=?@#¤%&amp;34567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:44.918" endtime="20210730 17:40:46.546">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t17" name="With Each Valid Token, Updating Username Of Each System User With #¤123ab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:46.551" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:46.561" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:46.561" level="INFO">${pids} = 19851</msg>
<status status="PASS" starttime="20210730 17:40:46.548" endtime="20210730 17:40:46.561"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:46.561" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:46.561" endtime="20210730 17:40:46.561"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:46.562" level="INFO">${pids} = ['19851']</msg>
<status status="PASS" starttime="20210730 17:40:46.562" endtime="20210730 17:40:46.562"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19851</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:46.565" level="INFO">Running command 'kill 19851 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:46.562" endtime="20210730 17:40:46.565"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.562" endtime="20210730 17:40:46.565"/>
</iter>
<status status="PASS" starttime="20210730 17:40:46.562" endtime="20210730 17:40:46.566"/>
</for>
<status status="PASS" starttime="20210730 17:40:46.562" endtime="20210730 17:40:46.566"/>
</branch>
<status status="PASS" starttime="20210730 17:40:46.562" endtime="20210730 17:40:46.566"/>
</if>
<status status="PASS" starttime="20210730 17:40:46.547" endtime="20210730 17:40:46.566"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:46.567" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:46.566" endtime="20210730 17:40:46.567"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:46.567" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:46.567" endtime="20210730 17:40:46.567"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:46.568" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:46.567" endtime="20210730 17:40:46.568"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:46.568" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:46.568" endtime="20210730 17:40:46.568"/>
</kw>
<msg timestamp="20210730 17:40:46.568" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:46.567" endtime="20210730 17:40:46.568"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:46.575" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:46.568" endtime="20210730 17:40:46.585"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.566" endtime="20210730 17:40:46.586"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:46.587" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:46.587" endtime="20210730 17:40:46.591"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:48.093" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:46.592" endtime="20210730 17:40:48.093"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.586" endtime="20210730 17:40:48.093"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:48.094" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:48.094" endtime="20210730 17:40:48.095"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:48.095" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:48.095" endtime="20210730 17:40:48.095"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:48.095" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:48.095" endtime="20210730 17:40:48.095"/>
</kw>
<msg timestamp="20210730 17:40:48.095" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:48.094" endtime="20210730 17:40:48.095"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:48.096" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:48.096" endtime="20210730 17:40:48.096"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.094" endtime="20210730 17:40:48.096"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:48.097" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:48.097" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:48.097" endtime="20210730 17:40:48.097"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.096" endtime="20210730 17:40:48.097"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:48.098" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:48.098" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:48.097" endtime="20210730 17:40:48.098"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:48.098" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:48.098" endtime="20210730 17:40:48.098"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:48.099" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:48.098" endtime="20210730 17:40:48.099"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:48.099" endtime="20210730 17:40:48.099"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:48.100" endtime="20210730 17:40:48.100"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.098" endtime="20210730 17:40:48.100"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:48.100" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:48.100" endtime="20210730 17:40:48.100"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:48.100" endtime="20210730 17:40:48.101"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:48.101" endtime="20210730 17:40:48.101"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.100" endtime="20210730 17:40:48.101"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:48.102" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:48.102" endtime="20210730 17:40:48.102"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:48.102" endtime="20210730 17:40:48.103"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:48.103" endtime="20210730 17:40:48.103"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.101" endtime="20210730 17:40:48.103"/>
</iter>
<status status="PASS" starttime="20210730 17:40:48.098" endtime="20210730 17:40:48.103"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:48.104" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:48.103" endtime="20210730 17:40:48.104"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.097" endtime="20210730 17:40:48.104"/>
</kw>
<status status="PASS" starttime="20210730 17:40:46.547" endtime="20210730 17:40:48.104"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:48.105" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:48.105" endtime="20210730 17:40:48.105"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:48.106" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210730 17:40:48.105" endtime="20210730 17:40:48.106"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:48.115" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:48.115" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:48.106" endtime="20210730 17:40:48.115"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:48.115" endtime="20210730 17:40:48.116"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:48.116" endtime="20210730 17:40:48.116"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:48.106" endtime="20210730 17:40:48.116"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:48.106" endtime="20210730 17:40:48.116"/>
</for>
<status status="FAIL" starttime="20210730 17:40:48.104" endtime="20210730 17:40:48.116"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:48.104" endtime="20210730 17:40:48.116"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:48.117" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:48.117" endtime="20210730 17:40:48.117"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:48.117" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210730 17:40:48.117" endtime="20210730 17:40:48.117"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:48.121" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:48.122" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:48.118" endtime="20210730 17:40:48.122"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:48.122" endtime="20210730 17:40:48.122"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:48.122" endtime="20210730 17:40:48.122"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:48.118" endtime="20210730 17:40:48.122"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:48.118" endtime="20210730 17:40:48.122"/>
</for>
<status status="FAIL" starttime="20210730 17:40:48.116" endtime="20210730 17:40:48.122"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:48.116" endtime="20210730 17:40:48.122"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:48.123" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:48.123" endtime="20210730 17:40:48.123"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:48.124" level="INFO">${payload} = {'username': '#¤123ab'}</msg>
<status status="PASS" starttime="20210730 17:40:48.123" endtime="20210730 17:40:48.124"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:48.128" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:48.128" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:48.124" endtime="20210730 17:40:48.128"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:48.128" endtime="20210730 17:40:48.128"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:48.128" endtime="20210730 17:40:48.128"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:48.124" endtime="20210730 17:40:48.128"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:48.124" endtime="20210730 17:40:48.128"/>
</for>
<status status="FAIL" starttime="20210730 17:40:48.122" endtime="20210730 17:40:48.128"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:48.122" endtime="20210730 17:40:48.129"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:48.104" endtime="20210730 17:40:48.129"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:48.134" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:48.144" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:48.144" level="INFO">${pids} = 19874
19881
19885</msg>
<status status="PASS" starttime="20210730 17:40:48.129" endtime="20210730 17:40:48.144"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:48.145" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:48.145" endtime="20210730 17:40:48.145"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:48.146" level="INFO">${pids} = ['19874', '19881', '19885']</msg>
<status status="PASS" starttime="20210730 17:40:48.145" endtime="20210730 17:40:48.146"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19874</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:48.149" level="INFO">Running command 'kill 19874 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:48.146" endtime="20210730 17:40:48.149"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.146" endtime="20210730 17:40:48.150"/>
</iter>
<iter>
<var name="${pid}">19881</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:48.153" level="INFO">Running command 'kill 19881 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:48.150" endtime="20210730 17:40:48.154"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.150" endtime="20210730 17:40:48.154"/>
</iter>
<iter>
<var name="${pid}">19885</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:48.157" level="INFO">Running command 'kill 19885 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:48.154" endtime="20210730 17:40:48.158"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.154" endtime="20210730 17:40:48.158"/>
</iter>
<status status="PASS" starttime="20210730 17:40:48.146" endtime="20210730 17:40:48.158"/>
</for>
<status status="PASS" starttime="20210730 17:40:48.145" endtime="20210730 17:40:48.158"/>
</branch>
<status status="PASS" starttime="20210730 17:40:48.145" endtime="20210730 17:40:48.158"/>
</if>
<status status="PASS" starttime="20210730 17:40:48.129" endtime="20210730 17:40:48.158"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤123ab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:46.547" endtime="20210730 17:40:48.158">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t18" name="With Each Valid Token, Updating Username Of Each System User With #¤123abc Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:48.166" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:48.174" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:48.175" level="INFO">${pids} = 19914</msg>
<status status="PASS" starttime="20210730 17:40:48.160" endtime="20210730 17:40:48.175"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:48.175" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:48.175" endtime="20210730 17:40:48.175"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:48.176" level="INFO">${pids} = ['19914']</msg>
<status status="PASS" starttime="20210730 17:40:48.176" endtime="20210730 17:40:48.176"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19914</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:48.179" level="INFO">Running command 'kill 19914 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:48.176" endtime="20210730 17:40:48.179"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.176" endtime="20210730 17:40:48.180"/>
</iter>
<status status="PASS" starttime="20210730 17:40:48.176" endtime="20210730 17:40:48.180"/>
</for>
<status status="PASS" starttime="20210730 17:40:48.176" endtime="20210730 17:40:48.180"/>
</branch>
<status status="PASS" starttime="20210730 17:40:48.175" endtime="20210730 17:40:48.180"/>
</if>
<status status="PASS" starttime="20210730 17:40:48.160" endtime="20210730 17:40:48.180"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:48.181" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:48.181" endtime="20210730 17:40:48.181"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:48.182" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:48.181" endtime="20210730 17:40:48.182"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:48.182" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:48.182" endtime="20210730 17:40:48.182"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:48.182" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:48.182" endtime="20210730 17:40:48.182"/>
</kw>
<msg timestamp="20210730 17:40:48.183" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:48.181" endtime="20210730 17:40:48.183"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:48.191" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:48.183" endtime="20210730 17:40:48.192"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.180" endtime="20210730 17:40:48.193"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:48.194" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:48.194" endtime="20210730 17:40:48.200"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:49.702" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:48.201" endtime="20210730 17:40:49.702"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.193" endtime="20210730 17:40:49.702"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:49.704" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:49.704" endtime="20210730 17:40:49.705"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:49.705" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:49.705" endtime="20210730 17:40:49.705"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:49.706" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:49.705" endtime="20210730 17:40:49.706"/>
</kw>
<msg timestamp="20210730 17:40:49.707" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:49.703" endtime="20210730 17:40:49.707"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:49.707" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:49.707" endtime="20210730 17:40:49.707"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.703" endtime="20210730 17:40:49.708"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:49.708" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:49.708" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:49.708" endtime="20210730 17:40:49.708"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.708" endtime="20210730 17:40:49.708"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:49.709" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:49.709" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:49.709" endtime="20210730 17:40:49.709"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:49.709" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:49.709" endtime="20210730 17:40:49.710"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:49.710" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:49.710" endtime="20210730 17:40:49.710"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:49.710" endtime="20210730 17:40:49.711"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:49.711" endtime="20210730 17:40:49.711"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.710" endtime="20210730 17:40:49.711"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:49.712" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:49.711" endtime="20210730 17:40:49.712"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:49.712" endtime="20210730 17:40:49.712"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:49.712" endtime="20210730 17:40:49.713"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.711" endtime="20210730 17:40:49.713"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:49.713" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:49.713" endtime="20210730 17:40:49.713"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:49.713" endtime="20210730 17:40:49.714"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:49.714" endtime="20210730 17:40:49.714"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.713" endtime="20210730 17:40:49.714"/>
</iter>
<status status="PASS" starttime="20210730 17:40:49.710" endtime="20210730 17:40:49.714"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:49.715" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:49.714" endtime="20210730 17:40:49.715"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.708" endtime="20210730 17:40:49.715"/>
</kw>
<status status="PASS" starttime="20210730 17:40:48.160" endtime="20210730 17:40:49.715"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:49.716" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:49.716" endtime="20210730 17:40:49.716"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:49.716" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210730 17:40:49.716" endtime="20210730 17:40:49.716"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:49.725" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:49.726" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:49.717" endtime="20210730 17:40:49.726"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:49.726" endtime="20210730 17:40:49.726"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:49.726" endtime="20210730 17:40:49.726"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:49.716" endtime="20210730 17:40:49.726"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:49.716" endtime="20210730 17:40:49.726"/>
</for>
<status status="FAIL" starttime="20210730 17:40:49.715" endtime="20210730 17:40:49.727"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:49.715" endtime="20210730 17:40:49.727"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:49.728" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:49.727" endtime="20210730 17:40:49.728"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:49.728" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210730 17:40:49.728" endtime="20210730 17:40:49.728"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:49.732" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:49.732" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:49.728" endtime="20210730 17:40:49.732"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:49.733" endtime="20210730 17:40:49.733"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:49.733" endtime="20210730 17:40:49.733"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:49.728" endtime="20210730 17:40:49.733"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:49.728" endtime="20210730 17:40:49.733"/>
</for>
<status status="FAIL" starttime="20210730 17:40:49.727" endtime="20210730 17:40:49.733"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:49.727" endtime="20210730 17:40:49.733"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:49.734" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:49.734" endtime="20210730 17:40:49.734"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:49.734" level="INFO">${payload} = {'username': '#¤123abc'}</msg>
<status status="PASS" starttime="20210730 17:40:49.734" endtime="20210730 17:40:49.734"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:49.738" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:49.739" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:49.735" endtime="20210730 17:40:49.739"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:49.739" endtime="20210730 17:40:49.739"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:49.739" endtime="20210730 17:40:49.739"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:49.735" endtime="20210730 17:40:49.739"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:49.734" endtime="20210730 17:40:49.739"/>
</for>
<status status="FAIL" starttime="20210730 17:40:49.733" endtime="20210730 17:40:49.739"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:49.733" endtime="20210730 17:40:49.739"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:49.715" endtime="20210730 17:40:49.739"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:49.745" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:49.754" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:49.754" level="INFO">${pids} = 19937
19944
19948</msg>
<status status="PASS" starttime="20210730 17:40:49.740" endtime="20210730 17:40:49.754"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:49.755" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:49.754" endtime="20210730 17:40:49.755"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:49.756" level="INFO">${pids} = ['19937', '19944', '19948']</msg>
<status status="PASS" starttime="20210730 17:40:49.755" endtime="20210730 17:40:49.756"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19937</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:49.759" level="INFO">Running command 'kill 19937 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:49.756" endtime="20210730 17:40:49.759"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.756" endtime="20210730 17:40:49.759"/>
</iter>
<iter>
<var name="${pid}">19944</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:49.762" level="INFO">Running command 'kill 19944 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:49.760" endtime="20210730 17:40:49.762"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.759" endtime="20210730 17:40:49.762"/>
</iter>
<iter>
<var name="${pid}">19948</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:49.766" level="INFO">Running command 'kill 19948 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:49.763" endtime="20210730 17:40:49.766"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.763" endtime="20210730 17:40:49.766"/>
</iter>
<status status="PASS" starttime="20210730 17:40:49.756" endtime="20210730 17:40:49.766"/>
</for>
<status status="PASS" starttime="20210730 17:40:49.755" endtime="20210730 17:40:49.766"/>
</branch>
<status status="PASS" starttime="20210730 17:40:49.755" endtime="20210730 17:40:49.766"/>
</if>
<status status="PASS" starttime="20210730 17:40:49.740" endtime="20210730 17:40:49.767"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤123abc'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:48.159" endtime="20210730 17:40:49.767">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t19" name="With Each Valid Token, Updating Username Of Each System User With #¤/&amp;¤!!123abc456hjk Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:49.772" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:49.783" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:49.783" level="INFO">${pids} = 19977</msg>
<status status="PASS" starttime="20210730 17:40:49.769" endtime="20210730 17:40:49.783"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:49.784" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:49.783" endtime="20210730 17:40:49.784"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:49.785" level="INFO">${pids} = ['19977']</msg>
<status status="PASS" starttime="20210730 17:40:49.784" endtime="20210730 17:40:49.785"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">19977</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:49.788" level="INFO">Running command 'kill 19977 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:49.785" endtime="20210730 17:40:49.788"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.785" endtime="20210730 17:40:49.788"/>
</iter>
<status status="PASS" starttime="20210730 17:40:49.785" endtime="20210730 17:40:49.789"/>
</for>
<status status="PASS" starttime="20210730 17:40:49.784" endtime="20210730 17:40:49.789"/>
</branch>
<status status="PASS" starttime="20210730 17:40:49.784" endtime="20210730 17:40:49.789"/>
</if>
<status status="PASS" starttime="20210730 17:40:49.769" endtime="20210730 17:40:49.789"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:49.790" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:49.790" endtime="20210730 17:40:49.790"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:49.790" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:49.790" endtime="20210730 17:40:49.791"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:49.791" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:49.791" endtime="20210730 17:40:49.791"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:49.791" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:49.791" endtime="20210730 17:40:49.791"/>
</kw>
<msg timestamp="20210730 17:40:49.791" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:49.790" endtime="20210730 17:40:49.791"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:49.794" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:49.792" endtime="20210730 17:40:49.799"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.789" endtime="20210730 17:40:49.799"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:49.801" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:49.800" endtime="20210730 17:40:49.813"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:51.320" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:49.814" endtime="20210730 17:40:51.321"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.800" endtime="20210730 17:40:51.322"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:51.325" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:51.325" endtime="20210730 17:40:51.325"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:51.325" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:51.325" endtime="20210730 17:40:51.326"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:51.326" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:51.326" endtime="20210730 17:40:51.326"/>
</kw>
<msg timestamp="20210730 17:40:51.326" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:51.325" endtime="20210730 17:40:51.326"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:51.326" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:51.326" endtime="20210730 17:40:51.327"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.323" endtime="20210730 17:40:51.327"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:51.327" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:51.327" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:51.327" endtime="20210730 17:40:51.328"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.327" endtime="20210730 17:40:51.328"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:51.328" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:51.329" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:51.328" endtime="20210730 17:40:51.329"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:51.329" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:51.329" endtime="20210730 17:40:51.329"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:51.329" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:51.329" endtime="20210730 17:40:51.329"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:51.330" endtime="20210730 17:40:51.330"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:51.330" endtime="20210730 17:40:51.331"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.329" endtime="20210730 17:40:51.331"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:51.331" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:51.331" endtime="20210730 17:40:51.331"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:51.331" endtime="20210730 17:40:51.332"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:51.332" endtime="20210730 17:40:51.332"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.331" endtime="20210730 17:40:51.332"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:51.332" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:51.332" endtime="20210730 17:40:51.332"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:51.332" endtime="20210730 17:40:51.333"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:51.333" endtime="20210730 17:40:51.334"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.332" endtime="20210730 17:40:51.334"/>
</iter>
<status status="PASS" starttime="20210730 17:40:51.329" endtime="20210730 17:40:51.334"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:51.334" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:51.334" endtime="20210730 17:40:51.334"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.328" endtime="20210730 17:40:51.334"/>
</kw>
<status status="PASS" starttime="20210730 17:40:49.768" endtime="20210730 17:40:51.334"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:51.335" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:51.335" endtime="20210730 17:40:51.335"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:51.336" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 17:40:51.336" endtime="20210730 17:40:51.336"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:51.344" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:51.344" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:51.336" endtime="20210730 17:40:51.344"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:51.345" endtime="20210730 17:40:51.345"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:51.345" endtime="20210730 17:40:51.345"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:51.336" endtime="20210730 17:40:51.345"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:51.336" endtime="20210730 17:40:51.345"/>
</for>
<status status="FAIL" starttime="20210730 17:40:51.335" endtime="20210730 17:40:51.345"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:51.335" endtime="20210730 17:40:51.345"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:51.347" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:51.347" endtime="20210730 17:40:51.347"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:51.347" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 17:40:51.347" endtime="20210730 17:40:51.348"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:51.352" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:51.352" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:51.348" endtime="20210730 17:40:51.352"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:51.352" endtime="20210730 17:40:51.352"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:51.352" endtime="20210730 17:40:51.352"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:51.348" endtime="20210730 17:40:51.352"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:51.348" endtime="20210730 17:40:51.353"/>
</for>
<status status="FAIL" starttime="20210730 17:40:51.345" endtime="20210730 17:40:51.353"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:51.345" endtime="20210730 17:40:51.353"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;¤!!123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:51.354" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:51.353" endtime="20210730 17:40:51.354"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:51.354" level="INFO">${payload} = {'username': '#¤/&amp;¤!!123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 17:40:51.354" endtime="20210730 17:40:51.354"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:51.359" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:51.359" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:51.354" endtime="20210730 17:40:51.360"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:51.360" endtime="20210730 17:40:51.360"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:51.360" endtime="20210730 17:40:51.360"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:51.354" endtime="20210730 17:40:51.360"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:51.354" endtime="20210730 17:40:51.360"/>
</for>
<status status="FAIL" starttime="20210730 17:40:51.353" endtime="20210730 17:40:51.361"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:51.353" endtime="20210730 17:40:51.361"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:51.335" endtime="20210730 17:40:51.361"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:51.370" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:51.381" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:51.381" level="INFO">${pids} = 20000
20007
20013</msg>
<status status="PASS" starttime="20210730 17:40:51.363" endtime="20210730 17:40:51.381"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:51.382" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:51.382" endtime="20210730 17:40:51.382"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:51.383" level="INFO">${pids} = ['20000', '20007', '20013']</msg>
<status status="PASS" starttime="20210730 17:40:51.382" endtime="20210730 17:40:51.383"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20000</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:51.386" level="INFO">Running command 'kill 20000 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:51.383" endtime="20210730 17:40:51.386"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.383" endtime="20210730 17:40:51.386"/>
</iter>
<iter>
<var name="${pid}">20007</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:51.391" level="INFO">Running command 'kill 20007 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:51.387" endtime="20210730 17:40:51.393"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.387" endtime="20210730 17:40:51.393"/>
</iter>
<iter>
<var name="${pid}">20013</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:51.396" level="INFO">Running command 'kill 20013 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:51.393" endtime="20210730 17:40:51.396"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.393" endtime="20210730 17:40:51.397"/>
</iter>
<status status="PASS" starttime="20210730 17:40:51.383" endtime="20210730 17:40:51.397"/>
</for>
<status status="PASS" starttime="20210730 17:40:51.382" endtime="20210730 17:40:51.397"/>
</branch>
<status status="PASS" starttime="20210730 17:40:51.382" endtime="20210730 17:40:51.397"/>
</if>
<status status="PASS" starttime="20210730 17:40:51.362" endtime="20210730 17:40:51.397"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/&amp;¤!!123abc456hjk'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:49.767" endtime="20210730 17:40:51.397">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t20" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:51.401" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:51.412" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:51.412" level="INFO">${pids} = 20042</msg>
<status status="PASS" starttime="20210730 17:40:51.399" endtime="20210730 17:40:51.412"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:51.413" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:51.412" endtime="20210730 17:40:51.413"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:51.414" level="INFO">${pids} = ['20042']</msg>
<status status="PASS" starttime="20210730 17:40:51.414" endtime="20210730 17:40:51.414"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20042</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:51.417" level="INFO">Running command 'kill 20042 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:51.414" endtime="20210730 17:40:51.417"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.414" endtime="20210730 17:40:51.417"/>
</iter>
<status status="PASS" starttime="20210730 17:40:51.414" endtime="20210730 17:40:51.417"/>
</for>
<status status="PASS" starttime="20210730 17:40:51.413" endtime="20210730 17:40:51.418"/>
</branch>
<status status="PASS" starttime="20210730 17:40:51.413" endtime="20210730 17:40:51.418"/>
</if>
<status status="PASS" starttime="20210730 17:40:51.399" endtime="20210730 17:40:51.418"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:51.419" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:51.418" endtime="20210730 17:40:51.419"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:51.419" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:51.419" endtime="20210730 17:40:51.419"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:51.419" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:51.419" endtime="20210730 17:40:51.419"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:51.420" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:51.420" endtime="20210730 17:40:51.420"/>
</kw>
<msg timestamp="20210730 17:40:51.420" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:51.419" endtime="20210730 17:40:51.420"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:51.423" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:51.420" endtime="20210730 17:40:51.426"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.418" endtime="20210730 17:40:51.427"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:51.428" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:51.427" endtime="20210730 17:40:51.432"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:52.934" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:51.432" endtime="20210730 17:40:52.934"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.427" endtime="20210730 17:40:52.935"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:52.938" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:52.938" endtime="20210730 17:40:52.938"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:52.939" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:52.938" endtime="20210730 17:40:52.939"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:52.939" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:52.939" endtime="20210730 17:40:52.939"/>
</kw>
<msg timestamp="20210730 17:40:52.939" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:52.937" endtime="20210730 17:40:52.939"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:52.940" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:52.939" endtime="20210730 17:40:52.940"/>
</kw>
<status status="PASS" starttime="20210730 17:40:52.936" endtime="20210730 17:40:52.940"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:52.941" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:52.941" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:52.941" endtime="20210730 17:40:52.941"/>
</kw>
<status status="PASS" starttime="20210730 17:40:52.940" endtime="20210730 17:40:52.941"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:52.943" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:52.943" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:52.941" endtime="20210730 17:40:52.943"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:52.943" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:52.943" endtime="20210730 17:40:52.943"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:52.943" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:52.943" endtime="20210730 17:40:52.943"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:52.944" endtime="20210730 17:40:52.944"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:52.944" endtime="20210730 17:40:52.945"/>
</kw>
<status status="PASS" starttime="20210730 17:40:52.943" endtime="20210730 17:40:52.945"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:52.945" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:52.945" endtime="20210730 17:40:52.945"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:52.945" endtime="20210730 17:40:52.946"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:52.946" endtime="20210730 17:40:52.946"/>
</kw>
<status status="PASS" starttime="20210730 17:40:52.945" endtime="20210730 17:40:52.946"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:52.946" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:52.946" endtime="20210730 17:40:52.946"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:52.947" endtime="20210730 17:40:52.947"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:52.947" endtime="20210730 17:40:52.948"/>
</kw>
<status status="PASS" starttime="20210730 17:40:52.946" endtime="20210730 17:40:52.948"/>
</iter>
<status status="PASS" starttime="20210730 17:40:52.943" endtime="20210730 17:40:52.948"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:52.948" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:52.948" endtime="20210730 17:40:52.948"/>
</kw>
<status status="PASS" starttime="20210730 17:40:52.941" endtime="20210730 17:40:52.948"/>
</kw>
<status status="PASS" starttime="20210730 17:40:51.398" endtime="20210730 17:40:52.948"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:52.950" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:52.949" endtime="20210730 17:40:52.950"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:52.950" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210730 17:40:52.950" endtime="20210730 17:40:52.950"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:52.959" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:52.960" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:52.950" endtime="20210730 17:40:52.960"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:52.960" endtime="20210730 17:40:52.960"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:52.960" endtime="20210730 17:40:52.960"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:52.950" endtime="20210730 17:40:52.960"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:52.950" endtime="20210730 17:40:52.960"/>
</for>
<status status="FAIL" starttime="20210730 17:40:52.949" endtime="20210730 17:40:52.961"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:52.949" endtime="20210730 17:40:52.961"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:52.962" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:52.961" endtime="20210730 17:40:52.962"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:52.962" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210730 17:40:52.962" endtime="20210730 17:40:52.962"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:52.966" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:52.966" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:52.962" endtime="20210730 17:40:52.966"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:52.966" endtime="20210730 17:40:52.966"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:52.966" endtime="20210730 17:40:52.966"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:52.962" endtime="20210730 17:40:52.966"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:52.962" endtime="20210730 17:40:52.966"/>
</for>
<status status="FAIL" starttime="20210730 17:40:52.961" endtime="20210730 17:40:52.967"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:52.961" endtime="20210730 17:40:52.967"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:52.967" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:52.967" endtime="20210730 17:40:52.967"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:52.968" level="INFO">${payload} = {'username': '#¤/abc!'}</msg>
<status status="PASS" starttime="20210730 17:40:52.968" endtime="20210730 17:40:52.968"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:52.971" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:52.971" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:52.968" endtime="20210730 17:40:52.971"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:52.971" endtime="20210730 17:40:52.971"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:52.971" endtime="20210730 17:40:52.972"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:52.968" endtime="20210730 17:40:52.972"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:52.968" endtime="20210730 17:40:52.972"/>
</for>
<status status="FAIL" starttime="20210730 17:40:52.967" endtime="20210730 17:40:52.972"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:52.967" endtime="20210730 17:40:52.972"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:52.949" endtime="20210730 17:40:52.972"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:52.976" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:52.986" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:52.986" level="INFO">${pids} = 20065
20072
20076</msg>
<status status="PASS" starttime="20210730 17:40:52.973" endtime="20210730 17:40:52.986"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:52.987" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:52.987" endtime="20210730 17:40:52.987"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:52.988" level="INFO">${pids} = ['20065', '20072', '20076']</msg>
<status status="PASS" starttime="20210730 17:40:52.988" endtime="20210730 17:40:52.988"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20065</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:52.992" level="INFO">Running command 'kill 20065 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:52.988" endtime="20210730 17:40:52.992"/>
</kw>
<status status="PASS" starttime="20210730 17:40:52.988" endtime="20210730 17:40:52.992"/>
</iter>
<iter>
<var name="${pid}">20072</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:52.995" level="INFO">Running command 'kill 20072 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:52.992" endtime="20210730 17:40:52.995"/>
</kw>
<status status="PASS" starttime="20210730 17:40:52.992" endtime="20210730 17:40:52.995"/>
</iter>
<iter>
<var name="${pid}">20076</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:53.002" level="INFO">Running command 'kill 20076 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:52.996" endtime="20210730 17:40:53.002"/>
</kw>
<status status="PASS" starttime="20210730 17:40:52.996" endtime="20210730 17:40:53.002"/>
</iter>
<status status="PASS" starttime="20210730 17:40:52.988" endtime="20210730 17:40:53.002"/>
</for>
<status status="PASS" starttime="20210730 17:40:52.988" endtime="20210730 17:40:53.002"/>
</branch>
<status status="PASS" starttime="20210730 17:40:52.987" endtime="20210730 17:40:53.002"/>
</if>
<status status="PASS" starttime="20210730 17:40:52.972" endtime="20210730 17:40:53.003"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:51.398" endtime="20210730 17:40:53.003">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t21" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:53.008" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:53.017" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:53.017" level="INFO">${pids} = 20105</msg>
<status status="PASS" starttime="20210730 17:40:53.004" endtime="20210730 17:40:53.017"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:53.018" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:53.017" endtime="20210730 17:40:53.018"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:53.019" level="INFO">${pids} = ['20105']</msg>
<status status="PASS" starttime="20210730 17:40:53.019" endtime="20210730 17:40:53.019"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20105</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:53.022" level="INFO">Running command 'kill 20105 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:53.019" endtime="20210730 17:40:53.023"/>
</kw>
<status status="PASS" starttime="20210730 17:40:53.019" endtime="20210730 17:40:53.023"/>
</iter>
<status status="PASS" starttime="20210730 17:40:53.019" endtime="20210730 17:40:53.023"/>
</for>
<status status="PASS" starttime="20210730 17:40:53.018" endtime="20210730 17:40:53.023"/>
</branch>
<status status="PASS" starttime="20210730 17:40:53.018" endtime="20210730 17:40:53.023"/>
</if>
<status status="PASS" starttime="20210730 17:40:53.004" endtime="20210730 17:40:53.023"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:53.024" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:53.024" endtime="20210730 17:40:53.024"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:53.025" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:53.025" endtime="20210730 17:40:53.025"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:53.026" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:53.025" endtime="20210730 17:40:53.026"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:53.026" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:53.026" endtime="20210730 17:40:53.026"/>
</kw>
<msg timestamp="20210730 17:40:53.026" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:53.025" endtime="20210730 17:40:53.026"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:53.041" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:53.026" endtime="20210730 17:40:53.043"/>
</kw>
<status status="PASS" starttime="20210730 17:40:53.024" endtime="20210730 17:40:53.044"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:53.045" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:53.044" endtime="20210730 17:40:53.048"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:54.550" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:53.049" endtime="20210730 17:40:54.551"/>
</kw>
<status status="PASS" starttime="20210730 17:40:53.044" endtime="20210730 17:40:54.552"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:54.557" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:54.556" endtime="20210730 17:40:54.557"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:54.558" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:54.557" endtime="20210730 17:40:54.558"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:54.559" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:54.559" endtime="20210730 17:40:54.559"/>
</kw>
<msg timestamp="20210730 17:40:54.560" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:54.555" endtime="20210730 17:40:54.560"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:54.561" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:54.560" endtime="20210730 17:40:54.562"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.553" endtime="20210730 17:40:54.562"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:54.563" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:54.563" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:54.563" endtime="20210730 17:40:54.563"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.562" endtime="20210730 17:40:54.564"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:54.565" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:54.565" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:54.564" endtime="20210730 17:40:54.565"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:54.566" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:54.566" endtime="20210730 17:40:54.566"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:54.567" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:54.566" endtime="20210730 17:40:54.567"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:54.567" endtime="20210730 17:40:54.568"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:54.569" endtime="20210730 17:40:54.569"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.566" endtime="20210730 17:40:54.569"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:54.570" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:54.569" endtime="20210730 17:40:54.570"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:54.570" endtime="20210730 17:40:54.571"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:54.571" endtime="20210730 17:40:54.571"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.569" endtime="20210730 17:40:54.571"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:54.572" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:54.572" endtime="20210730 17:40:54.572"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:54.572" endtime="20210730 17:40:54.573"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:54.573" endtime="20210730 17:40:54.573"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.571" endtime="20210730 17:40:54.573"/>
</iter>
<status status="PASS" starttime="20210730 17:40:54.566" endtime="20210730 17:40:54.574"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:54.574" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:54.574" endtime="20210730 17:40:54.574"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.564" endtime="20210730 17:40:54.574"/>
</kw>
<status status="PASS" starttime="20210730 17:40:53.004" endtime="20210730 17:40:54.574"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:54.576" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:54.575" endtime="20210730 17:40:54.576"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:54.576" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210730 17:40:54.576" endtime="20210730 17:40:54.576"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:54.586" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:54.587" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:54.577" endtime="20210730 17:40:54.587"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:54.587" endtime="20210730 17:40:54.587"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:54.587" endtime="20210730 17:40:54.587"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:54.577" endtime="20210730 17:40:54.587"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:54.576" endtime="20210730 17:40:54.587"/>
</for>
<status status="FAIL" starttime="20210730 17:40:54.575" endtime="20210730 17:40:54.587"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:54.575" endtime="20210730 17:40:54.588"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:54.589" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:54.588" endtime="20210730 17:40:54.589"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:54.589" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210730 17:40:54.589" endtime="20210730 17:40:54.589"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:54.593" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:54.593" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:54.590" endtime="20210730 17:40:54.593"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:54.593" endtime="20210730 17:40:54.593"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:54.593" endtime="20210730 17:40:54.593"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:54.589" endtime="20210730 17:40:54.594"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:54.589" endtime="20210730 17:40:54.594"/>
</for>
<status status="FAIL" starttime="20210730 17:40:54.588" endtime="20210730 17:40:54.594"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:54.588" endtime="20210730 17:40:54.594"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:54.595" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:54.594" endtime="20210730 17:40:54.595"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:54.595" level="INFO">${payload} = {'username': '#¤/abc!g'}</msg>
<status status="PASS" starttime="20210730 17:40:54.595" endtime="20210730 17:40:54.595"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:54.598" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:54.599" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:54.595" endtime="20210730 17:40:54.599"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:54.599" endtime="20210730 17:40:54.599"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:54.599" endtime="20210730 17:40:54.599"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:54.595" endtime="20210730 17:40:54.599"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:54.595" endtime="20210730 17:40:54.599"/>
</for>
<status status="FAIL" starttime="20210730 17:40:54.594" endtime="20210730 17:40:54.599"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:54.594" endtime="20210730 17:40:54.599"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:54.575" endtime="20210730 17:40:54.599"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:54.604" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:54.614" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:54.614" level="INFO">${pids} = 20128
20135
20139</msg>
<status status="PASS" starttime="20210730 17:40:54.600" endtime="20210730 17:40:54.614"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:54.615" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:54.614" endtime="20210730 17:40:54.615"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:54.615" level="INFO">${pids} = ['20128', '20135', '20139']</msg>
<status status="PASS" starttime="20210730 17:40:54.615" endtime="20210730 17:40:54.615"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20128</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:54.619" level="INFO">Running command 'kill 20128 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:54.616" endtime="20210730 17:40:54.620"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.615" endtime="20210730 17:40:54.620"/>
</iter>
<iter>
<var name="${pid}">20135</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:54.623" level="INFO">Running command 'kill 20135 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:54.620" endtime="20210730 17:40:54.625"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.620" endtime="20210730 17:40:54.625"/>
</iter>
<iter>
<var name="${pid}">20139</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:54.628" level="INFO">Running command 'kill 20139 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:54.625" endtime="20210730 17:40:54.629"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.625" endtime="20210730 17:40:54.629"/>
</iter>
<status status="PASS" starttime="20210730 17:40:54.615" endtime="20210730 17:40:54.629"/>
</for>
<status status="PASS" starttime="20210730 17:40:54.615" endtime="20210730 17:40:54.629"/>
</branch>
<status status="PASS" starttime="20210730 17:40:54.615" endtime="20210730 17:40:54.629"/>
</if>
<status status="PASS" starttime="20210730 17:40:54.600" endtime="20210730 17:40:54.629"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:53.003" endtime="20210730 17:40:54.629">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t22" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g()=&amp;%¤fghjklQWERTY Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:54.636" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:54.648" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:54.648" level="INFO">${pids} = 20168</msg>
<status status="PASS" starttime="20210730 17:40:54.631" endtime="20210730 17:40:54.648"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:54.649" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:54.648" endtime="20210730 17:40:54.649"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:54.650" level="INFO">${pids} = ['20168']</msg>
<status status="PASS" starttime="20210730 17:40:54.649" endtime="20210730 17:40:54.650"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20168</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:54.666" level="INFO">Running command 'kill 20168 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:54.650" endtime="20210730 17:40:54.666"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.650" endtime="20210730 17:40:54.666"/>
</iter>
<status status="PASS" starttime="20210730 17:40:54.650" endtime="20210730 17:40:54.666"/>
</for>
<status status="PASS" starttime="20210730 17:40:54.649" endtime="20210730 17:40:54.666"/>
</branch>
<status status="PASS" starttime="20210730 17:40:54.649" endtime="20210730 17:40:54.667"/>
</if>
<status status="PASS" starttime="20210730 17:40:54.631" endtime="20210730 17:40:54.667"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:54.675" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:54.675" endtime="20210730 17:40:54.675"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:54.676" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:54.675" endtime="20210730 17:40:54.676"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:54.676" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:54.676" endtime="20210730 17:40:54.676"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:54.676" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:54.676" endtime="20210730 17:40:54.677"/>
</kw>
<msg timestamp="20210730 17:40:54.677" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:54.675" endtime="20210730 17:40:54.677"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:54.681" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:54.677" endtime="20210730 17:40:54.682"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.674" endtime="20210730 17:40:54.683"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:54.684" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:54.684" endtime="20210730 17:40:54.689"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:56.192" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:54.690" endtime="20210730 17:40:56.192"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.683" endtime="20210730 17:40:56.194"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:56.199" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:56.198" endtime="20210730 17:40:56.199"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:56.200" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:56.199" endtime="20210730 17:40:56.200"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:56.202" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:56.201" endtime="20210730 17:40:56.202"/>
</kw>
<msg timestamp="20210730 17:40:56.203" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:56.196" endtime="20210730 17:40:56.203"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:56.204" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:56.203" endtime="20210730 17:40:56.204"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.195" endtime="20210730 17:40:56.205"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:56.206" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:56.206" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:56.206" endtime="20210730 17:40:56.206"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.205" endtime="20210730 17:40:56.207"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:56.208" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:56.208" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:56.207" endtime="20210730 17:40:56.209"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:56.209" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:56.209" endtime="20210730 17:40:56.209"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:56.210" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:56.210" endtime="20210730 17:40:56.210"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:56.210" endtime="20210730 17:40:56.212"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:56.212" endtime="20210730 17:40:56.212"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.210" endtime="20210730 17:40:56.212"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:56.213" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:56.212" endtime="20210730 17:40:56.213"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:56.213" endtime="20210730 17:40:56.214"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:56.214" endtime="20210730 17:40:56.215"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.212" endtime="20210730 17:40:56.215"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:56.215" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:56.215" endtime="20210730 17:40:56.215"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:56.215" endtime="20210730 17:40:56.216"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:56.216" endtime="20210730 17:40:56.217"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.215" endtime="20210730 17:40:56.217"/>
</iter>
<status status="PASS" starttime="20210730 17:40:56.209" endtime="20210730 17:40:56.217"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:56.217" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:56.217" endtime="20210730 17:40:56.217"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.207" endtime="20210730 17:40:56.218"/>
</kw>
<status status="PASS" starttime="20210730 17:40:54.631" endtime="20210730 17:40:56.218"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:56.219" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:56.219" endtime="20210730 17:40:56.219"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:56.220" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 17:40:56.219" endtime="20210730 17:40:56.220"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:56.230" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:56.230" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:56.220" endtime="20210730 17:40:56.230"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:56.230" endtime="20210730 17:40:56.230"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:56.230" endtime="20210730 17:40:56.231"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:56.220" endtime="20210730 17:40:56.231"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:56.220" endtime="20210730 17:40:56.231"/>
</for>
<status status="FAIL" starttime="20210730 17:40:56.218" endtime="20210730 17:40:56.231"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:56.218" endtime="20210730 17:40:56.231"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:56.232" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:56.232" endtime="20210730 17:40:56.232"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:56.232" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 17:40:56.232" endtime="20210730 17:40:56.232"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:56.236" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:56.236" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:56.232" endtime="20210730 17:40:56.236"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:56.236" endtime="20210730 17:40:56.237"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:56.237" endtime="20210730 17:40:56.237"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:56.232" endtime="20210730 17:40:56.237"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:56.232" endtime="20210730 17:40:56.237"/>
</for>
<status status="FAIL" starttime="20210730 17:40:56.231" endtime="20210730 17:40:56.237"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:56.231" endtime="20210730 17:40:56.237"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g()=&amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:56.238" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:56.238" endtime="20210730 17:40:56.238"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:56.238" level="INFO">${payload} = {'username': '#¤/abc!g()=&amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 17:40:56.238" endtime="20210730 17:40:56.238"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:56.242" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:56.242" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:56.239" endtime="20210730 17:40:56.242"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:56.242" endtime="20210730 17:40:56.242"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:56.242" endtime="20210730 17:40:56.242"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:56.238" endtime="20210730 17:40:56.242"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:56.238" endtime="20210730 17:40:56.242"/>
</for>
<status status="FAIL" starttime="20210730 17:40:56.237" endtime="20210730 17:40:56.243"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:56.237" endtime="20210730 17:40:56.243"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:56.218" endtime="20210730 17:40:56.243"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:56.247" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:56.258" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:56.258" level="INFO">${pids} = 20191
20198
20204</msg>
<status status="PASS" starttime="20210730 17:40:56.244" endtime="20210730 17:40:56.258"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:56.259" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:56.259" endtime="20210730 17:40:56.259"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:56.260" level="INFO">${pids} = ['20191', '20198', '20204']</msg>
<status status="PASS" starttime="20210730 17:40:56.260" endtime="20210730 17:40:56.260"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20191</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:56.264" level="INFO">Running command 'kill 20191 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:56.260" endtime="20210730 17:40:56.264"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.260" endtime="20210730 17:40:56.264"/>
</iter>
<iter>
<var name="${pid}">20198</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:56.267" level="INFO">Running command 'kill 20198 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:56.264" endtime="20210730 17:40:56.269"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.264" endtime="20210730 17:40:56.269"/>
</iter>
<iter>
<var name="${pid}">20204</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:56.272" level="INFO">Running command 'kill 20204 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:56.269" endtime="20210730 17:40:56.272"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.269" endtime="20210730 17:40:56.273"/>
</iter>
<status status="PASS" starttime="20210730 17:40:56.260" endtime="20210730 17:40:56.273"/>
</for>
<status status="PASS" starttime="20210730 17:40:56.259" endtime="20210730 17:40:56.273"/>
</branch>
<status status="PASS" starttime="20210730 17:40:56.259" endtime="20210730 17:40:56.273"/>
</if>
<status status="PASS" starttime="20210730 17:40:56.243" endtime="20210730 17:40:56.273"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g()=&amp;%¤fghjklQWERTY'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:54.630" endtime="20210730 17:40:56.273">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t23" name="With Each Valid Token, Updating Username Of Each System User With !# &amp;/¤% Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:56.280" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:56.291" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:56.291" level="INFO">${pids} = 20233</msg>
<status status="PASS" starttime="20210730 17:40:56.275" endtime="20210730 17:40:56.291"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:56.291" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:56.291" endtime="20210730 17:40:56.291"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:56.292" level="INFO">${pids} = ['20233']</msg>
<status status="PASS" starttime="20210730 17:40:56.292" endtime="20210730 17:40:56.292"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20233</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:56.298" level="INFO">Running command 'kill 20233 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:56.292" endtime="20210730 17:40:56.298"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.292" endtime="20210730 17:40:56.298"/>
</iter>
<status status="PASS" starttime="20210730 17:40:56.292" endtime="20210730 17:40:56.298"/>
</for>
<status status="PASS" starttime="20210730 17:40:56.292" endtime="20210730 17:40:56.298"/>
</branch>
<status status="PASS" starttime="20210730 17:40:56.292" endtime="20210730 17:40:56.299"/>
</if>
<status status="PASS" starttime="20210730 17:40:56.275" endtime="20210730 17:40:56.299"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:56.300" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:56.299" endtime="20210730 17:40:56.300"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:56.301" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:56.300" endtime="20210730 17:40:56.301"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:56.301" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:56.301" endtime="20210730 17:40:56.301"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:56.301" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:56.301" endtime="20210730 17:40:56.301"/>
</kw>
<msg timestamp="20210730 17:40:56.302" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:56.300" endtime="20210730 17:40:56.302"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:56.309" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:56.302" endtime="20210730 17:40:56.311"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.299" endtime="20210730 17:40:56.311"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:56.312" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:56.312" endtime="20210730 17:40:56.316"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:57.818" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:56.316" endtime="20210730 17:40:57.818"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.312" endtime="20210730 17:40:57.819"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:57.820" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:57.820" endtime="20210730 17:40:57.820"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:57.820" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:57.820" endtime="20210730 17:40:57.820"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:57.821" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:57.820" endtime="20210730 17:40:57.821"/>
</kw>
<msg timestamp="20210730 17:40:57.821" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:57.819" endtime="20210730 17:40:57.821"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:57.821" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:57.821" endtime="20210730 17:40:57.822"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.819" endtime="20210730 17:40:57.822"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:57.822" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:57.822" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:57.822" endtime="20210730 17:40:57.823"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.822" endtime="20210730 17:40:57.823"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:57.824" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:57.824" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:57.823" endtime="20210730 17:40:57.824"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:57.824" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:57.824" endtime="20210730 17:40:57.824"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:57.825" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:57.824" endtime="20210730 17:40:57.825"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:57.825" endtime="20210730 17:40:57.826"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:57.826" endtime="20210730 17:40:57.826"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.824" endtime="20210730 17:40:57.826"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:57.826" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:57.826" endtime="20210730 17:40:57.826"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:57.827" endtime="20210730 17:40:57.827"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:57.827" endtime="20210730 17:40:57.828"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.826" endtime="20210730 17:40:57.828"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:57.828" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:57.828" endtime="20210730 17:40:57.828"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:57.828" endtime="20210730 17:40:57.829"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:57.829" endtime="20210730 17:40:57.829"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.828" endtime="20210730 17:40:57.829"/>
</iter>
<status status="PASS" starttime="20210730 17:40:57.824" endtime="20210730 17:40:57.829"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:57.830" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:57.829" endtime="20210730 17:40:57.830"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.823" endtime="20210730 17:40:57.830"/>
</kw>
<status status="PASS" starttime="20210730 17:40:56.274" endtime="20210730 17:40:57.830"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:57.831" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:57.831" endtime="20210730 17:40:57.831"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:57.831" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 17:40:57.831" endtime="20210730 17:40:57.831"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:57.840" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:57.840" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:57.832" endtime="20210730 17:40:57.840"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:57.840" endtime="20210730 17:40:57.841"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:57.841" endtime="20210730 17:40:57.841"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:57.832" endtime="20210730 17:40:57.841"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:57.831" endtime="20210730 17:40:57.841"/>
</for>
<status status="FAIL" starttime="20210730 17:40:57.830" endtime="20210730 17:40:57.841"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:57.830" endtime="20210730 17:40:57.841"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:57.842" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:57.842" endtime="20210730 17:40:57.842"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:57.843" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 17:40:57.842" endtime="20210730 17:40:57.843"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:57.847" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:57.847" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:57.843" endtime="20210730 17:40:57.847"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:57.847" endtime="20210730 17:40:57.847"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:57.847" endtime="20210730 17:40:57.847"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:57.843" endtime="20210730 17:40:57.847"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:57.843" endtime="20210730 17:40:57.847"/>
</for>
<status status="FAIL" starttime="20210730 17:40:57.841" endtime="20210730 17:40:57.847"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:57.841" endtime="20210730 17:40:57.847"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!# &amp;/¤%</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:57.848" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:57.848" endtime="20210730 17:40:57.848"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:57.849" level="INFO">${payload} = {'username': '!# &amp;/¤%'}</msg>
<status status="PASS" starttime="20210730 17:40:57.849" endtime="20210730 17:40:57.849"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:57.853" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:57.853" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:57.849" endtime="20210730 17:40:57.854"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:57.854" endtime="20210730 17:40:57.854"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:57.854" endtime="20210730 17:40:57.854"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:57.849" endtime="20210730 17:40:57.854"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:57.849" endtime="20210730 17:40:57.854"/>
</for>
<status status="FAIL" starttime="20210730 17:40:57.848" endtime="20210730 17:40:57.854"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:57.847" endtime="20210730 17:40:57.854"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:57.830" endtime="20210730 17:40:57.854"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:57.859" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:57.869" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:57.869" level="INFO">${pids} = 20256
20263
20267</msg>
<status status="PASS" starttime="20210730 17:40:57.855" endtime="20210730 17:40:57.869"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:57.870" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:57.869" endtime="20210730 17:40:57.870"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:57.870" level="INFO">${pids} = ['20256', '20263', '20267']</msg>
<status status="PASS" starttime="20210730 17:40:57.870" endtime="20210730 17:40:57.870"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20256</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:57.873" level="INFO">Running command 'kill 20256 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:57.870" endtime="20210730 17:40:57.874"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.870" endtime="20210730 17:40:57.874"/>
</iter>
<iter>
<var name="${pid}">20263</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:57.877" level="INFO">Running command 'kill 20263 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:57.874" endtime="20210730 17:40:57.877"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.874" endtime="20210730 17:40:57.877"/>
</iter>
<iter>
<var name="${pid}">20267</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:57.880" level="INFO">Running command 'kill 20267 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:57.877" endtime="20210730 17:40:57.880"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.877" endtime="20210730 17:40:57.880"/>
</iter>
<status status="PASS" starttime="20210730 17:40:57.870" endtime="20210730 17:40:57.880"/>
</for>
<status status="PASS" starttime="20210730 17:40:57.870" endtime="20210730 17:40:57.880"/>
</branch>
<status status="PASS" starttime="20210730 17:40:57.870" endtime="20210730 17:40:57.880"/>
</if>
<status status="PASS" starttime="20210730 17:40:57.854" endtime="20210730 17:40:57.881"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!# &amp;/¤%'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:56.274" endtime="20210730 17:40:57.881">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t24" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤ = Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:57.886" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:57.897" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:57.897" level="INFO">${pids} = 20296</msg>
<status status="PASS" starttime="20210730 17:40:57.883" endtime="20210730 17:40:57.898"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:57.899" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:57.898" endtime="20210730 17:40:57.899"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:57.900" level="INFO">${pids} = ['20296']</msg>
<status status="PASS" starttime="20210730 17:40:57.899" endtime="20210730 17:40:57.900"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20296</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:57.903" level="INFO">Running command 'kill 20296 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:57.900" endtime="20210730 17:40:57.904"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.900" endtime="20210730 17:40:57.904"/>
</iter>
<status status="PASS" starttime="20210730 17:40:57.900" endtime="20210730 17:40:57.904"/>
</for>
<status status="PASS" starttime="20210730 17:40:57.899" endtime="20210730 17:40:57.904"/>
</branch>
<status status="PASS" starttime="20210730 17:40:57.899" endtime="20210730 17:40:57.904"/>
</if>
<status status="PASS" starttime="20210730 17:40:57.882" endtime="20210730 17:40:57.904"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:57.905" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:57.905" endtime="20210730 17:40:57.905"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:57.906" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:57.906" endtime="20210730 17:40:57.906"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:57.906" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:57.906" endtime="20210730 17:40:57.906"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:57.906" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:57.906" endtime="20210730 17:40:57.906"/>
</kw>
<msg timestamp="20210730 17:40:57.907" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:57.905" endtime="20210730 17:40:57.907"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:57.911" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:57.907" endtime="20210730 17:40:57.922"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.904" endtime="20210730 17:40:57.922"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:57.924" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:57.924" endtime="20210730 17:40:57.928"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:40:59.436" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:57.929" endtime="20210730 17:40:59.436"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.923" endtime="20210730 17:40:59.437"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:59.438" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:59.438" endtime="20210730 17:40:59.438"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:59.438" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:59.438" endtime="20210730 17:40:59.438"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:59.439" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:59.439" endtime="20210730 17:40:59.439"/>
</kw>
<msg timestamp="20210730 17:40:59.439" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:59.437" endtime="20210730 17:40:59.439"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:40:59.439" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:40:59.439" endtime="20210730 17:40:59.440"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.437" endtime="20210730 17:40:59.440"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:40:59.440" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:40:59.440" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:40:59.440" endtime="20210730 17:40:59.440"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.440" endtime="20210730 17:40:59.441"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:40:59.441" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:40:59.441" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:40:59.441" endtime="20210730 17:40:59.441"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:40:59.442" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:40:59.442" endtime="20210730 17:40:59.442"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:59.442" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:59.442" endtime="20210730 17:40:59.442"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:59.442" endtime="20210730 17:40:59.443"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:59.443" endtime="20210730 17:40:59.444"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.442" endtime="20210730 17:40:59.444"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:59.444" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:59.444" endtime="20210730 17:40:59.444"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:59.444" endtime="20210730 17:40:59.445"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:59.445" endtime="20210730 17:40:59.445"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.444" endtime="20210730 17:40:59.445"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:59.445" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:40:59.445" endtime="20210730 17:40:59.446"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:40:59.446" endtime="20210730 17:40:59.446"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:40:59.446" endtime="20210730 17:40:59.447"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.445" endtime="20210730 17:40:59.447"/>
</iter>
<status status="PASS" starttime="20210730 17:40:59.442" endtime="20210730 17:40:59.447"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:40:59.447" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:40:59.447" endtime="20210730 17:40:59.447"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.441" endtime="20210730 17:40:59.447"/>
</kw>
<status status="PASS" starttime="20210730 17:40:57.882" endtime="20210730 17:40:59.447"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:59.448" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:40:59.448" endtime="20210730 17:40:59.448"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:59.449" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210730 17:40:59.449" endtime="20210730 17:40:59.449"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:59.458" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:59.458" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:59.449" endtime="20210730 17:40:59.458"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:59.458" endtime="20210730 17:40:59.458"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:59.458" endtime="20210730 17:40:59.459"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:59.449" endtime="20210730 17:40:59.459"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:59.449" endtime="20210730 17:40:59.459"/>
</for>
<status status="FAIL" starttime="20210730 17:40:59.448" endtime="20210730 17:40:59.459"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:59.448" endtime="20210730 17:40:59.459"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:59.460" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:40:59.460" endtime="20210730 17:40:59.460"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:59.461" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210730 17:40:59.460" endtime="20210730 17:40:59.461"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:59.465" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:59.465" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:59.461" endtime="20210730 17:40:59.465"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:59.465" endtime="20210730 17:40:59.465"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:59.465" endtime="20210730 17:40:59.465"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:59.461" endtime="20210730 17:40:59.465"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:59.461" endtime="20210730 17:40:59.465"/>
</for>
<status status="FAIL" starttime="20210730 17:40:59.459" endtime="20210730 17:40:59.465"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:59.459" endtime="20210730 17:40:59.465"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤ =</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:59.466" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:40:59.466" endtime="20210730 17:40:59.466"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:40:59.467" level="INFO">${payload} = {'username': '!#%&amp;/¤ ='}</msg>
<status status="PASS" starttime="20210730 17:40:59.466" endtime="20210730 17:40:59.467"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:40:59.470" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:40:59.470" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:40:59.467" endtime="20210730 17:40:59.470"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:40:59.470" endtime="20210730 17:40:59.470"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:40:59.470" endtime="20210730 17:40:59.470"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:59.467" endtime="20210730 17:40:59.470"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:59.467" endtime="20210730 17:40:59.470"/>
</for>
<status status="FAIL" starttime="20210730 17:40:59.465" endtime="20210730 17:40:59.471"/>
</kw>
<status status="FAIL" starttime="20210730 17:40:59.465" endtime="20210730 17:40:59.471"/>
</iter>
<status status="FAIL" starttime="20210730 17:40:59.447" endtime="20210730 17:40:59.471"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:59.475" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:59.485" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:59.485" level="INFO">${pids} = 20319
20326
20330</msg>
<status status="PASS" starttime="20210730 17:40:59.472" endtime="20210730 17:40:59.485"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:59.486" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:59.485" endtime="20210730 17:40:59.486"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:59.486" level="INFO">${pids} = ['20319', '20326', '20330']</msg>
<status status="PASS" starttime="20210730 17:40:59.486" endtime="20210730 17:40:59.486"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20319</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:59.490" level="INFO">Running command 'kill 20319 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:59.486" endtime="20210730 17:40:59.491"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.486" endtime="20210730 17:40:59.491"/>
</iter>
<iter>
<var name="${pid}">20326</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:59.496" level="INFO">Running command 'kill 20326 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:59.491" endtime="20210730 17:40:59.496"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.491" endtime="20210730 17:40:59.496"/>
</iter>
<iter>
<var name="${pid}">20330</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:59.499" level="INFO">Running command 'kill 20330 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:59.497" endtime="20210730 17:40:59.499"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.496" endtime="20210730 17:40:59.499"/>
</iter>
<status status="PASS" starttime="20210730 17:40:59.486" endtime="20210730 17:40:59.499"/>
</for>
<status status="PASS" starttime="20210730 17:40:59.486" endtime="20210730 17:40:59.499"/>
</branch>
<status status="PASS" starttime="20210730 17:40:59.486" endtime="20210730 17:40:59.500"/>
</if>
<status status="PASS" starttime="20210730 17:40:59.471" endtime="20210730 17:40:59.500"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤ ='
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:57.881" endtime="20210730 17:40:59.500">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t25" name="With Each Valid Token, Updating Username Of Each System User With !#%&amp;/¤%= ()=? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:40:59.504" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:40:59.514" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:40:59.514" level="INFO">${pids} = 20359</msg>
<status status="PASS" starttime="20210730 17:40:59.502" endtime="20210730 17:40:59.514"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:59.515" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:40:59.515" endtime="20210730 17:40:59.515"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:40:59.516" level="INFO">${pids} = ['20359']</msg>
<status status="PASS" starttime="20210730 17:40:59.516" endtime="20210730 17:40:59.516"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20359</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:59.519" level="INFO">Running command 'kill 20359 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:59.516" endtime="20210730 17:40:59.520"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.516" endtime="20210730 17:40:59.520"/>
</iter>
<status status="PASS" starttime="20210730 17:40:59.516" endtime="20210730 17:40:59.520"/>
</for>
<status status="PASS" starttime="20210730 17:40:59.515" endtime="20210730 17:40:59.520"/>
</branch>
<status status="PASS" starttime="20210730 17:40:59.515" endtime="20210730 17:40:59.520"/>
</if>
<status status="PASS" starttime="20210730 17:40:59.502" endtime="20210730 17:40:59.520"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:59.521" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:59.521" endtime="20210730 17:40:59.521"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:59.522" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:40:59.521" endtime="20210730 17:40:59.522"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:40:59.522" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:40:59.522" endtime="20210730 17:40:59.522"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:40:59.523" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:59.522" endtime="20210730 17:40:59.523"/>
</kw>
<msg timestamp="20210730 17:40:59.523" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:40:59.521" endtime="20210730 17:40:59.523"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:40:59.526" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:40:59.523" endtime="20210730 17:40:59.534"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.520" endtime="20210730 17:40:59.534"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:40:59.536" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:40:59.535" endtime="20210730 17:40:59.547"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:01.049" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:40:59.548" endtime="20210730 17:41:01.051"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.535" endtime="20210730 17:41:01.052"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:01.054" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:01.054" endtime="20210730 17:41:01.054"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:01.054" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:01.054" endtime="20210730 17:41:01.054"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:01.055" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:01.054" endtime="20210730 17:41:01.055"/>
</kw>
<msg timestamp="20210730 17:41:01.055" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:01.053" endtime="20210730 17:41:01.055"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:01.055" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:01.055" endtime="20210730 17:41:01.056"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.053" endtime="20210730 17:41:01.056"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:01.057" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:01.057" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:01.056" endtime="20210730 17:41:01.057"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.056" endtime="20210730 17:41:01.057"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:01.058" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:01.058" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:01.057" endtime="20210730 17:41:01.058"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:01.058" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:01.058" endtime="20210730 17:41:01.058"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:01.059" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:01.059" endtime="20210730 17:41:01.059"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:01.059" endtime="20210730 17:41:01.060"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:01.060" endtime="20210730 17:41:01.060"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.058" endtime="20210730 17:41:01.060"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:01.060" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:01.060" endtime="20210730 17:41:01.060"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:01.061" endtime="20210730 17:41:01.061"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:01.061" endtime="20210730 17:41:01.062"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.060" endtime="20210730 17:41:01.062"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:01.062" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:01.062" endtime="20210730 17:41:01.062"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:01.062" endtime="20210730 17:41:01.063"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:01.063" endtime="20210730 17:41:01.063"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.062" endtime="20210730 17:41:01.063"/>
</iter>
<status status="PASS" starttime="20210730 17:41:01.058" endtime="20210730 17:41:01.063"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:01.063" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:01.063" endtime="20210730 17:41:01.063"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.057" endtime="20210730 17:41:01.064"/>
</kw>
<status status="PASS" starttime="20210730 17:40:59.501" endtime="20210730 17:41:01.064"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:01.065" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:01.064" endtime="20210730 17:41:01.065"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:01.065" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210730 17:41:01.065" endtime="20210730 17:41:01.065"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:01.074" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:01.074" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:01.065" endtime="20210730 17:41:01.074"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:01.074" endtime="20210730 17:41:01.074"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:01.074" endtime="20210730 17:41:01.074"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:01.065" endtime="20210730 17:41:01.074"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:01.065" endtime="20210730 17:41:01.074"/>
</for>
<status status="FAIL" starttime="20210730 17:41:01.064" endtime="20210730 17:41:01.075"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:01.064" endtime="20210730 17:41:01.075"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:01.076" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:01.075" endtime="20210730 17:41:01.076"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:01.076" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210730 17:41:01.076" endtime="20210730 17:41:01.076"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:01.080" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:01.080" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:01.077" endtime="20210730 17:41:01.080"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:01.081" endtime="20210730 17:41:01.081"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:01.081" endtime="20210730 17:41:01.081"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:01.077" endtime="20210730 17:41:01.081"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:01.076" endtime="20210730 17:41:01.081"/>
</for>
<status status="FAIL" starttime="20210730 17:41:01.075" endtime="20210730 17:41:01.081"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:01.075" endtime="20210730 17:41:01.081"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=!#%&amp;/¤%= ()=?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:01.082" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:01.082" endtime="20210730 17:41:01.082"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:01.083" level="INFO">${payload} = {'username': '!#%&amp;/¤%= ()=?'}</msg>
<status status="PASS" starttime="20210730 17:41:01.082" endtime="20210730 17:41:01.083"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:01.087" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:01.087" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:01.083" endtime="20210730 17:41:01.087"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:01.087" endtime="20210730 17:41:01.087"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:01.088" endtime="20210730 17:41:01.088"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:01.083" endtime="20210730 17:41:01.088"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:01.083" endtime="20210730 17:41:01.088"/>
</for>
<status status="FAIL" starttime="20210730 17:41:01.081" endtime="20210730 17:41:01.088"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:01.081" endtime="20210730 17:41:01.088"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:01.064" endtime="20210730 17:41:01.088"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:01.092" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:01.102" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:01.102" level="INFO">${pids} = 20382
20389
20394</msg>
<status status="PASS" starttime="20210730 17:41:01.089" endtime="20210730 17:41:01.102"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:01.103" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:01.102" endtime="20210730 17:41:01.103"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:01.103" level="INFO">${pids} = ['20382', '20389', '20394']</msg>
<status status="PASS" starttime="20210730 17:41:01.103" endtime="20210730 17:41:01.104"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20382</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:01.107" level="INFO">Running command 'kill 20382 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:01.104" endtime="20210730 17:41:01.107"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.104" endtime="20210730 17:41:01.107"/>
</iter>
<iter>
<var name="${pid}">20389</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:01.110" level="INFO">Running command 'kill 20389 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:01.107" endtime="20210730 17:41:01.110"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.107" endtime="20210730 17:41:01.111"/>
</iter>
<iter>
<var name="${pid}">20394</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:01.114" level="INFO">Running command 'kill 20394 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:01.111" endtime="20210730 17:41:01.114"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.111" endtime="20210730 17:41:01.114"/>
</iter>
<status status="PASS" starttime="20210730 17:41:01.104" endtime="20210730 17:41:01.114"/>
</for>
<status status="PASS" starttime="20210730 17:41:01.103" endtime="20210730 17:41:01.114"/>
</branch>
<status status="PASS" starttime="20210730 17:41:01.103" endtime="20210730 17:41:01.114"/>
</if>
<status status="PASS" starttime="20210730 17:41:01.088" endtime="20210730 17:41:01.115"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '!#%&amp;/¤%= ()=?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:40:59.501" endtime="20210730 17:41:01.115">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t26" name="With Each Valid Token, Updating Username Of Each System User With 1234 67 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:01.119" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:01.131" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:01.131" level="INFO">${pids} = 20423</msg>
<status status="PASS" starttime="20210730 17:41:01.116" endtime="20210730 17:41:01.131"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:01.132" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:01.131" endtime="20210730 17:41:01.132"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:01.132" level="INFO">${pids} = ['20423']</msg>
<status status="PASS" starttime="20210730 17:41:01.132" endtime="20210730 17:41:01.132"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20423</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:01.135" level="INFO">Running command 'kill 20423 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:01.133" endtime="20210730 17:41:01.136"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.133" endtime="20210730 17:41:01.136"/>
</iter>
<status status="PASS" starttime="20210730 17:41:01.132" endtime="20210730 17:41:01.136"/>
</for>
<status status="PASS" starttime="20210730 17:41:01.132" endtime="20210730 17:41:01.136"/>
</branch>
<status status="PASS" starttime="20210730 17:41:01.132" endtime="20210730 17:41:01.136"/>
</if>
<status status="PASS" starttime="20210730 17:41:01.116" endtime="20210730 17:41:01.136"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:01.137" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:01.137" endtime="20210730 17:41:01.137"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:01.138" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:01.137" endtime="20210730 17:41:01.138"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:01.138" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:01.138" endtime="20210730 17:41:01.138"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:01.138" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:01.138" endtime="20210730 17:41:01.138"/>
</kw>
<msg timestamp="20210730 17:41:01.139" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:01.137" endtime="20210730 17:41:01.139"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:01.146" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:01.139" endtime="20210730 17:41:01.154"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.136" endtime="20210730 17:41:01.155"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:01.157" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:01.156" endtime="20210730 17:41:01.163"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:02.664" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:01.163" endtime="20210730 17:41:02.665"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.156" endtime="20210730 17:41:02.665"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:02.666" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:02.666" endtime="20210730 17:41:02.666"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:02.667" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:02.666" endtime="20210730 17:41:02.667"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:02.667" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:02.667" endtime="20210730 17:41:02.667"/>
</kw>
<msg timestamp="20210730 17:41:02.667" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:02.666" endtime="20210730 17:41:02.667"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:02.668" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:02.667" endtime="20210730 17:41:02.668"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.665" endtime="20210730 17:41:02.668"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:02.669" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:02.669" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:02.668" endtime="20210730 17:41:02.669"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.668" endtime="20210730 17:41:02.669"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:02.670" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:02.670" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:02.669" endtime="20210730 17:41:02.670"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:02.671" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:02.670" endtime="20210730 17:41:02.671"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:02.671" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:02.671" endtime="20210730 17:41:02.671"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:02.671" endtime="20210730 17:41:02.672"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:02.672" endtime="20210730 17:41:02.672"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.671" endtime="20210730 17:41:02.672"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:02.673" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:02.673" endtime="20210730 17:41:02.673"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:02.673" endtime="20210730 17:41:02.674"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:02.674" endtime="20210730 17:41:02.674"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.672" endtime="20210730 17:41:02.674"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:02.674" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:02.674" endtime="20210730 17:41:02.674"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:02.674" endtime="20210730 17:41:02.675"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:02.675" endtime="20210730 17:41:02.675"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.674" endtime="20210730 17:41:02.675"/>
</iter>
<status status="PASS" starttime="20210730 17:41:02.671" endtime="20210730 17:41:02.675"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:02.676" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:02.675" endtime="20210730 17:41:02.676"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.669" endtime="20210730 17:41:02.676"/>
</kw>
<status status="PASS" starttime="20210730 17:41:01.116" endtime="20210730 17:41:02.676"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:02.677" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:02.677" endtime="20210730 17:41:02.677"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:02.677" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210730 17:41:02.677" endtime="20210730 17:41:02.677"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:02.685" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:02.686" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:02.678" endtime="20210730 17:41:02.686"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:02.686" endtime="20210730 17:41:02.686"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:02.686" endtime="20210730 17:41:02.686"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:02.677" endtime="20210730 17:41:02.686"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:02.677" endtime="20210730 17:41:02.686"/>
</for>
<status status="FAIL" starttime="20210730 17:41:02.676" endtime="20210730 17:41:02.686"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:02.676" endtime="20210730 17:41:02.686"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:02.689" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:02.687" endtime="20210730 17:41:02.689"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:02.690" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210730 17:41:02.689" endtime="20210730 17:41:02.690"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:02.694" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:02.694" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:02.690" endtime="20210730 17:41:02.694"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:02.694" endtime="20210730 17:41:02.694"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:02.694" endtime="20210730 17:41:02.694"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:02.690" endtime="20210730 17:41:02.694"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:02.690" endtime="20210730 17:41:02.694"/>
</for>
<status status="FAIL" starttime="20210730 17:41:02.686" endtime="20210730 17:41:02.695"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:02.686" endtime="20210730 17:41:02.695"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=1234 67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:02.696" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:02.696" endtime="20210730 17:41:02.696"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:02.696" level="INFO">${payload} = {'username': '1234 67'}</msg>
<status status="PASS" starttime="20210730 17:41:02.696" endtime="20210730 17:41:02.696"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:02.700" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:02.701" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:02.697" endtime="20210730 17:41:02.701"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:02.701" endtime="20210730 17:41:02.701"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:02.701" endtime="20210730 17:41:02.701"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:02.697" endtime="20210730 17:41:02.701"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:02.696" endtime="20210730 17:41:02.701"/>
</for>
<status status="FAIL" starttime="20210730 17:41:02.695" endtime="20210730 17:41:02.701"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:02.695" endtime="20210730 17:41:02.701"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:02.676" endtime="20210730 17:41:02.701"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:02.707" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:02.715" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:02.715" level="INFO">${pids} = 20446
20453
20457</msg>
<status status="PASS" starttime="20210730 17:41:02.702" endtime="20210730 17:41:02.715"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:02.716" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:02.715" endtime="20210730 17:41:02.716"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:02.717" level="INFO">${pids} = ['20446', '20453', '20457']</msg>
<status status="PASS" starttime="20210730 17:41:02.716" endtime="20210730 17:41:02.717"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20446</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:02.720" level="INFO">Running command 'kill 20446 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:02.717" endtime="20210730 17:41:02.720"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.717" endtime="20210730 17:41:02.720"/>
</iter>
<iter>
<var name="${pid}">20453</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:02.727" level="INFO">Running command 'kill 20453 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:02.721" endtime="20210730 17:41:02.727"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.721" endtime="20210730 17:41:02.727"/>
</iter>
<iter>
<var name="${pid}">20457</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:02.731" level="INFO">Running command 'kill 20457 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:02.728" endtime="20210730 17:41:02.731"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.727" endtime="20210730 17:41:02.731"/>
</iter>
<status status="PASS" starttime="20210730 17:41:02.717" endtime="20210730 17:41:02.731"/>
</for>
<status status="PASS" starttime="20210730 17:41:02.716" endtime="20210730 17:41:02.731"/>
</branch>
<status status="PASS" starttime="20210730 17:41:02.716" endtime="20210730 17:41:02.731"/>
</if>
<status status="PASS" starttime="20210730 17:41:02.702" endtime="20210730 17:41:02.732"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '1234 67'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:01.115" endtime="20210730 17:41:02.732">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t27" name="With Each Valid Token, Updating Username Of Each System User With 123456 8 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:02.738" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:02.749" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:02.749" level="INFO">${pids} = 20486</msg>
<status status="PASS" starttime="20210730 17:41:02.734" endtime="20210730 17:41:02.749"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:02.750" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:02.749" endtime="20210730 17:41:02.750"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:02.751" level="INFO">${pids} = ['20486']</msg>
<status status="PASS" starttime="20210730 17:41:02.750" endtime="20210730 17:41:02.751"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20486</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:02.768" level="INFO">Running command 'kill 20486 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:02.751" endtime="20210730 17:41:02.768"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.751" endtime="20210730 17:41:02.768"/>
</iter>
<status status="PASS" starttime="20210730 17:41:02.751" endtime="20210730 17:41:02.768"/>
</for>
<status status="PASS" starttime="20210730 17:41:02.750" endtime="20210730 17:41:02.768"/>
</branch>
<status status="PASS" starttime="20210730 17:41:02.750" endtime="20210730 17:41:02.768"/>
</if>
<status status="PASS" starttime="20210730 17:41:02.733" endtime="20210730 17:41:02.770"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:02.771" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:02.771" endtime="20210730 17:41:02.771"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:02.772" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:02.771" endtime="20210730 17:41:02.772"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:02.772" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:02.772" endtime="20210730 17:41:02.772"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:02.772" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:02.772" endtime="20210730 17:41:02.772"/>
</kw>
<msg timestamp="20210730 17:41:02.772" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:02.771" endtime="20210730 17:41:02.773"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:02.776" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:02.773" endtime="20210730 17:41:02.777"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.770" endtime="20210730 17:41:02.777"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:02.778" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:02.778" endtime="20210730 17:41:02.782"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:04.285" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:02.782" endtime="20210730 17:41:04.286"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.778" endtime="20210730 17:41:04.287"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:04.293" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:04.292" endtime="20210730 17:41:04.293"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:04.295" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:04.294" endtime="20210730 17:41:04.295"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:04.296" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:04.295" endtime="20210730 17:41:04.296"/>
</kw>
<msg timestamp="20210730 17:41:04.297" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:04.290" endtime="20210730 17:41:04.297"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:04.298" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:04.297" endtime="20210730 17:41:04.299"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.288" endtime="20210730 17:41:04.299"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:04.300" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:04.301" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:04.300" endtime="20210730 17:41:04.301"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.300" endtime="20210730 17:41:04.301"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:04.303" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:04.303" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:04.302" endtime="20210730 17:41:04.303"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:04.304" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:04.303" endtime="20210730 17:41:04.304"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:04.305" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:04.305" endtime="20210730 17:41:04.305"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:04.305" endtime="20210730 17:41:04.307"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:04.307" endtime="20210730 17:41:04.307"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.304" endtime="20210730 17:41:04.307"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:04.308" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:04.308" endtime="20210730 17:41:04.308"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:04.308" endtime="20210730 17:41:04.309"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:04.310" endtime="20210730 17:41:04.310"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.307" endtime="20210730 17:41:04.310"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:04.311" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:04.310" endtime="20210730 17:41:04.311"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:04.311" endtime="20210730 17:41:04.312"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:04.312" endtime="20210730 17:41:04.312"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.310" endtime="20210730 17:41:04.312"/>
</iter>
<status status="PASS" starttime="20210730 17:41:04.304" endtime="20210730 17:41:04.312"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:04.313" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:04.312" endtime="20210730 17:41:04.313"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.301" endtime="20210730 17:41:04.313"/>
</kw>
<status status="PASS" starttime="20210730 17:41:02.733" endtime="20210730 17:41:04.313"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:04.315" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:04.314" endtime="20210730 17:41:04.315"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:04.315" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210730 17:41:04.315" endtime="20210730 17:41:04.315"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:04.325" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:04.325" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:04.316" endtime="20210730 17:41:04.325"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:04.325" endtime="20210730 17:41:04.325"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:04.325" endtime="20210730 17:41:04.325"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:04.316" endtime="20210730 17:41:04.326"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:04.315" endtime="20210730 17:41:04.326"/>
</for>
<status status="FAIL" starttime="20210730 17:41:04.314" endtime="20210730 17:41:04.326"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:04.314" endtime="20210730 17:41:04.326"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:04.327" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:04.327" endtime="20210730 17:41:04.327"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:04.328" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210730 17:41:04.327" endtime="20210730 17:41:04.328"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:04.332" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:04.332" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:04.328" endtime="20210730 17:41:04.332"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:04.332" endtime="20210730 17:41:04.332"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:04.332" endtime="20210730 17:41:04.332"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:04.328" endtime="20210730 17:41:04.332"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:04.328" endtime="20210730 17:41:04.332"/>
</for>
<status status="FAIL" starttime="20210730 17:41:04.326" endtime="20210730 17:41:04.332"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:04.326" endtime="20210730 17:41:04.333"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=123456 8</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:04.333" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:04.333" endtime="20210730 17:41:04.334"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:04.334" level="INFO">${payload} = {'username': '123456 8'}</msg>
<status status="PASS" starttime="20210730 17:41:04.334" endtime="20210730 17:41:04.334"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:04.337" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:04.338" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:04.334" endtime="20210730 17:41:04.338"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:04.338" endtime="20210730 17:41:04.338"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:04.338" endtime="20210730 17:41:04.338"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:04.334" endtime="20210730 17:41:04.338"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:04.334" endtime="20210730 17:41:04.338"/>
</for>
<status status="FAIL" starttime="20210730 17:41:04.333" endtime="20210730 17:41:04.338"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:04.333" endtime="20210730 17:41:04.338"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:04.313" endtime="20210730 17:41:04.338"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:04.342" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:04.352" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:04.352" level="INFO">${pids} = 20509
20516
20524</msg>
<status status="PASS" starttime="20210730 17:41:04.339" endtime="20210730 17:41:04.352"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:04.353" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:04.352" endtime="20210730 17:41:04.353"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:04.353" level="INFO">${pids} = ['20509', '20516', '20524']</msg>
<status status="PASS" starttime="20210730 17:41:04.353" endtime="20210730 17:41:04.353"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20509</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:04.357" level="INFO">Running command 'kill 20509 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:04.354" endtime="20210730 17:41:04.357"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.354" endtime="20210730 17:41:04.357"/>
</iter>
<iter>
<var name="${pid}">20516</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:04.360" level="INFO">Running command 'kill 20516 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:04.358" endtime="20210730 17:41:04.360"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.357" endtime="20210730 17:41:04.360"/>
</iter>
<iter>
<var name="${pid}">20524</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:04.364" level="INFO">Running command 'kill 20524 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:04.361" endtime="20210730 17:41:04.364"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.361" endtime="20210730 17:41:04.364"/>
</iter>
<status status="PASS" starttime="20210730 17:41:04.353" endtime="20210730 17:41:04.364"/>
</for>
<status status="PASS" starttime="20210730 17:41:04.353" endtime="20210730 17:41:04.364"/>
</branch>
<status status="PASS" starttime="20210730 17:41:04.353" endtime="20210730 17:41:04.364"/>
</if>
<status status="PASS" starttime="20210730 17:41:04.338" endtime="20210730 17:41:04.365"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '123456 8'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:02.732" endtime="20210730 17:41:04.365">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t28" name="With Each Valid Token, Updating Username Of Each System User With 12345678 12345 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:04.369" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:04.380" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:04.381" level="INFO">${pids} = 20553</msg>
<status status="PASS" starttime="20210730 17:41:04.367" endtime="20210730 17:41:04.381"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:04.382" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:04.381" endtime="20210730 17:41:04.382"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:04.382" level="INFO">${pids} = ['20553']</msg>
<status status="PASS" starttime="20210730 17:41:04.382" endtime="20210730 17:41:04.382"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20553</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:04.386" level="INFO">Running command 'kill 20553 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:04.383" endtime="20210730 17:41:04.387"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.383" endtime="20210730 17:41:04.387"/>
</iter>
<status status="PASS" starttime="20210730 17:41:04.382" endtime="20210730 17:41:04.387"/>
</for>
<status status="PASS" starttime="20210730 17:41:04.382" endtime="20210730 17:41:04.387"/>
</branch>
<status status="PASS" starttime="20210730 17:41:04.382" endtime="20210730 17:41:04.387"/>
</if>
<status status="PASS" starttime="20210730 17:41:04.366" endtime="20210730 17:41:04.387"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:04.389" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:04.388" endtime="20210730 17:41:04.389"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:04.389" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:04.389" endtime="20210730 17:41:04.389"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:04.390" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:04.390" endtime="20210730 17:41:04.390"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:04.391" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:04.390" endtime="20210730 17:41:04.391"/>
</kw>
<msg timestamp="20210730 17:41:04.391" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:04.389" endtime="20210730 17:41:04.391"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:04.402" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:04.391" endtime="20210730 17:41:04.408"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.387" endtime="20210730 17:41:04.408"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:04.410" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:04.409" endtime="20210730 17:41:04.416"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:05.920" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:04.416" endtime="20210730 17:41:05.920"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.409" endtime="20210730 17:41:05.920"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:05.921" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:05.921" endtime="20210730 17:41:05.921"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:05.922" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:05.921" endtime="20210730 17:41:05.922"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:05.922" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:05.922" endtime="20210730 17:41:05.922"/>
</kw>
<msg timestamp="20210730 17:41:05.922" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:05.921" endtime="20210730 17:41:05.922"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:05.923" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:05.922" endtime="20210730 17:41:05.923"/>
</kw>
<status status="PASS" starttime="20210730 17:41:05.920" endtime="20210730 17:41:05.923"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:05.924" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:05.924" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:05.924" endtime="20210730 17:41:05.924"/>
</kw>
<status status="PASS" starttime="20210730 17:41:05.923" endtime="20210730 17:41:05.924"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:05.925" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:05.925" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:05.924" endtime="20210730 17:41:05.925"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:05.925" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:05.925" endtime="20210730 17:41:05.925"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:05.926" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:05.926" endtime="20210730 17:41:05.926"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:05.926" endtime="20210730 17:41:05.927"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:05.927" endtime="20210730 17:41:05.927"/>
</kw>
<status status="PASS" starttime="20210730 17:41:05.926" endtime="20210730 17:41:05.927"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:05.927" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:05.927" endtime="20210730 17:41:05.927"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:05.928" endtime="20210730 17:41:05.928"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:05.928" endtime="20210730 17:41:05.928"/>
</kw>
<status status="PASS" starttime="20210730 17:41:05.927" endtime="20210730 17:41:05.928"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:05.929" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:05.929" endtime="20210730 17:41:05.929"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:05.929" endtime="20210730 17:41:05.930"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:05.930" endtime="20210730 17:41:05.930"/>
</kw>
<status status="PASS" starttime="20210730 17:41:05.929" endtime="20210730 17:41:05.930"/>
</iter>
<status status="PASS" starttime="20210730 17:41:05.925" endtime="20210730 17:41:05.930"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:05.930" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:05.930" endtime="20210730 17:41:05.930"/>
</kw>
<status status="PASS" starttime="20210730 17:41:05.924" endtime="20210730 17:41:05.931"/>
</kw>
<status status="PASS" starttime="20210730 17:41:04.366" endtime="20210730 17:41:05.931"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:05.932" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:05.931" endtime="20210730 17:41:05.932"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:05.932" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210730 17:41:05.932" endtime="20210730 17:41:05.932"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:05.940" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:05.941" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:05.932" endtime="20210730 17:41:05.941"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:05.941" endtime="20210730 17:41:05.941"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:05.941" endtime="20210730 17:41:05.941"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:05.932" endtime="20210730 17:41:05.941"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:05.932" endtime="20210730 17:41:05.941"/>
</for>
<status status="FAIL" starttime="20210730 17:41:05.931" endtime="20210730 17:41:05.941"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:05.931" endtime="20210730 17:41:05.941"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:05.943" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:05.942" endtime="20210730 17:41:05.943"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:05.943" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210730 17:41:05.943" endtime="20210730 17:41:05.943"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:05.947" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:05.947" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:05.943" endtime="20210730 17:41:05.947"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:05.948" endtime="20210730 17:41:05.948"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:05.948" endtime="20210730 17:41:05.948"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:05.943" endtime="20210730 17:41:05.948"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:05.943" endtime="20210730 17:41:05.948"/>
</for>
<status status="FAIL" starttime="20210730 17:41:05.942" endtime="20210730 17:41:05.948"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:05.941" endtime="20210730 17:41:05.948"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=12345678 12345</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:05.949" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:05.949" endtime="20210730 17:41:05.949"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:05.949" level="INFO">${payload} = {'username': '12345678 12345'}</msg>
<status status="PASS" starttime="20210730 17:41:05.949" endtime="20210730 17:41:05.949"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:05.954" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:05.954" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:05.950" endtime="20210730 17:41:05.954"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:05.954" endtime="20210730 17:41:05.954"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:05.954" endtime="20210730 17:41:05.954"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:05.950" endtime="20210730 17:41:05.954"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:05.949" endtime="20210730 17:41:05.954"/>
</for>
<status status="FAIL" starttime="20210730 17:41:05.948" endtime="20210730 17:41:05.954"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:05.948" endtime="20210730 17:41:05.955"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:05.931" endtime="20210730 17:41:05.955"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:05.959" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:05.970" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:05.971" level="INFO">${pids} = 20576
20583
20588</msg>
<status status="PASS" starttime="20210730 17:41:05.956" endtime="20210730 17:41:05.971"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:05.971" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:05.971" endtime="20210730 17:41:05.971"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:05.972" level="INFO">${pids} = ['20576', '20583', '20588']</msg>
<status status="PASS" starttime="20210730 17:41:05.972" endtime="20210730 17:41:05.972"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20576</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:05.975" level="INFO">Running command 'kill 20576 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:05.972" endtime="20210730 17:41:05.976"/>
</kw>
<status status="PASS" starttime="20210730 17:41:05.972" endtime="20210730 17:41:05.976"/>
</iter>
<iter>
<var name="${pid}">20583</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:05.979" level="INFO">Running command 'kill 20583 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:05.976" endtime="20210730 17:41:05.979"/>
</kw>
<status status="PASS" starttime="20210730 17:41:05.976" endtime="20210730 17:41:05.979"/>
</iter>
<iter>
<var name="${pid}">20588</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:05.982" level="INFO">Running command 'kill 20588 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:05.979" endtime="20210730 17:41:05.983"/>
</kw>
<status status="PASS" starttime="20210730 17:41:05.979" endtime="20210730 17:41:05.983"/>
</iter>
<status status="PASS" starttime="20210730 17:41:05.972" endtime="20210730 17:41:05.983"/>
</for>
<status status="PASS" starttime="20210730 17:41:05.972" endtime="20210730 17:41:05.983"/>
</branch>
<status status="PASS" starttime="20210730 17:41:05.971" endtime="20210730 17:41:05.983"/>
</if>
<status status="PASS" starttime="20210730 17:41:05.955" endtime="20210730 17:41:05.983"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '12345678 12345'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:04.365" endtime="20210730 17:41:05.983">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t29" name="With Each Valid Token, Updating Username Of Each System User With abcd fg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:05.987" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:05.998" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:05.998" level="INFO">${pids} = 20617</msg>
<status status="PASS" starttime="20210730 17:41:05.985" endtime="20210730 17:41:05.998"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:05.999" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:05.999" endtime="20210730 17:41:05.999"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:06.000" level="INFO">${pids} = ['20617']</msg>
<status status="PASS" starttime="20210730 17:41:05.999" endtime="20210730 17:41:06.000"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20617</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:06.003" level="INFO">Running command 'kill 20617 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:06.000" endtime="20210730 17:41:06.004"/>
</kw>
<status status="PASS" starttime="20210730 17:41:06.000" endtime="20210730 17:41:06.004"/>
</iter>
<status status="PASS" starttime="20210730 17:41:06.000" endtime="20210730 17:41:06.004"/>
</for>
<status status="PASS" starttime="20210730 17:41:05.999" endtime="20210730 17:41:06.004"/>
</branch>
<status status="PASS" starttime="20210730 17:41:05.999" endtime="20210730 17:41:06.004"/>
</if>
<status status="PASS" starttime="20210730 17:41:05.985" endtime="20210730 17:41:06.004"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:06.005" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:06.005" endtime="20210730 17:41:06.005"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:06.006" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:06.005" endtime="20210730 17:41:06.006"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:06.006" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:06.006" endtime="20210730 17:41:06.006"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:06.006" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:06.006" endtime="20210730 17:41:06.006"/>
</kw>
<msg timestamp="20210730 17:41:06.007" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:06.005" endtime="20210730 17:41:06.007"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:06.014" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:06.008" endtime="20210730 17:41:06.024"/>
</kw>
<status status="PASS" starttime="20210730 17:41:06.004" endtime="20210730 17:41:06.025"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:06.026" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:06.026" endtime="20210730 17:41:06.030"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:07.531" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:06.031" endtime="20210730 17:41:07.532"/>
</kw>
<status status="PASS" starttime="20210730 17:41:06.025" endtime="20210730 17:41:07.533"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:07.535" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:07.534" endtime="20210730 17:41:07.535"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:07.535" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:07.535" endtime="20210730 17:41:07.535"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:07.535" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:07.535" endtime="20210730 17:41:07.535"/>
</kw>
<msg timestamp="20210730 17:41:07.536" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:07.534" endtime="20210730 17:41:07.536"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:07.536" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:07.536" endtime="20210730 17:41:07.536"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.533" endtime="20210730 17:41:07.536"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:07.537" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:07.537" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:07.537" endtime="20210730 17:41:07.537"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.536" endtime="20210730 17:41:07.537"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:07.538" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:07.538" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:07.537" endtime="20210730 17:41:07.538"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:07.538" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:07.538" endtime="20210730 17:41:07.538"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:07.539" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:07.539" endtime="20210730 17:41:07.539"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:07.539" endtime="20210730 17:41:07.540"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:07.540" endtime="20210730 17:41:07.540"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.539" endtime="20210730 17:41:07.540"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:07.541" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:07.540" endtime="20210730 17:41:07.541"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:07.541" endtime="20210730 17:41:07.541"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:07.541" endtime="20210730 17:41:07.542"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.540" endtime="20210730 17:41:07.542"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:07.542" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:07.542" endtime="20210730 17:41:07.542"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:07.542" endtime="20210730 17:41:07.543"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:07.543" endtime="20210730 17:41:07.543"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.542" endtime="20210730 17:41:07.543"/>
</iter>
<status status="PASS" starttime="20210730 17:41:07.538" endtime="20210730 17:41:07.543"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:07.544" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:07.543" endtime="20210730 17:41:07.544"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.537" endtime="20210730 17:41:07.544"/>
</kw>
<status status="PASS" starttime="20210730 17:41:05.984" endtime="20210730 17:41:07.544"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:07.545" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:07.545" endtime="20210730 17:41:07.545"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:07.545" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210730 17:41:07.545" endtime="20210730 17:41:07.545"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:07.554" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:07.554" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:07.546" endtime="20210730 17:41:07.554"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:07.554" endtime="20210730 17:41:07.555"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:07.555" endtime="20210730 17:41:07.555"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:07.545" endtime="20210730 17:41:07.555"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:07.545" endtime="20210730 17:41:07.555"/>
</for>
<status status="FAIL" starttime="20210730 17:41:07.544" endtime="20210730 17:41:07.555"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:07.544" endtime="20210730 17:41:07.555"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:07.557" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:07.556" endtime="20210730 17:41:07.557"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:07.557" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210730 17:41:07.557" endtime="20210730 17:41:07.557"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:07.561" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:07.561" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:07.558" endtime="20210730 17:41:07.561"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:07.561" endtime="20210730 17:41:07.561"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:07.561" endtime="20210730 17:41:07.561"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:07.557" endtime="20210730 17:41:07.562"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:07.557" endtime="20210730 17:41:07.562"/>
</for>
<status status="FAIL" starttime="20210730 17:41:07.556" endtime="20210730 17:41:07.562"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:07.555" endtime="20210730 17:41:07.562"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcd fg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:07.563" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:07.562" endtime="20210730 17:41:07.563"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:07.563" level="INFO">${payload} = {'username': 'abcd fg'}</msg>
<status status="PASS" starttime="20210730 17:41:07.563" endtime="20210730 17:41:07.563"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:07.567" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:07.567" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:07.564" endtime="20210730 17:41:07.567"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:07.568" endtime="20210730 17:41:07.568"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:07.568" endtime="20210730 17:41:07.568"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:07.563" endtime="20210730 17:41:07.568"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:07.563" endtime="20210730 17:41:07.568"/>
</for>
<status status="FAIL" starttime="20210730 17:41:07.562" endtime="20210730 17:41:07.568"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:07.562" endtime="20210730 17:41:07.568"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:07.544" endtime="20210730 17:41:07.568"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:07.572" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:07.582" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:07.582" level="INFO">${pids} = 20640
20647
20651</msg>
<status status="PASS" starttime="20210730 17:41:07.569" endtime="20210730 17:41:07.582"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:07.583" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:07.582" endtime="20210730 17:41:07.583"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:07.583" level="INFO">${pids} = ['20640', '20647', '20651']</msg>
<status status="PASS" starttime="20210730 17:41:07.583" endtime="20210730 17:41:07.583"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20640</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:07.586" level="INFO">Running command 'kill 20640 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:07.584" endtime="20210730 17:41:07.587"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.584" endtime="20210730 17:41:07.587"/>
</iter>
<iter>
<var name="${pid}">20647</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:07.590" level="INFO">Running command 'kill 20647 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:07.587" endtime="20210730 17:41:07.591"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.587" endtime="20210730 17:41:07.591"/>
</iter>
<iter>
<var name="${pid}">20651</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:07.594" level="INFO">Running command 'kill 20651 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:07.591" endtime="20210730 17:41:07.595"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.591" endtime="20210730 17:41:07.595"/>
</iter>
<status status="PASS" starttime="20210730 17:41:07.583" endtime="20210730 17:41:07.595"/>
</for>
<status status="PASS" starttime="20210730 17:41:07.583" endtime="20210730 17:41:07.595"/>
</branch>
<status status="PASS" starttime="20210730 17:41:07.583" endtime="20210730 17:41:07.595"/>
</if>
<status status="PASS" starttime="20210730 17:41:07.568" endtime="20210730 17:41:07.595"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcd fg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:05.984" endtime="20210730 17:41:07.595">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t30" name="With Each Valid Token, Updating Username Of Each System User With ab defgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:07.608" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:07.618" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:07.618" level="INFO">${pids} = 20680</msg>
<status status="PASS" starttime="20210730 17:41:07.597" endtime="20210730 17:41:07.618"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:07.619" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:07.618" endtime="20210730 17:41:07.619"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:07.619" level="INFO">${pids} = ['20680']</msg>
<status status="PASS" starttime="20210730 17:41:07.619" endtime="20210730 17:41:07.620"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20680</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:07.629" level="INFO">Running command 'kill 20680 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:07.620" endtime="20210730 17:41:07.630"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.620" endtime="20210730 17:41:07.630"/>
</iter>
<status status="PASS" starttime="20210730 17:41:07.620" endtime="20210730 17:41:07.630"/>
</for>
<status status="PASS" starttime="20210730 17:41:07.619" endtime="20210730 17:41:07.630"/>
</branch>
<status status="PASS" starttime="20210730 17:41:07.619" endtime="20210730 17:41:07.630"/>
</if>
<status status="PASS" starttime="20210730 17:41:07.597" endtime="20210730 17:41:07.631"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:07.632" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:07.632" endtime="20210730 17:41:07.632"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:07.633" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:07.632" endtime="20210730 17:41:07.633"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:07.633" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:07.633" endtime="20210730 17:41:07.633"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:07.634" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:07.633" endtime="20210730 17:41:07.634"/>
</kw>
<msg timestamp="20210730 17:41:07.634" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:07.632" endtime="20210730 17:41:07.634"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:07.637" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:07.634" endtime="20210730 17:41:07.638"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.631" endtime="20210730 17:41:07.638"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:07.640" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:07.639" endtime="20210730 17:41:07.644"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:09.148" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:07.645" endtime="20210730 17:41:09.149"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.639" endtime="20210730 17:41:09.150"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:09.153" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:09.153" endtime="20210730 17:41:09.153"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:09.154" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:09.153" endtime="20210730 17:41:09.154"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:09.154" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:09.154" endtime="20210730 17:41:09.154"/>
</kw>
<msg timestamp="20210730 17:41:09.154" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:09.152" endtime="20210730 17:41:09.154"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:09.155" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:09.154" endtime="20210730 17:41:09.155"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.152" endtime="20210730 17:41:09.155"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:09.156" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:09.156" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:09.156" endtime="20210730 17:41:09.156"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.155" endtime="20210730 17:41:09.156"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:09.157" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:09.157" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:09.157" endtime="20210730 17:41:09.157"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:09.157" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:09.157" endtime="20210730 17:41:09.158"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:09.158" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:09.158" endtime="20210730 17:41:09.158"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:09.158" endtime="20210730 17:41:09.159"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:09.159" endtime="20210730 17:41:09.159"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.158" endtime="20210730 17:41:09.159"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:09.160" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:09.159" endtime="20210730 17:41:09.160"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:09.160" endtime="20210730 17:41:09.160"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:09.161" endtime="20210730 17:41:09.161"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.159" endtime="20210730 17:41:09.161"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:09.161" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:09.161" endtime="20210730 17:41:09.161"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:09.161" endtime="20210730 17:41:09.162"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:09.162" endtime="20210730 17:41:09.162"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.161" endtime="20210730 17:41:09.162"/>
</iter>
<status status="PASS" starttime="20210730 17:41:09.158" endtime="20210730 17:41:09.162"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:09.163" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:09.162" endtime="20210730 17:41:09.163"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.156" endtime="20210730 17:41:09.163"/>
</kw>
<status status="PASS" starttime="20210730 17:41:07.597" endtime="20210730 17:41:09.163"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:09.164" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:09.164" endtime="20210730 17:41:09.164"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:09.164" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210730 17:41:09.164" endtime="20210730 17:41:09.164"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:09.173" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:09.173" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:09.165" endtime="20210730 17:41:09.173"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:09.174" endtime="20210730 17:41:09.174"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:09.174" endtime="20210730 17:41:09.174"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:09.165" endtime="20210730 17:41:09.174"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:09.164" endtime="20210730 17:41:09.174"/>
</for>
<status status="FAIL" starttime="20210730 17:41:09.163" endtime="20210730 17:41:09.174"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:09.163" endtime="20210730 17:41:09.174"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:09.175" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:09.175" endtime="20210730 17:41:09.175"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:09.176" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210730 17:41:09.176" endtime="20210730 17:41:09.176"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:09.180" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:09.180" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:09.176" endtime="20210730 17:41:09.180"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:09.180" endtime="20210730 17:41:09.180"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:09.180" endtime="20210730 17:41:09.181"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:09.176" endtime="20210730 17:41:09.181"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:09.176" endtime="20210730 17:41:09.181"/>
</for>
<status status="FAIL" starttime="20210730 17:41:09.174" endtime="20210730 17:41:09.181"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:09.174" endtime="20210730 17:41:09.181"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=ab defgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:09.182" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:09.181" endtime="20210730 17:41:09.182"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:09.182" level="INFO">${payload} = {'username': 'ab defgh'}</msg>
<status status="PASS" starttime="20210730 17:41:09.182" endtime="20210730 17:41:09.182"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:09.186" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:09.186" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:09.183" endtime="20210730 17:41:09.186"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:09.187" endtime="20210730 17:41:09.187"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:09.187" endtime="20210730 17:41:09.187"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:09.182" endtime="20210730 17:41:09.187"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:09.182" endtime="20210730 17:41:09.187"/>
</for>
<status status="FAIL" starttime="20210730 17:41:09.181" endtime="20210730 17:41:09.187"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:09.181" endtime="20210730 17:41:09.187"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:09.163" endtime="20210730 17:41:09.187"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:09.192" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:09.201" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:09.201" level="INFO">${pids} = 20703
20710
20714</msg>
<status status="PASS" starttime="20210730 17:41:09.188" endtime="20210730 17:41:09.201"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:09.202" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:09.202" endtime="20210730 17:41:09.202"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:09.203" level="INFO">${pids} = ['20703', '20710', '20714']</msg>
<status status="PASS" starttime="20210730 17:41:09.203" endtime="20210730 17:41:09.203"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20703</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:09.206" level="INFO">Running command 'kill 20703 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:09.203" endtime="20210730 17:41:09.207"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.203" endtime="20210730 17:41:09.207"/>
</iter>
<iter>
<var name="${pid}">20710</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:09.209" level="INFO">Running command 'kill 20710 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:09.207" endtime="20210730 17:41:09.211"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.207" endtime="20210730 17:41:09.211"/>
</iter>
<iter>
<var name="${pid}">20714</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:09.214" level="INFO">Running command 'kill 20714 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:09.211" endtime="20210730 17:41:09.214"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.211" endtime="20210730 17:41:09.214"/>
</iter>
<status status="PASS" starttime="20210730 17:41:09.203" endtime="20210730 17:41:09.214"/>
</for>
<status status="PASS" starttime="20210730 17:41:09.203" endtime="20210730 17:41:09.214"/>
</branch>
<status status="PASS" starttime="20210730 17:41:09.202" endtime="20210730 17:41:09.214"/>
</if>
<status status="PASS" starttime="20210730 17:41:09.187" endtime="20210730 17:41:09.215"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'ab defgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:07.596" endtime="20210730 17:41:09.215">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t31" name="With Each Valid Token, Updating Username Of Each System User With abcdefghijklmnp stop Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:09.219" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:09.229" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:09.229" level="INFO">${pids} = 20743</msg>
<status status="PASS" starttime="20210730 17:41:09.216" endtime="20210730 17:41:09.229"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:09.230" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:09.229" endtime="20210730 17:41:09.230"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:09.230" level="INFO">${pids} = ['20743']</msg>
<status status="PASS" starttime="20210730 17:41:09.230" endtime="20210730 17:41:09.230"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20743</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:09.234" level="INFO">Running command 'kill 20743 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:09.231" endtime="20210730 17:41:09.234"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.231" endtime="20210730 17:41:09.234"/>
</iter>
<status status="PASS" starttime="20210730 17:41:09.230" endtime="20210730 17:41:09.234"/>
</for>
<status status="PASS" starttime="20210730 17:41:09.230" endtime="20210730 17:41:09.234"/>
</branch>
<status status="PASS" starttime="20210730 17:41:09.230" endtime="20210730 17:41:09.234"/>
</if>
<status status="PASS" starttime="20210730 17:41:09.216" endtime="20210730 17:41:09.234"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:09.235" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:09.235" endtime="20210730 17:41:09.235"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:09.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:09.236" endtime="20210730 17:41:09.236"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:09.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:09.236" endtime="20210730 17:41:09.236"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:09.237" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:09.236" endtime="20210730 17:41:09.237"/>
</kw>
<msg timestamp="20210730 17:41:09.237" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:09.235" endtime="20210730 17:41:09.237"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:09.241" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:09.237" endtime="20210730 17:41:09.243"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.235" endtime="20210730 17:41:09.243"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:09.245" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:09.244" endtime="20210730 17:41:09.259"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:10.761" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:09.260" endtime="20210730 17:41:10.761"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.243" endtime="20210730 17:41:10.762"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:10.765" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:10.764" endtime="20210730 17:41:10.766"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:10.766" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:10.766" endtime="20210730 17:41:10.766"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:10.766" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:10.766" endtime="20210730 17:41:10.766"/>
</kw>
<msg timestamp="20210730 17:41:10.767" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:10.763" endtime="20210730 17:41:10.767"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:10.767" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:10.767" endtime="20210730 17:41:10.768"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.763" endtime="20210730 17:41:10.768"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:10.768" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:10.768" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:10.768" endtime="20210730 17:41:10.768"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.768" endtime="20210730 17:41:10.768"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:10.769" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:10.769" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:10.769" endtime="20210730 17:41:10.769"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:10.770" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:10.770" endtime="20210730 17:41:10.770"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:10.771" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:10.770" endtime="20210730 17:41:10.771"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:10.771" endtime="20210730 17:41:10.771"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:10.771" endtime="20210730 17:41:10.772"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.770" endtime="20210730 17:41:10.772"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:10.772" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:10.772" endtime="20210730 17:41:10.772"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:10.772" endtime="20210730 17:41:10.773"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:10.773" endtime="20210730 17:41:10.773"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.772" endtime="20210730 17:41:10.773"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:10.774" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:10.774" endtime="20210730 17:41:10.774"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:10.774" endtime="20210730 17:41:10.775"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:10.775" endtime="20210730 17:41:10.775"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.773" endtime="20210730 17:41:10.775"/>
</iter>
<status status="PASS" starttime="20210730 17:41:10.770" endtime="20210730 17:41:10.775"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:10.775" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:10.775" endtime="20210730 17:41:10.775"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.769" endtime="20210730 17:41:10.775"/>
</kw>
<status status="PASS" starttime="20210730 17:41:09.216" endtime="20210730 17:41:10.775"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:10.777" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:10.776" endtime="20210730 17:41:10.777"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:10.777" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210730 17:41:10.777" endtime="20210730 17:41:10.777"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:10.787" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:10.787" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:10.777" endtime="20210730 17:41:10.787"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:10.787" endtime="20210730 17:41:10.787"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:10.787" endtime="20210730 17:41:10.787"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:10.777" endtime="20210730 17:41:10.787"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:10.777" endtime="20210730 17:41:10.787"/>
</for>
<status status="FAIL" starttime="20210730 17:41:10.776" endtime="20210730 17:41:10.788"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:10.776" endtime="20210730 17:41:10.788"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:10.789" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:10.788" endtime="20210730 17:41:10.789"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:10.789" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210730 17:41:10.789" endtime="20210730 17:41:10.790"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:10.794" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:10.794" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:10.790" endtime="20210730 17:41:10.794"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:10.794" endtime="20210730 17:41:10.794"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:10.794" endtime="20210730 17:41:10.794"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:10.790" endtime="20210730 17:41:10.794"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:10.790" endtime="20210730 17:41:10.794"/>
</for>
<status status="FAIL" starttime="20210730 17:41:10.788" endtime="20210730 17:41:10.794"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:10.788" endtime="20210730 17:41:10.794"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=abcdefghijklmnp stop</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:10.795" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:10.795" endtime="20210730 17:41:10.795"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:10.796" level="INFO">${payload} = {'username': 'abcdefghijklmnp stop'}</msg>
<status status="PASS" starttime="20210730 17:41:10.795" endtime="20210730 17:41:10.796"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:10.799" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:10.799" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:10.796" endtime="20210730 17:41:10.799"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:10.799" endtime="20210730 17:41:10.799"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:10.799" endtime="20210730 17:41:10.799"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:10.796" endtime="20210730 17:41:10.800"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:10.796" endtime="20210730 17:41:10.800"/>
</for>
<status status="FAIL" starttime="20210730 17:41:10.794" endtime="20210730 17:41:10.800"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:10.794" endtime="20210730 17:41:10.800"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:10.776" endtime="20210730 17:41:10.800"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:10.806" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:10.815" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:10.815" level="INFO">${pids} = 20766
20773
20778</msg>
<status status="PASS" starttime="20210730 17:41:10.801" endtime="20210730 17:41:10.815"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:10.816" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:10.815" endtime="20210730 17:41:10.816"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:10.816" level="INFO">${pids} = ['20766', '20773', '20778']</msg>
<status status="PASS" starttime="20210730 17:41:10.816" endtime="20210730 17:41:10.816"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20766</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:10.820" level="INFO">Running command 'kill 20766 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:10.817" endtime="20210730 17:41:10.821"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.816" endtime="20210730 17:41:10.821"/>
</iter>
<iter>
<var name="${pid}">20773</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:10.824" level="INFO">Running command 'kill 20773 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:10.821" endtime="20210730 17:41:10.826"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.821" endtime="20210730 17:41:10.826"/>
</iter>
<iter>
<var name="${pid}">20778</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:10.829" level="INFO">Running command 'kill 20778 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:10.827" endtime="20210730 17:41:10.830"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.826" endtime="20210730 17:41:10.830"/>
</iter>
<status status="PASS" starttime="20210730 17:41:10.816" endtime="20210730 17:41:10.830"/>
</for>
<status status="PASS" starttime="20210730 17:41:10.816" endtime="20210730 17:41:10.830"/>
</branch>
<status status="PASS" starttime="20210730 17:41:10.816" endtime="20210730 17:41:10.830"/>
</if>
<status status="PASS" starttime="20210730 17:41:10.800" endtime="20210730 17:41:10.830"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'abcdefghijklmnp stop'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:09.215" endtime="20210730 17:41:10.830">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t32" name="With Each Valid Token, Updating Username Of Each System User With haka 12 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:10.835" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:10.847" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:10.847" level="INFO">${pids} = 20807</msg>
<status status="PASS" starttime="20210730 17:41:10.832" endtime="20210730 17:41:10.847"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:10.848" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:10.847" endtime="20210730 17:41:10.848"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:10.848" level="INFO">${pids} = ['20807']</msg>
<status status="PASS" starttime="20210730 17:41:10.848" endtime="20210730 17:41:10.848"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20807</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:10.852" level="INFO">Running command 'kill 20807 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:10.849" endtime="20210730 17:41:10.852"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.849" endtime="20210730 17:41:10.852"/>
</iter>
<status status="PASS" starttime="20210730 17:41:10.848" endtime="20210730 17:41:10.853"/>
</for>
<status status="PASS" starttime="20210730 17:41:10.848" endtime="20210730 17:41:10.853"/>
</branch>
<status status="PASS" starttime="20210730 17:41:10.848" endtime="20210730 17:41:10.853"/>
</if>
<status status="PASS" starttime="20210730 17:41:10.832" endtime="20210730 17:41:10.853"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:10.854" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:10.854" endtime="20210730 17:41:10.854"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:10.855" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:10.855" endtime="20210730 17:41:10.855"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:10.856" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:10.855" endtime="20210730 17:41:10.856"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:10.856" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:10.856" endtime="20210730 17:41:10.856"/>
</kw>
<msg timestamp="20210730 17:41:10.857" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:10.855" endtime="20210730 17:41:10.857"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:10.868" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:10.857" endtime="20210730 17:41:10.871"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.853" endtime="20210730 17:41:10.871"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:10.872" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:10.872" endtime="20210730 17:41:10.877"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:12.380" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:10.877" endtime="20210730 17:41:12.380"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.871" endtime="20210730 17:41:12.381"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:12.384" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:12.383" endtime="20210730 17:41:12.384"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:12.384" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:12.384" endtime="20210730 17:41:12.384"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:12.385" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:12.384" endtime="20210730 17:41:12.385"/>
</kw>
<msg timestamp="20210730 17:41:12.385" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:12.383" endtime="20210730 17:41:12.385"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:12.385" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:12.385" endtime="20210730 17:41:12.386"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.382" endtime="20210730 17:41:12.386"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:12.386" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:12.386" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:12.386" endtime="20210730 17:41:12.387"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.386" endtime="20210730 17:41:12.387"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:12.399" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:12.399" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:12.387" endtime="20210730 17:41:12.399"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:12.400" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:12.399" endtime="20210730 17:41:12.400"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:12.400" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:12.400" endtime="20210730 17:41:12.400"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:12.400" endtime="20210730 17:41:12.401"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:12.401" endtime="20210730 17:41:12.401"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.400" endtime="20210730 17:41:12.401"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:12.402" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:12.402" endtime="20210730 17:41:12.402"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:12.402" endtime="20210730 17:41:12.403"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:12.403" endtime="20210730 17:41:12.403"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.401" endtime="20210730 17:41:12.403"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:12.403" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:12.403" endtime="20210730 17:41:12.403"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:12.404" endtime="20210730 17:41:12.404"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:12.404" endtime="20210730 17:41:12.405"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.403" endtime="20210730 17:41:12.405"/>
</iter>
<status status="PASS" starttime="20210730 17:41:12.400" endtime="20210730 17:41:12.405"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:12.405" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:12.405" endtime="20210730 17:41:12.405"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.387" endtime="20210730 17:41:12.406"/>
</kw>
<status status="PASS" starttime="20210730 17:41:10.832" endtime="20210730 17:41:12.406"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:12.407" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:12.407" endtime="20210730 17:41:12.407"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:12.408" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210730 17:41:12.408" endtime="20210730 17:41:12.408"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:12.419" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:12.420" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:12.408" endtime="20210730 17:41:12.420"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:12.420" endtime="20210730 17:41:12.420"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:12.420" endtime="20210730 17:41:12.420"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:12.408" endtime="20210730 17:41:12.420"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:12.408" endtime="20210730 17:41:12.420"/>
</for>
<status status="FAIL" starttime="20210730 17:41:12.406" endtime="20210730 17:41:12.420"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:12.406" endtime="20210730 17:41:12.420"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:12.421" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:12.421" endtime="20210730 17:41:12.421"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:12.422" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210730 17:41:12.421" endtime="20210730 17:41:12.422"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:12.426" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:12.426" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:12.422" endtime="20210730 17:41:12.426"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:12.426" endtime="20210730 17:41:12.426"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:12.426" endtime="20210730 17:41:12.426"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:12.422" endtime="20210730 17:41:12.426"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:12.422" endtime="20210730 17:41:12.426"/>
</for>
<status status="FAIL" starttime="20210730 17:41:12.420" endtime="20210730 17:41:12.427"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:12.420" endtime="20210730 17:41:12.428"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 12</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:12.428" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:12.428" endtime="20210730 17:41:12.428"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:12.429" level="INFO">${payload} = {'username': 'haka 12'}</msg>
<status status="PASS" starttime="20210730 17:41:12.429" endtime="20210730 17:41:12.429"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:12.433" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:12.433" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:12.429" endtime="20210730 17:41:12.433"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:12.433" endtime="20210730 17:41:12.433"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:12.433" endtime="20210730 17:41:12.434"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:12.429" endtime="20210730 17:41:12.434"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:12.429" endtime="20210730 17:41:12.434"/>
</for>
<status status="FAIL" starttime="20210730 17:41:12.428" endtime="20210730 17:41:12.434"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:12.428" endtime="20210730 17:41:12.434"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:12.406" endtime="20210730 17:41:12.434"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:12.439" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:12.448" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:12.449" level="INFO">${pids} = 20830
20837
20849</msg>
<status status="PASS" starttime="20210730 17:41:12.435" endtime="20210730 17:41:12.449"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:12.449" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:12.449" endtime="20210730 17:41:12.449"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:12.450" level="INFO">${pids} = ['20830', '20837', '20849']</msg>
<status status="PASS" starttime="20210730 17:41:12.450" endtime="20210730 17:41:12.450"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20830</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:12.453" level="INFO">Running command 'kill 20830 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:12.450" endtime="20210730 17:41:12.454"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.450" endtime="20210730 17:41:12.454"/>
</iter>
<iter>
<var name="${pid}">20837</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:12.458" level="INFO">Running command 'kill 20837 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:12.454" endtime="20210730 17:41:12.459"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.454" endtime="20210730 17:41:12.459"/>
</iter>
<iter>
<var name="${pid}">20849</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:12.462" level="INFO">Running command 'kill 20849 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:12.459" endtime="20210730 17:41:12.462"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.459" endtime="20210730 17:41:12.463"/>
</iter>
<status status="PASS" starttime="20210730 17:41:12.450" endtime="20210730 17:41:12.463"/>
</for>
<status status="PASS" starttime="20210730 17:41:12.450" endtime="20210730 17:41:12.463"/>
</branch>
<status status="PASS" starttime="20210730 17:41:12.450" endtime="20210730 17:41:12.463"/>
</if>
<status status="PASS" starttime="20210730 17:41:12.434" endtime="20210730 17:41:12.463"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 12'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:10.831" endtime="20210730 17:41:12.463">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t33" name="With Each Valid Token, Updating Username Of Each System User With haka 123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:12.469" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:12.477" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:12.477" level="INFO">${pids} = 20878</msg>
<status status="PASS" starttime="20210730 17:41:12.466" endtime="20210730 17:41:12.477"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:12.478" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:12.478" endtime="20210730 17:41:12.478"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:12.479" level="INFO">${pids} = ['20878']</msg>
<status status="PASS" starttime="20210730 17:41:12.479" endtime="20210730 17:41:12.479"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20878</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:12.485" level="INFO">Running command 'kill 20878 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:12.479" endtime="20210730 17:41:12.486"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.479" endtime="20210730 17:41:12.486"/>
</iter>
<status status="PASS" starttime="20210730 17:41:12.479" endtime="20210730 17:41:12.486"/>
</for>
<status status="PASS" starttime="20210730 17:41:12.479" endtime="20210730 17:41:12.486"/>
</branch>
<status status="PASS" starttime="20210730 17:41:12.478" endtime="20210730 17:41:12.486"/>
</if>
<status status="PASS" starttime="20210730 17:41:12.465" endtime="20210730 17:41:12.487"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:12.488" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:12.487" endtime="20210730 17:41:12.488"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:12.488" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:12.488" endtime="20210730 17:41:12.488"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:12.489" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:12.488" endtime="20210730 17:41:12.489"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:12.489" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:12.489" endtime="20210730 17:41:12.489"/>
</kw>
<msg timestamp="20210730 17:41:12.489" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:12.488" endtime="20210730 17:41:12.489"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:12.493" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:12.490" endtime="20210730 17:41:12.494"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.487" endtime="20210730 17:41:12.495"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:12.496" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:12.496" endtime="20210730 17:41:12.501"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:14.003" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:12.502" endtime="20210730 17:41:14.004"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.495" endtime="20210730 17:41:14.005"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:14.008" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:14.008" endtime="20210730 17:41:14.008"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:14.008" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:14.008" endtime="20210730 17:41:14.008"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:14.009" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:14.009" endtime="20210730 17:41:14.009"/>
</kw>
<msg timestamp="20210730 17:41:14.009" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:14.007" endtime="20210730 17:41:14.009"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:14.010" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:14.009" endtime="20210730 17:41:14.010"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.006" endtime="20210730 17:41:14.010"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:14.011" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:14.011" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:14.010" endtime="20210730 17:41:14.011"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.010" endtime="20210730 17:41:14.011"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:14.012" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:14.012" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:14.011" endtime="20210730 17:41:14.012"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:14.012" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:14.012" endtime="20210730 17:41:14.012"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:14.013" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:14.013" endtime="20210730 17:41:14.013"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:14.013" endtime="20210730 17:41:14.014"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:14.014" endtime="20210730 17:41:14.014"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.012" endtime="20210730 17:41:14.014"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:14.015" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:14.014" endtime="20210730 17:41:14.015"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:14.015" endtime="20210730 17:41:14.015"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:14.015" endtime="20210730 17:41:14.016"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.014" endtime="20210730 17:41:14.016"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:14.016" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:14.016" endtime="20210730 17:41:14.016"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:14.016" endtime="20210730 17:41:14.017"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:14.017" endtime="20210730 17:41:14.017"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.016" endtime="20210730 17:41:14.017"/>
</iter>
<status status="PASS" starttime="20210730 17:41:14.012" endtime="20210730 17:41:14.017"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:14.017" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:14.017" endtime="20210730 17:41:14.017"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.011" endtime="20210730 17:41:14.018"/>
</kw>
<status status="PASS" starttime="20210730 17:41:12.465" endtime="20210730 17:41:14.018"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:14.019" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:14.018" endtime="20210730 17:41:14.019"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:14.019" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210730 17:41:14.019" endtime="20210730 17:41:14.019"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:14.027" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:14.028" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:14.019" endtime="20210730 17:41:14.028"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:14.028" endtime="20210730 17:41:14.028"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:14.028" endtime="20210730 17:41:14.028"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:14.019" endtime="20210730 17:41:14.028"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:14.019" endtime="20210730 17:41:14.028"/>
</for>
<status status="FAIL" starttime="20210730 17:41:14.018" endtime="20210730 17:41:14.028"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:14.018" endtime="20210730 17:41:14.029"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:14.030" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:14.029" endtime="20210730 17:41:14.030"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:14.030" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210730 17:41:14.030" endtime="20210730 17:41:14.030"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:14.035" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:14.035" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:14.031" endtime="20210730 17:41:14.035"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:14.035" endtime="20210730 17:41:14.035"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:14.035" endtime="20210730 17:41:14.035"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:14.030" endtime="20210730 17:41:14.035"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:14.030" endtime="20210730 17:41:14.035"/>
</for>
<status status="FAIL" starttime="20210730 17:41:14.029" endtime="20210730 17:41:14.035"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:14.029" endtime="20210730 17:41:14.036"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:14.036" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:14.036" endtime="20210730 17:41:14.036"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:14.037" level="INFO">${payload} = {'username': 'haka 123'}</msg>
<status status="PASS" starttime="20210730 17:41:14.037" endtime="20210730 17:41:14.037"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:14.041" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:14.041" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:14.037" endtime="20210730 17:41:14.041"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:14.041" endtime="20210730 17:41:14.041"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:14.041" endtime="20210730 17:41:14.041"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:14.037" endtime="20210730 17:41:14.041"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:14.037" endtime="20210730 17:41:14.041"/>
</for>
<status status="FAIL" starttime="20210730 17:41:14.036" endtime="20210730 17:41:14.042"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:14.036" endtime="20210730 17:41:14.042"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:14.018" endtime="20210730 17:41:14.042"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:14.047" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:14.058" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:14.058" level="INFO">${pids} = 20901
20908
20914</msg>
<status status="PASS" starttime="20210730 17:41:14.043" endtime="20210730 17:41:14.058"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:14.058" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:14.058" endtime="20210730 17:41:14.058"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:14.059" level="INFO">${pids} = ['20901', '20908', '20914']</msg>
<status status="PASS" starttime="20210730 17:41:14.059" endtime="20210730 17:41:14.059"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20901</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:14.063" level="INFO">Running command 'kill 20901 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:14.059" endtime="20210730 17:41:14.063"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.059" endtime="20210730 17:41:14.063"/>
</iter>
<iter>
<var name="${pid}">20908</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:14.066" level="INFO">Running command 'kill 20908 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:14.064" endtime="20210730 17:41:14.068"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.063" endtime="20210730 17:41:14.068"/>
</iter>
<iter>
<var name="${pid}">20914</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:14.072" level="INFO">Running command 'kill 20914 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:14.069" endtime="20210730 17:41:14.072"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.069" endtime="20210730 17:41:14.072"/>
</iter>
<status status="PASS" starttime="20210730 17:41:14.059" endtime="20210730 17:41:14.072"/>
</for>
<status status="PASS" starttime="20210730 17:41:14.059" endtime="20210730 17:41:14.072"/>
</branch>
<status status="PASS" starttime="20210730 17:41:14.059" endtime="20210730 17:41:14.072"/>
</if>
<status status="PASS" starttime="20210730 17:41:14.042" endtime="20210730 17:41:14.073"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:12.464" endtime="20210730 17:41:14.073">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t34" name="With Each Valid Token, Updating Username Of Each System User With haka 123456789123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:14.081" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:14.090" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:14.090" level="INFO">${pids} = 20943</msg>
<status status="PASS" starttime="20210730 17:41:14.075" endtime="20210730 17:41:14.090"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:14.091" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:14.090" endtime="20210730 17:41:14.091"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:14.091" level="INFO">${pids} = ['20943']</msg>
<status status="PASS" starttime="20210730 17:41:14.091" endtime="20210730 17:41:14.091"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20943</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:14.099" level="INFO">Running command 'kill 20943 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:14.092" endtime="20210730 17:41:14.110"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.092" endtime="20210730 17:41:14.110"/>
</iter>
<status status="PASS" starttime="20210730 17:41:14.091" endtime="20210730 17:41:14.111"/>
</for>
<status status="PASS" starttime="20210730 17:41:14.091" endtime="20210730 17:41:14.111"/>
</branch>
<status status="PASS" starttime="20210730 17:41:14.091" endtime="20210730 17:41:14.111"/>
</if>
<status status="PASS" starttime="20210730 17:41:14.075" endtime="20210730 17:41:14.111"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:14.112" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:14.112" endtime="20210730 17:41:14.112"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:14.113" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:14.113" endtime="20210730 17:41:14.113"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:14.113" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:14.113" endtime="20210730 17:41:14.114"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:14.114" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:14.114" endtime="20210730 17:41:14.114"/>
</kw>
<msg timestamp="20210730 17:41:14.114" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:14.112" endtime="20210730 17:41:14.114"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:14.117" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:14.115" endtime="20210730 17:41:14.119"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.111" endtime="20210730 17:41:14.119"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:14.120" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:14.120" endtime="20210730 17:41:14.124"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:15.631" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:14.125" endtime="20210730 17:41:15.632"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.119" endtime="20210730 17:41:15.632"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:15.636" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:15.635" endtime="20210730 17:41:15.636"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:15.636" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:15.636" endtime="20210730 17:41:15.636"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:15.636" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:15.636" endtime="20210730 17:41:15.636"/>
</kw>
<msg timestamp="20210730 17:41:15.637" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:15.634" endtime="20210730 17:41:15.637"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:15.637" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:15.637" endtime="20210730 17:41:15.637"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.633" endtime="20210730 17:41:15.637"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:15.638" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:15.638" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:15.638" endtime="20210730 17:41:15.638"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.638" endtime="20210730 17:41:15.638"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:15.639" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:15.639" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:15.638" endtime="20210730 17:41:15.639"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:15.639" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:15.639" endtime="20210730 17:41:15.639"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:15.640" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:15.640" endtime="20210730 17:41:15.640"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:15.640" endtime="20210730 17:41:15.641"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:15.641" endtime="20210730 17:41:15.641"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.640" endtime="20210730 17:41:15.641"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:15.642" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:15.641" endtime="20210730 17:41:15.642"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:15.642" endtime="20210730 17:41:15.642"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:15.642" endtime="20210730 17:41:15.643"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.641" endtime="20210730 17:41:15.643"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:15.643" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:15.643" endtime="20210730 17:41:15.643"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:15.643" endtime="20210730 17:41:15.644"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:15.644" endtime="20210730 17:41:15.644"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.643" endtime="20210730 17:41:15.644"/>
</iter>
<status status="PASS" starttime="20210730 17:41:15.639" endtime="20210730 17:41:15.644"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:15.645" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:15.644" endtime="20210730 17:41:15.645"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.638" endtime="20210730 17:41:15.645"/>
</kw>
<status status="PASS" starttime="20210730 17:41:14.075" endtime="20210730 17:41:15.645"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:15.646" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:15.646" endtime="20210730 17:41:15.646"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:15.647" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210730 17:41:15.646" endtime="20210730 17:41:15.647"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:15.656" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:15.656" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:15.647" endtime="20210730 17:41:15.657"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:15.657" endtime="20210730 17:41:15.657"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:15.657" endtime="20210730 17:41:15.657"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:15.647" endtime="20210730 17:41:15.657"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:15.647" endtime="20210730 17:41:15.657"/>
</for>
<status status="FAIL" starttime="20210730 17:41:15.645" endtime="20210730 17:41:15.657"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:15.645" endtime="20210730 17:41:15.657"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:15.658" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:15.658" endtime="20210730 17:41:15.658"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:15.659" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210730 17:41:15.658" endtime="20210730 17:41:15.659"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:15.662" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:15.663" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:15.659" endtime="20210730 17:41:15.663"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:15.663" endtime="20210730 17:41:15.663"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:15.663" endtime="20210730 17:41:15.663"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:15.659" endtime="20210730 17:41:15.663"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:15.659" endtime="20210730 17:41:15.663"/>
</for>
<status status="FAIL" starttime="20210730 17:41:15.657" endtime="20210730 17:41:15.663"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:15.657" endtime="20210730 17:41:15.663"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=haka 123456789123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:15.664" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:15.664" endtime="20210730 17:41:15.664"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:15.664" level="INFO">${payload} = {'username': 'haka 123456789123456789'}</msg>
<status status="PASS" starttime="20210730 17:41:15.664" endtime="20210730 17:41:15.665"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:15.668" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:15.668" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:15.665" endtime="20210730 17:41:15.668"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:15.668" endtime="20210730 17:41:15.668"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:15.668" endtime="20210730 17:41:15.669"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:15.665" endtime="20210730 17:41:15.669"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:15.665" endtime="20210730 17:41:15.669"/>
</for>
<status status="FAIL" starttime="20210730 17:41:15.663" endtime="20210730 17:41:15.669"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:15.663" endtime="20210730 17:41:15.669"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:15.645" endtime="20210730 17:41:15.669"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:15.674" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:15.684" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:15.684" level="INFO">${pids} = 20966
20973
20980</msg>
<status status="PASS" starttime="20210730 17:41:15.670" endtime="20210730 17:41:15.684"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:15.685" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:15.685" endtime="20210730 17:41:15.685"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:15.686" level="INFO">${pids} = ['20966', '20973', '20980']</msg>
<status status="PASS" starttime="20210730 17:41:15.686" endtime="20210730 17:41:15.686"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">20966</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:15.689" level="INFO">Running command 'kill 20966 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:15.686" endtime="20210730 17:41:15.690"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.686" endtime="20210730 17:41:15.690"/>
</iter>
<iter>
<var name="${pid}">20973</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:15.693" level="INFO">Running command 'kill 20973 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:15.690" endtime="20210730 17:41:15.694"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.690" endtime="20210730 17:41:15.694"/>
</iter>
<iter>
<var name="${pid}">20980</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:15.697" level="INFO">Running command 'kill 20980 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:15.694" endtime="20210730 17:41:15.698"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.694" endtime="20210730 17:41:15.698"/>
</iter>
<status status="PASS" starttime="20210730 17:41:15.686" endtime="20210730 17:41:15.698"/>
</for>
<status status="PASS" starttime="20210730 17:41:15.686" endtime="20210730 17:41:15.698"/>
</branch>
<status status="PASS" starttime="20210730 17:41:15.685" endtime="20210730 17:41:15.698"/>
</if>
<status status="PASS" starttime="20210730 17:41:15.669" endtime="20210730 17:41:15.698"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": 'haka 123456789123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:14.074" endtime="20210730 17:41:15.698">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t35" name="With Each Valid Token, Updating Username Of Each System User With #¤% 23! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:15.702" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:15.712" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:15.712" level="INFO">${pids} = 21012</msg>
<status status="PASS" starttime="20210730 17:41:15.700" endtime="20210730 17:41:15.712"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:15.713" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:15.712" endtime="20210730 17:41:15.713"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:15.714" level="INFO">${pids} = ['21012']</msg>
<status status="PASS" starttime="20210730 17:41:15.713" endtime="20210730 17:41:15.714"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21012</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:15.717" level="INFO">Running command 'kill 21012 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:15.714" endtime="20210730 17:41:15.718"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.714" endtime="20210730 17:41:15.718"/>
</iter>
<status status="PASS" starttime="20210730 17:41:15.714" endtime="20210730 17:41:15.718"/>
</for>
<status status="PASS" starttime="20210730 17:41:15.713" endtime="20210730 17:41:15.718"/>
</branch>
<status status="PASS" starttime="20210730 17:41:15.713" endtime="20210730 17:41:15.718"/>
</if>
<status status="PASS" starttime="20210730 17:41:15.700" endtime="20210730 17:41:15.718"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:15.719" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:15.719" endtime="20210730 17:41:15.719"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:15.720" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:15.720" endtime="20210730 17:41:15.720"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:15.720" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:15.720" endtime="20210730 17:41:15.720"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:15.722" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:15.722" endtime="20210730 17:41:15.722"/>
</kw>
<msg timestamp="20210730 17:41:15.723" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:15.719" endtime="20210730 17:41:15.723"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:15.737" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:15.730" endtime="20210730 17:41:15.738"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.719" endtime="20210730 17:41:15.739"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:15.740" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:15.739" endtime="20210730 17:41:15.744"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:17.247" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:15.745" endtime="20210730 17:41:17.247"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.739" endtime="20210730 17:41:17.247"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:17.248" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:17.248" endtime="20210730 17:41:17.248"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:17.249" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:17.249" endtime="20210730 17:41:17.249"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:17.249" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:17.249" endtime="20210730 17:41:17.249"/>
</kw>
<msg timestamp="20210730 17:41:17.249" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:17.248" endtime="20210730 17:41:17.249"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:17.250" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:17.250" endtime="20210730 17:41:17.250"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.247" endtime="20210730 17:41:17.250"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:17.251" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:17.251" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:17.251" endtime="20210730 17:41:17.251"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.251" endtime="20210730 17:41:17.251"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:17.252" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:17.252" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:17.252" endtime="20210730 17:41:17.252"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:17.253" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:17.252" endtime="20210730 17:41:17.253"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:17.253" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:17.253" endtime="20210730 17:41:17.253"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:17.253" endtime="20210730 17:41:17.254"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:17.254" endtime="20210730 17:41:17.254"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.253" endtime="20210730 17:41:17.255"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:17.255" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:17.255" endtime="20210730 17:41:17.255"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:17.255" endtime="20210730 17:41:17.256"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:17.256" endtime="20210730 17:41:17.256"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.255" endtime="20210730 17:41:17.256"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:17.256" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:17.256" endtime="20210730 17:41:17.256"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:17.256" endtime="20210730 17:41:17.257"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:17.257" endtime="20210730 17:41:17.257"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.256" endtime="20210730 17:41:17.257"/>
</iter>
<status status="PASS" starttime="20210730 17:41:17.253" endtime="20210730 17:41:17.257"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:17.258" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:17.258" endtime="20210730 17:41:17.258"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.251" endtime="20210730 17:41:17.258"/>
</kw>
<status status="PASS" starttime="20210730 17:41:15.699" endtime="20210730 17:41:17.258"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:17.259" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:17.259" endtime="20210730 17:41:17.259"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:17.260" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210730 17:41:17.259" endtime="20210730 17:41:17.260"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:17.268" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:17.268" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:17.260" endtime="20210730 17:41:17.268"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:17.268" endtime="20210730 17:41:17.268"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:17.269" endtime="20210730 17:41:17.269"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:17.260" endtime="20210730 17:41:17.269"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:17.260" endtime="20210730 17:41:17.269"/>
</for>
<status status="FAIL" starttime="20210730 17:41:17.259" endtime="20210730 17:41:17.269"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:17.258" endtime="20210730 17:41:17.269"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:17.270" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:17.270" endtime="20210730 17:41:17.270"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:17.270" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210730 17:41:17.270" endtime="20210730 17:41:17.270"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:17.275" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:17.275" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:17.271" endtime="20210730 17:41:17.275"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:17.275" endtime="20210730 17:41:17.275"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:17.276" endtime="20210730 17:41:17.276"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:17.271" endtime="20210730 17:41:17.276"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:17.271" endtime="20210730 17:41:17.276"/>
</for>
<status status="FAIL" starttime="20210730 17:41:17.269" endtime="20210730 17:41:17.276"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:17.269" endtime="20210730 17:41:17.276"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤% 23!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:17.277" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:17.277" endtime="20210730 17:41:17.277"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:17.277" level="INFO">${payload} = {'username': '#¤% 23!'}</msg>
<status status="PASS" starttime="20210730 17:41:17.277" endtime="20210730 17:41:17.277"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:17.281" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:17.281" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:17.278" endtime="20210730 17:41:17.281"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:17.281" endtime="20210730 17:41:17.281"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:17.281" endtime="20210730 17:41:17.281"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:17.277" endtime="20210730 17:41:17.281"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:17.277" endtime="20210730 17:41:17.281"/>
</for>
<status status="FAIL" starttime="20210730 17:41:17.276" endtime="20210730 17:41:17.282"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:17.276" endtime="20210730 17:41:17.282"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:17.258" endtime="20210730 17:41:17.282"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:17.286" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:17.295" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:17.295" level="INFO">${pids} = 21069
21080
21087</msg>
<status status="PASS" starttime="20210730 17:41:17.283" endtime="20210730 17:41:17.295"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:17.296" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:17.296" endtime="20210730 17:41:17.296"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:17.297" level="INFO">${pids} = ['21069', '21080', '21087']</msg>
<status status="PASS" starttime="20210730 17:41:17.297" endtime="20210730 17:41:17.297"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21069</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:17.300" level="INFO">Running command 'kill 21069 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:17.297" endtime="20210730 17:41:17.300"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.297" endtime="20210730 17:41:17.300"/>
</iter>
<iter>
<var name="${pid}">21080</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:17.303" level="INFO">Running command 'kill 21080 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:17.301" endtime="20210730 17:41:17.305"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.300" endtime="20210730 17:41:17.305"/>
</iter>
<iter>
<var name="${pid}">21087</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:17.309" level="INFO">Running command 'kill 21087 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:17.306" endtime="20210730 17:41:17.309"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.306" endtime="20210730 17:41:17.309"/>
</iter>
<status status="PASS" starttime="20210730 17:41:17.297" endtime="20210730 17:41:17.309"/>
</for>
<status status="PASS" starttime="20210730 17:41:17.296" endtime="20210730 17:41:17.309"/>
</branch>
<status status="PASS" starttime="20210730 17:41:17.296" endtime="20210730 17:41:17.309"/>
</if>
<status status="PASS" starttime="20210730 17:41:17.282" endtime="20210730 17:41:17.310"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤% 23!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:15.699" endtime="20210730 17:41:17.310">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t36" name="With Each Valid Token, Updating Username Of Each System User With # %123!&amp; Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:17.314" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:17.324" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:17.324" level="INFO">${pids} = 21133</msg>
<status status="PASS" starttime="20210730 17:41:17.312" endtime="20210730 17:41:17.324"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:17.325" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:17.324" endtime="20210730 17:41:17.325"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:17.326" level="INFO">${pids} = ['21133']</msg>
<status status="PASS" starttime="20210730 17:41:17.325" endtime="20210730 17:41:17.326"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21133</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:17.329" level="INFO">Running command 'kill 21133 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:17.326" endtime="20210730 17:41:17.329"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.326" endtime="20210730 17:41:17.329"/>
</iter>
<status status="PASS" starttime="20210730 17:41:17.326" endtime="20210730 17:41:17.329"/>
</for>
<status status="PASS" starttime="20210730 17:41:17.325" endtime="20210730 17:41:17.329"/>
</branch>
<status status="PASS" starttime="20210730 17:41:17.325" endtime="20210730 17:41:17.329"/>
</if>
<status status="PASS" starttime="20210730 17:41:17.311" endtime="20210730 17:41:17.330"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:17.331" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:17.330" endtime="20210730 17:41:17.331"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:17.331" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:17.331" endtime="20210730 17:41:17.331"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:17.331" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:17.331" endtime="20210730 17:41:17.331"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:17.332" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:17.331" endtime="20210730 17:41:17.332"/>
</kw>
<msg timestamp="20210730 17:41:17.332" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:17.331" endtime="20210730 17:41:17.332"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:17.337" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:17.332" endtime="20210730 17:41:17.339"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.330" endtime="20210730 17:41:17.339"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:17.340" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:17.340" endtime="20210730 17:41:17.352"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:18.854" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:17.352" endtime="20210730 17:41:18.855"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.339" endtime="20210730 17:41:18.856"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:18.859" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:18.859" endtime="20210730 17:41:18.859"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:18.859" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:18.859" endtime="20210730 17:41:18.859"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:18.860" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:18.859" endtime="20210730 17:41:18.860"/>
</kw>
<msg timestamp="20210730 17:41:18.860" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:18.858" endtime="20210730 17:41:18.860"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:18.860" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:18.860" endtime="20210730 17:41:18.861"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.857" endtime="20210730 17:41:18.861"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:18.861" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:18.861" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:18.861" endtime="20210730 17:41:18.862"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.861" endtime="20210730 17:41:18.862"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:18.863" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:18.863" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:18.862" endtime="20210730 17:41:18.863"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:18.863" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:18.863" endtime="20210730 17:41:18.863"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:18.864" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:18.863" endtime="20210730 17:41:18.864"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:18.864" endtime="20210730 17:41:18.865"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:18.865" endtime="20210730 17:41:18.865"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.863" endtime="20210730 17:41:18.865"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:18.865" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:18.865" endtime="20210730 17:41:18.865"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:18.865" endtime="20210730 17:41:18.866"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:18.866" endtime="20210730 17:41:18.866"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.865" endtime="20210730 17:41:18.866"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:18.867" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:18.867" endtime="20210730 17:41:18.867"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:18.867" endtime="20210730 17:41:18.868"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:18.868" endtime="20210730 17:41:18.868"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.867" endtime="20210730 17:41:18.868"/>
</iter>
<status status="PASS" starttime="20210730 17:41:18.863" endtime="20210730 17:41:18.868"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:18.868" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:18.868" endtime="20210730 17:41:18.868"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.862" endtime="20210730 17:41:18.869"/>
</kw>
<status status="PASS" starttime="20210730 17:41:17.311" endtime="20210730 17:41:18.869"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:18.870" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:18.869" endtime="20210730 17:41:18.870"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:18.870" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210730 17:41:18.870" endtime="20210730 17:41:18.870"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:18.879" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:18.879" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:18.870" endtime="20210730 17:41:18.879"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:18.879" endtime="20210730 17:41:18.879"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:18.879" endtime="20210730 17:41:18.879"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:18.870" endtime="20210730 17:41:18.879"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:18.870" endtime="20210730 17:41:18.879"/>
</for>
<status status="FAIL" starttime="20210730 17:41:18.869" endtime="20210730 17:41:18.880"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:18.869" endtime="20210730 17:41:18.880"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:18.881" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:18.881" endtime="20210730 17:41:18.881"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:18.881" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210730 17:41:18.881" endtime="20210730 17:41:18.881"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:18.885" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:18.885" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:18.882" endtime="20210730 17:41:18.886"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:18.886" endtime="20210730 17:41:18.886"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:18.886" endtime="20210730 17:41:18.886"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:18.882" endtime="20210730 17:41:18.886"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:18.881" endtime="20210730 17:41:18.886"/>
</for>
<status status="FAIL" starttime="20210730 17:41:18.880" endtime="20210730 17:41:18.886"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:18.880" endtime="20210730 17:41:18.886"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# %123!&amp;</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:18.887" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:18.887" endtime="20210730 17:41:18.887"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:18.887" level="INFO">${payload} = {'username': '# %123!&amp;'}</msg>
<status status="PASS" starttime="20210730 17:41:18.887" endtime="20210730 17:41:18.887"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:18.891" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:18.891" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:18.888" endtime="20210730 17:41:18.891"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:18.891" endtime="20210730 17:41:18.891"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:18.892" endtime="20210730 17:41:18.892"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:18.888" endtime="20210730 17:41:18.892"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:18.887" endtime="20210730 17:41:18.892"/>
</for>
<status status="FAIL" starttime="20210730 17:41:18.886" endtime="20210730 17:41:18.892"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:18.886" endtime="20210730 17:41:18.892"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:18.869" endtime="20210730 17:41:18.892"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:18.897" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:18.906" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:18.906" level="INFO">${pids} = 21164
21207
21212</msg>
<status status="PASS" starttime="20210730 17:41:18.893" endtime="20210730 17:41:18.906"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:18.907" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:18.907" endtime="20210730 17:41:18.907"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:18.908" level="INFO">${pids} = ['21164', '21207', '21212']</msg>
<status status="PASS" starttime="20210730 17:41:18.907" endtime="20210730 17:41:18.908"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21164</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:18.911" level="INFO">Running command 'kill 21164 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:18.908" endtime="20210730 17:41:18.911"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.908" endtime="20210730 17:41:18.911"/>
</iter>
<iter>
<var name="${pid}">21207</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:18.915" level="INFO">Running command 'kill 21207 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:18.912" endtime="20210730 17:41:18.915"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.912" endtime="20210730 17:41:18.915"/>
</iter>
<iter>
<var name="${pid}">21212</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:18.918" level="INFO">Running command 'kill 21212 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:18.915" endtime="20210730 17:41:18.918"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.915" endtime="20210730 17:41:18.919"/>
</iter>
<status status="PASS" starttime="20210730 17:41:18.908" endtime="20210730 17:41:18.919"/>
</for>
<status status="PASS" starttime="20210730 17:41:18.907" endtime="20210730 17:41:18.919"/>
</branch>
<status status="PASS" starttime="20210730 17:41:18.907" endtime="20210730 17:41:18.919"/>
</if>
<status status="PASS" starttime="20210730 17:41:18.892" endtime="20210730 17:41:18.919"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '# %123!&amp;'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:17.310" endtime="20210730 17:41:18.919">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t37" name="With Each Valid Token, Updating Username Of Each System User With #¤%123!&amp;7683##() ?@#¤%&amp;34567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:18.923" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:18.933" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:18.933" level="INFO">${pids} = 21253</msg>
<status status="PASS" starttime="20210730 17:41:18.921" endtime="20210730 17:41:18.933"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:18.934" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:18.933" endtime="20210730 17:41:18.934"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:18.935" level="INFO">${pids} = ['21253']</msg>
<status status="PASS" starttime="20210730 17:41:18.934" endtime="20210730 17:41:18.935"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21253</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:18.938" level="INFO">Running command 'kill 21253 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:18.935" endtime="20210730 17:41:18.938"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.935" endtime="20210730 17:41:18.938"/>
</iter>
<status status="PASS" starttime="20210730 17:41:18.935" endtime="20210730 17:41:18.938"/>
</for>
<status status="PASS" starttime="20210730 17:41:18.934" endtime="20210730 17:41:18.939"/>
</branch>
<status status="PASS" starttime="20210730 17:41:18.934" endtime="20210730 17:41:18.939"/>
</if>
<status status="PASS" starttime="20210730 17:41:18.920" endtime="20210730 17:41:18.939"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:18.940" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:18.940" endtime="20210730 17:41:18.940"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:18.942" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:18.940" endtime="20210730 17:41:18.942"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:18.942" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:18.942" endtime="20210730 17:41:18.942"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:18.943" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:18.943" endtime="20210730 17:41:18.943"/>
</kw>
<msg timestamp="20210730 17:41:18.943" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:18.940" endtime="20210730 17:41:18.943"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:18.948" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:18.943" endtime="20210730 17:41:18.949"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.939" endtime="20210730 17:41:18.957"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:18.958" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:18.958" endtime="20210730 17:41:18.964"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:20.465" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:18.964" endtime="20210730 17:41:20.465"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.957" endtime="20210730 17:41:20.466"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:20.467" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:20.467" endtime="20210730 17:41:20.467"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:20.467" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:20.467" endtime="20210730 17:41:20.467"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:20.468" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:20.468" endtime="20210730 17:41:20.468"/>
</kw>
<msg timestamp="20210730 17:41:20.468" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:20.466" endtime="20210730 17:41:20.468"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:20.469" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:20.468" endtime="20210730 17:41:20.469"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.466" endtime="20210730 17:41:20.469"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:20.470" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:20.470" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:20.469" endtime="20210730 17:41:20.470"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.469" endtime="20210730 17:41:20.470"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:20.471" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:20.471" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:20.470" endtime="20210730 17:41:20.471"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:20.471" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:20.471" endtime="20210730 17:41:20.471"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:20.472" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:20.471" endtime="20210730 17:41:20.472"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:20.472" endtime="20210730 17:41:20.473"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:20.473" endtime="20210730 17:41:20.473"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.471" endtime="20210730 17:41:20.473"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:20.473" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:20.473" endtime="20210730 17:41:20.473"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:20.474" endtime="20210730 17:41:20.474"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:20.474" endtime="20210730 17:41:20.475"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.473" endtime="20210730 17:41:20.475"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:20.475" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:20.475" endtime="20210730 17:41:20.475"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:20.475" endtime="20210730 17:41:20.476"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:20.476" endtime="20210730 17:41:20.476"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.475" endtime="20210730 17:41:20.476"/>
</iter>
<status status="PASS" starttime="20210730 17:41:20.471" endtime="20210730 17:41:20.476"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:20.476" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:20.476" endtime="20210730 17:41:20.476"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.470" endtime="20210730 17:41:20.477"/>
</kw>
<status status="PASS" starttime="20210730 17:41:18.920" endtime="20210730 17:41:20.477"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:20.478" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:20.477" endtime="20210730 17:41:20.478"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:20.478" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 17:41:20.478" endtime="20210730 17:41:20.478"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:20.487" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:20.487" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:20.478" endtime="20210730 17:41:20.487"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:20.488" endtime="20210730 17:41:20.488"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:20.488" endtime="20210730 17:41:20.488"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:20.478" endtime="20210730 17:41:20.488"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:20.478" endtime="20210730 17:41:20.488"/>
</for>
<status status="FAIL" starttime="20210730 17:41:20.477" endtime="20210730 17:41:20.488"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:20.477" endtime="20210730 17:41:20.488"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:20.490" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:20.489" endtime="20210730 17:41:20.490"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:20.490" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 17:41:20.490" endtime="20210730 17:41:20.490"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:20.494" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:20.494" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:20.490" endtime="20210730 17:41:20.494"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:20.494" endtime="20210730 17:41:20.494"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:20.494" endtime="20210730 17:41:20.494"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:20.490" endtime="20210730 17:41:20.494"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:20.490" endtime="20210730 17:41:20.495"/>
</for>
<status status="FAIL" starttime="20210730 17:41:20.488" endtime="20210730 17:41:20.495"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:20.488" endtime="20210730 17:41:20.495"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤%123!&amp;7683##() ?@#¤%&amp;34567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:20.496" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:20.495" endtime="20210730 17:41:20.496"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:20.496" level="INFO">${payload} = {'username': '#¤%123!&amp;7683##() ?@#¤%&amp;34567'}</msg>
<status status="PASS" starttime="20210730 17:41:20.496" endtime="20210730 17:41:20.496"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:20.499" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:20.500" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:20.496" endtime="20210730 17:41:20.500"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:20.500" endtime="20210730 17:41:20.500"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:20.500" endtime="20210730 17:41:20.500"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:20.496" endtime="20210730 17:41:20.500"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:20.496" endtime="20210730 17:41:20.500"/>
</for>
<status status="FAIL" starttime="20210730 17:41:20.495" endtime="20210730 17:41:20.500"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:20.495" endtime="20210730 17:41:20.500"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:20.477" endtime="20210730 17:41:20.500"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:20.504" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:20.516" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:20.516" level="INFO">${pids} = 21277
21284
21289</msg>
<status status="PASS" starttime="20210730 17:41:20.501" endtime="20210730 17:41:20.516"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:20.517" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:20.517" endtime="20210730 17:41:20.517"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:20.518" level="INFO">${pids} = ['21277', '21284', '21289']</msg>
<status status="PASS" starttime="20210730 17:41:20.517" endtime="20210730 17:41:20.518"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21277</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:20.522" level="INFO">Running command 'kill 21277 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:20.518" endtime="20210730 17:41:20.523"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.518" endtime="20210730 17:41:20.524"/>
</iter>
<iter>
<var name="${pid}">21284</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:20.528" level="INFO">Running command 'kill 21284 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:20.524" endtime="20210730 17:41:20.528"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.524" endtime="20210730 17:41:20.528"/>
</iter>
<iter>
<var name="${pid}">21289</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:20.533" level="INFO">Running command 'kill 21289 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:20.529" endtime="20210730 17:41:20.533"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.528" endtime="20210730 17:41:20.533"/>
</iter>
<status status="PASS" starttime="20210730 17:41:20.518" endtime="20210730 17:41:20.533"/>
</for>
<status status="PASS" starttime="20210730 17:41:20.517" endtime="20210730 17:41:20.533"/>
</branch>
<status status="PASS" starttime="20210730 17:41:20.517" endtime="20210730 17:41:20.533"/>
</if>
<status status="PASS" starttime="20210730 17:41:20.500" endtime="20210730 17:41:20.534"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤%123!&amp;7683##() ?@#¤%&amp;34567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:18.919" endtime="20210730 17:41:20.534">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t38" name="With Each Valid Token, Updating Username Of Each System User With #¤12 ab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:20.541" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:20.553" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:20.553" level="INFO">${pids} = 21318</msg>
<status status="PASS" starttime="20210730 17:41:20.537" endtime="20210730 17:41:20.553"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:20.554" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:20.553" endtime="20210730 17:41:20.554"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:20.555" level="INFO">${pids} = ['21318']</msg>
<status status="PASS" starttime="20210730 17:41:20.554" endtime="20210730 17:41:20.555"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21318</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:20.558" level="INFO">Running command 'kill 21318 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:20.555" endtime="20210730 17:41:20.559"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.555" endtime="20210730 17:41:20.559"/>
</iter>
<status status="PASS" starttime="20210730 17:41:20.555" endtime="20210730 17:41:20.559"/>
</for>
<status status="PASS" starttime="20210730 17:41:20.554" endtime="20210730 17:41:20.559"/>
</branch>
<status status="PASS" starttime="20210730 17:41:20.554" endtime="20210730 17:41:20.559"/>
</if>
<status status="PASS" starttime="20210730 17:41:20.537" endtime="20210730 17:41:20.559"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:20.560" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:20.560" endtime="20210730 17:41:20.560"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:20.561" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:20.561" endtime="20210730 17:41:20.561"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:20.561" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:20.561" endtime="20210730 17:41:20.561"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:20.562" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:20.561" endtime="20210730 17:41:20.562"/>
</kw>
<msg timestamp="20210730 17:41:20.562" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:20.560" endtime="20210730 17:41:20.562"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:20.565" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:20.562" endtime="20210730 17:41:20.568"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.560" endtime="20210730 17:41:20.569"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:20.570" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:20.569" endtime="20210730 17:41:20.575"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:22.076" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:20.575" endtime="20210730 17:41:22.077"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.569" endtime="20210730 17:41:22.078"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:22.084" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:22.083" endtime="20210730 17:41:22.084"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:22.086" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:22.085" endtime="20210730 17:41:22.086"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:22.088" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:22.086" endtime="20210730 17:41:22.088"/>
</kw>
<msg timestamp="20210730 17:41:22.088" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:22.081" endtime="20210730 17:41:22.088"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:22.090" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:22.089" endtime="20210730 17:41:22.091"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.079" endtime="20210730 17:41:22.091"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:22.092" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:22.093" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:22.092" endtime="20210730 17:41:22.093"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.091" endtime="20210730 17:41:22.093"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:22.095" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:22.095" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:22.094" endtime="20210730 17:41:22.095"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:22.096" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:22.096" endtime="20210730 17:41:22.096"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:22.097" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:22.097" endtime="20210730 17:41:22.097"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:22.097" endtime="20210730 17:41:22.099"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:22.099" endtime="20210730 17:41:22.099"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.096" endtime="20210730 17:41:22.099"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:22.100" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:22.100" endtime="20210730 17:41:22.100"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:22.100" endtime="20210730 17:41:22.101"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:22.101" endtime="20210730 17:41:22.102"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.099" endtime="20210730 17:41:22.102"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:22.102" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:22.102" endtime="20210730 17:41:22.102"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:22.103" endtime="20210730 17:41:22.104"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:22.104" endtime="20210730 17:41:22.104"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.102" endtime="20210730 17:41:22.104"/>
</iter>
<status status="PASS" starttime="20210730 17:41:22.096" endtime="20210730 17:41:22.104"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:22.105" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:22.104" endtime="20210730 17:41:22.105"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.093" endtime="20210730 17:41:22.105"/>
</kw>
<status status="PASS" starttime="20210730 17:41:20.536" endtime="20210730 17:41:22.105"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:22.107" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:22.106" endtime="20210730 17:41:22.107"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:22.107" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210730 17:41:22.107" endtime="20210730 17:41:22.107"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:22.116" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:22.117" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:22.107" endtime="20210730 17:41:22.117"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:22.117" endtime="20210730 17:41:22.117"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:22.117" endtime="20210730 17:41:22.117"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:22.107" endtime="20210730 17:41:22.117"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:22.107" endtime="20210730 17:41:22.117"/>
</for>
<status status="FAIL" starttime="20210730 17:41:22.106" endtime="20210730 17:41:22.117"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:22.105" endtime="20210730 17:41:22.117"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:22.118" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:22.118" endtime="20210730 17:41:22.118"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:22.119" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210730 17:41:22.118" endtime="20210730 17:41:22.119"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:22.123" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:22.123" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:22.119" endtime="20210730 17:41:22.123"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:22.123" endtime="20210730 17:41:22.123"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:22.123" endtime="20210730 17:41:22.123"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:22.119" endtime="20210730 17:41:22.123"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:22.119" endtime="20210730 17:41:22.123"/>
</for>
<status status="FAIL" starttime="20210730 17:41:22.118" endtime="20210730 17:41:22.124"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:22.117" endtime="20210730 17:41:22.124"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤12 ab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:22.125" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:22.124" endtime="20210730 17:41:22.125"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:22.125" level="INFO">${payload} = {'username': '#¤12 ab'}</msg>
<status status="PASS" starttime="20210730 17:41:22.125" endtime="20210730 17:41:22.125"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:22.129" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:22.129" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:22.125" endtime="20210730 17:41:22.129"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:22.129" endtime="20210730 17:41:22.129"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:22.129" endtime="20210730 17:41:22.129"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:22.125" endtime="20210730 17:41:22.129"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:22.125" endtime="20210730 17:41:22.129"/>
</for>
<status status="FAIL" starttime="20210730 17:41:22.124" endtime="20210730 17:41:22.129"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:22.124" endtime="20210730 17:41:22.129"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:22.105" endtime="20210730 17:41:22.130"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:22.134" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:22.144" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:22.144" level="INFO">${pids} = 21341
21348
21353</msg>
<status status="PASS" starttime="20210730 17:41:22.130" endtime="20210730 17:41:22.144"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:22.145" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:22.144" endtime="20210730 17:41:22.145"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:22.146" level="INFO">${pids} = ['21341', '21348', '21353']</msg>
<status status="PASS" starttime="20210730 17:41:22.145" endtime="20210730 17:41:22.146"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21341</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:22.149" level="INFO">Running command 'kill 21341 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:22.146" endtime="20210730 17:41:22.149"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.146" endtime="20210730 17:41:22.149"/>
</iter>
<iter>
<var name="${pid}">21348</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:22.153" level="INFO">Running command 'kill 21348 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:22.150" endtime="20210730 17:41:22.154"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.149" endtime="20210730 17:41:22.154"/>
</iter>
<iter>
<var name="${pid}">21353</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:22.157" level="INFO">Running command 'kill 21353 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:22.154" endtime="20210730 17:41:22.158"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.154" endtime="20210730 17:41:22.158"/>
</iter>
<status status="PASS" starttime="20210730 17:41:22.146" endtime="20210730 17:41:22.158"/>
</for>
<status status="PASS" starttime="20210730 17:41:22.145" endtime="20210730 17:41:22.158"/>
</branch>
<status status="PASS" starttime="20210730 17:41:22.145" endtime="20210730 17:41:22.158"/>
</if>
<status status="PASS" starttime="20210730 17:41:22.130" endtime="20210730 17:41:22.158"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤12 ab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:20.535" endtime="20210730 17:41:22.158">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t39" name="With Each Valid Token, Updating Username Of Each System User With # 123abc Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:22.162" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:22.173" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:22.174" level="INFO">${pids} = 21382</msg>
<status status="PASS" starttime="20210730 17:41:22.160" endtime="20210730 17:41:22.174"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:22.174" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:22.174" endtime="20210730 17:41:22.174"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:22.175" level="INFO">${pids} = ['21382']</msg>
<status status="PASS" starttime="20210730 17:41:22.175" endtime="20210730 17:41:22.175"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21382</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:22.178" level="INFO">Running command 'kill 21382 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:22.175" endtime="20210730 17:41:22.179"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.175" endtime="20210730 17:41:22.179"/>
</iter>
<status status="PASS" starttime="20210730 17:41:22.175" endtime="20210730 17:41:22.179"/>
</for>
<status status="PASS" starttime="20210730 17:41:22.175" endtime="20210730 17:41:22.179"/>
</branch>
<status status="PASS" starttime="20210730 17:41:22.175" endtime="20210730 17:41:22.179"/>
</if>
<status status="PASS" starttime="20210730 17:41:22.160" endtime="20210730 17:41:22.179"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:22.180" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:22.179" endtime="20210730 17:41:22.180"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:22.180" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:22.180" endtime="20210730 17:41:22.180"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:22.181" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:22.180" endtime="20210730 17:41:22.181"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:22.181" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:22.181" endtime="20210730 17:41:22.181"/>
</kw>
<msg timestamp="20210730 17:41:22.183" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:22.180" endtime="20210730 17:41:22.183"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:22.196" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:22.183" endtime="20210730 17:41:22.198"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.179" endtime="20210730 17:41:22.198"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:22.200" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:22.199" endtime="20210730 17:41:22.204"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:23.706" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:22.204" endtime="20210730 17:41:23.707"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.198" endtime="20210730 17:41:23.708"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:23.711" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:23.710" endtime="20210730 17:41:23.711"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:23.712" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:23.712" endtime="20210730 17:41:23.712"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:23.714" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:23.713" endtime="20210730 17:41:23.714"/>
</kw>
<msg timestamp="20210730 17:41:23.714" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:23.709" endtime="20210730 17:41:23.714"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:23.715" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:23.714" endtime="20210730 17:41:23.716"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.708" endtime="20210730 17:41:23.716"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:23.717" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:23.717" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:23.717" endtime="20210730 17:41:23.718"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.716" endtime="20210730 17:41:23.718"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:23.720" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:23.720" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:23.719" endtime="20210730 17:41:23.720"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:23.720" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:23.720" endtime="20210730 17:41:23.720"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:23.721" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:23.721" endtime="20210730 17:41:23.721"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:23.722" endtime="20210730 17:41:23.723"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:23.723" endtime="20210730 17:41:23.723"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.721" endtime="20210730 17:41:23.723"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:23.724" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:23.724" endtime="20210730 17:41:23.724"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:23.724" endtime="20210730 17:41:23.725"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:23.725" endtime="20210730 17:41:23.726"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.724" endtime="20210730 17:41:23.726"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:23.726" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:23.726" endtime="20210730 17:41:23.726"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:23.727" endtime="20210730 17:41:23.727"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:23.728" endtime="20210730 17:41:23.728"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.726" endtime="20210730 17:41:23.728"/>
</iter>
<status status="PASS" starttime="20210730 17:41:23.721" endtime="20210730 17:41:23.728"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:23.729" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:23.728" endtime="20210730 17:41:23.729"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.718" endtime="20210730 17:41:23.729"/>
</kw>
<status status="PASS" starttime="20210730 17:41:22.159" endtime="20210730 17:41:23.729"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:23.730" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:23.730" endtime="20210730 17:41:23.730"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:23.731" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210730 17:41:23.730" endtime="20210730 17:41:23.731"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:23.741" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:23.741" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:23.731" endtime="20210730 17:41:23.741"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:23.742" endtime="20210730 17:41:23.742"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:23.742" endtime="20210730 17:41:23.742"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:23.731" endtime="20210730 17:41:23.742"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:23.731" endtime="20210730 17:41:23.742"/>
</for>
<status status="FAIL" starttime="20210730 17:41:23.729" endtime="20210730 17:41:23.742"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:23.729" endtime="20210730 17:41:23.742"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:23.743" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:23.743" endtime="20210730 17:41:23.743"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:23.743" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210730 17:41:23.743" endtime="20210730 17:41:23.744"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:23.747" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:23.748" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:23.744" endtime="20210730 17:41:23.748"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:23.748" endtime="20210730 17:41:23.748"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:23.748" endtime="20210730 17:41:23.748"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:23.744" endtime="20210730 17:41:23.748"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:23.744" endtime="20210730 17:41:23.748"/>
</for>
<status status="FAIL" starttime="20210730 17:41:23.742" endtime="20210730 17:41:23.748"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:23.742" endtime="20210730 17:41:23.748"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=# 123abc</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:23.749" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:23.749" endtime="20210730 17:41:23.749"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:23.749" level="INFO">${payload} = {'username': '# 123abc'}</msg>
<status status="PASS" starttime="20210730 17:41:23.749" endtime="20210730 17:41:23.749"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:23.753" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:23.753" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:23.750" endtime="20210730 17:41:23.753"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:23.753" endtime="20210730 17:41:23.753"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:23.753" endtime="20210730 17:41:23.753"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:23.750" endtime="20210730 17:41:23.753"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:23.749" endtime="20210730 17:41:23.753"/>
</for>
<status status="FAIL" starttime="20210730 17:41:23.748" endtime="20210730 17:41:23.754"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:23.748" endtime="20210730 17:41:23.754"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:23.729" endtime="20210730 17:41:23.754"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:23.759" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:23.771" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:23.771" level="INFO">${pids} = 21405
21412
21419</msg>
<status status="PASS" starttime="20210730 17:41:23.755" endtime="20210730 17:41:23.771"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:23.772" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:23.771" endtime="20210730 17:41:23.772"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:23.773" level="INFO">${pids} = ['21405', '21412', '21419']</msg>
<status status="PASS" starttime="20210730 17:41:23.772" endtime="20210730 17:41:23.773"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21405</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:23.776" level="INFO">Running command 'kill 21405 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:23.773" endtime="20210730 17:41:23.777"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.773" endtime="20210730 17:41:23.777"/>
</iter>
<iter>
<var name="${pid}">21412</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:23.780" level="INFO">Running command 'kill 21412 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:23.777" endtime="20210730 17:41:23.780"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.777" endtime="20210730 17:41:23.780"/>
</iter>
<iter>
<var name="${pid}">21419</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:23.784" level="INFO">Running command 'kill 21419 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:23.781" endtime="20210730 17:41:23.784"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.781" endtime="20210730 17:41:23.784"/>
</iter>
<status status="PASS" starttime="20210730 17:41:23.773" endtime="20210730 17:41:23.784"/>
</for>
<status status="PASS" starttime="20210730 17:41:23.772" endtime="20210730 17:41:23.784"/>
</branch>
<status status="PASS" starttime="20210730 17:41:23.772" endtime="20210730 17:41:23.784"/>
</if>
<status status="PASS" starttime="20210730 17:41:23.754" endtime="20210730 17:41:23.784"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '# 123abc'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:22.159" endtime="20210730 17:41:23.785">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t40" name="With Each Valid Token, Updating Username Of Each System User With #¤/&amp;  !123abc456hjk Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:23.791" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:23.800" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:23.800" level="INFO">${pids} = 21448</msg>
<status status="PASS" starttime="20210730 17:41:23.786" endtime="20210730 17:41:23.800"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:23.801" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:23.800" endtime="20210730 17:41:23.801"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:23.802" level="INFO">${pids} = ['21448']</msg>
<status status="PASS" starttime="20210730 17:41:23.801" endtime="20210730 17:41:23.802"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21448</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:23.808" level="INFO">Running command 'kill 21448 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:23.802" endtime="20210730 17:41:23.809"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.802" endtime="20210730 17:41:23.809"/>
</iter>
<status status="PASS" starttime="20210730 17:41:23.802" endtime="20210730 17:41:23.809"/>
</for>
<status status="PASS" starttime="20210730 17:41:23.801" endtime="20210730 17:41:23.809"/>
</branch>
<status status="PASS" starttime="20210730 17:41:23.801" endtime="20210730 17:41:23.809"/>
</if>
<status status="PASS" starttime="20210730 17:41:23.786" endtime="20210730 17:41:23.810"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:23.811" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:23.810" endtime="20210730 17:41:23.811"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:23.811" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:23.811" endtime="20210730 17:41:23.811"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:23.812" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:23.811" endtime="20210730 17:41:23.812"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:23.812" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:23.812" endtime="20210730 17:41:23.812"/>
</kw>
<msg timestamp="20210730 17:41:23.812" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:23.811" endtime="20210730 17:41:23.812"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:23.821" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:23.812" endtime="20210730 17:41:23.823"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.810" endtime="20210730 17:41:23.823"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:23.825" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:23.824" endtime="20210730 17:41:23.828"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:25.332" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:23.829" endtime="20210730 17:41:25.333"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.824" endtime="20210730 17:41:25.334"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:25.340" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:25.338" endtime="20210730 17:41:25.340"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:25.341" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:25.340" endtime="20210730 17:41:25.341"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:25.343" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:25.342" endtime="20210730 17:41:25.343"/>
</kw>
<msg timestamp="20210730 17:41:25.344" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:25.337" endtime="20210730 17:41:25.344"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:25.345" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:25.344" endtime="20210730 17:41:25.346"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.335" endtime="20210730 17:41:25.346"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:25.347" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:25.347" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:25.347" endtime="20210730 17:41:25.348"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.346" endtime="20210730 17:41:25.348"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:25.350" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:25.351" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:25.349" endtime="20210730 17:41:25.351"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:25.351" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:25.351" endtime="20210730 17:41:25.351"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:25.352" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:25.352" endtime="20210730 17:41:25.352"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:25.353" endtime="20210730 17:41:25.354"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:25.354" endtime="20210730 17:41:25.354"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.352" endtime="20210730 17:41:25.354"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:25.355" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:25.355" endtime="20210730 17:41:25.355"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:25.355" endtime="20210730 17:41:25.356"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:25.356" endtime="20210730 17:41:25.357"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.355" endtime="20210730 17:41:25.357"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:25.358" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:25.357" endtime="20210730 17:41:25.358"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:25.358" endtime="20210730 17:41:25.359"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:25.359" endtime="20210730 17:41:25.359"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.357" endtime="20210730 17:41:25.359"/>
</iter>
<status status="PASS" starttime="20210730 17:41:25.351" endtime="20210730 17:41:25.359"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:25.360" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:25.359" endtime="20210730 17:41:25.360"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.348" endtime="20210730 17:41:25.360"/>
</kw>
<status status="PASS" starttime="20210730 17:41:23.786" endtime="20210730 17:41:25.360"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:25.362" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:25.361" endtime="20210730 17:41:25.362"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:25.362" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 17:41:25.362" endtime="20210730 17:41:25.362"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:25.372" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:25.372" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:25.362" endtime="20210730 17:41:25.372"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:25.373" endtime="20210730 17:41:25.373"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:25.373" endtime="20210730 17:41:25.373"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:25.362" endtime="20210730 17:41:25.373"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:25.362" endtime="20210730 17:41:25.373"/>
</for>
<status status="FAIL" starttime="20210730 17:41:25.361" endtime="20210730 17:41:25.373"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:25.360" endtime="20210730 17:41:25.373"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:25.374" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:25.374" endtime="20210730 17:41:25.374"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:25.375" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 17:41:25.374" endtime="20210730 17:41:25.375"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:25.379" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:25.379" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:25.375" endtime="20210730 17:41:25.379"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:25.379" endtime="20210730 17:41:25.379"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:25.379" endtime="20210730 17:41:25.379"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:25.375" endtime="20210730 17:41:25.379"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:25.375" endtime="20210730 17:41:25.379"/>
</for>
<status status="FAIL" starttime="20210730 17:41:25.373" endtime="20210730 17:41:25.380"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:25.373" endtime="20210730 17:41:25.380"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/&amp;\ \ !123abc456hjk</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:25.381" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:25.381" endtime="20210730 17:41:25.381"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:25.382" level="INFO">${payload} = {'username': '#¤/&amp;  !123abc456hjk'}</msg>
<status status="PASS" starttime="20210730 17:41:25.381" endtime="20210730 17:41:25.382"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:25.386" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:25.386" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:25.382" endtime="20210730 17:41:25.386"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:25.386" endtime="20210730 17:41:25.386"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:25.386" endtime="20210730 17:41:25.386"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:25.382" endtime="20210730 17:41:25.386"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:25.382" endtime="20210730 17:41:25.386"/>
</for>
<status status="FAIL" starttime="20210730 17:41:25.380" endtime="20210730 17:41:25.386"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:25.380" endtime="20210730 17:41:25.387"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:25.360" endtime="20210730 17:41:25.387"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:25.392" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:25.401" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:25.401" level="INFO">${pids} = 21471
21478
21482</msg>
<status status="PASS" starttime="20210730 17:41:25.388" endtime="20210730 17:41:25.401"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:25.402" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:25.401" endtime="20210730 17:41:25.402"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:25.402" level="INFO">${pids} = ['21471', '21478', '21482']</msg>
<status status="PASS" starttime="20210730 17:41:25.402" endtime="20210730 17:41:25.402"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21471</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:25.406" level="INFO">Running command 'kill 21471 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:25.403" endtime="20210730 17:41:25.406"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.403" endtime="20210730 17:41:25.406"/>
</iter>
<iter>
<var name="${pid}">21478</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:25.409" level="INFO">Running command 'kill 21478 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:25.407" endtime="20210730 17:41:25.410"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.406" endtime="20210730 17:41:25.410"/>
</iter>
<iter>
<var name="${pid}">21482</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:25.414" level="INFO">Running command 'kill 21482 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:25.410" endtime="20210730 17:41:25.414"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.410" endtime="20210730 17:41:25.414"/>
</iter>
<status status="PASS" starttime="20210730 17:41:25.403" endtime="20210730 17:41:25.414"/>
</for>
<status status="PASS" starttime="20210730 17:41:25.402" endtime="20210730 17:41:25.414"/>
</branch>
<status status="PASS" starttime="20210730 17:41:25.402" endtime="20210730 17:41:25.414"/>
</if>
<status status="PASS" starttime="20210730 17:41:25.387" endtime="20210730 17:41:25.415"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/&amp; !123abc456hjk'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:23.785" endtime="20210730 17:41:25.415">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t41" name="With Each Valid Token, Updating Username Of Each System User With #¤ abc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:25.423" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:25.432" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:25.432" level="INFO">${pids} = 21511</msg>
<status status="PASS" starttime="20210730 17:41:25.417" endtime="20210730 17:41:25.432"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:25.433" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:25.433" endtime="20210730 17:41:25.433"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:25.434" level="INFO">${pids} = ['21511']</msg>
<status status="PASS" starttime="20210730 17:41:25.434" endtime="20210730 17:41:25.434"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21511</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:25.449" level="INFO">Running command 'kill 21511 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:25.435" endtime="20210730 17:41:25.450"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.434" endtime="20210730 17:41:25.450"/>
</iter>
<status status="PASS" starttime="20210730 17:41:25.434" endtime="20210730 17:41:25.450"/>
</for>
<status status="PASS" starttime="20210730 17:41:25.433" endtime="20210730 17:41:25.450"/>
</branch>
<status status="PASS" starttime="20210730 17:41:25.433" endtime="20210730 17:41:25.450"/>
</if>
<status status="PASS" starttime="20210730 17:41:25.416" endtime="20210730 17:41:25.451"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:25.452" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:25.452" endtime="20210730 17:41:25.452"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:25.453" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:25.453" endtime="20210730 17:41:25.453"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:25.454" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:25.453" endtime="20210730 17:41:25.454"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:25.454" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:25.454" endtime="20210730 17:41:25.454"/>
</kw>
<msg timestamp="20210730 17:41:25.454" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:25.452" endtime="20210730 17:41:25.454"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:25.459" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:25.454" endtime="20210730 17:41:25.461"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.451" endtime="20210730 17:41:25.461"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:25.462" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:25.462" endtime="20210730 17:41:25.466"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:26.967" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:25.466" endtime="20210730 17:41:26.967"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.461" endtime="20210730 17:41:26.968"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:26.970" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:26.970" endtime="20210730 17:41:26.970"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:26.970" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:26.970" endtime="20210730 17:41:26.970"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:26.971" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:26.971" endtime="20210730 17:41:26.971"/>
</kw>
<msg timestamp="20210730 17:41:26.971" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:26.969" endtime="20210730 17:41:26.971"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:26.971" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:26.971" endtime="20210730 17:41:26.972"/>
</kw>
<status status="PASS" starttime="20210730 17:41:26.968" endtime="20210730 17:41:26.972"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:26.972" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:26.972" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:26.972" endtime="20210730 17:41:26.973"/>
</kw>
<status status="PASS" starttime="20210730 17:41:26.972" endtime="20210730 17:41:26.973"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:26.974" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:26.974" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:26.973" endtime="20210730 17:41:26.974"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:26.974" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:26.974" endtime="20210730 17:41:26.974"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:26.975" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:26.974" endtime="20210730 17:41:26.975"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:26.975" endtime="20210730 17:41:26.975"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:26.975" endtime="20210730 17:41:26.976"/>
</kw>
<status status="PASS" starttime="20210730 17:41:26.974" endtime="20210730 17:41:26.976"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:26.976" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:26.976" endtime="20210730 17:41:26.976"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:26.976" endtime="20210730 17:41:26.977"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:26.977" endtime="20210730 17:41:26.977"/>
</kw>
<status status="PASS" starttime="20210730 17:41:26.976" endtime="20210730 17:41:26.977"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:26.977" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:26.977" endtime="20210730 17:41:26.977"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:26.978" endtime="20210730 17:41:26.978"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:26.978" endtime="20210730 17:41:26.978"/>
</kw>
<status status="PASS" starttime="20210730 17:41:26.977" endtime="20210730 17:41:26.979"/>
</iter>
<status status="PASS" starttime="20210730 17:41:26.974" endtime="20210730 17:41:26.979"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:26.979" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:26.979" endtime="20210730 17:41:26.979"/>
</kw>
<status status="PASS" starttime="20210730 17:41:26.973" endtime="20210730 17:41:26.979"/>
</kw>
<status status="PASS" starttime="20210730 17:41:25.416" endtime="20210730 17:41:26.979"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:26.980" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:26.980" endtime="20210730 17:41:26.980"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:26.981" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210730 17:41:26.980" endtime="20210730 17:41:26.981"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:26.989" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:26.990" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:26.981" endtime="20210730 17:41:26.990"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:26.990" endtime="20210730 17:41:26.990"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:26.990" endtime="20210730 17:41:26.990"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:26.981" endtime="20210730 17:41:26.990"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:26.981" endtime="20210730 17:41:26.990"/>
</for>
<status status="FAIL" starttime="20210730 17:41:26.980" endtime="20210730 17:41:26.990"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:26.979" endtime="20210730 17:41:26.990"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:26.992" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:26.991" endtime="20210730 17:41:26.992"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:26.992" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210730 17:41:26.992" endtime="20210730 17:41:26.992"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:26.998" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:26.998" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:26.992" endtime="20210730 17:41:26.998"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:26.999" endtime="20210730 17:41:26.999"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:26.999" endtime="20210730 17:41:26.999"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:26.992" endtime="20210730 17:41:26.999"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:26.992" endtime="20210730 17:41:26.999"/>
</for>
<status status="FAIL" starttime="20210730 17:41:26.991" endtime="20210730 17:41:26.999"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:26.991" endtime="20210730 17:41:26.999"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:27.000" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:27.000" endtime="20210730 17:41:27.000"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:27.001" level="INFO">${payload} = {'username': '#¤ abc!'}</msg>
<status status="PASS" starttime="20210730 17:41:27.000" endtime="20210730 17:41:27.001"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:27.004" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:27.005" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:27.001" endtime="20210730 17:41:27.005"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:27.005" endtime="20210730 17:41:27.005"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:27.005" endtime="20210730 17:41:27.005"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:27.001" endtime="20210730 17:41:27.005"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:27.001" endtime="20210730 17:41:27.005"/>
</for>
<status status="FAIL" starttime="20210730 17:41:26.999" endtime="20210730 17:41:27.005"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:26.999" endtime="20210730 17:41:27.005"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:26.979" endtime="20210730 17:41:27.005"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:27.011" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:27.020" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:27.020" level="INFO">${pids} = 21534
21541
21546</msg>
<status status="PASS" starttime="20210730 17:41:27.007" endtime="20210730 17:41:27.020"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:27.021" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:27.021" endtime="20210730 17:41:27.021"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:27.022" level="INFO">${pids} = ['21534', '21541', '21546']</msg>
<status status="PASS" starttime="20210730 17:41:27.022" endtime="20210730 17:41:27.022"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21534</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:27.026" level="INFO">Running command 'kill 21534 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:27.022" endtime="20210730 17:41:27.026"/>
</kw>
<status status="PASS" starttime="20210730 17:41:27.022" endtime="20210730 17:41:27.026"/>
</iter>
<iter>
<var name="${pid}">21541</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:27.029" level="INFO">Running command 'kill 21541 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:27.027" endtime="20210730 17:41:27.030"/>
</kw>
<status status="PASS" starttime="20210730 17:41:27.026" endtime="20210730 17:41:27.030"/>
</iter>
<iter>
<var name="${pid}">21546</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:27.032" level="INFO">Running command 'kill 21546 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:27.030" endtime="20210730 17:41:27.033"/>
</kw>
<status status="PASS" starttime="20210730 17:41:27.030" endtime="20210730 17:41:27.033"/>
</iter>
<status status="PASS" starttime="20210730 17:41:27.022" endtime="20210730 17:41:27.033"/>
</for>
<status status="PASS" starttime="20210730 17:41:27.021" endtime="20210730 17:41:27.033"/>
</branch>
<status status="PASS" starttime="20210730 17:41:27.021" endtime="20210730 17:41:27.033"/>
</if>
<status status="PASS" starttime="20210730 17:41:27.006" endtime="20210730 17:41:27.033"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤ abc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:25.415" endtime="20210730 17:41:27.034">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t42" name="With Each Valid Token, Updating Username Of Each System User With #¤ abc!g Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:27.044" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:27.053" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:27.053" level="INFO">${pids} = 21575</msg>
<status status="PASS" starttime="20210730 17:41:27.035" endtime="20210730 17:41:27.053"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:27.054" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:27.053" endtime="20210730 17:41:27.054"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:27.054" level="INFO">${pids} = ['21575']</msg>
<status status="PASS" starttime="20210730 17:41:27.054" endtime="20210730 17:41:27.054"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21575</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:27.069" level="INFO">Running command 'kill 21575 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:27.055" endtime="20210730 17:41:27.070"/>
</kw>
<status status="PASS" starttime="20210730 17:41:27.055" endtime="20210730 17:41:27.070"/>
</iter>
<status status="PASS" starttime="20210730 17:41:27.054" endtime="20210730 17:41:27.070"/>
</for>
<status status="PASS" starttime="20210730 17:41:27.054" endtime="20210730 17:41:27.071"/>
</branch>
<status status="PASS" starttime="20210730 17:41:27.054" endtime="20210730 17:41:27.071"/>
</if>
<status status="PASS" starttime="20210730 17:41:27.035" endtime="20210730 17:41:27.071"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:27.072" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:27.072" endtime="20210730 17:41:27.072"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:27.073" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:27.072" endtime="20210730 17:41:27.073"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:27.073" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:27.073" endtime="20210730 17:41:27.073"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:27.073" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:27.073" endtime="20210730 17:41:27.073"/>
</kw>
<msg timestamp="20210730 17:41:27.074" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:27.072" endtime="20210730 17:41:27.074"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:27.077" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:27.074" endtime="20210730 17:41:27.079"/>
</kw>
<status status="PASS" starttime="20210730 17:41:27.071" endtime="20210730 17:41:27.079"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:27.080" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:27.080" endtime="20210730 17:41:27.084"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:28.585" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:27.084" endtime="20210730 17:41:28.586"/>
</kw>
<status status="PASS" starttime="20210730 17:41:27.079" endtime="20210730 17:41:28.587"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:28.590" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:28.589" endtime="20210730 17:41:28.590"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:28.591" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:28.590" endtime="20210730 17:41:28.591"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:28.591" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:28.591" endtime="20210730 17:41:28.591"/>
</kw>
<msg timestamp="20210730 17:41:28.591" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:28.588" endtime="20210730 17:41:28.591"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:28.592" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:28.591" endtime="20210730 17:41:28.592"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.587" endtime="20210730 17:41:28.592"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:28.593" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:28.593" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:28.592" endtime="20210730 17:41:28.593"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.592" endtime="20210730 17:41:28.593"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:28.594" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:28.594" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:28.593" endtime="20210730 17:41:28.594"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:28.594" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:28.594" endtime="20210730 17:41:28.594"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:28.595" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:28.594" endtime="20210730 17:41:28.595"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:28.595" endtime="20210730 17:41:28.596"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:28.596" endtime="20210730 17:41:28.596"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.594" endtime="20210730 17:41:28.596"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:28.596" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:28.596" endtime="20210730 17:41:28.596"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:28.596" endtime="20210730 17:41:28.597"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:28.597" endtime="20210730 17:41:28.597"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.596" endtime="20210730 17:41:28.598"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:28.598" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:28.598" endtime="20210730 17:41:28.598"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:28.598" endtime="20210730 17:41:28.599"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:28.599" endtime="20210730 17:41:28.599"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.598" endtime="20210730 17:41:28.599"/>
</iter>
<status status="PASS" starttime="20210730 17:41:28.594" endtime="20210730 17:41:28.599"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:28.600" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:28.599" endtime="20210730 17:41:28.600"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.593" endtime="20210730 17:41:28.600"/>
</kw>
<status status="PASS" starttime="20210730 17:41:27.035" endtime="20210730 17:41:28.600"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:28.601" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:28.601" endtime="20210730 17:41:28.601"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:28.601" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210730 17:41:28.601" endtime="20210730 17:41:28.601"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:28.610" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:28.610" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:28.602" endtime="20210730 17:41:28.610"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:28.610" endtime="20210730 17:41:28.610"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:28.610" endtime="20210730 17:41:28.611"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:28.601" endtime="20210730 17:41:28.611"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:28.601" endtime="20210730 17:41:28.611"/>
</for>
<status status="FAIL" starttime="20210730 17:41:28.600" endtime="20210730 17:41:28.611"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:28.600" endtime="20210730 17:41:28.611"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:28.612" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:28.612" endtime="20210730 17:41:28.612"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:28.613" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210730 17:41:28.612" endtime="20210730 17:41:28.613"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:28.617" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:28.617" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:28.613" endtime="20210730 17:41:28.617"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:28.617" endtime="20210730 17:41:28.617"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:28.618" endtime="20210730 17:41:28.618"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:28.613" endtime="20210730 17:41:28.618"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:28.613" endtime="20210730 17:41:28.618"/>
</for>
<status status="FAIL" starttime="20210730 17:41:28.611" endtime="20210730 17:41:28.618"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:28.611" endtime="20210730 17:41:28.618"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤ abc!g</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:28.619" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:28.619" endtime="20210730 17:41:28.619"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:28.619" level="INFO">${payload} = {'username': '#¤ abc!g'}</msg>
<status status="PASS" starttime="20210730 17:41:28.619" endtime="20210730 17:41:28.619"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:28.623" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:28.624" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:28.620" endtime="20210730 17:41:28.624"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:28.624" endtime="20210730 17:41:28.624"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:28.624" endtime="20210730 17:41:28.624"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:28.620" endtime="20210730 17:41:28.624"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:28.619" endtime="20210730 17:41:28.624"/>
</for>
<status status="FAIL" starttime="20210730 17:41:28.618" endtime="20210730 17:41:28.624"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:28.618" endtime="20210730 17:41:28.624"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:28.600" endtime="20210730 17:41:28.624"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:28.630" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:28.639" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:28.639" level="INFO">${pids} = 21598
21605
21609</msg>
<status status="PASS" starttime="20210730 17:41:28.625" endtime="20210730 17:41:28.639"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:28.640" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:28.640" endtime="20210730 17:41:28.640"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:28.641" level="INFO">${pids} = ['21598', '21605', '21609']</msg>
<status status="PASS" starttime="20210730 17:41:28.641" endtime="20210730 17:41:28.641"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21598</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:28.644" level="INFO">Running command 'kill 21598 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:28.641" endtime="20210730 17:41:28.645"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.641" endtime="20210730 17:41:28.645"/>
</iter>
<iter>
<var name="${pid}">21605</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:28.648" level="INFO">Running command 'kill 21605 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:28.645" endtime="20210730 17:41:28.650"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.645" endtime="20210730 17:41:28.650"/>
</iter>
<iter>
<var name="${pid}">21609</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:28.654" level="INFO">Running command 'kill 21609 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:28.651" endtime="20210730 17:41:28.654"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.651" endtime="20210730 17:41:28.654"/>
</iter>
<status status="PASS" starttime="20210730 17:41:28.641" endtime="20210730 17:41:28.654"/>
</for>
<status status="PASS" starttime="20210730 17:41:28.641" endtime="20210730 17:41:28.654"/>
</branch>
<status status="PASS" starttime="20210730 17:41:28.640" endtime="20210730 17:41:28.654"/>
</if>
<status status="PASS" starttime="20210730 17:41:28.625" endtime="20210730 17:41:28.655"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤ abc!g'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:27.034" endtime="20210730 17:41:28.655">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t43" name="With Each Valid Token, Updating Username Of Each System User With #¤/abc!g() &amp;%¤fghjklQWERTY Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:28.661" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:28.672" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:28.672" level="INFO">${pids} = 21638</msg>
<status status="PASS" starttime="20210730 17:41:28.657" endtime="20210730 17:41:28.672"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:28.673" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:28.672" endtime="20210730 17:41:28.673"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:28.674" level="INFO">${pids} = ['21638']</msg>
<status status="PASS" starttime="20210730 17:41:28.673" endtime="20210730 17:41:28.674"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21638</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:28.677" level="INFO">Running command 'kill 21638 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:28.674" endtime="20210730 17:41:28.680"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.674" endtime="20210730 17:41:28.680"/>
</iter>
<status status="PASS" starttime="20210730 17:41:28.674" endtime="20210730 17:41:28.680"/>
</for>
<status status="PASS" starttime="20210730 17:41:28.673" endtime="20210730 17:41:28.680"/>
</branch>
<status status="PASS" starttime="20210730 17:41:28.673" endtime="20210730 17:41:28.680"/>
</if>
<status status="PASS" starttime="20210730 17:41:28.656" endtime="20210730 17:41:28.680"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:28.682" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:28.681" endtime="20210730 17:41:28.682"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:28.682" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:28.682" endtime="20210730 17:41:28.682"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:28.683" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:28.682" endtime="20210730 17:41:28.683"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:28.683" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:28.683" endtime="20210730 17:41:28.683"/>
</kw>
<msg timestamp="20210730 17:41:28.683" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:28.682" endtime="20210730 17:41:28.683"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:28.695" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:28.683" endtime="20210730 17:41:28.697"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.680" endtime="20210730 17:41:28.697"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:28.698" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:28.698" endtime="20210730 17:41:28.703"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:30.207" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:28.703" endtime="20210730 17:41:30.207"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.697" endtime="20210730 17:41:30.208"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:30.211" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:30.211" endtime="20210730 17:41:30.211"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:30.212" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:30.212" endtime="20210730 17:41:30.212"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:30.212" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:30.212" endtime="20210730 17:41:30.212"/>
</kw>
<msg timestamp="20210730 17:41:30.213" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:30.211" endtime="20210730 17:41:30.213"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:30.213" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:30.213" endtime="20210730 17:41:30.214"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.210" endtime="20210730 17:41:30.214"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:30.214" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:30.214" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:30.214" endtime="20210730 17:41:30.215"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.214" endtime="20210730 17:41:30.215"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:30.216" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:30.216" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:30.215" endtime="20210730 17:41:30.216"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:30.216" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:30.216" endtime="20210730 17:41:30.216"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:30.217" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:30.216" endtime="20210730 17:41:30.217"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:30.217" endtime="20210730 17:41:30.218"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:30.218" endtime="20210730 17:41:30.218"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.216" endtime="20210730 17:41:30.218"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:30.218" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:30.218" endtime="20210730 17:41:30.218"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:30.219" endtime="20210730 17:41:30.219"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:30.219" endtime="20210730 17:41:30.220"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.218" endtime="20210730 17:41:30.220"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:30.220" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:30.220" endtime="20210730 17:41:30.220"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:30.220" endtime="20210730 17:41:30.221"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:30.221" endtime="20210730 17:41:30.221"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.220" endtime="20210730 17:41:30.221"/>
</iter>
<status status="PASS" starttime="20210730 17:41:30.216" endtime="20210730 17:41:30.221"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:30.222" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:30.221" endtime="20210730 17:41:30.222"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.215" endtime="20210730 17:41:30.222"/>
</kw>
<status status="PASS" starttime="20210730 17:41:28.656" endtime="20210730 17:41:30.222"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:30.223" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:30.222" endtime="20210730 17:41:30.223"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:30.223" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 17:41:30.223" endtime="20210730 17:41:30.223"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:30.232" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:30.232" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:30.223" endtime="20210730 17:41:30.232"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:30.233" endtime="20210730 17:41:30.233"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:30.233" endtime="20210730 17:41:30.233"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:30.223" endtime="20210730 17:41:30.233"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:30.223" endtime="20210730 17:41:30.233"/>
</for>
<status status="FAIL" starttime="20210730 17:41:30.222" endtime="20210730 17:41:30.233"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:30.222" endtime="20210730 17:41:30.233"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:30.234" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:30.234" endtime="20210730 17:41:30.234"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:30.235" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 17:41:30.234" endtime="20210730 17:41:30.235"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:30.238" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:30.239" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:30.235" endtime="20210730 17:41:30.239"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:30.239" endtime="20210730 17:41:30.239"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:30.239" endtime="20210730 17:41:30.239"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:30.235" endtime="20210730 17:41:30.239"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:30.235" endtime="20210730 17:41:30.239"/>
</for>
<status status="FAIL" starttime="20210730 17:41:30.233" endtime="20210730 17:41:30.239"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:30.233" endtime="20210730 17:41:30.239"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Username To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>username=#¤/abc!g() &amp;%¤fghjklQWERTY</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:30.240" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:30.240" endtime="20210730 17:41:30.240"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>username=${username}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:30.241" level="INFO">${payload} = {'username': '#¤/abc!g() &amp;%¤fghjklQWERTY'}</msg>
<status status="PASS" starttime="20210730 17:41:30.240" endtime="20210730 17:41:30.241"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:30.244" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:30.244" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:30.241" endtime="20210730 17:41:30.244"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:30.244" endtime="20210730 17:41:30.244"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:30.244" endtime="20210730 17:41:30.244"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:30.241" endtime="20210730 17:41:30.245"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:30.241" endtime="20210730 17:41:30.245"/>
</for>
<status status="FAIL" starttime="20210730 17:41:30.239" endtime="20210730 17:41:30.245"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:30.239" endtime="20210730 17:41:30.245"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:30.222" endtime="20210730 17:41:30.245"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:30.249" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:30.260" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:30.260" level="INFO">${pids} = 21661
21668
21672</msg>
<status status="PASS" starttime="20210730 17:41:30.246" endtime="20210730 17:41:30.260"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:30.260" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:30.260" endtime="20210730 17:41:30.261"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:30.261" level="INFO">${pids} = ['21661', '21668', '21672']</msg>
<status status="PASS" starttime="20210730 17:41:30.261" endtime="20210730 17:41:30.261"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21661</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:30.265" level="INFO">Running command 'kill 21661 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:30.262" endtime="20210730 17:41:30.265"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.262" endtime="20210730 17:41:30.265"/>
</iter>
<iter>
<var name="${pid}">21668</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:30.270" level="INFO">Running command 'kill 21668 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:30.266" endtime="20210730 17:41:30.271"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.266" endtime="20210730 17:41:30.271"/>
</iter>
<iter>
<var name="${pid}">21672</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:30.275" level="INFO">Running command 'kill 21672 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:30.272" endtime="20210730 17:41:30.276"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.272" endtime="20210730 17:41:30.276"/>
</iter>
<status status="PASS" starttime="20210730 17:41:30.261" endtime="20210730 17:41:30.276"/>
</for>
<status status="PASS" starttime="20210730 17:41:30.261" endtime="20210730 17:41:30.276"/>
</branch>
<status status="PASS" starttime="20210730 17:41:30.261" endtime="20210730 17:41:30.276"/>
</if>
<status status="PASS" starttime="20210730 17:41:30.245" endtime="20210730 17:41:30.276"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set a
username as such:
{
"username": '#¤/abc!g() &amp;%¤fghjklQWERTY'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:28.655" endtime="20210730 17:41:30.276">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t44" name="With Each Valid Token, Updating Password Of Each System User With '' Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:30.281" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:30.291" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:30.291" level="INFO">${pids} = 21701</msg>
<status status="PASS" starttime="20210730 17:41:30.278" endtime="20210730 17:41:30.291"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:30.292" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:30.292" endtime="20210730 17:41:30.292"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:30.293" level="INFO">${pids} = ['21701']</msg>
<status status="PASS" starttime="20210730 17:41:30.293" endtime="20210730 17:41:30.293"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21701</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:30.296" level="INFO">Running command 'kill 21701 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:30.293" endtime="20210730 17:41:30.297"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.293" endtime="20210730 17:41:30.297"/>
</iter>
<status status="PASS" starttime="20210730 17:41:30.293" endtime="20210730 17:41:30.297"/>
</for>
<status status="PASS" starttime="20210730 17:41:30.292" endtime="20210730 17:41:30.297"/>
</branch>
<status status="PASS" starttime="20210730 17:41:30.292" endtime="20210730 17:41:30.297"/>
</if>
<status status="PASS" starttime="20210730 17:41:30.278" endtime="20210730 17:41:30.297"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:30.298" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:30.298" endtime="20210730 17:41:30.298"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:30.299" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:30.299" endtime="20210730 17:41:30.299"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:30.299" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:30.299" endtime="20210730 17:41:30.299"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:30.300" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:30.300" endtime="20210730 17:41:30.300"/>
</kw>
<msg timestamp="20210730 17:41:30.300" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:30.299" endtime="20210730 17:41:30.300"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:30.316" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:30.300" endtime="20210730 17:41:30.317"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.297" endtime="20210730 17:41:30.318"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:30.319" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:30.319" endtime="20210730 17:41:30.323"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:31.828" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:30.325" endtime="20210730 17:41:31.829"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.318" endtime="20210730 17:41:31.830"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:31.831" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:31.831" endtime="20210730 17:41:31.831"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:31.832" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:31.832" endtime="20210730 17:41:31.832"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:31.832" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:31.832" endtime="20210730 17:41:31.832"/>
</kw>
<msg timestamp="20210730 17:41:31.833" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:31.831" endtime="20210730 17:41:31.833"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:31.833" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:31.833" endtime="20210730 17:41:31.834"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.830" endtime="20210730 17:41:31.834"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:31.834" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:31.834" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:31.834" endtime="20210730 17:41:31.835"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.834" endtime="20210730 17:41:31.835"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:31.836" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:31.836" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:31.835" endtime="20210730 17:41:31.836"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:31.836" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:31.836" endtime="20210730 17:41:31.836"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:31.837" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:31.837" endtime="20210730 17:41:31.837"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:31.837" endtime="20210730 17:41:31.838"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:31.838" endtime="20210730 17:41:31.838"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.836" endtime="20210730 17:41:31.838"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:31.839" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:31.838" endtime="20210730 17:41:31.839"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:31.839" endtime="20210730 17:41:31.839"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:31.840" endtime="20210730 17:41:31.841"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.838" endtime="20210730 17:41:31.841"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:31.842" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:31.842" endtime="20210730 17:41:31.842"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:31.842" endtime="20210730 17:41:31.843"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:31.844" endtime="20210730 17:41:31.844"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.841" endtime="20210730 17:41:31.844"/>
</iter>
<status status="PASS" starttime="20210730 17:41:31.836" endtime="20210730 17:41:31.844"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:31.844" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:31.844" endtime="20210730 17:41:31.845"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.835" endtime="20210730 17:41:31.845"/>
</kw>
<status status="PASS" starttime="20210730 17:41:30.278" endtime="20210730 17:41:31.845"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:31.846" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:31.846" endtime="20210730 17:41:31.846"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:31.847" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210730 17:41:31.847" endtime="20210730 17:41:31.847"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:31.869" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:31.870" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:31.847" endtime="20210730 17:41:31.870"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:31.870" endtime="20210730 17:41:31.870"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:31.870" endtime="20210730 17:41:31.870"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:31.847" endtime="20210730 17:41:31.870"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:31.847" endtime="20210730 17:41:31.870"/>
</for>
<status status="FAIL" starttime="20210730 17:41:31.845" endtime="20210730 17:41:31.870"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:31.845" endtime="20210730 17:41:31.870"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:31.872" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:31.872" endtime="20210730 17:41:31.872"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:31.872" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210730 17:41:31.872" endtime="20210730 17:41:31.872"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:31.878" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:31.878" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:31.873" endtime="20210730 17:41:31.878"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:31.878" endtime="20210730 17:41:31.878"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:31.878" endtime="20210730 17:41:31.878"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:31.873" endtime="20210730 17:41:31.878"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:31.872" endtime="20210730 17:41:31.878"/>
</for>
<status status="FAIL" starttime="20210730 17:41:31.871" endtime="20210730 17:41:31.879"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:31.870" endtime="20210730 17:41:31.879"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=${EMPTY}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:31.880" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:31.880" endtime="20210730 17:41:31.880"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:31.880" level="INFO">${payload} = {'password': ''}</msg>
<status status="PASS" starttime="20210730 17:41:31.880" endtime="20210730 17:41:31.880"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:31.884" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:31.884" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:31.881" endtime="20210730 17:41:31.884"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:31.884" endtime="20210730 17:41:31.884"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:31.885" endtime="20210730 17:41:31.885"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:31.881" endtime="20210730 17:41:31.885"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:31.880" endtime="20210730 17:41:31.885"/>
</for>
<status status="FAIL" starttime="20210730 17:41:31.879" endtime="20210730 17:41:31.885"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:31.879" endtime="20210730 17:41:31.885"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:31.845" endtime="20210730 17:41:31.885"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:31.889" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:31.899" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:31.899" level="INFO">${pids} = 21724
21731
21736</msg>
<status status="PASS" starttime="20210730 17:41:31.886" endtime="20210730 17:41:31.899"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:31.900" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:31.899" endtime="20210730 17:41:31.900"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:31.900" level="INFO">${pids} = ['21724', '21731', '21736']</msg>
<status status="PASS" starttime="20210730 17:41:31.900" endtime="20210730 17:41:31.900"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21724</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:31.905" level="INFO">Running command 'kill 21724 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:31.901" endtime="20210730 17:41:31.905"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.901" endtime="20210730 17:41:31.906"/>
</iter>
<iter>
<var name="${pid}">21731</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:31.910" level="INFO">Running command 'kill 21731 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:31.906" endtime="20210730 17:41:31.912"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.906" endtime="20210730 17:41:31.912"/>
</iter>
<iter>
<var name="${pid}">21736</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:31.915" level="INFO">Running command 'kill 21736 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:31.913" endtime="20210730 17:41:31.916"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.912" endtime="20210730 17:41:31.916"/>
</iter>
<status status="PASS" starttime="20210730 17:41:31.900" endtime="20210730 17:41:31.916"/>
</for>
<status status="PASS" starttime="20210730 17:41:31.900" endtime="20210730 17:41:31.916"/>
</branch>
<status status="PASS" starttime="20210730 17:41:31.900" endtime="20210730 17:41:31.916"/>
</if>
<status status="PASS" starttime="20210730 17:41:31.885" endtime="20210730 17:41:31.916"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": ''
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:30.277" endtime="20210730 17:41:31.916">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t45" name="With Each Valid Token, Updating Password Of Each System User With abcdefg Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:31.920" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:31.930" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:31.930" level="INFO">${pids} = 21765</msg>
<status status="PASS" starttime="20210730 17:41:31.918" endtime="20210730 17:41:31.931"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:31.931" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:31.931" endtime="20210730 17:41:31.931"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:31.932" level="INFO">${pids} = ['21765']</msg>
<status status="PASS" starttime="20210730 17:41:31.932" endtime="20210730 17:41:31.932"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21765</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:31.938" level="INFO">Running command 'kill 21765 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:31.932" endtime="20210730 17:41:31.938"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.932" endtime="20210730 17:41:31.938"/>
</iter>
<status status="PASS" starttime="20210730 17:41:31.932" endtime="20210730 17:41:31.938"/>
</for>
<status status="PASS" starttime="20210730 17:41:31.932" endtime="20210730 17:41:31.938"/>
</branch>
<status status="PASS" starttime="20210730 17:41:31.932" endtime="20210730 17:41:31.938"/>
</if>
<status status="PASS" starttime="20210730 17:41:31.918" endtime="20210730 17:41:31.939"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:31.940" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:31.940" endtime="20210730 17:41:31.940"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:31.941" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:31.941" endtime="20210730 17:41:31.941"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:31.941" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:31.941" endtime="20210730 17:41:31.941"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:31.942" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:31.942" endtime="20210730 17:41:31.942"/>
</kw>
<msg timestamp="20210730 17:41:31.942" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:31.940" endtime="20210730 17:41:31.942"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:31.945" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:31.942" endtime="20210730 17:41:31.947"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.939" endtime="20210730 17:41:31.947"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:31.948" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:31.948" endtime="20210730 17:41:31.952"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:33.453" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:31.952" endtime="20210730 17:41:33.453"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.947" endtime="20210730 17:41:33.453"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:33.455" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:33.454" endtime="20210730 17:41:33.455"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:33.455" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:33.455" endtime="20210730 17:41:33.456"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:33.460" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:33.458" endtime="20210730 17:41:33.460"/>
</kw>
<msg timestamp="20210730 17:41:33.460" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:33.454" endtime="20210730 17:41:33.460"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:33.461" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:33.461" endtime="20210730 17:41:33.462"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.454" endtime="20210730 17:41:33.463"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:33.464" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:33.464" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:33.464" endtime="20210730 17:41:33.464"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.463" endtime="20210730 17:41:33.464"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:33.466" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:33.466" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:33.466" endtime="20210730 17:41:33.466"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:33.467" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:33.466" endtime="20210730 17:41:33.467"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:33.467" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:33.467" endtime="20210730 17:41:33.467"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:33.467" endtime="20210730 17:41:33.468"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:33.468" endtime="20210730 17:41:33.468"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.467" endtime="20210730 17:41:33.468"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:33.469" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:33.468" endtime="20210730 17:41:33.469"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:33.469" endtime="20210730 17:41:33.469"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:33.470" endtime="20210730 17:41:33.470"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.468" endtime="20210730 17:41:33.470"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:33.470" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:33.470" endtime="20210730 17:41:33.471"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:33.471" endtime="20210730 17:41:33.471"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:33.471" endtime="20210730 17:41:33.471"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.470" endtime="20210730 17:41:33.472"/>
</iter>
<status status="PASS" starttime="20210730 17:41:33.467" endtime="20210730 17:41:33.472"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:33.472" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:33.472" endtime="20210730 17:41:33.472"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.465" endtime="20210730 17:41:33.472"/>
</kw>
<status status="PASS" starttime="20210730 17:41:31.917" endtime="20210730 17:41:33.472"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:33.474" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:33.473" endtime="20210730 17:41:33.474"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:33.474" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 17:41:33.474" endtime="20210730 17:41:33.474"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:33.486" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:33.487" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:33.475" endtime="20210730 17:41:33.487"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:33.487" endtime="20210730 17:41:33.487"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:33.487" endtime="20210730 17:41:33.487"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:33.474" endtime="20210730 17:41:33.487"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:33.474" endtime="20210730 17:41:33.487"/>
</for>
<status status="FAIL" starttime="20210730 17:41:33.473" endtime="20210730 17:41:33.487"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:33.473" endtime="20210730 17:41:33.487"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:33.488" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:33.488" endtime="20210730 17:41:33.488"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:33.489" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 17:41:33.488" endtime="20210730 17:41:33.489"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:33.493" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:33.493" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:33.489" endtime="20210730 17:41:33.493"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:33.493" endtime="20210730 17:41:33.494"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:33.494" endtime="20210730 17:41:33.494"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:33.489" endtime="20210730 17:41:33.494"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:33.489" endtime="20210730 17:41:33.494"/>
</for>
<status status="FAIL" starttime="20210730 17:41:33.487" endtime="20210730 17:41:33.494"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:33.487" endtime="20210730 17:41:33.494"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefg</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:33.495" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:33.495" endtime="20210730 17:41:33.495"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:33.495" level="INFO">${payload} = {'password': 'abcdefg'}</msg>
<status status="PASS" starttime="20210730 17:41:33.495" endtime="20210730 17:41:33.495"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:33.500" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:33.500" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:33.496" endtime="20210730 17:41:33.500"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:33.500" endtime="20210730 17:41:33.501"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:33.501" endtime="20210730 17:41:33.501"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:33.496" endtime="20210730 17:41:33.501"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:33.495" endtime="20210730 17:41:33.501"/>
</for>
<status status="FAIL" starttime="20210730 17:41:33.494" endtime="20210730 17:41:33.501"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:33.494" endtime="20210730 17:41:33.501"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:33.472" endtime="20210730 17:41:33.501"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:33.507" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:33.516" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:33.516" level="INFO">${pids} = 21788
21795
21800</msg>
<status status="PASS" starttime="20210730 17:41:33.502" endtime="20210730 17:41:33.516"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:33.517" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:33.517" endtime="20210730 17:41:33.517"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:33.518" level="INFO">${pids} = ['21788', '21795', '21800']</msg>
<status status="PASS" starttime="20210730 17:41:33.518" endtime="20210730 17:41:33.518"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21788</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:33.521" level="INFO">Running command 'kill 21788 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:33.518" endtime="20210730 17:41:33.522"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.518" endtime="20210730 17:41:33.522"/>
</iter>
<iter>
<var name="${pid}">21795</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:33.525" level="INFO">Running command 'kill 21795 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:33.522" endtime="20210730 17:41:33.527"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.522" endtime="20210730 17:41:33.527"/>
</iter>
<iter>
<var name="${pid}">21800</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:33.531" level="INFO">Running command 'kill 21800 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:33.528" endtime="20210730 17:41:33.532"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.527" endtime="20210730 17:41:33.532"/>
</iter>
<status status="PASS" starttime="20210730 17:41:33.518" endtime="20210730 17:41:33.532"/>
</for>
<status status="PASS" starttime="20210730 17:41:33.517" endtime="20210730 17:41:33.532"/>
</branch>
<status status="PASS" starttime="20210730 17:41:33.517" endtime="20210730 17:41:33.532"/>
</if>
<status status="PASS" starttime="20210730 17:41:33.501" endtime="20210730 17:41:33.532"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefg'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:31.917" endtime="20210730 17:41:33.532">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t46" name="With Each Valid Token, Updating Password Of Each System User With abcdefgh Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:33.537" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:33.548" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:33.548" level="INFO">${pids} = 21829</msg>
<status status="PASS" starttime="20210730 17:41:33.534" endtime="20210730 17:41:33.548"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:33.549" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:33.548" endtime="20210730 17:41:33.549"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:33.550" level="INFO">${pids} = ['21829']</msg>
<status status="PASS" starttime="20210730 17:41:33.549" endtime="20210730 17:41:33.550"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21829</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:33.555" level="INFO">Running command 'kill 21829 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:33.550" endtime="20210730 17:41:33.555"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.550" endtime="20210730 17:41:33.555"/>
</iter>
<status status="PASS" starttime="20210730 17:41:33.550" endtime="20210730 17:41:33.555"/>
</for>
<status status="PASS" starttime="20210730 17:41:33.549" endtime="20210730 17:41:33.556"/>
</branch>
<status status="PASS" starttime="20210730 17:41:33.549" endtime="20210730 17:41:33.556"/>
</if>
<status status="PASS" starttime="20210730 17:41:33.534" endtime="20210730 17:41:33.556"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:33.557" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:33.557" endtime="20210730 17:41:33.557"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:33.558" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:33.558" endtime="20210730 17:41:33.558"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:33.558" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:33.558" endtime="20210730 17:41:33.558"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:33.559" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:33.558" endtime="20210730 17:41:33.559"/>
</kw>
<msg timestamp="20210730 17:41:33.559" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:33.557" endtime="20210730 17:41:33.559"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:33.563" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:33.559" endtime="20210730 17:41:33.565"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.556" endtime="20210730 17:41:33.565"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:33.566" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:33.566" endtime="20210730 17:41:33.571"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:35.072" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:33.571" endtime="20210730 17:41:35.072"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.565" endtime="20210730 17:41:35.072"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:35.074" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:35.074" endtime="20210730 17:41:35.074"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:35.074" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:35.074" endtime="20210730 17:41:35.075"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:35.075" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:35.075" endtime="20210730 17:41:35.075"/>
</kw>
<msg timestamp="20210730 17:41:35.075" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:35.073" endtime="20210730 17:41:35.075"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:35.076" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:35.076" endtime="20210730 17:41:35.076"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.073" endtime="20210730 17:41:35.076"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:35.077" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:35.077" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:35.077" endtime="20210730 17:41:35.077"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.076" endtime="20210730 17:41:35.077"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:35.078" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:35.078" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:35.078" endtime="20210730 17:41:35.078"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:35.078" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:35.078" endtime="20210730 17:41:35.078"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:35.079" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:35.079" endtime="20210730 17:41:35.079"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:35.079" endtime="20210730 17:41:35.080"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:35.080" endtime="20210730 17:41:35.080"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.079" endtime="20210730 17:41:35.080"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:35.080" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:35.080" endtime="20210730 17:41:35.080"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:35.081" endtime="20210730 17:41:35.081"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:35.081" endtime="20210730 17:41:35.082"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.080" endtime="20210730 17:41:35.082"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:35.082" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:35.082" endtime="20210730 17:41:35.082"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:35.082" endtime="20210730 17:41:35.083"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:35.083" endtime="20210730 17:41:35.083"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.082" endtime="20210730 17:41:35.083"/>
</iter>
<status status="PASS" starttime="20210730 17:41:35.078" endtime="20210730 17:41:35.083"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:35.083" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:35.083" endtime="20210730 17:41:35.084"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.077" endtime="20210730 17:41:35.084"/>
</kw>
<status status="PASS" starttime="20210730 17:41:33.534" endtime="20210730 17:41:35.084"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:35.085" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:35.085" endtime="20210730 17:41:35.085"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:35.085" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 17:41:35.085" endtime="20210730 17:41:35.085"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:35.094" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:35.094" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:35.086" endtime="20210730 17:41:35.094"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:35.095" endtime="20210730 17:41:35.095"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:35.095" endtime="20210730 17:41:35.095"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:35.085" endtime="20210730 17:41:35.095"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:35.085" endtime="20210730 17:41:35.095"/>
</for>
<status status="FAIL" starttime="20210730 17:41:35.084" endtime="20210730 17:41:35.095"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:35.084" endtime="20210730 17:41:35.095"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:35.097" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:35.096" endtime="20210730 17:41:35.097"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:35.097" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 17:41:35.097" endtime="20210730 17:41:35.097"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:35.101" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:35.102" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:35.097" endtime="20210730 17:41:35.102"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:35.102" endtime="20210730 17:41:35.102"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:35.102" endtime="20210730 17:41:35.102"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:35.097" endtime="20210730 17:41:35.102"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:35.097" endtime="20210730 17:41:35.102"/>
</for>
<status status="FAIL" starttime="20210730 17:41:35.096" endtime="20210730 17:41:35.102"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:35.096" endtime="20210730 17:41:35.102"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefgh</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:35.103" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:35.103" endtime="20210730 17:41:35.103"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:35.103" level="INFO">${payload} = {'password': 'abcdefgh'}</msg>
<status status="PASS" starttime="20210730 17:41:35.103" endtime="20210730 17:41:35.103"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:35.107" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:35.107" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:35.104" endtime="20210730 17:41:35.107"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:35.107" endtime="20210730 17:41:35.107"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:35.108" endtime="20210730 17:41:35.108"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:35.104" endtime="20210730 17:41:35.108"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:35.104" endtime="20210730 17:41:35.108"/>
</for>
<status status="FAIL" starttime="20210730 17:41:35.102" endtime="20210730 17:41:35.108"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:35.102" endtime="20210730 17:41:35.108"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:35.084" endtime="20210730 17:41:35.108"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:35.112" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:35.123" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:35.123" level="INFO">${pids} = 21852
21859
21863</msg>
<status status="PASS" starttime="20210730 17:41:35.109" endtime="20210730 17:41:35.123"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:35.124" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:35.123" endtime="20210730 17:41:35.124"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:35.124" level="INFO">${pids} = ['21852', '21859', '21863']</msg>
<status status="PASS" starttime="20210730 17:41:35.124" endtime="20210730 17:41:35.124"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21852</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:35.128" level="INFO">Running command 'kill 21852 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:35.125" endtime="20210730 17:41:35.128"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.125" endtime="20210730 17:41:35.128"/>
</iter>
<iter>
<var name="${pid}">21859</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:35.131" level="INFO">Running command 'kill 21859 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:35.129" endtime="20210730 17:41:35.132"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.128" endtime="20210730 17:41:35.132"/>
</iter>
<iter>
<var name="${pid}">21863</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:35.135" level="INFO">Running command 'kill 21863 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:35.132" endtime="20210730 17:41:35.135"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.132" endtime="20210730 17:41:35.135"/>
</iter>
<status status="PASS" starttime="20210730 17:41:35.124" endtime="20210730 17:41:35.135"/>
</for>
<status status="PASS" starttime="20210730 17:41:35.124" endtime="20210730 17:41:35.135"/>
</branch>
<status status="PASS" starttime="20210730 17:41:35.124" endtime="20210730 17:41:35.135"/>
</if>
<status status="PASS" starttime="20210730 17:41:35.108" endtime="20210730 17:41:35.136"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefgh'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:33.533" endtime="20210730 17:41:35.136">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t47" name="With Each Valid Token, Updating Password Of Each System User With abcdefghjklmnprstoöuüvyz Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:35.140" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:35.152" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:35.152" level="INFO">${pids} = 21892</msg>
<status status="PASS" starttime="20210730 17:41:35.138" endtime="20210730 17:41:35.152"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:35.153" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:35.152" endtime="20210730 17:41:35.153"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:35.154" level="INFO">${pids} = ['21892']</msg>
<status status="PASS" starttime="20210730 17:41:35.153" endtime="20210730 17:41:35.154"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21892</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:35.163" level="INFO">Running command 'kill 21892 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:35.154" endtime="20210730 17:41:35.163"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.154" endtime="20210730 17:41:35.163"/>
</iter>
<status status="PASS" starttime="20210730 17:41:35.154" endtime="20210730 17:41:35.163"/>
</for>
<status status="PASS" starttime="20210730 17:41:35.153" endtime="20210730 17:41:35.163"/>
</branch>
<status status="PASS" starttime="20210730 17:41:35.153" endtime="20210730 17:41:35.163"/>
</if>
<status status="PASS" starttime="20210730 17:41:35.137" endtime="20210730 17:41:35.164"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:35.165" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:35.165" endtime="20210730 17:41:35.165"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:35.166" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:35.165" endtime="20210730 17:41:35.166"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:35.166" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:35.166" endtime="20210730 17:41:35.166"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:35.167" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:35.166" endtime="20210730 17:41:35.167"/>
</kw>
<msg timestamp="20210730 17:41:35.167" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:35.165" endtime="20210730 17:41:35.167"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:35.170" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:35.167" endtime="20210730 17:41:35.171"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.164" endtime="20210730 17:41:35.172"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:35.173" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:35.172" endtime="20210730 17:41:35.177"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:36.679" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:35.178" endtime="20210730 17:41:36.680"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.172" endtime="20210730 17:41:36.680"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:36.683" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:36.683" endtime="20210730 17:41:36.683"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:36.684" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:36.683" endtime="20210730 17:41:36.684"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:36.684" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:36.684" endtime="20210730 17:41:36.684"/>
</kw>
<msg timestamp="20210730 17:41:36.684" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:36.682" endtime="20210730 17:41:36.684"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:36.685" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:36.684" endtime="20210730 17:41:36.685"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.681" endtime="20210730 17:41:36.685"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:36.686" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:36.686" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:36.686" endtime="20210730 17:41:36.686"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.686" endtime="20210730 17:41:36.686"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:36.687" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:36.687" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:36.687" endtime="20210730 17:41:36.687"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:36.688" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:36.687" endtime="20210730 17:41:36.688"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:36.688" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:36.688" endtime="20210730 17:41:36.688"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:36.688" endtime="20210730 17:41:36.689"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:36.689" endtime="20210730 17:41:36.689"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.688" endtime="20210730 17:41:36.689"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:36.690" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:36.690" endtime="20210730 17:41:36.690"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:36.690" endtime="20210730 17:41:36.691"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:36.691" endtime="20210730 17:41:36.691"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.690" endtime="20210730 17:41:36.691"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:36.691" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:36.691" endtime="20210730 17:41:36.691"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:36.691" endtime="20210730 17:41:36.692"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:36.692" endtime="20210730 17:41:36.692"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.691" endtime="20210730 17:41:36.692"/>
</iter>
<status status="PASS" starttime="20210730 17:41:36.688" endtime="20210730 17:41:36.692"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:36.693" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:36.693" endtime="20210730 17:41:36.693"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.686" endtime="20210730 17:41:36.693"/>
</kw>
<status status="PASS" starttime="20210730 17:41:35.137" endtime="20210730 17:41:36.693"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:36.694" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:36.694" endtime="20210730 17:41:36.694"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:36.695" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210730 17:41:36.694" endtime="20210730 17:41:36.695"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:36.703" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:36.703" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:36.695" endtime="20210730 17:41:36.703"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:36.704" endtime="20210730 17:41:36.704"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:36.704" endtime="20210730 17:41:36.704"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:36.695" endtime="20210730 17:41:36.704"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:36.695" endtime="20210730 17:41:36.704"/>
</for>
<status status="FAIL" starttime="20210730 17:41:36.693" endtime="20210730 17:41:36.704"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:36.693" endtime="20210730 17:41:36.704"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:36.706" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:36.705" endtime="20210730 17:41:36.706"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:36.706" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210730 17:41:36.706" endtime="20210730 17:41:36.706"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:36.710" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:36.711" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:36.706" endtime="20210730 17:41:36.711"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:36.711" endtime="20210730 17:41:36.711"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:36.711" endtime="20210730 17:41:36.711"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:36.706" endtime="20210730 17:41:36.711"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:36.706" endtime="20210730 17:41:36.711"/>
</for>
<status status="FAIL" starttime="20210730 17:41:36.705" endtime="20210730 17:41:36.711"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:36.705" endtime="20210730 17:41:36.711"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdefghjklmnprstoöuüvyz</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:36.713" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:36.712" endtime="20210730 17:41:36.713"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:36.713" level="INFO">${payload} = {'password': 'abcdefghjklmnprstoöuüvyz'}</msg>
<status status="PASS" starttime="20210730 17:41:36.713" endtime="20210730 17:41:36.713"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:36.717" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:36.717" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:36.713" endtime="20210730 17:41:36.717"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:36.717" endtime="20210730 17:41:36.717"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:36.717" endtime="20210730 17:41:36.717"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:36.713" endtime="20210730 17:41:36.717"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:36.713" endtime="20210730 17:41:36.718"/>
</for>
<status status="FAIL" starttime="20210730 17:41:36.712" endtime="20210730 17:41:36.718"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:36.711" endtime="20210730 17:41:36.718"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:36.693" endtime="20210730 17:41:36.718"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:36.722" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:36.732" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:36.732" level="INFO">${pids} = 21915
21922
21932</msg>
<status status="PASS" starttime="20210730 17:41:36.719" endtime="20210730 17:41:36.732"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:36.733" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:36.733" endtime="20210730 17:41:36.733"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:36.734" level="INFO">${pids} = ['21915', '21922', '21932']</msg>
<status status="PASS" starttime="20210730 17:41:36.734" endtime="20210730 17:41:36.734"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21915</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:36.738" level="INFO">Running command 'kill 21915 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:36.734" endtime="20210730 17:41:36.739"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.734" endtime="20210730 17:41:36.739"/>
</iter>
<iter>
<var name="${pid}">21922</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:36.743" level="INFO">Running command 'kill 21922 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:36.739" endtime="20210730 17:41:36.744"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.739" endtime="20210730 17:41:36.744"/>
</iter>
<iter>
<var name="${pid}">21932</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:36.747" level="INFO">Running command 'kill 21932 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:36.744" endtime="20210730 17:41:36.747"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.744" endtime="20210730 17:41:36.748"/>
</iter>
<status status="PASS" starttime="20210730 17:41:36.734" endtime="20210730 17:41:36.748"/>
</for>
<status status="PASS" starttime="20210730 17:41:36.733" endtime="20210730 17:41:36.748"/>
</branch>
<status status="PASS" starttime="20210730 17:41:36.733" endtime="20210730 17:41:36.748"/>
</if>
<status status="PASS" starttime="20210730 17:41:36.718" endtime="20210730 17:41:36.748"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdefghjklmnprstoöuüvyz'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:35.136" endtime="20210730 17:41:36.748">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t48" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFG Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:36.759" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:36.768" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:36.768" level="INFO">${pids} = 21961</msg>
<status status="PASS" starttime="20210730 17:41:36.750" endtime="20210730 17:41:36.768"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:36.768" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:36.768" endtime="20210730 17:41:36.768"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:36.772" level="INFO">${pids} = ['21961']</msg>
<status status="PASS" starttime="20210730 17:41:36.771" endtime="20210730 17:41:36.772"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21961</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:36.785" level="INFO">Running command 'kill 21961 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:36.778" endtime="20210730 17:41:36.786"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.773" endtime="20210730 17:41:36.786"/>
</iter>
<status status="PASS" starttime="20210730 17:41:36.772" endtime="20210730 17:41:36.786"/>
</for>
<status status="PASS" starttime="20210730 17:41:36.771" endtime="20210730 17:41:36.786"/>
</branch>
<status status="PASS" starttime="20210730 17:41:36.769" endtime="20210730 17:41:36.786"/>
</if>
<status status="PASS" starttime="20210730 17:41:36.750" endtime="20210730 17:41:36.786"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:36.787" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:36.787" endtime="20210730 17:41:36.787"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:36.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:36.788" endtime="20210730 17:41:36.788"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:36.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:36.788" endtime="20210730 17:41:36.788"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:36.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:36.788" endtime="20210730 17:41:36.788"/>
</kw>
<msg timestamp="20210730 17:41:36.789" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:36.787" endtime="20210730 17:41:36.789"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:36.792" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:36.789" endtime="20210730 17:41:36.794"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.786" endtime="20210730 17:41:36.794"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:36.796" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:36.795" endtime="20210730 17:41:36.799"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:38.300" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:36.799" endtime="20210730 17:41:38.301"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.795" endtime="20210730 17:41:38.301"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:38.302" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:38.302" endtime="20210730 17:41:38.302"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:38.303" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:38.303" endtime="20210730 17:41:38.303"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:38.303" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:38.303" endtime="20210730 17:41:38.303"/>
</kw>
<msg timestamp="20210730 17:41:38.304" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:38.302" endtime="20210730 17:41:38.304"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:38.304" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:38.304" endtime="20210730 17:41:38.304"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.301" endtime="20210730 17:41:38.305"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:38.305" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:38.305" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:38.305" endtime="20210730 17:41:38.305"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.305" endtime="20210730 17:41:38.306"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:38.307" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:38.307" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:38.306" endtime="20210730 17:41:38.307"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:38.307" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:38.307" endtime="20210730 17:41:38.307"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:38.308" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:38.307" endtime="20210730 17:41:38.308"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:38.308" endtime="20210730 17:41:38.309"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:38.309" endtime="20210730 17:41:38.309"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.307" endtime="20210730 17:41:38.309"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:38.310" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:38.309" endtime="20210730 17:41:38.310"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:38.310" endtime="20210730 17:41:38.311"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:38.311" endtime="20210730 17:41:38.311"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.309" endtime="20210730 17:41:38.311"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:38.311" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:38.311" endtime="20210730 17:41:38.311"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:38.311" endtime="20210730 17:41:38.312"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:38.312" endtime="20210730 17:41:38.312"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.311" endtime="20210730 17:41:38.313"/>
</iter>
<status status="PASS" starttime="20210730 17:41:38.307" endtime="20210730 17:41:38.313"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:38.313" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:38.313" endtime="20210730 17:41:38.313"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.306" endtime="20210730 17:41:38.313"/>
</kw>
<status status="PASS" starttime="20210730 17:41:36.749" endtime="20210730 17:41:38.313"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:38.314" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:38.314" endtime="20210730 17:41:38.314"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:38.315" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210730 17:41:38.315" endtime="20210730 17:41:38.315"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:38.323" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:38.324" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:38.315" endtime="20210730 17:41:38.324"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:38.324" endtime="20210730 17:41:38.324"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:38.324" endtime="20210730 17:41:38.324"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:38.315" endtime="20210730 17:41:38.324"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:38.315" endtime="20210730 17:41:38.324"/>
</for>
<status status="FAIL" starttime="20210730 17:41:38.314" endtime="20210730 17:41:38.324"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:38.314" endtime="20210730 17:41:38.325"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:38.326" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:38.325" endtime="20210730 17:41:38.326"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:38.326" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210730 17:41:38.326" endtime="20210730 17:41:38.326"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:38.330" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:38.330" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:38.326" endtime="20210730 17:41:38.330"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:38.330" endtime="20210730 17:41:38.330"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:38.331" endtime="20210730 17:41:38.331"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:38.326" endtime="20210730 17:41:38.331"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:38.326" endtime="20210730 17:41:38.331"/>
</for>
<status status="FAIL" starttime="20210730 17:41:38.325" endtime="20210730 17:41:38.331"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:38.325" endtime="20210730 17:41:38.331"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFG</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:38.332" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:38.332" endtime="20210730 17:41:38.332"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:38.332" level="INFO">${payload} = {'password': 'ABCDEFG'}</msg>
<status status="PASS" starttime="20210730 17:41:38.332" endtime="20210730 17:41:38.332"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:38.336" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:38.336" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:38.332" endtime="20210730 17:41:38.336"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:38.336" endtime="20210730 17:41:38.336"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:38.336" endtime="20210730 17:41:38.336"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:38.332" endtime="20210730 17:41:38.336"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:38.332" endtime="20210730 17:41:38.336"/>
</for>
<status status="FAIL" starttime="20210730 17:41:38.331" endtime="20210730 17:41:38.337"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:38.331" endtime="20210730 17:41:38.337"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:38.313" endtime="20210730 17:41:38.337"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:38.342" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:38.351" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:38.351" level="INFO">${pids} = 21984
21991
21995</msg>
<status status="PASS" starttime="20210730 17:41:38.338" endtime="20210730 17:41:38.351"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:38.352" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:38.352" endtime="20210730 17:41:38.352"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:38.353" level="INFO">${pids} = ['21984', '21991', '21995']</msg>
<status status="PASS" starttime="20210730 17:41:38.352" endtime="20210730 17:41:38.353"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">21984</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:38.356" level="INFO">Running command 'kill 21984 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:38.353" endtime="20210730 17:41:38.357"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.353" endtime="20210730 17:41:38.357"/>
</iter>
<iter>
<var name="${pid}">21991</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:38.360" level="INFO">Running command 'kill 21991 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:38.357" endtime="20210730 17:41:38.360"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.357" endtime="20210730 17:41:38.361"/>
</iter>
<iter>
<var name="${pid}">21995</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:38.364" level="INFO">Running command 'kill 21995 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:38.361" endtime="20210730 17:41:38.364"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.361" endtime="20210730 17:41:38.365"/>
</iter>
<status status="PASS" starttime="20210730 17:41:38.353" endtime="20210730 17:41:38.365"/>
</for>
<status status="PASS" starttime="20210730 17:41:38.352" endtime="20210730 17:41:38.365"/>
</branch>
<status status="PASS" starttime="20210730 17:41:38.352" endtime="20210730 17:41:38.365"/>
</if>
<status status="PASS" starttime="20210730 17:41:38.337" endtime="20210730 17:41:38.365"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFG'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:36.749" endtime="20210730 17:41:38.365">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t49" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFGH Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:38.370" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:38.381" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:38.381" level="INFO">${pids} = 22024</msg>
<status status="PASS" starttime="20210730 17:41:38.367" endtime="20210730 17:41:38.381"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:38.382" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:38.382" endtime="20210730 17:41:38.382"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:38.383" level="INFO">${pids} = ['22024']</msg>
<status status="PASS" starttime="20210730 17:41:38.383" endtime="20210730 17:41:38.383"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22024</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:38.387" level="INFO">Running command 'kill 22024 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:38.383" endtime="20210730 17:41:38.387"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.383" endtime="20210730 17:41:38.387"/>
</iter>
<status status="PASS" starttime="20210730 17:41:38.383" endtime="20210730 17:41:38.387"/>
</for>
<status status="PASS" starttime="20210730 17:41:38.383" endtime="20210730 17:41:38.387"/>
</branch>
<status status="PASS" starttime="20210730 17:41:38.382" endtime="20210730 17:41:38.387"/>
</if>
<status status="PASS" starttime="20210730 17:41:38.367" endtime="20210730 17:41:38.387"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:38.388" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:38.388" endtime="20210730 17:41:38.389"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:38.389" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:38.389" endtime="20210730 17:41:38.389"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:38.390" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:38.389" endtime="20210730 17:41:38.390"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:38.390" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:38.390" endtime="20210730 17:41:38.390"/>
</kw>
<msg timestamp="20210730 17:41:38.390" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:38.389" endtime="20210730 17:41:38.390"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:38.405" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:38.390" endtime="20210730 17:41:38.409"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.388" endtime="20210730 17:41:38.409"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:38.410" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:38.410" endtime="20210730 17:41:38.414"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:39.916" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:38.414" endtime="20210730 17:41:39.917"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.410" endtime="20210730 17:41:39.917"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:39.919" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:39.918" endtime="20210730 17:41:39.919"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:39.919" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:39.919" endtime="20210730 17:41:39.919"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:39.920" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:39.920" endtime="20210730 17:41:39.920"/>
</kw>
<msg timestamp="20210730 17:41:39.921" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:39.918" endtime="20210730 17:41:39.921"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:39.921" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:39.921" endtime="20210730 17:41:39.922"/>
</kw>
<status status="PASS" starttime="20210730 17:41:39.917" endtime="20210730 17:41:39.922"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:39.922" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:39.922" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:39.922" endtime="20210730 17:41:39.922"/>
</kw>
<status status="PASS" starttime="20210730 17:41:39.922" endtime="20210730 17:41:39.923"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:39.923" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:39.924" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:39.923" endtime="20210730 17:41:39.924"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:39.924" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:39.924" endtime="20210730 17:41:39.924"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:39.924" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:39.924" endtime="20210730 17:41:39.924"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:39.925" endtime="20210730 17:41:39.925"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:39.925" endtime="20210730 17:41:39.926"/>
</kw>
<status status="PASS" starttime="20210730 17:41:39.924" endtime="20210730 17:41:39.926"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:39.926" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:39.926" endtime="20210730 17:41:39.926"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:39.926" endtime="20210730 17:41:39.927"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:39.927" endtime="20210730 17:41:39.927"/>
</kw>
<status status="PASS" starttime="20210730 17:41:39.926" endtime="20210730 17:41:39.927"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:39.927" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:39.927" endtime="20210730 17:41:39.928"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:39.928" endtime="20210730 17:41:39.928"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:39.928" endtime="20210730 17:41:39.929"/>
</kw>
<status status="PASS" starttime="20210730 17:41:39.927" endtime="20210730 17:41:39.929"/>
</iter>
<status status="PASS" starttime="20210730 17:41:39.924" endtime="20210730 17:41:39.929"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:39.929" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:39.929" endtime="20210730 17:41:39.929"/>
</kw>
<status status="PASS" starttime="20210730 17:41:39.923" endtime="20210730 17:41:39.929"/>
</kw>
<status status="PASS" starttime="20210730 17:41:38.366" endtime="20210730 17:41:39.929"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:39.930" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:39.930" endtime="20210730 17:41:39.930"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:39.931" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210730 17:41:39.930" endtime="20210730 17:41:39.931"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:39.939" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:39.939" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:39.931" endtime="20210730 17:41:39.939"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:39.940" endtime="20210730 17:41:39.940"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:39.940" endtime="20210730 17:41:39.940"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:39.931" endtime="20210730 17:41:39.940"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:39.931" endtime="20210730 17:41:39.940"/>
</for>
<status status="FAIL" starttime="20210730 17:41:39.930" endtime="20210730 17:41:39.940"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:39.930" endtime="20210730 17:41:39.940"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:39.942" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:39.941" endtime="20210730 17:41:39.942"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:39.942" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210730 17:41:39.942" endtime="20210730 17:41:39.942"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:39.946" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:39.946" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:39.942" endtime="20210730 17:41:39.946"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:39.946" endtime="20210730 17:41:39.946"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:39.946" endtime="20210730 17:41:39.947"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:39.942" endtime="20210730 17:41:39.947"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:39.942" endtime="20210730 17:41:39.947"/>
</for>
<status status="FAIL" starttime="20210730 17:41:39.941" endtime="20210730 17:41:39.947"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:39.941" endtime="20210730 17:41:39.947"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGH</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:39.948" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:39.947" endtime="20210730 17:41:39.948"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:39.948" level="INFO">${payload} = {'password': 'ABCDEFGH'}</msg>
<status status="PASS" starttime="20210730 17:41:39.948" endtime="20210730 17:41:39.948"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:39.952" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:39.952" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:39.948" endtime="20210730 17:41:39.952"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:39.952" endtime="20210730 17:41:39.952"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:39.952" endtime="20210730 17:41:39.952"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:39.948" endtime="20210730 17:41:39.952"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:39.948" endtime="20210730 17:41:39.952"/>
</for>
<status status="FAIL" starttime="20210730 17:41:39.947" endtime="20210730 17:41:39.952"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:39.947" endtime="20210730 17:41:39.952"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:39.929" endtime="20210730 17:41:39.952"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:39.958" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:39.967" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:39.967" level="INFO">${pids} = 22047
22054
22058</msg>
<status status="PASS" starttime="20210730 17:41:39.953" endtime="20210730 17:41:39.967"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:39.968" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:39.968" endtime="20210730 17:41:39.968"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:39.969" level="INFO">${pids} = ['22047', '22054', '22058']</msg>
<status status="PASS" starttime="20210730 17:41:39.968" endtime="20210730 17:41:39.969"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22047</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:39.972" level="INFO">Running command 'kill 22047 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:39.969" endtime="20210730 17:41:39.972"/>
</kw>
<status status="PASS" starttime="20210730 17:41:39.969" endtime="20210730 17:41:39.972"/>
</iter>
<iter>
<var name="${pid}">22054</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:39.976" level="INFO">Running command 'kill 22054 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:39.973" endtime="20210730 17:41:39.976"/>
</kw>
<status status="PASS" starttime="20210730 17:41:39.972" endtime="20210730 17:41:39.976"/>
</iter>
<iter>
<var name="${pid}">22058</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:39.980" level="INFO">Running command 'kill 22058 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:39.977" endtime="20210730 17:41:39.980"/>
</kw>
<status status="PASS" starttime="20210730 17:41:39.976" endtime="20210730 17:41:39.980"/>
</iter>
<status status="PASS" starttime="20210730 17:41:39.969" endtime="20210730 17:41:39.980"/>
</for>
<status status="PASS" starttime="20210730 17:41:39.968" endtime="20210730 17:41:39.980"/>
</branch>
<status status="PASS" starttime="20210730 17:41:39.968" endtime="20210730 17:41:39.980"/>
</if>
<status status="PASS" starttime="20210730 17:41:39.953" endtime="20210730 17:41:39.981"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFGH'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:38.366" endtime="20210730 17:41:39.981">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t50" name="With Each Valid Token, Updating Password Of Each System User With ABCDEFGHJKLMNPRSTOÖUÜVYZ Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:39.985" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:39.997" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:39.997" level="INFO">${pids} = 22087</msg>
<status status="PASS" starttime="20210730 17:41:39.983" endtime="20210730 17:41:39.997"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:39.998" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:39.997" endtime="20210730 17:41:39.998"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:39.998" level="INFO">${pids} = ['22087']</msg>
<status status="PASS" starttime="20210730 17:41:39.998" endtime="20210730 17:41:39.998"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22087</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:40.002" level="INFO">Running command 'kill 22087 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:39.999" endtime="20210730 17:41:40.002"/>
</kw>
<status status="PASS" starttime="20210730 17:41:39.998" endtime="20210730 17:41:40.002"/>
</iter>
<status status="PASS" starttime="20210730 17:41:39.998" endtime="20210730 17:41:40.002"/>
</for>
<status status="PASS" starttime="20210730 17:41:39.998" endtime="20210730 17:41:40.002"/>
</branch>
<status status="PASS" starttime="20210730 17:41:39.998" endtime="20210730 17:41:40.002"/>
</if>
<status status="PASS" starttime="20210730 17:41:39.982" endtime="20210730 17:41:40.002"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:40.003" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:40.003" endtime="20210730 17:41:40.003"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:40.004" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:40.004" endtime="20210730 17:41:40.004"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:40.004" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:40.004" endtime="20210730 17:41:40.004"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:40.005" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:40.004" endtime="20210730 17:41:40.005"/>
</kw>
<msg timestamp="20210730 17:41:40.009" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:40.003" endtime="20210730 17:41:40.009"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:40.013" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:40.009" endtime="20210730 17:41:40.020"/>
</kw>
<status status="PASS" starttime="20210730 17:41:40.003" endtime="20210730 17:41:40.021"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:40.022" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:40.022" endtime="20210730 17:41:40.028"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:41.529" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:40.028" endtime="20210730 17:41:41.529"/>
</kw>
<status status="PASS" starttime="20210730 17:41:40.021" endtime="20210730 17:41:41.529"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:41.531" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:41.530" endtime="20210730 17:41:41.531"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:41.531" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:41.531" endtime="20210730 17:41:41.531"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:41.532" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:41.531" endtime="20210730 17:41:41.532"/>
</kw>
<msg timestamp="20210730 17:41:41.532" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:41.530" endtime="20210730 17:41:41.532"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:41.532" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:41.532" endtime="20210730 17:41:41.533"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.529" endtime="20210730 17:41:41.533"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:41.533" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:41.533" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:41.533" endtime="20210730 17:41:41.533"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.533" endtime="20210730 17:41:41.534"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:41.535" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:41.535" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:41.534" endtime="20210730 17:41:41.535"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:41.535" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:41.535" endtime="20210730 17:41:41.535"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:41.536" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:41.535" endtime="20210730 17:41:41.536"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:41.536" endtime="20210730 17:41:41.536"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:41.536" endtime="20210730 17:41:41.537"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.535" endtime="20210730 17:41:41.537"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:41.537" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:41.537" endtime="20210730 17:41:41.537"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:41.537" endtime="20210730 17:41:41.538"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:41.538" endtime="20210730 17:41:41.538"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.537" endtime="20210730 17:41:41.538"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:41.539" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:41.538" endtime="20210730 17:41:41.539"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:41.539" endtime="20210730 17:41:41.539"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:41.539" endtime="20210730 17:41:41.540"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.538" endtime="20210730 17:41:41.540"/>
</iter>
<status status="PASS" starttime="20210730 17:41:41.535" endtime="20210730 17:41:41.540"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:41.540" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:41.540" endtime="20210730 17:41:41.540"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.534" endtime="20210730 17:41:41.540"/>
</kw>
<status status="PASS" starttime="20210730 17:41:39.982" endtime="20210730 17:41:41.541"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:41.543" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:41.542" endtime="20210730 17:41:41.543"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:41.543" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210730 17:41:41.543" endtime="20210730 17:41:41.543"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:41.556" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:41.556" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:41.543" endtime="20210730 17:41:41.556"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:41.556" endtime="20210730 17:41:41.556"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:41.556" endtime="20210730 17:41:41.556"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:41.543" endtime="20210730 17:41:41.556"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:41.543" endtime="20210730 17:41:41.556"/>
</for>
<status status="FAIL" starttime="20210730 17:41:41.542" endtime="20210730 17:41:41.557"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:41.541" endtime="20210730 17:41:41.557"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:41.558" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:41.557" endtime="20210730 17:41:41.558"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:41.558" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210730 17:41:41.558" endtime="20210730 17:41:41.558"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:41.562" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:41.562" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:41.558" endtime="20210730 17:41:41.562"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:41.562" endtime="20210730 17:41:41.562"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:41.562" endtime="20210730 17:41:41.562"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:41.558" endtime="20210730 17:41:41.562"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:41.558" endtime="20210730 17:41:41.563"/>
</for>
<status status="FAIL" starttime="20210730 17:41:41.557" endtime="20210730 17:41:41.563"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:41.557" endtime="20210730 17:41:41.563"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCDEFGHJKLMNPRSTOÖUÜVYZ</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:41.564" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:41.563" endtime="20210730 17:41:41.564"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:41.564" level="INFO">${payload} = {'password': 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'}</msg>
<status status="PASS" starttime="20210730 17:41:41.564" endtime="20210730 17:41:41.564"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:41.568" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:41.568" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:41.564" endtime="20210730 17:41:41.568"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:41.568" endtime="20210730 17:41:41.568"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:41.568" endtime="20210730 17:41:41.568"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:41.564" endtime="20210730 17:41:41.568"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:41.564" endtime="20210730 17:41:41.568"/>
</for>
<status status="FAIL" starttime="20210730 17:41:41.563" endtime="20210730 17:41:41.568"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:41.563" endtime="20210730 17:41:41.569"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:41.541" endtime="20210730 17:41:41.569"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:41.589" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:41.600" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:41.601" level="INFO">${pids} = 22110
22117
22122</msg>
<status status="PASS" starttime="20210730 17:41:41.585" endtime="20210730 17:41:41.601"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:41.602" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:41.601" endtime="20210730 17:41:41.602"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:41.603" level="INFO">${pids} = ['22110', '22117', '22122']</msg>
<status status="PASS" starttime="20210730 17:41:41.602" endtime="20210730 17:41:41.603"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22110</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:41.607" level="INFO">Running command 'kill 22110 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:41.603" endtime="20210730 17:41:41.607"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.603" endtime="20210730 17:41:41.607"/>
</iter>
<iter>
<var name="${pid}">22117</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:41.611" level="INFO">Running command 'kill 22117 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:41.608" endtime="20210730 17:41:41.612"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.608" endtime="20210730 17:41:41.612"/>
</iter>
<iter>
<var name="${pid}">22122</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:41.616" level="INFO">Running command 'kill 22122 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:41.613" endtime="20210730 17:41:41.616"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.613" endtime="20210730 17:41:41.616"/>
</iter>
<status status="PASS" starttime="20210730 17:41:41.603" endtime="20210730 17:41:41.616"/>
</for>
<status status="PASS" starttime="20210730 17:41:41.602" endtime="20210730 17:41:41.616"/>
</branch>
<status status="PASS" starttime="20210730 17:41:41.602" endtime="20210730 17:41:41.616"/>
</if>
<status status="PASS" starttime="20210730 17:41:41.569" endtime="20210730 17:41:41.616"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCDEFGHJKLMNPRSTOÖUÜVYZ'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:39.981" endtime="20210730 17:41:41.617">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t51" name="With Each Valid Token, Updating Password Of Each System User With 0123456 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:41.621" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:41.631" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:41.632" level="INFO">${pids} = 22151</msg>
<status status="PASS" starttime="20210730 17:41:41.618" endtime="20210730 17:41:41.632"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:41.632" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:41.632" endtime="20210730 17:41:41.633"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:41.633" level="INFO">${pids} = ['22151']</msg>
<status status="PASS" starttime="20210730 17:41:41.633" endtime="20210730 17:41:41.633"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22151</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:41.637" level="INFO">Running command 'kill 22151 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:41.634" endtime="20210730 17:41:41.638"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.633" endtime="20210730 17:41:41.638"/>
</iter>
<status status="PASS" starttime="20210730 17:41:41.633" endtime="20210730 17:41:41.638"/>
</for>
<status status="PASS" starttime="20210730 17:41:41.633" endtime="20210730 17:41:41.638"/>
</branch>
<status status="PASS" starttime="20210730 17:41:41.633" endtime="20210730 17:41:41.638"/>
</if>
<status status="PASS" starttime="20210730 17:41:41.618" endtime="20210730 17:41:41.638"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:41.639" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:41.639" endtime="20210730 17:41:41.639"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:41.640" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:41.639" endtime="20210730 17:41:41.640"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:41.640" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:41.640" endtime="20210730 17:41:41.640"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:41.640" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:41.640" endtime="20210730 17:41:41.640"/>
</kw>
<msg timestamp="20210730 17:41:41.641" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:41.639" endtime="20210730 17:41:41.641"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:41.644" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:41.641" endtime="20210730 17:41:41.646"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.638" endtime="20210730 17:41:41.647"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:41.649" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:41.648" endtime="20210730 17:41:41.662"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:43.165" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:41.662" endtime="20210730 17:41:43.165"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.648" endtime="20210730 17:41:43.167"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:43.172" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:43.171" endtime="20210730 17:41:43.172"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:43.173" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:43.172" endtime="20210730 17:41:43.173"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:43.175" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:43.174" endtime="20210730 17:41:43.175"/>
</kw>
<msg timestamp="20210730 17:41:43.175" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:43.169" endtime="20210730 17:41:43.175"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:43.177" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:43.176" endtime="20210730 17:41:43.177"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.168" endtime="20210730 17:41:43.178"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:43.179" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:43.179" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:43.179" endtime="20210730 17:41:43.179"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.178" endtime="20210730 17:41:43.180"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:43.181" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:43.181" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:43.180" endtime="20210730 17:41:43.181"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:43.182" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:43.181" endtime="20210730 17:41:43.182"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:43.183" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:43.182" endtime="20210730 17:41:43.183"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:43.183" endtime="20210730 17:41:43.184"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:43.185" endtime="20210730 17:41:43.185"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.182" endtime="20210730 17:41:43.185"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:43.186" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:43.186" endtime="20210730 17:41:43.186"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:43.186" endtime="20210730 17:41:43.187"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:43.187" endtime="20210730 17:41:43.188"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.185" endtime="20210730 17:41:43.188"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:43.188" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:43.188" endtime="20210730 17:41:43.188"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:43.188" endtime="20210730 17:41:43.189"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:43.190" endtime="20210730 17:41:43.190"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.188" endtime="20210730 17:41:43.190"/>
</iter>
<status status="PASS" starttime="20210730 17:41:43.182" endtime="20210730 17:41:43.190"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:43.191" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:43.190" endtime="20210730 17:41:43.191"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.180" endtime="20210730 17:41:43.191"/>
</kw>
<status status="PASS" starttime="20210730 17:41:41.618" endtime="20210730 17:41:43.191"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:43.192" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:43.192" endtime="20210730 17:41:43.193"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:43.193" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210730 17:41:43.193" endtime="20210730 17:41:43.193"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:43.203" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:43.203" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:43.194" endtime="20210730 17:41:43.203"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:43.204" endtime="20210730 17:41:43.204"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:43.204" endtime="20210730 17:41:43.204"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:43.193" endtime="20210730 17:41:43.204"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:43.193" endtime="20210730 17:41:43.204"/>
</for>
<status status="FAIL" starttime="20210730 17:41:43.191" endtime="20210730 17:41:43.204"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:43.191" endtime="20210730 17:41:43.204"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:43.205" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:43.205" endtime="20210730 17:41:43.205"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:43.206" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210730 17:41:43.205" endtime="20210730 17:41:43.206"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:43.210" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:43.210" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:43.206" endtime="20210730 17:41:43.210"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:43.210" endtime="20210730 17:41:43.210"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:43.210" endtime="20210730 17:41:43.210"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:43.206" endtime="20210730 17:41:43.210"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:43.206" endtime="20210730 17:41:43.210"/>
</for>
<status status="FAIL" starttime="20210730 17:41:43.204" endtime="20210730 17:41:43.210"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:43.204" endtime="20210730 17:41:43.210"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:43.211" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:43.211" endtime="20210730 17:41:43.211"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:43.212" level="INFO">${payload} = {'password': '0123456'}</msg>
<status status="PASS" starttime="20210730 17:41:43.211" endtime="20210730 17:41:43.212"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:43.215" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:43.215" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:43.212" endtime="20210730 17:41:43.215"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:43.215" endtime="20210730 17:41:43.215"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:43.215" endtime="20210730 17:41:43.215"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:43.212" endtime="20210730 17:41:43.215"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:43.212" endtime="20210730 17:41:43.216"/>
</for>
<status status="FAIL" starttime="20210730 17:41:43.210" endtime="20210730 17:41:43.216"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:43.210" endtime="20210730 17:41:43.216"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:43.191" endtime="20210730 17:41:43.216"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:43.220" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:43.232" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:43.232" level="INFO">${pids} = 22174
22181
22185</msg>
<status status="PASS" starttime="20210730 17:41:43.216" endtime="20210730 17:41:43.232"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:43.233" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:43.233" endtime="20210730 17:41:43.233"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:43.234" level="INFO">${pids} = ['22174', '22181', '22185']</msg>
<status status="PASS" starttime="20210730 17:41:43.234" endtime="20210730 17:41:43.234"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22174</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:43.238" level="INFO">Running command 'kill 22174 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:43.234" endtime="20210730 17:41:43.238"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.234" endtime="20210730 17:41:43.239"/>
</iter>
<iter>
<var name="${pid}">22181</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:43.242" level="INFO">Running command 'kill 22181 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:43.239" endtime="20210730 17:41:43.244"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.239" endtime="20210730 17:41:43.244"/>
</iter>
<iter>
<var name="${pid}">22185</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:43.247" level="INFO">Running command 'kill 22185 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:43.245" endtime="20210730 17:41:43.248"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.244" endtime="20210730 17:41:43.248"/>
</iter>
<status status="PASS" starttime="20210730 17:41:43.234" endtime="20210730 17:41:43.248"/>
</for>
<status status="PASS" starttime="20210730 17:41:43.233" endtime="20210730 17:41:43.248"/>
</branch>
<status status="PASS" starttime="20210730 17:41:43.233" endtime="20210730 17:41:43.248"/>
</if>
<status status="PASS" starttime="20210730 17:41:43.216" endtime="20210730 17:41:43.248"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123456'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:41.617" endtime="20210730 17:41:43.248">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t52" name="With Each Valid Token, Updating Password Of Each System User With 01234567 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:43.253" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:43.264" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:43.264" level="INFO">${pids} = 22214</msg>
<status status="PASS" starttime="20210730 17:41:43.250" endtime="20210730 17:41:43.264"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:43.266" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:43.265" endtime="20210730 17:41:43.266"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:43.266" level="INFO">${pids} = ['22214']</msg>
<status status="PASS" starttime="20210730 17:41:43.266" endtime="20210730 17:41:43.266"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22214</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:43.270" level="INFO">Running command 'kill 22214 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:43.267" endtime="20210730 17:41:43.270"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.266" endtime="20210730 17:41:43.270"/>
</iter>
<status status="PASS" starttime="20210730 17:41:43.266" endtime="20210730 17:41:43.270"/>
</for>
<status status="PASS" starttime="20210730 17:41:43.266" endtime="20210730 17:41:43.270"/>
</branch>
<status status="PASS" starttime="20210730 17:41:43.266" endtime="20210730 17:41:43.270"/>
</if>
<status status="PASS" starttime="20210730 17:41:43.250" endtime="20210730 17:41:43.271"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:43.272" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:43.271" endtime="20210730 17:41:43.272"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:43.272" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:43.272" endtime="20210730 17:41:43.272"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:43.272" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:43.272" endtime="20210730 17:41:43.272"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:43.273" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:43.273" endtime="20210730 17:41:43.273"/>
</kw>
<msg timestamp="20210730 17:41:43.273" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:43.272" endtime="20210730 17:41:43.273"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:43.277" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:43.273" endtime="20210730 17:41:43.281"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.271" endtime="20210730 17:41:43.281"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:43.282" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:43.282" endtime="20210730 17:41:43.286"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:44.789" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:43.286" endtime="20210730 17:41:44.790"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.281" endtime="20210730 17:41:44.792"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:44.796" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:44.795" endtime="20210730 17:41:44.796"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:44.797" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:44.796" endtime="20210730 17:41:44.797"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:44.798" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:44.798" endtime="20210730 17:41:44.798"/>
</kw>
<msg timestamp="20210730 17:41:44.799" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:44.794" endtime="20210730 17:41:44.799"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:44.800" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:44.799" endtime="20210730 17:41:44.801"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.793" endtime="20210730 17:41:44.801"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:44.802" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:44.802" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:44.802" endtime="20210730 17:41:44.803"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.801" endtime="20210730 17:41:44.803"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:44.804" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:44.804" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:44.804" endtime="20210730 17:41:44.804"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:44.805" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:44.805" endtime="20210730 17:41:44.805"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:44.806" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:44.806" endtime="20210730 17:41:44.806"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:44.806" endtime="20210730 17:41:44.808"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:44.808" endtime="20210730 17:41:44.808"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.805" endtime="20210730 17:41:44.808"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:44.809" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:44.809" endtime="20210730 17:41:44.809"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:44.809" endtime="20210730 17:41:44.810"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:44.810" endtime="20210730 17:41:44.811"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.808" endtime="20210730 17:41:44.811"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:44.811" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:44.811" endtime="20210730 17:41:44.811"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:44.811" endtime="20210730 17:41:44.812"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:44.813" endtime="20210730 17:41:44.813"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.811" endtime="20210730 17:41:44.813"/>
</iter>
<status status="PASS" starttime="20210730 17:41:44.805" endtime="20210730 17:41:44.813"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:44.814" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:44.813" endtime="20210730 17:41:44.814"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.803" endtime="20210730 17:41:44.814"/>
</kw>
<status status="PASS" starttime="20210730 17:41:43.250" endtime="20210730 17:41:44.814"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:44.815" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:44.815" endtime="20210730 17:41:44.816"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:44.816" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210730 17:41:44.816" endtime="20210730 17:41:44.816"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:44.826" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:44.827" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:44.816" endtime="20210730 17:41:44.827"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:44.827" endtime="20210730 17:41:44.827"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:44.827" endtime="20210730 17:41:44.827"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:44.816" endtime="20210730 17:41:44.827"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:44.816" endtime="20210730 17:41:44.827"/>
</for>
<status status="FAIL" starttime="20210730 17:41:44.814" endtime="20210730 17:41:44.827"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:44.814" endtime="20210730 17:41:44.827"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:44.828" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:44.828" endtime="20210730 17:41:44.828"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:44.829" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210730 17:41:44.828" endtime="20210730 17:41:44.829"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:44.832" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:44.833" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:44.829" endtime="20210730 17:41:44.833"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:44.833" endtime="20210730 17:41:44.833"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:44.833" endtime="20210730 17:41:44.833"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:44.829" endtime="20210730 17:41:44.833"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:44.829" endtime="20210730 17:41:44.833"/>
</for>
<status status="FAIL" starttime="20210730 17:41:44.828" endtime="20210730 17:41:44.833"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:44.827" endtime="20210730 17:41:44.833"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:44.834" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:44.834" endtime="20210730 17:41:44.834"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:44.835" level="INFO">${payload} = {'password': '01234567'}</msg>
<status status="PASS" starttime="20210730 17:41:44.834" endtime="20210730 17:41:44.835"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:44.838" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:44.838" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:44.835" endtime="20210730 17:41:44.838"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:44.838" endtime="20210730 17:41:44.838"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:44.838" endtime="20210730 17:41:44.838"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:44.835" endtime="20210730 17:41:44.838"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:44.835" endtime="20210730 17:41:44.838"/>
</for>
<status status="FAIL" starttime="20210730 17:41:44.833" endtime="20210730 17:41:44.839"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:44.833" endtime="20210730 17:41:44.839"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:44.814" endtime="20210730 17:41:44.839"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:44.844" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:44.853" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:44.853" level="INFO">${pids} = 22237
22244
22252</msg>
<status status="PASS" starttime="20210730 17:41:44.839" endtime="20210730 17:41:44.853"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:44.854" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:44.853" endtime="20210730 17:41:44.854"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:44.855" level="INFO">${pids} = ['22237', '22244', '22252']</msg>
<status status="PASS" starttime="20210730 17:41:44.854" endtime="20210730 17:41:44.855"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22237</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:44.858" level="INFO">Running command 'kill 22237 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:44.855" endtime="20210730 17:41:44.859"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.855" endtime="20210730 17:41:44.859"/>
</iter>
<iter>
<var name="${pid}">22244</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:44.861" level="INFO">Running command 'kill 22244 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:44.859" endtime="20210730 17:41:44.862"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.859" endtime="20210730 17:41:44.862"/>
</iter>
<iter>
<var name="${pid}">22252</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:44.866" level="INFO">Running command 'kill 22252 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:44.862" endtime="20210730 17:41:44.866"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.862" endtime="20210730 17:41:44.866"/>
</iter>
<status status="PASS" starttime="20210730 17:41:44.855" endtime="20210730 17:41:44.866"/>
</for>
<status status="PASS" starttime="20210730 17:41:44.854" endtime="20210730 17:41:44.866"/>
</branch>
<status status="PASS" starttime="20210730 17:41:44.854" endtime="20210730 17:41:44.866"/>
</if>
<status status="PASS" starttime="20210730 17:41:44.839" endtime="20210730 17:41:44.867"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '01234567'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:43.249" endtime="20210730 17:41:44.867">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t53" name="With Each Valid Token, Updating Password Of Each System User With 01234567890123456789 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:44.871" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:44.886" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:44.886" level="INFO">${pids} = 22281</msg>
<status status="PASS" starttime="20210730 17:41:44.868" endtime="20210730 17:41:44.886"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:44.887" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:44.886" endtime="20210730 17:41:44.887"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:44.887" level="INFO">${pids} = ['22281']</msg>
<status status="PASS" starttime="20210730 17:41:44.887" endtime="20210730 17:41:44.887"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22281</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:44.898" level="INFO">Running command 'kill 22281 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:44.887" endtime="20210730 17:41:44.899"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.887" endtime="20210730 17:41:44.899"/>
</iter>
<status status="PASS" starttime="20210730 17:41:44.887" endtime="20210730 17:41:44.899"/>
</for>
<status status="PASS" starttime="20210730 17:41:44.887" endtime="20210730 17:41:44.899"/>
</branch>
<status status="PASS" starttime="20210730 17:41:44.887" endtime="20210730 17:41:44.899"/>
</if>
<status status="PASS" starttime="20210730 17:41:44.868" endtime="20210730 17:41:44.899"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:44.900" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:44.900" endtime="20210730 17:41:44.900"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:44.901" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:44.900" endtime="20210730 17:41:44.901"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:44.901" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:44.901" endtime="20210730 17:41:44.901"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:44.901" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:44.901" endtime="20210730 17:41:44.901"/>
</kw>
<msg timestamp="20210730 17:41:44.902" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:44.900" endtime="20210730 17:41:44.902"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:44.909" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:44.902" endtime="20210730 17:41:44.911"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.899" endtime="20210730 17:41:44.911"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:44.912" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:44.912" endtime="20210730 17:41:44.916"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:46.417" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:44.916" endtime="20210730 17:41:46.418"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.911" endtime="20210730 17:41:46.418"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:46.419" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:46.419" endtime="20210730 17:41:46.419"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:46.419" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:46.419" endtime="20210730 17:41:46.419"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:46.420" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:46.420" endtime="20210730 17:41:46.420"/>
</kw>
<msg timestamp="20210730 17:41:46.420" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:46.419" endtime="20210730 17:41:46.420"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:46.421" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:46.420" endtime="20210730 17:41:46.421"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.418" endtime="20210730 17:41:46.421"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:46.421" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:46.422" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:46.421" endtime="20210730 17:41:46.422"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.421" endtime="20210730 17:41:46.422"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:46.422" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:46.423" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:46.422" endtime="20210730 17:41:46.423"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:46.423" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:46.423" endtime="20210730 17:41:46.423"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:46.424" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:46.424" endtime="20210730 17:41:46.424"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:46.424" endtime="20210730 17:41:46.425"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:46.425" endtime="20210730 17:41:46.425"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.423" endtime="20210730 17:41:46.425"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:46.426" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:46.425" endtime="20210730 17:41:46.426"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:46.426" endtime="20210730 17:41:46.426"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:46.426" endtime="20210730 17:41:46.427"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.425" endtime="20210730 17:41:46.427"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:46.427" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:46.427" endtime="20210730 17:41:46.427"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:46.427" endtime="20210730 17:41:46.428"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:46.428" endtime="20210730 17:41:46.428"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.427" endtime="20210730 17:41:46.428"/>
</iter>
<status status="PASS" starttime="20210730 17:41:46.423" endtime="20210730 17:41:46.428"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:46.428" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:46.428" endtime="20210730 17:41:46.429"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.422" endtime="20210730 17:41:46.429"/>
</kw>
<status status="PASS" starttime="20210730 17:41:44.868" endtime="20210730 17:41:46.429"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:46.430" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:46.430" endtime="20210730 17:41:46.430"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:46.430" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210730 17:41:46.430" endtime="20210730 17:41:46.430"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:46.438" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:46.438" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:46.431" endtime="20210730 17:41:46.439"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:46.439" endtime="20210730 17:41:46.439"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:46.439" endtime="20210730 17:41:46.439"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:46.430" endtime="20210730 17:41:46.439"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:46.430" endtime="20210730 17:41:46.439"/>
</for>
<status status="FAIL" starttime="20210730 17:41:46.429" endtime="20210730 17:41:46.439"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:46.429" endtime="20210730 17:41:46.439"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:46.440" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:46.440" endtime="20210730 17:41:46.440"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:46.441" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210730 17:41:46.440" endtime="20210730 17:41:46.441"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:46.445" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:46.445" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:46.441" endtime="20210730 17:41:46.445"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:46.445" endtime="20210730 17:41:46.445"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:46.445" endtime="20210730 17:41:46.445"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:46.441" endtime="20210730 17:41:46.445"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:46.441" endtime="20210730 17:41:46.445"/>
</for>
<status status="FAIL" starttime="20210730 17:41:46.439" endtime="20210730 17:41:46.446"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:46.439" endtime="20210730 17:41:46.446"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=01234567890123456789</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:46.447" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:46.446" endtime="20210730 17:41:46.447"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:46.447" level="INFO">${payload} = {'password': '01234567890123456789'}</msg>
<status status="PASS" starttime="20210730 17:41:46.447" endtime="20210730 17:41:46.447"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:46.451" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:46.451" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:46.447" endtime="20210730 17:41:46.451"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:46.452" endtime="20210730 17:41:46.452"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:46.452" endtime="20210730 17:41:46.452"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:46.447" endtime="20210730 17:41:46.452"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:46.447" endtime="20210730 17:41:46.452"/>
</for>
<status status="FAIL" starttime="20210730 17:41:46.446" endtime="20210730 17:41:46.452"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:46.446" endtime="20210730 17:41:46.452"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:46.429" endtime="20210730 17:41:46.452"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:46.457" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:46.468" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:46.468" level="INFO">${pids} = 22304
22311
22316</msg>
<status status="PASS" starttime="20210730 17:41:46.453" endtime="20210730 17:41:46.468"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:46.469" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:46.469" endtime="20210730 17:41:46.470"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:46.470" level="INFO">${pids} = ['22304', '22311', '22316']</msg>
<status status="PASS" starttime="20210730 17:41:46.470" endtime="20210730 17:41:46.470"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22304</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:46.478" level="INFO">Running command 'kill 22304 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:46.471" endtime="20210730 17:41:46.479"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.471" endtime="20210730 17:41:46.479"/>
</iter>
<iter>
<var name="${pid}">22311</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:46.483" level="INFO">Running command 'kill 22311 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:46.479" endtime="20210730 17:41:46.483"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.479" endtime="20210730 17:41:46.483"/>
</iter>
<iter>
<var name="${pid}">22316</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:46.486" level="INFO">Running command 'kill 22316 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:46.484" endtime="20210730 17:41:46.487"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.483" endtime="20210730 17:41:46.487"/>
</iter>
<status status="PASS" starttime="20210730 17:41:46.470" endtime="20210730 17:41:46.487"/>
</for>
<status status="PASS" starttime="20210730 17:41:46.470" endtime="20210730 17:41:46.487"/>
</branch>
<status status="PASS" starttime="20210730 17:41:46.470" endtime="20210730 17:41:46.487"/>
</if>
<status status="PASS" starttime="20210730 17:41:46.452" endtime="20210730 17:41:46.487"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '01234567890123456789'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:44.867" endtime="20210730 17:41:46.487">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t54" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:46.494" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:46.503" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:46.503" level="INFO">${pids} = 22345</msg>
<status status="PASS" starttime="20210730 17:41:46.489" endtime="20210730 17:41:46.503"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:46.504" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:46.503" endtime="20210730 17:41:46.504"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:46.504" level="INFO">${pids} = ['22345']</msg>
<status status="PASS" starttime="20210730 17:41:46.504" endtime="20210730 17:41:46.504"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22345</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:46.509" level="INFO">Running command 'kill 22345 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:46.505" endtime="20210730 17:41:46.509"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.505" endtime="20210730 17:41:46.509"/>
</iter>
<status status="PASS" starttime="20210730 17:41:46.504" endtime="20210730 17:41:46.509"/>
</for>
<status status="PASS" starttime="20210730 17:41:46.504" endtime="20210730 17:41:46.509"/>
</branch>
<status status="PASS" starttime="20210730 17:41:46.504" endtime="20210730 17:41:46.509"/>
</if>
<status status="PASS" starttime="20210730 17:41:46.489" endtime="20210730 17:41:46.510"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:46.511" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:46.510" endtime="20210730 17:41:46.511"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:46.511" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:46.511" endtime="20210730 17:41:46.511"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:46.512" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:46.511" endtime="20210730 17:41:46.512"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:46.512" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:46.512" endtime="20210730 17:41:46.512"/>
</kw>
<msg timestamp="20210730 17:41:46.512" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:46.511" endtime="20210730 17:41:46.512"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:46.515" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:46.512" endtime="20210730 17:41:46.516"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.510" endtime="20210730 17:41:46.517"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:46.518" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:46.517" endtime="20210730 17:41:46.525"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:48.029" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:46.525" endtime="20210730 17:41:48.030"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.517" endtime="20210730 17:41:48.031"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:48.033" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:48.033" endtime="20210730 17:41:48.033"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:48.034" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:48.033" endtime="20210730 17:41:48.034"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:48.034" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:48.034" endtime="20210730 17:41:48.034"/>
</kw>
<msg timestamp="20210730 17:41:48.034" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:48.032" endtime="20210730 17:41:48.034"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:48.035" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:48.034" endtime="20210730 17:41:48.035"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.031" endtime="20210730 17:41:48.035"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:48.036" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:48.036" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:48.035" endtime="20210730 17:41:48.036"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.035" endtime="20210730 17:41:48.036"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:48.036" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:48.036" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:48.036" endtime="20210730 17:41:48.036"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:48.037" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:48.037" endtime="20210730 17:41:48.037"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:48.037" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:48.037" endtime="20210730 17:41:48.037"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:48.037" endtime="20210730 17:41:48.038"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:48.038" endtime="20210730 17:41:48.039"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.037" endtime="20210730 17:41:48.039"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:48.039" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:48.039" endtime="20210730 17:41:48.039"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:48.039" endtime="20210730 17:41:48.040"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:48.040" endtime="20210730 17:41:48.040"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.039" endtime="20210730 17:41:48.040"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:48.040" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:48.040" endtime="20210730 17:41:48.041"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:48.041" endtime="20210730 17:41:48.041"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:48.041" endtime="20210730 17:41:48.042"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.040" endtime="20210730 17:41:48.042"/>
</iter>
<status status="PASS" starttime="20210730 17:41:48.037" endtime="20210730 17:41:48.042"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:48.042" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:48.042" endtime="20210730 17:41:48.042"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.036" endtime="20210730 17:41:48.042"/>
</kw>
<status status="PASS" starttime="20210730 17:41:46.488" endtime="20210730 17:41:48.042"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:48.043" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:48.043" endtime="20210730 17:41:48.043"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:48.044" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210730 17:41:48.043" endtime="20210730 17:41:48.044"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:48.052" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:48.052" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:48.044" endtime="20210730 17:41:48.052"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:48.053" endtime="20210730 17:41:48.053"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:48.053" endtime="20210730 17:41:48.053"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:48.044" endtime="20210730 17:41:48.053"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:48.044" endtime="20210730 17:41:48.053"/>
</for>
<status status="FAIL" starttime="20210730 17:41:48.043" endtime="20210730 17:41:48.053"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:48.042" endtime="20210730 17:41:48.053"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:48.055" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:48.054" endtime="20210730 17:41:48.055"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:48.055" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210730 17:41:48.055" endtime="20210730 17:41:48.055"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:48.059" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:48.060" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:48.056" endtime="20210730 17:41:48.060"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:48.060" endtime="20210730 17:41:48.060"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:48.060" endtime="20210730 17:41:48.060"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:48.056" endtime="20210730 17:41:48.060"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:48.055" endtime="20210730 17:41:48.060"/>
</for>
<status status="FAIL" starttime="20210730 17:41:48.053" endtime="20210730 17:41:48.060"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:48.053" endtime="20210730 17:41:48.060"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:48.061" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:48.061" endtime="20210730 17:41:48.061"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:48.062" level="INFO">${payload} = {'password': '!?.?!.!'}</msg>
<status status="PASS" starttime="20210730 17:41:48.061" endtime="20210730 17:41:48.062"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:48.065" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:48.066" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:48.062" endtime="20210730 17:41:48.066"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:48.066" endtime="20210730 17:41:48.066"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:48.066" endtime="20210730 17:41:48.066"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:48.062" endtime="20210730 17:41:48.066"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:48.062" endtime="20210730 17:41:48.066"/>
</for>
<status status="FAIL" starttime="20210730 17:41:48.060" endtime="20210730 17:41:48.066"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:48.060" endtime="20210730 17:41:48.066"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:48.042" endtime="20210730 17:41:48.066"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:48.071" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:48.081" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:48.082" level="INFO">${pids} = 22368
22375
22379</msg>
<status status="PASS" starttime="20210730 17:41:48.067" endtime="20210730 17:41:48.082"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:48.082" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:48.082" endtime="20210730 17:41:48.082"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:48.083" level="INFO">${pids} = ['22368', '22375', '22379']</msg>
<status status="PASS" starttime="20210730 17:41:48.083" endtime="20210730 17:41:48.083"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22368</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:48.086" level="INFO">Running command 'kill 22368 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:48.083" endtime="20210730 17:41:48.087"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.083" endtime="20210730 17:41:48.087"/>
</iter>
<iter>
<var name="${pid}">22375</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:48.090" level="INFO">Running command 'kill 22375 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:48.087" endtime="20210730 17:41:48.091"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.087" endtime="20210730 17:41:48.091"/>
</iter>
<iter>
<var name="${pid}">22379</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:48.095" level="INFO">Running command 'kill 22379 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:48.091" endtime="20210730 17:41:48.095"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.091" endtime="20210730 17:41:48.095"/>
</iter>
<status status="PASS" starttime="20210730 17:41:48.083" endtime="20210730 17:41:48.095"/>
</for>
<status status="PASS" starttime="20210730 17:41:48.083" endtime="20210730 17:41:48.095"/>
</branch>
<status status="PASS" starttime="20210730 17:41:48.082" endtime="20210730 17:41:48.095"/>
</if>
<status status="PASS" starttime="20210730 17:41:48.066" endtime="20210730 17:41:48.096"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:46.488" endtime="20210730 17:41:48.096">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t55" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:48.103" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:48.116" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:48.116" level="INFO">${pids} = 22409</msg>
<status status="PASS" starttime="20210730 17:41:48.098" endtime="20210730 17:41:48.116"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:48.117" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:48.117" endtime="20210730 17:41:48.117"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:48.118" level="INFO">${pids} = ['22409']</msg>
<status status="PASS" starttime="20210730 17:41:48.118" endtime="20210730 17:41:48.118"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22409</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:48.130" level="INFO">Running command 'kill 22409 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:48.119" endtime="20210730 17:41:48.131"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.119" endtime="20210730 17:41:48.131"/>
</iter>
<status status="PASS" starttime="20210730 17:41:48.119" endtime="20210730 17:41:48.131"/>
</for>
<status status="PASS" starttime="20210730 17:41:48.118" endtime="20210730 17:41:48.131"/>
</branch>
<status status="PASS" starttime="20210730 17:41:48.117" endtime="20210730 17:41:48.131"/>
</if>
<status status="PASS" starttime="20210730 17:41:48.097" endtime="20210730 17:41:48.131"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:48.132" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:48.132" endtime="20210730 17:41:48.132"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:48.133" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:48.133" endtime="20210730 17:41:48.134"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:48.134" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:48.134" endtime="20210730 17:41:48.134"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:48.134" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:48.134" endtime="20210730 17:41:48.134"/>
</kw>
<msg timestamp="20210730 17:41:48.135" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:48.133" endtime="20210730 17:41:48.135"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:48.138" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:48.135" endtime="20210730 17:41:48.139"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.131" endtime="20210730 17:41:48.139"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:48.140" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:48.140" endtime="20210730 17:41:48.145"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:49.647" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:48.145" endtime="20210730 17:41:49.647"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.139" endtime="20210730 17:41:49.649"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:49.652" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:49.651" endtime="20210730 17:41:49.652"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:49.652" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:49.652" endtime="20210730 17:41:49.652"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:49.652" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:49.652" endtime="20210730 17:41:49.653"/>
</kw>
<msg timestamp="20210730 17:41:49.653" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:49.651" endtime="20210730 17:41:49.653"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:49.653" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:49.653" endtime="20210730 17:41:49.654"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.650" endtime="20210730 17:41:49.654"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:49.654" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:49.654" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:49.654" endtime="20210730 17:41:49.655"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.654" endtime="20210730 17:41:49.655"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:49.655" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:49.656" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:49.655" endtime="20210730 17:41:49.656"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:49.656" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:49.656" endtime="20210730 17:41:49.656"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:49.656" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:49.656" endtime="20210730 17:41:49.657"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:49.657" endtime="20210730 17:41:49.657"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:49.657" endtime="20210730 17:41:49.658"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.656" endtime="20210730 17:41:49.658"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:49.658" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:49.658" endtime="20210730 17:41:49.658"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:49.658" endtime="20210730 17:41:49.659"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:49.659" endtime="20210730 17:41:49.659"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.658" endtime="20210730 17:41:49.659"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:49.660" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:49.659" endtime="20210730 17:41:49.660"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:49.660" endtime="20210730 17:41:49.660"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:49.660" endtime="20210730 17:41:49.661"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.659" endtime="20210730 17:41:49.661"/>
</iter>
<status status="PASS" starttime="20210730 17:41:49.656" endtime="20210730 17:41:49.661"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:49.661" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:49.661" endtime="20210730 17:41:49.661"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.655" endtime="20210730 17:41:49.661"/>
</kw>
<status status="PASS" starttime="20210730 17:41:48.097" endtime="20210730 17:41:49.661"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:49.663" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:49.662" endtime="20210730 17:41:49.663"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:49.663" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210730 17:41:49.663" endtime="20210730 17:41:49.663"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:49.671" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:49.672" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:49.663" endtime="20210730 17:41:49.672"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:49.672" endtime="20210730 17:41:49.672"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:49.672" endtime="20210730 17:41:49.672"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:49.663" endtime="20210730 17:41:49.672"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:49.663" endtime="20210730 17:41:49.672"/>
</for>
<status status="FAIL" starttime="20210730 17:41:49.662" endtime="20210730 17:41:49.672"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:49.662" endtime="20210730 17:41:49.672"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:49.674" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:49.674" endtime="20210730 17:41:49.674"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:49.675" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210730 17:41:49.674" endtime="20210730 17:41:49.675"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:49.678" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:49.678" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:49.675" endtime="20210730 17:41:49.679"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:49.679" endtime="20210730 17:41:49.679"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:49.679" endtime="20210730 17:41:49.679"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:49.675" endtime="20210730 17:41:49.679"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:49.675" endtime="20210730 17:41:49.679"/>
</for>
<status status="FAIL" starttime="20210730 17:41:49.673" endtime="20210730 17:41:49.679"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:49.672" endtime="20210730 17:41:49.679"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:49.680" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:49.680" endtime="20210730 17:41:49.680"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:49.680" level="INFO">${payload} = {'password': '!?.?!.!?'}</msg>
<status status="PASS" starttime="20210730 17:41:49.680" endtime="20210730 17:41:49.680"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:49.683" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:49.684" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:49.681" endtime="20210730 17:41:49.684"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:49.684" endtime="20210730 17:41:49.684"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:49.684" endtime="20210730 17:41:49.684"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:49.680" endtime="20210730 17:41:49.684"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:49.680" endtime="20210730 17:41:49.684"/>
</for>
<status status="FAIL" starttime="20210730 17:41:49.679" endtime="20210730 17:41:49.684"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:49.679" endtime="20210730 17:41:49.684"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:49.662" endtime="20210730 17:41:49.684"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:49.688" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:49.699" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:49.699" level="INFO">${pids} = 22432
22439
22444</msg>
<status status="PASS" starttime="20210730 17:41:49.685" endtime="20210730 17:41:49.700"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:49.700" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:49.700" endtime="20210730 17:41:49.700"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:49.701" level="INFO">${pids} = ['22432', '22439', '22444']</msg>
<status status="PASS" starttime="20210730 17:41:49.701" endtime="20210730 17:41:49.701"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22432</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:49.704" level="INFO">Running command 'kill 22432 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:49.701" endtime="20210730 17:41:49.704"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.701" endtime="20210730 17:41:49.705"/>
</iter>
<iter>
<var name="${pid}">22439</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:49.710" level="INFO">Running command 'kill 22439 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:49.705" endtime="20210730 17:41:49.711"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.705" endtime="20210730 17:41:49.711"/>
</iter>
<iter>
<var name="${pid}">22444</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:49.715" level="INFO">Running command 'kill 22444 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:49.712" endtime="20210730 17:41:49.715"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.712" endtime="20210730 17:41:49.715"/>
</iter>
<status status="PASS" starttime="20210730 17:41:49.701" endtime="20210730 17:41:49.715"/>
</for>
<status status="PASS" starttime="20210730 17:41:49.701" endtime="20210730 17:41:49.715"/>
</branch>
<status status="PASS" starttime="20210730 17:41:49.700" endtime="20210730 17:41:49.715"/>
</if>
<status status="PASS" starttime="20210730 17:41:49.685" endtime="20210730 17:41:49.715"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:48.096" endtime="20210730 17:41:49.716">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t56" name="With Each Valid Token, Updating Password Of Each System User With !?.?!.!?!?.?!.!?!.!. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:49.723" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:49.733" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:49.733" level="INFO">${pids} = 22473</msg>
<status status="PASS" starttime="20210730 17:41:49.717" endtime="20210730 17:41:49.733"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:49.734" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:49.733" endtime="20210730 17:41:49.734"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:49.735" level="INFO">${pids} = ['22473']</msg>
<status status="PASS" starttime="20210730 17:41:49.734" endtime="20210730 17:41:49.735"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22473</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:49.748" level="INFO">Running command 'kill 22473 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:49.735" endtime="20210730 17:41:49.750"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.735" endtime="20210730 17:41:49.750"/>
</iter>
<status status="PASS" starttime="20210730 17:41:49.735" endtime="20210730 17:41:49.750"/>
</for>
<status status="PASS" starttime="20210730 17:41:49.734" endtime="20210730 17:41:49.750"/>
</branch>
<status status="PASS" starttime="20210730 17:41:49.734" endtime="20210730 17:41:49.750"/>
</if>
<status status="PASS" starttime="20210730 17:41:49.717" endtime="20210730 17:41:49.750"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:49.752" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:49.751" endtime="20210730 17:41:49.752"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:49.752" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:49.752" endtime="20210730 17:41:49.752"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:49.753" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:49.753" endtime="20210730 17:41:49.753"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:49.753" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:49.753" endtime="20210730 17:41:49.753"/>
</kw>
<msg timestamp="20210730 17:41:49.753" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:49.752" endtime="20210730 17:41:49.753"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:49.757" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:49.754" endtime="20210730 17:41:49.758"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.751" endtime="20210730 17:41:49.759"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:49.760" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:49.760" endtime="20210730 17:41:49.764"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:51.266" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:49.764" endtime="20210730 17:41:51.266"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.759" endtime="20210730 17:41:51.267"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:51.269" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:51.269" endtime="20210730 17:41:51.269"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:51.270" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:51.269" endtime="20210730 17:41:51.270"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:51.270" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:51.270" endtime="20210730 17:41:51.270"/>
</kw>
<msg timestamp="20210730 17:41:51.270" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:51.269" endtime="20210730 17:41:51.270"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:51.271" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:51.270" endtime="20210730 17:41:51.271"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.268" endtime="20210730 17:41:51.271"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:51.271" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:51.271" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:51.271" endtime="20210730 17:41:51.272"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.271" endtime="20210730 17:41:51.272"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:51.272" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:51.272" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:51.272" endtime="20210730 17:41:51.272"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:51.273" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:51.272" endtime="20210730 17:41:51.273"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:51.273" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:51.273" endtime="20210730 17:41:51.273"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:51.273" endtime="20210730 17:41:51.274"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:51.274" endtime="20210730 17:41:51.274"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.273" endtime="20210730 17:41:51.274"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:51.275" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:51.275" endtime="20210730 17:41:51.275"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:51.275" endtime="20210730 17:41:51.276"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:51.276" endtime="20210730 17:41:51.276"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.275" endtime="20210730 17:41:51.276"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:51.276" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:51.276" endtime="20210730 17:41:51.276"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:51.276" endtime="20210730 17:41:51.277"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:51.277" endtime="20210730 17:41:51.277"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.276" endtime="20210730 17:41:51.278"/>
</iter>
<status status="PASS" starttime="20210730 17:41:51.273" endtime="20210730 17:41:51.278"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:51.278" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:51.278" endtime="20210730 17:41:51.278"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.272" endtime="20210730 17:41:51.278"/>
</kw>
<status status="PASS" starttime="20210730 17:41:49.717" endtime="20210730 17:41:51.278"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:51.279" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:51.279" endtime="20210730 17:41:51.279"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:51.280" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210730 17:41:51.279" endtime="20210730 17:41:51.280"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:51.289" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:51.289" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:51.280" endtime="20210730 17:41:51.289"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:51.289" endtime="20210730 17:41:51.289"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:51.289" endtime="20210730 17:41:51.290"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:51.280" endtime="20210730 17:41:51.290"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:51.280" endtime="20210730 17:41:51.290"/>
</for>
<status status="FAIL" starttime="20210730 17:41:51.279" endtime="20210730 17:41:51.290"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:51.278" endtime="20210730 17:41:51.290"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:51.291" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:51.291" endtime="20210730 17:41:51.291"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:51.292" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210730 17:41:51.291" endtime="20210730 17:41:51.292"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:51.296" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:51.296" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:51.292" endtime="20210730 17:41:51.296"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:51.296" endtime="20210730 17:41:51.297"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:51.297" endtime="20210730 17:41:51.297"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:51.292" endtime="20210730 17:41:51.297"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:51.292" endtime="20210730 17:41:51.297"/>
</for>
<status status="FAIL" starttime="20210730 17:41:51.290" endtime="20210730 17:41:51.297"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:51.290" endtime="20210730 17:41:51.297"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=!?.?!.!?!?.?!.!?!.!.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:51.298" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:51.298" endtime="20210730 17:41:51.298"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:51.298" level="INFO">${payload} = {'password': '!?.?!.!?!?.?!.!?!.!.'}</msg>
<status status="PASS" starttime="20210730 17:41:51.298" endtime="20210730 17:41:51.298"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:51.302" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:51.302" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:51.299" endtime="20210730 17:41:51.302"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:51.302" endtime="20210730 17:41:51.302"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:51.302" endtime="20210730 17:41:51.302"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:51.299" endtime="20210730 17:41:51.302"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:51.298" endtime="20210730 17:41:51.303"/>
</for>
<status status="FAIL" starttime="20210730 17:41:51.297" endtime="20210730 17:41:51.303"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:51.297" endtime="20210730 17:41:51.303"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:51.278" endtime="20210730 17:41:51.303"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:51.307" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:51.316" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:51.317" level="INFO">${pids} = 22496
22503
22508</msg>
<status status="PASS" starttime="20210730 17:41:51.303" endtime="20210730 17:41:51.317"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:51.317" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:51.317" endtime="20210730 17:41:51.317"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:51.318" level="INFO">${pids} = ['22496', '22503', '22508']</msg>
<status status="PASS" starttime="20210730 17:41:51.318" endtime="20210730 17:41:51.318"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22496</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:51.322" level="INFO">Running command 'kill 22496 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:51.318" endtime="20210730 17:41:51.322"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.318" endtime="20210730 17:41:51.322"/>
</iter>
<iter>
<var name="${pid}">22503</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:51.326" level="INFO">Running command 'kill 22503 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:51.323" endtime="20210730 17:41:51.327"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.322" endtime="20210730 17:41:51.327"/>
</iter>
<iter>
<var name="${pid}">22508</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:51.338" level="INFO">Running command 'kill 22508 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:51.327" endtime="20210730 17:41:51.338"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.327" endtime="20210730 17:41:51.338"/>
</iter>
<status status="PASS" starttime="20210730 17:41:51.318" endtime="20210730 17:41:51.338"/>
</for>
<status status="PASS" starttime="20210730 17:41:51.318" endtime="20210730 17:41:51.338"/>
</branch>
<status status="PASS" starttime="20210730 17:41:51.318" endtime="20210730 17:41:51.338"/>
</if>
<status status="PASS" starttime="20210730 17:41:51.303" endtime="20210730 17:41:51.338"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '!?.?!.!?!?.?!.!?!.!.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:49.716" endtime="20210730 17:41:51.339">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t57" name="With Each Valid Token, Updating Password Of Each System User With abcdABC Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:51.344" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:51.354" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:51.354" level="INFO">${pids} = 22537</msg>
<status status="PASS" starttime="20210730 17:41:51.341" endtime="20210730 17:41:51.354"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:51.355" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:51.354" endtime="20210730 17:41:51.355"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:51.356" level="INFO">${pids} = ['22537']</msg>
<status status="PASS" starttime="20210730 17:41:51.355" endtime="20210730 17:41:51.356"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22537</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:51.359" level="INFO">Running command 'kill 22537 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:51.356" endtime="20210730 17:41:51.360"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.356" endtime="20210730 17:41:51.360"/>
</iter>
<status status="PASS" starttime="20210730 17:41:51.356" endtime="20210730 17:41:51.360"/>
</for>
<status status="PASS" starttime="20210730 17:41:51.355" endtime="20210730 17:41:51.360"/>
</branch>
<status status="PASS" starttime="20210730 17:41:51.355" endtime="20210730 17:41:51.360"/>
</if>
<status status="PASS" starttime="20210730 17:41:51.340" endtime="20210730 17:41:51.360"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:51.361" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:51.361" endtime="20210730 17:41:51.361"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:51.362" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:51.361" endtime="20210730 17:41:51.362"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:51.362" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:51.362" endtime="20210730 17:41:51.362"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:51.362" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:51.362" endtime="20210730 17:41:51.362"/>
</kw>
<msg timestamp="20210730 17:41:51.362" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:51.361" endtime="20210730 17:41:51.362"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:51.384" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:51.363" endtime="20210730 17:41:51.387"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.360" endtime="20210730 17:41:51.387"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:51.389" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:51.388" endtime="20210730 17:41:51.394"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:52.897" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:51.394" endtime="20210730 17:41:52.898"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.388" endtime="20210730 17:41:52.900"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:52.903" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:52.903" endtime="20210730 17:41:52.903"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:52.904" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:52.904" endtime="20210730 17:41:52.904"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:52.905" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:52.904" endtime="20210730 17:41:52.905"/>
</kw>
<msg timestamp="20210730 17:41:52.905" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:52.903" endtime="20210730 17:41:52.905"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:52.906" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:52.905" endtime="20210730 17:41:52.906"/>
</kw>
<status status="PASS" starttime="20210730 17:41:52.901" endtime="20210730 17:41:52.906"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:52.907" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:52.907" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:52.907" endtime="20210730 17:41:52.907"/>
</kw>
<status status="PASS" starttime="20210730 17:41:52.907" endtime="20210730 17:41:52.907"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:52.908" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:52.908" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:52.908" endtime="20210730 17:41:52.908"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:52.908" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:52.908" endtime="20210730 17:41:52.908"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:52.909" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:52.909" endtime="20210730 17:41:52.909"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:52.909" endtime="20210730 17:41:52.910"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:52.910" endtime="20210730 17:41:52.910"/>
</kw>
<status status="PASS" starttime="20210730 17:41:52.909" endtime="20210730 17:41:52.910"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:52.911" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:52.911" endtime="20210730 17:41:52.911"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:52.911" endtime="20210730 17:41:52.912"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:52.912" endtime="20210730 17:41:52.912"/>
</kw>
<status status="PASS" starttime="20210730 17:41:52.910" endtime="20210730 17:41:52.912"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:52.912" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:52.912" endtime="20210730 17:41:52.912"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:52.912" endtime="20210730 17:41:52.913"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:52.913" endtime="20210730 17:41:52.913"/>
</kw>
<status status="PASS" starttime="20210730 17:41:52.912" endtime="20210730 17:41:52.913"/>
</iter>
<status status="PASS" starttime="20210730 17:41:52.908" endtime="20210730 17:41:52.913"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:52.914" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:52.913" endtime="20210730 17:41:52.914"/>
</kw>
<status status="PASS" starttime="20210730 17:41:52.907" endtime="20210730 17:41:52.914"/>
</kw>
<status status="PASS" starttime="20210730 17:41:51.340" endtime="20210730 17:41:52.914"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:52.915" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:52.915" endtime="20210730 17:41:52.915"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:52.916" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210730 17:41:52.915" endtime="20210730 17:41:52.916"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:52.924" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:52.925" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:52.916" endtime="20210730 17:41:52.925"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:52.925" endtime="20210730 17:41:52.925"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:52.925" endtime="20210730 17:41:52.925"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:52.916" endtime="20210730 17:41:52.925"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:52.916" endtime="20210730 17:41:52.925"/>
</for>
<status status="FAIL" starttime="20210730 17:41:52.914" endtime="20210730 17:41:52.925"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:52.914" endtime="20210730 17:41:52.925"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:52.927" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:52.926" endtime="20210730 17:41:52.927"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:52.927" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210730 17:41:52.927" endtime="20210730 17:41:52.927"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:52.931" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:52.931" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:52.927" endtime="20210730 17:41:52.931"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:52.931" endtime="20210730 17:41:52.931"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:52.931" endtime="20210730 17:41:52.931"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:52.927" endtime="20210730 17:41:52.931"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:52.927" endtime="20210730 17:41:52.931"/>
</for>
<status status="FAIL" starttime="20210730 17:41:52.926" endtime="20210730 17:41:52.932"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:52.926" endtime="20210730 17:41:52.932"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABC</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:52.932" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:52.932" endtime="20210730 17:41:52.932"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:52.933" level="INFO">${payload} = {'password': 'abcdABC'}</msg>
<status status="PASS" starttime="20210730 17:41:52.933" endtime="20210730 17:41:52.933"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:52.937" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:52.937" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:52.933" endtime="20210730 17:41:52.937"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:52.938" endtime="20210730 17:41:52.938"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:52.938" endtime="20210730 17:41:52.938"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:52.933" endtime="20210730 17:41:52.938"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:52.933" endtime="20210730 17:41:52.938"/>
</for>
<status status="FAIL" starttime="20210730 17:41:52.932" endtime="20210730 17:41:52.938"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:52.932" endtime="20210730 17:41:52.938"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:52.914" endtime="20210730 17:41:52.938"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:52.943" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:52.953" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:52.953" level="INFO">${pids} = 22562
22571
22575</msg>
<status status="PASS" starttime="20210730 17:41:52.939" endtime="20210730 17:41:52.953"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:52.954" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:52.954" endtime="20210730 17:41:52.954"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:52.955" level="INFO">${pids} = ['22562', '22571', '22575']</msg>
<status status="PASS" starttime="20210730 17:41:52.955" endtime="20210730 17:41:52.955"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22562</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:52.958" level="INFO">Running command 'kill 22562 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:52.955" endtime="20210730 17:41:52.959"/>
</kw>
<status status="PASS" starttime="20210730 17:41:52.955" endtime="20210730 17:41:52.959"/>
</iter>
<iter>
<var name="${pid}">22571</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:52.962" level="INFO">Running command 'kill 22571 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:52.959" endtime="20210730 17:41:52.963"/>
</kw>
<status status="PASS" starttime="20210730 17:41:52.959" endtime="20210730 17:41:52.963"/>
</iter>
<iter>
<var name="${pid}">22575</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:52.967" level="INFO">Running command 'kill 22575 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:52.963" endtime="20210730 17:41:52.968"/>
</kw>
<status status="PASS" starttime="20210730 17:41:52.963" endtime="20210730 17:41:52.968"/>
</iter>
<status status="PASS" starttime="20210730 17:41:52.955" endtime="20210730 17:41:52.968"/>
</for>
<status status="PASS" starttime="20210730 17:41:52.954" endtime="20210730 17:41:52.968"/>
</branch>
<status status="PASS" starttime="20210730 17:41:52.954" endtime="20210730 17:41:52.968"/>
</if>
<status status="PASS" starttime="20210730 17:41:52.938" endtime="20210730 17:41:52.968"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABC'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:51.339" endtime="20210730 17:41:52.968">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t58" name="With Each Valid Token, Updating Password Of Each System User With abcdABCD Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:52.973" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:52.988" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:52.988" level="INFO">${pids} = 22651</msg>
<status status="PASS" starttime="20210730 17:41:52.970" endtime="20210730 17:41:52.988"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:52.989" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:52.988" endtime="20210730 17:41:52.989"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:52.990" level="INFO">${pids} = ['22651']</msg>
<status status="PASS" starttime="20210730 17:41:52.989" endtime="20210730 17:41:52.990"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22651</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:53.003" level="INFO">Running command 'kill 22651 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:52.990" endtime="20210730 17:41:53.003"/>
</kw>
<status status="PASS" starttime="20210730 17:41:52.990" endtime="20210730 17:41:53.003"/>
</iter>
<status status="PASS" starttime="20210730 17:41:52.990" endtime="20210730 17:41:53.003"/>
</for>
<status status="PASS" starttime="20210730 17:41:52.989" endtime="20210730 17:41:53.003"/>
</branch>
<status status="PASS" starttime="20210730 17:41:52.989" endtime="20210730 17:41:53.003"/>
</if>
<status status="PASS" starttime="20210730 17:41:52.970" endtime="20210730 17:41:53.004"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:53.005" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:53.005" endtime="20210730 17:41:53.005"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:53.006" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:53.006" endtime="20210730 17:41:53.006"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:53.006" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:53.006" endtime="20210730 17:41:53.006"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:53.007" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:53.006" endtime="20210730 17:41:53.007"/>
</kw>
<msg timestamp="20210730 17:41:53.007" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:53.005" endtime="20210730 17:41:53.007"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:53.010" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:53.007" endtime="20210730 17:41:53.011"/>
</kw>
<status status="PASS" starttime="20210730 17:41:53.004" endtime="20210730 17:41:53.012"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:53.013" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:53.012" endtime="20210730 17:41:53.016"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:54.517" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:53.016" endtime="20210730 17:41:54.517"/>
</kw>
<status status="PASS" starttime="20210730 17:41:53.012" endtime="20210730 17:41:54.517"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:54.519" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:54.518" endtime="20210730 17:41:54.519"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:54.519" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:54.519" endtime="20210730 17:41:54.519"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:54.519" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:54.519" endtime="20210730 17:41:54.520"/>
</kw>
<msg timestamp="20210730 17:41:54.520" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:54.518" endtime="20210730 17:41:54.520"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:54.520" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:54.520" endtime="20210730 17:41:54.521"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.518" endtime="20210730 17:41:54.521"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:54.521" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:54.521" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:54.521" endtime="20210730 17:41:54.521"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.521" endtime="20210730 17:41:54.521"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:54.522" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:54.522" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:54.522" endtime="20210730 17:41:54.522"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:54.522" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:54.522" endtime="20210730 17:41:54.522"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:54.523" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:54.523" endtime="20210730 17:41:54.523"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:54.523" endtime="20210730 17:41:54.524"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:54.524" endtime="20210730 17:41:54.525"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.523" endtime="20210730 17:41:54.525"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:54.525" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:54.525" endtime="20210730 17:41:54.525"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:54.525" endtime="20210730 17:41:54.526"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:54.526" endtime="20210730 17:41:54.526"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.525" endtime="20210730 17:41:54.526"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:54.527" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:54.526" endtime="20210730 17:41:54.527"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:54.527" endtime="20210730 17:41:54.527"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:54.527" endtime="20210730 17:41:54.528"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.526" endtime="20210730 17:41:54.528"/>
</iter>
<status status="PASS" starttime="20210730 17:41:54.522" endtime="20210730 17:41:54.528"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:54.528" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:54.528" endtime="20210730 17:41:54.528"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.522" endtime="20210730 17:41:54.528"/>
</kw>
<status status="PASS" starttime="20210730 17:41:52.970" endtime="20210730 17:41:54.528"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:54.529" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:54.529" endtime="20210730 17:41:54.529"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:54.530" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210730 17:41:54.529" endtime="20210730 17:41:54.530"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:54.538" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:54.539" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:54.530" endtime="20210730 17:41:54.539"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:54.539" endtime="20210730 17:41:54.539"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:54.539" endtime="20210730 17:41:54.539"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:54.530" endtime="20210730 17:41:54.539"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:54.530" endtime="20210730 17:41:54.539"/>
</for>
<status status="FAIL" starttime="20210730 17:41:54.529" endtime="20210730 17:41:54.539"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:54.529" endtime="20210730 17:41:54.540"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:54.541" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:54.540" endtime="20210730 17:41:54.541"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:54.541" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210730 17:41:54.541" endtime="20210730 17:41:54.541"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:54.545" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:54.546" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:54.542" endtime="20210730 17:41:54.546"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:54.546" endtime="20210730 17:41:54.546"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:54.546" endtime="20210730 17:41:54.546"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:54.542" endtime="20210730 17:41:54.546"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:54.542" endtime="20210730 17:41:54.546"/>
</for>
<status status="FAIL" starttime="20210730 17:41:54.540" endtime="20210730 17:41:54.546"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:54.540" endtime="20210730 17:41:54.546"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCD</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:54.547" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:54.547" endtime="20210730 17:41:54.547"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:54.548" level="INFO">${payload} = {'password': 'abcdABCD'}</msg>
<status status="PASS" starttime="20210730 17:41:54.547" endtime="20210730 17:41:54.548"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:54.551" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:54.551" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:54.548" endtime="20210730 17:41:54.551"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:54.552" endtime="20210730 17:41:54.552"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:54.552" endtime="20210730 17:41:54.552"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:54.548" endtime="20210730 17:41:54.552"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:54.548" endtime="20210730 17:41:54.552"/>
</for>
<status status="FAIL" starttime="20210730 17:41:54.546" endtime="20210730 17:41:54.552"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:54.546" endtime="20210730 17:41:54.552"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:54.528" endtime="20210730 17:41:54.552"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:54.563" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:54.572" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:54.572" level="INFO">${pids} = 22674
22681
22685</msg>
<status status="PASS" starttime="20210730 17:41:54.553" endtime="20210730 17:41:54.572"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:54.573" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:54.572" endtime="20210730 17:41:54.573"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:54.573" level="INFO">${pids} = ['22674', '22681', '22685']</msg>
<status status="PASS" starttime="20210730 17:41:54.573" endtime="20210730 17:41:54.573"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22674</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:54.578" level="INFO">Running command 'kill 22674 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:54.574" endtime="20210730 17:41:54.578"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.574" endtime="20210730 17:41:54.578"/>
</iter>
<iter>
<var name="${pid}">22681</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:54.581" level="INFO">Running command 'kill 22681 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:54.578" endtime="20210730 17:41:54.582"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.578" endtime="20210730 17:41:54.582"/>
</iter>
<iter>
<var name="${pid}">22685</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:54.586" level="INFO">Running command 'kill 22685 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:54.582" endtime="20210730 17:41:54.587"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.582" endtime="20210730 17:41:54.587"/>
</iter>
<status status="PASS" starttime="20210730 17:41:54.574" endtime="20210730 17:41:54.587"/>
</for>
<status status="PASS" starttime="20210730 17:41:54.573" endtime="20210730 17:41:54.587"/>
</branch>
<status status="PASS" starttime="20210730 17:41:54.573" endtime="20210730 17:41:54.587"/>
</if>
<status status="PASS" starttime="20210730 17:41:54.552" endtime="20210730 17:41:54.587"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABCD'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:52.969" endtime="20210730 17:41:54.587">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t59" name="With Each Valid Token, Updating Password Of Each System User With abcdABCDefgjklmnprstoö Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:54.593" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:54.603" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:54.603" level="INFO">${pids} = 22715</msg>
<status status="PASS" starttime="20210730 17:41:54.589" endtime="20210730 17:41:54.603"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:54.604" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:54.604" endtime="20210730 17:41:54.604"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:54.605" level="INFO">${pids} = ['22715']</msg>
<status status="PASS" starttime="20210730 17:41:54.604" endtime="20210730 17:41:54.605"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22715</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:54.608" level="INFO">Running command 'kill 22715 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:54.605" endtime="20210730 17:41:54.609"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.605" endtime="20210730 17:41:54.609"/>
</iter>
<status status="PASS" starttime="20210730 17:41:54.605" endtime="20210730 17:41:54.609"/>
</for>
<status status="PASS" starttime="20210730 17:41:54.604" endtime="20210730 17:41:54.609"/>
</branch>
<status status="PASS" starttime="20210730 17:41:54.604" endtime="20210730 17:41:54.609"/>
</if>
<status status="PASS" starttime="20210730 17:41:54.589" endtime="20210730 17:41:54.609"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:54.610" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:54.610" endtime="20210730 17:41:54.610"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:54.611" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:54.611" endtime="20210730 17:41:54.611"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:54.611" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:54.611" endtime="20210730 17:41:54.611"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:54.611" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:54.611" endtime="20210730 17:41:54.611"/>
</kw>
<msg timestamp="20210730 17:41:54.612" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:54.610" endtime="20210730 17:41:54.612"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:54.615" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:54.612" endtime="20210730 17:41:54.618"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.609" endtime="20210730 17:41:54.619"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:54.620" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:54.620" endtime="20210730 17:41:54.625"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:56.126" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:54.625" endtime="20210730 17:41:56.127"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.619" endtime="20210730 17:41:56.127"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:56.128" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:56.128" endtime="20210730 17:41:56.128"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:56.128" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:56.128" endtime="20210730 17:41:56.128"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:56.129" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:56.128" endtime="20210730 17:41:56.129"/>
</kw>
<msg timestamp="20210730 17:41:56.129" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:56.127" endtime="20210730 17:41:56.129"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:56.129" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:56.129" endtime="20210730 17:41:56.130"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.127" endtime="20210730 17:41:56.130"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:56.130" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:56.130" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:56.130" endtime="20210730 17:41:56.130"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.130" endtime="20210730 17:41:56.131"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:56.131" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:56.131" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:56.131" endtime="20210730 17:41:56.131"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:56.131" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:56.131" endtime="20210730 17:41:56.131"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:56.132" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:56.132" endtime="20210730 17:41:56.132"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:56.132" endtime="20210730 17:41:56.133"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:56.133" endtime="20210730 17:41:56.133"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.132" endtime="20210730 17:41:56.133"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:56.134" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:56.133" endtime="20210730 17:41:56.134"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:56.134" endtime="20210730 17:41:56.135"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:56.135" endtime="20210730 17:41:56.135"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.133" endtime="20210730 17:41:56.135"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:56.136" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:56.136" endtime="20210730 17:41:56.136"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:56.136" endtime="20210730 17:41:56.137"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:56.137" endtime="20210730 17:41:56.137"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.135" endtime="20210730 17:41:56.137"/>
</iter>
<status status="PASS" starttime="20210730 17:41:56.132" endtime="20210730 17:41:56.137"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:56.137" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:56.137" endtime="20210730 17:41:56.137"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.131" endtime="20210730 17:41:56.137"/>
</kw>
<status status="PASS" starttime="20210730 17:41:54.589" endtime="20210730 17:41:56.138"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:56.139" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:56.138" endtime="20210730 17:41:56.139"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:56.139" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210730 17:41:56.139" endtime="20210730 17:41:56.139"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:56.148" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:56.148" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:56.140" endtime="20210730 17:41:56.148"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:56.149" endtime="20210730 17:41:56.149"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:56.149" endtime="20210730 17:41:56.149"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:56.140" endtime="20210730 17:41:56.149"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:56.139" endtime="20210730 17:41:56.149"/>
</for>
<status status="FAIL" starttime="20210730 17:41:56.138" endtime="20210730 17:41:56.149"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:56.138" endtime="20210730 17:41:56.149"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:56.150" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:56.150" endtime="20210730 17:41:56.150"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:56.151" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210730 17:41:56.151" endtime="20210730 17:41:56.151"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:56.155" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:56.155" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:56.151" endtime="20210730 17:41:56.155"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:56.155" endtime="20210730 17:41:56.155"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:56.155" endtime="20210730 17:41:56.155"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:56.151" endtime="20210730 17:41:56.155"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:56.151" endtime="20210730 17:41:56.155"/>
</for>
<status status="FAIL" starttime="20210730 17:41:56.149" endtime="20210730 17:41:56.155"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:56.149" endtime="20210730 17:41:56.155"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdABCDefgjklmnprstoö</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:56.156" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:56.156" endtime="20210730 17:41:56.156"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:56.157" level="INFO">${payload} = {'password': 'abcdABCDefgjklmnprstoö'}</msg>
<status status="PASS" starttime="20210730 17:41:56.156" endtime="20210730 17:41:56.157"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:56.160" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:56.160" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:56.157" endtime="20210730 17:41:56.161"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:56.161" endtime="20210730 17:41:56.161"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:56.161" endtime="20210730 17:41:56.161"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:56.157" endtime="20210730 17:41:56.161"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:56.157" endtime="20210730 17:41:56.161"/>
</for>
<status status="FAIL" starttime="20210730 17:41:56.156" endtime="20210730 17:41:56.161"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:56.155" endtime="20210730 17:41:56.161"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:56.138" endtime="20210730 17:41:56.161"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:56.166" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:56.176" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:56.176" level="INFO">${pids} = 22738
22745
22750</msg>
<status status="PASS" starttime="20210730 17:41:56.162" endtime="20210730 17:41:56.176"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:56.177" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:56.177" endtime="20210730 17:41:56.177"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:56.178" level="INFO">${pids} = ['22738', '22745', '22750']</msg>
<status status="PASS" starttime="20210730 17:41:56.177" endtime="20210730 17:41:56.178"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22738</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:56.182" level="INFO">Running command 'kill 22738 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:56.178" endtime="20210730 17:41:56.182"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.178" endtime="20210730 17:41:56.182"/>
</iter>
<iter>
<var name="${pid}">22745</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:56.185" level="INFO">Running command 'kill 22745 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:56.182" endtime="20210730 17:41:56.186"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.182" endtime="20210730 17:41:56.186"/>
</iter>
<iter>
<var name="${pid}">22750</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:56.189" level="INFO">Running command 'kill 22750 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:56.186" endtime="20210730 17:41:56.189"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.186" endtime="20210730 17:41:56.189"/>
</iter>
<status status="PASS" starttime="20210730 17:41:56.178" endtime="20210730 17:41:56.190"/>
</for>
<status status="PASS" starttime="20210730 17:41:56.177" endtime="20210730 17:41:56.190"/>
</branch>
<status status="PASS" starttime="20210730 17:41:56.177" endtime="20210730 17:41:56.190"/>
</if>
<status status="PASS" starttime="20210730 17:41:56.162" endtime="20210730 17:41:56.190"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdABCDefgjklmnprstoö'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:54.588" endtime="20210730 17:41:56.190">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t60" name="With Each Valid Token, Updating Password Of Each System User With abcd012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:56.195" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:56.208" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:56.208" level="INFO">${pids} = 22780</msg>
<status status="PASS" starttime="20210730 17:41:56.192" endtime="20210730 17:41:56.208"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:56.209" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:56.208" endtime="20210730 17:41:56.209"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:56.209" level="INFO">${pids} = ['22780']</msg>
<status status="PASS" starttime="20210730 17:41:56.209" endtime="20210730 17:41:56.209"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22780</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:56.213" level="INFO">Running command 'kill 22780 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:56.209" endtime="20210730 17:41:56.213"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.209" endtime="20210730 17:41:56.213"/>
</iter>
<status status="PASS" starttime="20210730 17:41:56.209" endtime="20210730 17:41:56.213"/>
</for>
<status status="PASS" starttime="20210730 17:41:56.209" endtime="20210730 17:41:56.213"/>
</branch>
<status status="PASS" starttime="20210730 17:41:56.209" endtime="20210730 17:41:56.213"/>
</if>
<status status="PASS" starttime="20210730 17:41:56.192" endtime="20210730 17:41:56.216"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:56.217" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:56.217" endtime="20210730 17:41:56.217"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:56.218" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:56.217" endtime="20210730 17:41:56.218"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:56.219" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:56.219" endtime="20210730 17:41:56.219"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:56.219" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:56.219" endtime="20210730 17:41:56.219"/>
</kw>
<msg timestamp="20210730 17:41:56.219" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:56.217" endtime="20210730 17:41:56.219"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:56.230" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:56.220" endtime="20210730 17:41:56.232"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.216" endtime="20210730 17:41:56.232"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:56.234" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:56.233" endtime="20210730 17:41:56.237"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:57.739" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:56.237" endtime="20210730 17:41:57.739"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.232" endtime="20210730 17:41:57.740"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:57.746" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:57.745" endtime="20210730 17:41:57.746"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:57.748" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:57.747" endtime="20210730 17:41:57.748"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:57.750" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:57.748" endtime="20210730 17:41:57.750"/>
</kw>
<msg timestamp="20210730 17:41:57.750" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:57.743" endtime="20210730 17:41:57.750"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:57.752" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:57.751" endtime="20210730 17:41:57.752"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.741" endtime="20210730 17:41:57.753"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:57.754" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:57.754" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:57.754" endtime="20210730 17:41:57.755"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.753" endtime="20210730 17:41:57.755"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:57.756" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:57.756" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:57.755" endtime="20210730 17:41:57.756"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:57.757" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:57.756" endtime="20210730 17:41:57.757"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:57.758" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:57.757" endtime="20210730 17:41:57.758"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:57.758" endtime="20210730 17:41:57.760"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:57.760" endtime="20210730 17:41:57.761"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.757" endtime="20210730 17:41:57.761"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:57.761" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:57.761" endtime="20210730 17:41:57.761"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:57.761" endtime="20210730 17:41:57.763"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:57.763" endtime="20210730 17:41:57.763"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.761" endtime="20210730 17:41:57.763"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:57.764" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:57.763" endtime="20210730 17:41:57.764"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:57.764" endtime="20210730 17:41:57.765"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:57.765" endtime="20210730 17:41:57.765"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.763" endtime="20210730 17:41:57.765"/>
</iter>
<status status="PASS" starttime="20210730 17:41:57.757" endtime="20210730 17:41:57.765"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:57.766" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:57.766" endtime="20210730 17:41:57.766"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.755" endtime="20210730 17:41:57.766"/>
</kw>
<status status="PASS" starttime="20210730 17:41:56.191" endtime="20210730 17:41:57.766"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:57.768" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:57.767" endtime="20210730 17:41:57.768"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:57.768" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210730 17:41:57.768" endtime="20210730 17:41:57.768"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:57.778" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:57.778" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:57.769" endtime="20210730 17:41:57.778"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:57.779" endtime="20210730 17:41:57.779"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:57.779" endtime="20210730 17:41:57.779"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:57.769" endtime="20210730 17:41:57.779"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:57.768" endtime="20210730 17:41:57.779"/>
</for>
<status status="FAIL" starttime="20210730 17:41:57.767" endtime="20210730 17:41:57.779"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:57.767" endtime="20210730 17:41:57.779"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:57.780" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:57.780" endtime="20210730 17:41:57.780"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:57.781" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210730 17:41:57.780" endtime="20210730 17:41:57.781"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:57.785" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:57.785" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:57.781" endtime="20210730 17:41:57.785"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:57.785" endtime="20210730 17:41:57.785"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:57.785" endtime="20210730 17:41:57.785"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:57.781" endtime="20210730 17:41:57.785"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:57.781" endtime="20210730 17:41:57.785"/>
</for>
<status status="FAIL" starttime="20210730 17:41:57.779" endtime="20210730 17:41:57.785"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:57.779" endtime="20210730 17:41:57.785"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:57.786" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:57.786" endtime="20210730 17:41:57.786"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:57.787" level="INFO">${payload} = {'password': 'abcd012'}</msg>
<status status="PASS" starttime="20210730 17:41:57.786" endtime="20210730 17:41:57.787"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:57.790" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:57.790" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:57.787" endtime="20210730 17:41:57.790"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:57.790" endtime="20210730 17:41:57.791"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:57.791" endtime="20210730 17:41:57.791"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:57.787" endtime="20210730 17:41:57.791"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:57.787" endtime="20210730 17:41:57.791"/>
</for>
<status status="FAIL" starttime="20210730 17:41:57.786" endtime="20210730 17:41:57.791"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:57.786" endtime="20210730 17:41:57.791"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:57.767" endtime="20210730 17:41:57.791"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:57.796" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:57.807" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:57.807" level="INFO">${pids} = 22803
22810
22815</msg>
<status status="PASS" starttime="20210730 17:41:57.792" endtime="20210730 17:41:57.807"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:57.808" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:57.807" endtime="20210730 17:41:57.808"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:57.808" level="INFO">${pids} = ['22803', '22810', '22815']</msg>
<status status="PASS" starttime="20210730 17:41:57.808" endtime="20210730 17:41:57.808"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22803</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:57.811" level="INFO">Running command 'kill 22803 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:57.809" endtime="20210730 17:41:57.812"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.808" endtime="20210730 17:41:57.812"/>
</iter>
<iter>
<var name="${pid}">22810</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:57.815" level="INFO">Running command 'kill 22810 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:57.812" endtime="20210730 17:41:57.816"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.812" endtime="20210730 17:41:57.816"/>
</iter>
<iter>
<var name="${pid}">22815</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:57.819" level="INFO">Running command 'kill 22815 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:57.816" endtime="20210730 17:41:57.819"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.816" endtime="20210730 17:41:57.819"/>
</iter>
<status status="PASS" starttime="20210730 17:41:57.808" endtime="20210730 17:41:57.819"/>
</for>
<status status="PASS" starttime="20210730 17:41:57.808" endtime="20210730 17:41:57.819"/>
</branch>
<status status="PASS" starttime="20210730 17:41:57.808" endtime="20210730 17:41:57.819"/>
</if>
<status status="PASS" starttime="20210730 17:41:57.791" endtime="20210730 17:41:57.820"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:56.191" endtime="20210730 17:41:57.820">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t61" name="With Each Valid Token, Updating Password Of Each System User With abcd0123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:57.831" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:57.840" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:57.840" level="INFO">${pids} = 22844</msg>
<status status="PASS" starttime="20210730 17:41:57.823" endtime="20210730 17:41:57.840"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:57.841" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:57.840" endtime="20210730 17:41:57.841"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:57.841" level="INFO">${pids} = ['22844']</msg>
<status status="PASS" starttime="20210730 17:41:57.841" endtime="20210730 17:41:57.841"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22844</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:57.853" level="INFO">Running command 'kill 22844 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:57.842" endtime="20210730 17:41:57.854"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.842" endtime="20210730 17:41:57.854"/>
</iter>
<status status="PASS" starttime="20210730 17:41:57.842" endtime="20210730 17:41:57.854"/>
</for>
<status status="PASS" starttime="20210730 17:41:57.841" endtime="20210730 17:41:57.854"/>
</branch>
<status status="PASS" starttime="20210730 17:41:57.841" endtime="20210730 17:41:57.854"/>
</if>
<status status="PASS" starttime="20210730 17:41:57.822" endtime="20210730 17:41:57.854"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:57.856" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:57.855" endtime="20210730 17:41:57.856"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:57.856" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:57.856" endtime="20210730 17:41:57.856"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:57.857" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:57.856" endtime="20210730 17:41:57.857"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:57.857" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:57.857" endtime="20210730 17:41:57.857"/>
</kw>
<msg timestamp="20210730 17:41:57.857" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:57.856" endtime="20210730 17:41:57.857"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:57.861" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:57.858" endtime="20210730 17:41:57.862"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.855" endtime="20210730 17:41:57.863"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:57.864" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:57.863" endtime="20210730 17:41:57.867"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:41:59.369" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:57.867" endtime="20210730 17:41:59.370"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.863" endtime="20210730 17:41:59.371"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:59.373" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:59.373" endtime="20210730 17:41:59.373"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:59.374" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:59.374" endtime="20210730 17:41:59.374"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:59.374" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:59.374" endtime="20210730 17:41:59.374"/>
</kw>
<msg timestamp="20210730 17:41:59.375" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:59.373" endtime="20210730 17:41:59.375"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:41:59.375" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:41:59.375" endtime="20210730 17:41:59.376"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.372" endtime="20210730 17:41:59.376"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:41:59.376" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:41:59.376" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:41:59.376" endtime="20210730 17:41:59.377"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.376" endtime="20210730 17:41:59.377"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:41:59.377" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:41:59.378" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:41:59.377" endtime="20210730 17:41:59.378"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:41:59.378" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:41:59.378" endtime="20210730 17:41:59.378"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:59.379" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:59.379" endtime="20210730 17:41:59.379"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:59.379" endtime="20210730 17:41:59.380"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:59.380" endtime="20210730 17:41:59.380"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.379" endtime="20210730 17:41:59.380"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:59.381" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:59.380" endtime="20210730 17:41:59.381"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:59.381" endtime="20210730 17:41:59.382"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:59.382" endtime="20210730 17:41:59.382"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.380" endtime="20210730 17:41:59.382"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:59.382" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:41:59.382" endtime="20210730 17:41:59.382"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:41:59.383" endtime="20210730 17:41:59.383"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:41:59.383" endtime="20210730 17:41:59.384"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.382" endtime="20210730 17:41:59.384"/>
</iter>
<status status="PASS" starttime="20210730 17:41:59.378" endtime="20210730 17:41:59.384"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:41:59.384" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:41:59.384" endtime="20210730 17:41:59.384"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.377" endtime="20210730 17:41:59.384"/>
</kw>
<status status="PASS" starttime="20210730 17:41:57.822" endtime="20210730 17:41:59.384"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:59.385" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:41:59.385" endtime="20210730 17:41:59.385"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:59.386" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210730 17:41:59.386" endtime="20210730 17:41:59.386"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:59.395" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:59.395" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:59.386" endtime="20210730 17:41:59.395"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:59.395" endtime="20210730 17:41:59.395"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:59.395" endtime="20210730 17:41:59.395"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:59.386" endtime="20210730 17:41:59.395"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:59.386" endtime="20210730 17:41:59.395"/>
</for>
<status status="FAIL" starttime="20210730 17:41:59.385" endtime="20210730 17:41:59.396"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:59.384" endtime="20210730 17:41:59.396"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:59.397" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:41:59.396" endtime="20210730 17:41:59.397"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:59.397" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210730 17:41:59.397" endtime="20210730 17:41:59.397"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:59.401" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:59.401" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:59.397" endtime="20210730 17:41:59.401"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:59.401" endtime="20210730 17:41:59.401"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:59.401" endtime="20210730 17:41:59.402"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:59.397" endtime="20210730 17:41:59.402"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:59.397" endtime="20210730 17:41:59.402"/>
</for>
<status status="FAIL" starttime="20210730 17:41:59.396" endtime="20210730 17:41:59.402"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:59.396" endtime="20210730 17:41:59.402"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:59.403" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:41:59.402" endtime="20210730 17:41:59.403"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:41:59.403" level="INFO">${payload} = {'password': 'abcd0123'}</msg>
<status status="PASS" starttime="20210730 17:41:59.403" endtime="20210730 17:41:59.403"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:41:59.407" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:41:59.407" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:41:59.403" endtime="20210730 17:41:59.407"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:41:59.407" endtime="20210730 17:41:59.407"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:41:59.408" endtime="20210730 17:41:59.408"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:59.403" endtime="20210730 17:41:59.408"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:59.403" endtime="20210730 17:41:59.408"/>
</for>
<status status="FAIL" starttime="20210730 17:41:59.402" endtime="20210730 17:41:59.408"/>
</kw>
<status status="FAIL" starttime="20210730 17:41:59.402" endtime="20210730 17:41:59.408"/>
</iter>
<status status="FAIL" starttime="20210730 17:41:59.384" endtime="20210730 17:41:59.408"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:59.415" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:59.424" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:59.425" level="INFO">${pids} = 22867
22874
22878</msg>
<status status="PASS" starttime="20210730 17:41:59.410" endtime="20210730 17:41:59.425"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:59.425" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:59.425" endtime="20210730 17:41:59.426"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:59.427" level="INFO">${pids} = ['22867', '22874', '22878']</msg>
<status status="PASS" starttime="20210730 17:41:59.426" endtime="20210730 17:41:59.427"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22867</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:59.430" level="INFO">Running command 'kill 22867 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:59.427" endtime="20210730 17:41:59.431"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.427" endtime="20210730 17:41:59.431"/>
</iter>
<iter>
<var name="${pid}">22874</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:59.434" level="INFO">Running command 'kill 22874 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:59.431" endtime="20210730 17:41:59.434"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.431" endtime="20210730 17:41:59.434"/>
</iter>
<iter>
<var name="${pid}">22878</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:59.438" level="INFO">Running command 'kill 22878 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:59.435" endtime="20210730 17:41:59.438"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.434" endtime="20210730 17:41:59.438"/>
</iter>
<status status="PASS" starttime="20210730 17:41:59.427" endtime="20210730 17:41:59.438"/>
</for>
<status status="PASS" starttime="20210730 17:41:59.426" endtime="20210730 17:41:59.438"/>
</branch>
<status status="PASS" starttime="20210730 17:41:59.426" endtime="20210730 17:41:59.439"/>
</if>
<status status="PASS" starttime="20210730 17:41:59.408" endtime="20210730 17:41:59.439"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd0123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:57.821" endtime="20210730 17:41:59.439">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t62" name="With Each Valid Token, Updating Password Of Each System User With abcd0123456789defghjk4 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:41:59.444" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:41:59.455" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:41:59.455" level="INFO">${pids} = 22907</msg>
<status status="PASS" starttime="20210730 17:41:59.441" endtime="20210730 17:41:59.455"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:59.456" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:41:59.455" endtime="20210730 17:41:59.456"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:41:59.456" level="INFO">${pids} = ['22907']</msg>
<status status="PASS" starttime="20210730 17:41:59.456" endtime="20210730 17:41:59.456"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22907</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:59.460" level="INFO">Running command 'kill 22907 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:59.457" endtime="20210730 17:41:59.460"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.457" endtime="20210730 17:41:59.460"/>
</iter>
<status status="PASS" starttime="20210730 17:41:59.456" endtime="20210730 17:41:59.460"/>
</for>
<status status="PASS" starttime="20210730 17:41:59.456" endtime="20210730 17:41:59.460"/>
</branch>
<status status="PASS" starttime="20210730 17:41:59.456" endtime="20210730 17:41:59.460"/>
</if>
<status status="PASS" starttime="20210730 17:41:59.440" endtime="20210730 17:41:59.461"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:59.462" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:59.462" endtime="20210730 17:41:59.462"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:59.463" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:41:59.463" endtime="20210730 17:41:59.463"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:41:59.463" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:41:59.463" endtime="20210730 17:41:59.463"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:41:59.464" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:59.463" endtime="20210730 17:41:59.464"/>
</kw>
<msg timestamp="20210730 17:41:59.464" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:41:59.462" endtime="20210730 17:41:59.464"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:41:59.477" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:41:59.464" endtime="20210730 17:41:59.478"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.461" endtime="20210730 17:41:59.479"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:41:59.480" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:41:59.479" endtime="20210730 17:41:59.483"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:00.989" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:41:59.484" endtime="20210730 17:42:00.990"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.479" endtime="20210730 17:42:00.990"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:00.991" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:00.991" endtime="20210730 17:42:00.991"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:00.992" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:00.991" endtime="20210730 17:42:00.992"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:00.992" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:00.992" endtime="20210730 17:42:00.992"/>
</kw>
<msg timestamp="20210730 17:42:00.992" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:00.991" endtime="20210730 17:42:00.992"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:00.993" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:00.993" endtime="20210730 17:42:00.993"/>
</kw>
<status status="PASS" starttime="20210730 17:42:00.990" endtime="20210730 17:42:00.994"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:00.994" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:00.994" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:00.994" endtime="20210730 17:42:00.994"/>
</kw>
<status status="PASS" starttime="20210730 17:42:00.994" endtime="20210730 17:42:00.994"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:00.995" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:00.995" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:00.995" endtime="20210730 17:42:00.996"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:00.996" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:00.996" endtime="20210730 17:42:00.996"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:00.996" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:00.996" endtime="20210730 17:42:00.997"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:00.997" endtime="20210730 17:42:00.998"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:00.998" endtime="20210730 17:42:00.998"/>
</kw>
<status status="PASS" starttime="20210730 17:42:00.996" endtime="20210730 17:42:00.998"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:00.998" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:00.998" endtime="20210730 17:42:00.998"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:00.999" endtime="20210730 17:42:00.999"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:00.999" endtime="20210730 17:42:01.000"/>
</kw>
<status status="PASS" starttime="20210730 17:42:00.998" endtime="20210730 17:42:01.000"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:01.000" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:01.000" endtime="20210730 17:42:01.000"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:01.000" endtime="20210730 17:42:01.001"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:01.001" endtime="20210730 17:42:01.001"/>
</kw>
<status status="PASS" starttime="20210730 17:42:01.000" endtime="20210730 17:42:01.001"/>
</iter>
<status status="PASS" starttime="20210730 17:42:00.996" endtime="20210730 17:42:01.001"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:01.002" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:01.001" endtime="20210730 17:42:01.002"/>
</kw>
<status status="PASS" starttime="20210730 17:42:00.995" endtime="20210730 17:42:01.002"/>
</kw>
<status status="PASS" starttime="20210730 17:41:59.440" endtime="20210730 17:42:01.002"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:01.003" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:01.003" endtime="20210730 17:42:01.003"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:01.003" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210730 17:42:01.003" endtime="20210730 17:42:01.003"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:01.012" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:01.012" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:01.004" endtime="20210730 17:42:01.012"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:01.012" endtime="20210730 17:42:01.012"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:01.012" endtime="20210730 17:42:01.013"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:01.004" endtime="20210730 17:42:01.013"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:01.003" endtime="20210730 17:42:01.013"/>
</for>
<status status="FAIL" starttime="20210730 17:42:01.002" endtime="20210730 17:42:01.013"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:01.002" endtime="20210730 17:42:01.013"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:01.015" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:01.014" endtime="20210730 17:42:01.015"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:01.015" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210730 17:42:01.015" endtime="20210730 17:42:01.015"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:01.019" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:01.019" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:01.016" endtime="20210730 17:42:01.019"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:01.019" endtime="20210730 17:42:01.019"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:01.020" endtime="20210730 17:42:01.020"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:01.016" endtime="20210730 17:42:01.020"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:01.015" endtime="20210730 17:42:01.020"/>
</for>
<status status="FAIL" starttime="20210730 17:42:01.013" endtime="20210730 17:42:01.020"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:01.013" endtime="20210730 17:42:01.020"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd0123456789defghjk4</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:01.021" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:01.020" endtime="20210730 17:42:01.021"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:01.021" level="INFO">${payload} = {'password': 'abcd0123456789defghjk4'}</msg>
<status status="PASS" starttime="20210730 17:42:01.021" endtime="20210730 17:42:01.021"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:01.025" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:01.025" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:01.021" endtime="20210730 17:42:01.025"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:01.025" endtime="20210730 17:42:01.025"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:01.025" endtime="20210730 17:42:01.025"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:01.021" endtime="20210730 17:42:01.025"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:01.021" endtime="20210730 17:42:01.025"/>
</for>
<status status="FAIL" starttime="20210730 17:42:01.020" endtime="20210730 17:42:01.025"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:01.020" endtime="20210730 17:42:01.025"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:01.002" endtime="20210730 17:42:01.025"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:01.030" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:01.039" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:01.040" level="INFO">${pids} = 22930
22937
22942</msg>
<status status="PASS" starttime="20210730 17:42:01.026" endtime="20210730 17:42:01.040"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:01.041" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:01.040" endtime="20210730 17:42:01.041"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:01.042" level="INFO">${pids} = ['22930', '22937', '22942']</msg>
<status status="PASS" starttime="20210730 17:42:01.042" endtime="20210730 17:42:01.042"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22930</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:01.046" level="INFO">Running command 'kill 22930 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:01.043" endtime="20210730 17:42:01.046"/>
</kw>
<status status="PASS" starttime="20210730 17:42:01.042" endtime="20210730 17:42:01.046"/>
</iter>
<iter>
<var name="${pid}">22937</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:01.049" level="INFO">Running command 'kill 22937 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:01.047" endtime="20210730 17:42:01.050"/>
</kw>
<status status="PASS" starttime="20210730 17:42:01.046" endtime="20210730 17:42:01.050"/>
</iter>
<iter>
<var name="${pid}">22942</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:01.054" level="INFO">Running command 'kill 22942 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:01.050" endtime="20210730 17:42:01.054"/>
</kw>
<status status="PASS" starttime="20210730 17:42:01.050" endtime="20210730 17:42:01.054"/>
</iter>
<status status="PASS" starttime="20210730 17:42:01.042" endtime="20210730 17:42:01.054"/>
</for>
<status status="PASS" starttime="20210730 17:42:01.041" endtime="20210730 17:42:01.054"/>
</branch>
<status status="PASS" starttime="20210730 17:42:01.041" endtime="20210730 17:42:01.054"/>
</if>
<status status="PASS" starttime="20210730 17:42:01.026" endtime="20210730 17:42:01.055"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd0123456789defghjk4'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:41:59.439" endtime="20210730 17:42:01.055">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t63" name="With Each Valid Token, Updating Password Of Each System User With abcd!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:01.060" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:01.070" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:01.070" level="INFO">${pids} = 22972</msg>
<status status="PASS" starttime="20210730 17:42:01.057" endtime="20210730 17:42:01.070"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:01.071" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:01.071" endtime="20210730 17:42:01.071"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:01.072" level="INFO">${pids} = ['22972']</msg>
<status status="PASS" starttime="20210730 17:42:01.071" endtime="20210730 17:42:01.072"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22972</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:01.075" level="INFO">Running command 'kill 22972 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:01.072" endtime="20210730 17:42:01.076"/>
</kw>
<status status="PASS" starttime="20210730 17:42:01.072" endtime="20210730 17:42:01.076"/>
</iter>
<status status="PASS" starttime="20210730 17:42:01.072" endtime="20210730 17:42:01.076"/>
</for>
<status status="PASS" starttime="20210730 17:42:01.071" endtime="20210730 17:42:01.076"/>
</branch>
<status status="PASS" starttime="20210730 17:42:01.071" endtime="20210730 17:42:01.076"/>
</if>
<status status="PASS" starttime="20210730 17:42:01.056" endtime="20210730 17:42:01.077"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:01.078" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:01.077" endtime="20210730 17:42:01.078"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:01.078" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:01.078" endtime="20210730 17:42:01.078"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:01.079" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:01.078" endtime="20210730 17:42:01.079"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:01.080" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:01.080" endtime="20210730 17:42:01.080"/>
</kw>
<msg timestamp="20210730 17:42:01.081" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:01.078" endtime="20210730 17:42:01.081"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:01.094" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:01.081" endtime="20210730 17:42:01.095"/>
</kw>
<status status="PASS" starttime="20210730 17:42:01.077" endtime="20210730 17:42:01.096"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:01.097" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:01.096" endtime="20210730 17:42:01.101"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:02.603" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:01.101" endtime="20210730 17:42:02.603"/>
</kw>
<status status="PASS" starttime="20210730 17:42:01.096" endtime="20210730 17:42:02.604"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:02.608" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:02.608" endtime="20210730 17:42:02.608"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:02.608" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:02.608" endtime="20210730 17:42:02.608"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:02.609" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:02.608" endtime="20210730 17:42:02.609"/>
</kw>
<msg timestamp="20210730 17:42:02.609" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:02.607" endtime="20210730 17:42:02.609"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:02.609" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:02.609" endtime="20210730 17:42:02.610"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.605" endtime="20210730 17:42:02.610"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:02.610" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:02.610" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:02.610" endtime="20210730 17:42:02.610"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.610" endtime="20210730 17:42:02.611"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:02.611" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:02.611" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:02.611" endtime="20210730 17:42:02.611"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:02.612" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:02.612" endtime="20210730 17:42:02.612"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:02.612" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:02.612" endtime="20210730 17:42:02.612"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:02.612" endtime="20210730 17:42:02.613"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:02.613" endtime="20210730 17:42:02.614"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.612" endtime="20210730 17:42:02.614"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:02.614" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:02.614" endtime="20210730 17:42:02.614"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:02.614" endtime="20210730 17:42:02.615"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:02.615" endtime="20210730 17:42:02.615"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.614" endtime="20210730 17:42:02.615"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:02.616" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:02.616" endtime="20210730 17:42:02.616"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:02.616" endtime="20210730 17:42:02.616"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:02.617" endtime="20210730 17:42:02.617"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.615" endtime="20210730 17:42:02.617"/>
</iter>
<status status="PASS" starttime="20210730 17:42:02.612" endtime="20210730 17:42:02.617"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:02.617" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:02.617" endtime="20210730 17:42:02.617"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.611" endtime="20210730 17:42:02.617"/>
</kw>
<status status="PASS" starttime="20210730 17:42:01.056" endtime="20210730 17:42:02.617"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:02.619" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:02.618" endtime="20210730 17:42:02.619"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:02.619" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:02.619" endtime="20210730 17:42:02.619"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:02.628" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:02.628" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:02.619" endtime="20210730 17:42:02.628"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:02.628" endtime="20210730 17:42:02.629"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:02.629" endtime="20210730 17:42:02.629"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:02.619" endtime="20210730 17:42:02.629"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:02.619" endtime="20210730 17:42:02.629"/>
</for>
<status status="FAIL" starttime="20210730 17:42:02.618" endtime="20210730 17:42:02.629"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:02.618" endtime="20210730 17:42:02.629"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:02.630" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:02.630" endtime="20210730 17:42:02.630"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:02.631" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:02.630" endtime="20210730 17:42:02.631"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:02.635" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:02.635" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:02.631" endtime="20210730 17:42:02.635"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:02.635" endtime="20210730 17:42:02.635"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:02.635" endtime="20210730 17:42:02.635"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:02.631" endtime="20210730 17:42:02.635"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:02.631" endtime="20210730 17:42:02.635"/>
</for>
<status status="FAIL" starttime="20210730 17:42:02.629" endtime="20210730 17:42:02.635"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:02.629" endtime="20210730 17:42:02.636"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:02.636" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:02.636" endtime="20210730 17:42:02.636"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:02.637" level="INFO">${payload} = {'password': 'abcd!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:02.637" endtime="20210730 17:42:02.637"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:02.640" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:02.641" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:02.637" endtime="20210730 17:42:02.641"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:02.641" endtime="20210730 17:42:02.641"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:02.641" endtime="20210730 17:42:02.641"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:02.637" endtime="20210730 17:42:02.641"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:02.637" endtime="20210730 17:42:02.641"/>
</for>
<status status="FAIL" starttime="20210730 17:42:02.636" endtime="20210730 17:42:02.641"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:02.636" endtime="20210730 17:42:02.641"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:02.618" endtime="20210730 17:42:02.641"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:02.647" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:02.657" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:02.657" level="INFO">${pids} = 22995
23002
23006</msg>
<status status="PASS" starttime="20210730 17:42:02.642" endtime="20210730 17:42:02.657"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:02.658" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:02.658" endtime="20210730 17:42:02.658"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:02.659" level="INFO">${pids} = ['22995', '23002', '23006']</msg>
<status status="PASS" starttime="20210730 17:42:02.659" endtime="20210730 17:42:02.659"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">22995</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:02.662" level="INFO">Running command 'kill 22995 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:02.659" endtime="20210730 17:42:02.662"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.659" endtime="20210730 17:42:02.662"/>
</iter>
<iter>
<var name="${pid}">23002</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:02.666" level="INFO">Running command 'kill 23002 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:02.663" endtime="20210730 17:42:02.666"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.663" endtime="20210730 17:42:02.666"/>
</iter>
<iter>
<var name="${pid}">23006</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:02.670" level="INFO">Running command 'kill 23006 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:02.667" endtime="20210730 17:42:02.670"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.666" endtime="20210730 17:42:02.670"/>
</iter>
<status status="PASS" starttime="20210730 17:42:02.659" endtime="20210730 17:42:02.670"/>
</for>
<status status="PASS" starttime="20210730 17:42:02.658" endtime="20210730 17:42:02.670"/>
</branch>
<status status="PASS" starttime="20210730 17:42:02.658" endtime="20210730 17:42:02.670"/>
</if>
<status status="PASS" starttime="20210730 17:42:02.642" endtime="20210730 17:42:02.671"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:01.055" endtime="20210730 17:42:02.671">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t64" name="With Each Valid Token, Updating Password Of Each System User With abcd!?.! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:02.676" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:02.688" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:02.688" level="INFO">${pids} = 23035</msg>
<status status="PASS" starttime="20210730 17:42:02.672" endtime="20210730 17:42:02.688"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:02.689" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:02.688" endtime="20210730 17:42:02.689"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:02.690" level="INFO">${pids} = ['23035']</msg>
<status status="PASS" starttime="20210730 17:42:02.689" endtime="20210730 17:42:02.690"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23035</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:02.695" level="INFO">Running command 'kill 23035 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:02.690" endtime="20210730 17:42:02.696"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.690" endtime="20210730 17:42:02.696"/>
</iter>
<status status="PASS" starttime="20210730 17:42:02.690" endtime="20210730 17:42:02.696"/>
</for>
<status status="PASS" starttime="20210730 17:42:02.689" endtime="20210730 17:42:02.696"/>
</branch>
<status status="PASS" starttime="20210730 17:42:02.689" endtime="20210730 17:42:02.696"/>
</if>
<status status="PASS" starttime="20210730 17:42:02.672" endtime="20210730 17:42:02.697"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:02.698" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:02.697" endtime="20210730 17:42:02.698"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:02.698" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:02.698" endtime="20210730 17:42:02.698"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:02.699" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:02.699" endtime="20210730 17:42:02.699"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:02.700" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:02.699" endtime="20210730 17:42:02.700"/>
</kw>
<msg timestamp="20210730 17:42:02.700" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:02.698" endtime="20210730 17:42:02.700"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:02.709" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:02.700" endtime="20210730 17:42:02.710"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.697" endtime="20210730 17:42:02.711"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:02.712" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:02.711" endtime="20210730 17:42:02.716"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:04.218" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:02.716" endtime="20210730 17:42:04.219"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.711" endtime="20210730 17:42:04.220"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:04.223" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:04.223" endtime="20210730 17:42:04.223"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:04.224" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:04.223" endtime="20210730 17:42:04.224"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:04.224" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:04.224" endtime="20210730 17:42:04.224"/>
</kw>
<msg timestamp="20210730 17:42:04.224" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:04.222" endtime="20210730 17:42:04.224"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:04.225" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:04.224" endtime="20210730 17:42:04.225"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.221" endtime="20210730 17:42:04.225"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:04.226" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:04.226" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:04.226" endtime="20210730 17:42:04.226"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.225" endtime="20210730 17:42:04.226"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:04.227" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:04.227" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:04.227" endtime="20210730 17:42:04.227"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:04.227" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:04.227" endtime="20210730 17:42:04.227"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:04.228" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:04.228" endtime="20210730 17:42:04.228"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:04.228" endtime="20210730 17:42:04.229"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:04.229" endtime="20210730 17:42:04.229"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.228" endtime="20210730 17:42:04.229"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:04.230" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:04.229" endtime="20210730 17:42:04.230"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:04.230" endtime="20210730 17:42:04.230"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:04.230" endtime="20210730 17:42:04.231"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.229" endtime="20210730 17:42:04.231"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:04.231" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:04.231" endtime="20210730 17:42:04.231"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:04.231" endtime="20210730 17:42:04.232"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:04.232" endtime="20210730 17:42:04.232"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.231" endtime="20210730 17:42:04.232"/>
</iter>
<status status="PASS" starttime="20210730 17:42:04.227" endtime="20210730 17:42:04.232"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:04.233" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:04.232" endtime="20210730 17:42:04.233"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.226" endtime="20210730 17:42:04.233"/>
</kw>
<status status="PASS" starttime="20210730 17:42:02.672" endtime="20210730 17:42:04.233"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:04.234" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:04.234" endtime="20210730 17:42:04.234"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:04.234" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210730 17:42:04.234" endtime="20210730 17:42:04.234"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:04.244" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:04.246" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:04.235" endtime="20210730 17:42:04.246"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:04.246" endtime="20210730 17:42:04.246"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:04.246" endtime="20210730 17:42:04.246"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:04.234" endtime="20210730 17:42:04.246"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:04.234" endtime="20210730 17:42:04.246"/>
</for>
<status status="FAIL" starttime="20210730 17:42:04.233" endtime="20210730 17:42:04.247"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:04.233" endtime="20210730 17:42:04.247"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:04.248" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:04.247" endtime="20210730 17:42:04.248"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:04.248" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210730 17:42:04.248" endtime="20210730 17:42:04.248"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:04.252" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:04.252" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:04.248" endtime="20210730 17:42:04.252"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:04.252" endtime="20210730 17:42:04.252"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:04.252" endtime="20210730 17:42:04.252"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:04.248" endtime="20210730 17:42:04.252"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:04.248" endtime="20210730 17:42:04.252"/>
</for>
<status status="FAIL" starttime="20210730 17:42:04.247" endtime="20210730 17:42:04.252"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:04.247" endtime="20210730 17:42:04.253"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:04.253" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:04.253" endtime="20210730 17:42:04.253"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:04.254" level="INFO">${payload} = {'password': 'abcd!?.!'}</msg>
<status status="PASS" starttime="20210730 17:42:04.254" endtime="20210730 17:42:04.254"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:04.258" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:04.259" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:04.254" endtime="20210730 17:42:04.259"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:04.259" endtime="20210730 17:42:04.259"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:04.259" endtime="20210730 17:42:04.259"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:04.254" endtime="20210730 17:42:04.259"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:04.254" endtime="20210730 17:42:04.259"/>
</for>
<status status="FAIL" starttime="20210730 17:42:04.253" endtime="20210730 17:42:04.259"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:04.253" endtime="20210730 17:42:04.259"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:04.233" endtime="20210730 17:42:04.260"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:04.265" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:04.274" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:04.274" level="INFO">${pids} = 23058
23065
23071</msg>
<status status="PASS" starttime="20210730 17:42:04.260" endtime="20210730 17:42:04.274"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:04.275" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:04.275" endtime="20210730 17:42:04.275"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:04.276" level="INFO">${pids} = ['23058', '23065', '23071']</msg>
<status status="PASS" starttime="20210730 17:42:04.275" endtime="20210730 17:42:04.276"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23058</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:04.279" level="INFO">Running command 'kill 23058 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:04.276" endtime="20210730 17:42:04.280"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.276" endtime="20210730 17:42:04.280"/>
</iter>
<iter>
<var name="${pid}">23065</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:04.283" level="INFO">Running command 'kill 23065 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:04.280" endtime="20210730 17:42:04.283"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.280" endtime="20210730 17:42:04.283"/>
</iter>
<iter>
<var name="${pid}">23071</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:04.287" level="INFO">Running command 'kill 23071 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:04.284" endtime="20210730 17:42:04.287"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.284" endtime="20210730 17:42:04.287"/>
</iter>
<status status="PASS" starttime="20210730 17:42:04.276" endtime="20210730 17:42:04.287"/>
</for>
<status status="PASS" starttime="20210730 17:42:04.275" endtime="20210730 17:42:04.287"/>
</branch>
<status status="PASS" starttime="20210730 17:42:04.275" endtime="20210730 17:42:04.287"/>
</if>
<status status="PASS" starttime="20210730 17:42:04.260" endtime="20210730 17:42:04.288"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:02.671" endtime="20210730 17:42:04.288">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t65" name="With Each Valid Token, Updating Password Of Each System User With abcd!?.!abcd!?.!abcd?? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:04.297" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:04.306" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:04.306" level="INFO">${pids} = 23100</msg>
<status status="PASS" starttime="20210730 17:42:04.290" endtime="20210730 17:42:04.306"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:04.307" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:04.306" endtime="20210730 17:42:04.307"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:04.308" level="INFO">${pids} = ['23100']</msg>
<status status="PASS" starttime="20210730 17:42:04.307" endtime="20210730 17:42:04.308"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23100</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:04.322" level="INFO">Running command 'kill 23100 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:04.310" endtime="20210730 17:42:04.322"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.310" endtime="20210730 17:42:04.322"/>
</iter>
<status status="PASS" starttime="20210730 17:42:04.308" endtime="20210730 17:42:04.323"/>
</for>
<status status="PASS" starttime="20210730 17:42:04.307" endtime="20210730 17:42:04.323"/>
</branch>
<status status="PASS" starttime="20210730 17:42:04.307" endtime="20210730 17:42:04.323"/>
</if>
<status status="PASS" starttime="20210730 17:42:04.289" endtime="20210730 17:42:04.323"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:04.324" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:04.324" endtime="20210730 17:42:04.324"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:04.325" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:04.325" endtime="20210730 17:42:04.325"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:04.326" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:04.325" endtime="20210730 17:42:04.326"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:04.326" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:04.326" endtime="20210730 17:42:04.326"/>
</kw>
<msg timestamp="20210730 17:42:04.327" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:04.325" endtime="20210730 17:42:04.327"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:04.331" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:04.327" endtime="20210730 17:42:04.332"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.323" endtime="20210730 17:42:04.332"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:04.334" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:04.333" endtime="20210730 17:42:04.338"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:05.844" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:04.338" endtime="20210730 17:42:05.844"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.333" endtime="20210730 17:42:05.846"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:05.853" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:05.851" endtime="20210730 17:42:05.853"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:05.855" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:05.854" endtime="20210730 17:42:05.855"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:05.856" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:05.855" endtime="20210730 17:42:05.857"/>
</kw>
<msg timestamp="20210730 17:42:05.857" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:05.849" endtime="20210730 17:42:05.857"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:05.858" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:05.858" endtime="20210730 17:42:05.859"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.847" endtime="20210730 17:42:05.860"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:05.861" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:05.861" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:05.861" endtime="20210730 17:42:05.861"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.860" endtime="20210730 17:42:05.862"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:05.863" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:05.864" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:05.862" endtime="20210730 17:42:05.864"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:05.864" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:05.864" endtime="20210730 17:42:05.864"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:05.866" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:05.865" endtime="20210730 17:42:05.866"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:05.866" endtime="20210730 17:42:05.867"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:05.867" endtime="20210730 17:42:05.868"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.865" endtime="20210730 17:42:05.868"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:05.869" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:05.868" endtime="20210730 17:42:05.869"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:05.869" endtime="20210730 17:42:05.870"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:05.870" endtime="20210730 17:42:05.870"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.868" endtime="20210730 17:42:05.870"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:05.871" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:05.871" endtime="20210730 17:42:05.871"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:05.871" endtime="20210730 17:42:05.872"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:05.872" endtime="20210730 17:42:05.873"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.870" endtime="20210730 17:42:05.873"/>
</iter>
<status status="PASS" starttime="20210730 17:42:05.864" endtime="20210730 17:42:05.873"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:05.873" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:05.873" endtime="20210730 17:42:05.873"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.862" endtime="20210730 17:42:05.873"/>
</kw>
<status status="PASS" starttime="20210730 17:42:04.289" endtime="20210730 17:42:05.873"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:05.875" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:05.875" endtime="20210730 17:42:05.875"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:05.876" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210730 17:42:05.875" endtime="20210730 17:42:05.876"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:05.885" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:05.885" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:05.876" endtime="20210730 17:42:05.885"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:05.885" endtime="20210730 17:42:05.886"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:05.886" endtime="20210730 17:42:05.886"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:05.876" endtime="20210730 17:42:05.886"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:05.876" endtime="20210730 17:42:05.886"/>
</for>
<status status="FAIL" starttime="20210730 17:42:05.874" endtime="20210730 17:42:05.886"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:05.874" endtime="20210730 17:42:05.886"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:05.887" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:05.887" endtime="20210730 17:42:05.887"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:05.888" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210730 17:42:05.887" endtime="20210730 17:42:05.888"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:05.891" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:05.892" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:05.888" endtime="20210730 17:42:05.892"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:05.892" endtime="20210730 17:42:05.892"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:05.892" endtime="20210730 17:42:05.892"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:05.888" endtime="20210730 17:42:05.892"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:05.888" endtime="20210730 17:42:05.892"/>
</for>
<status status="FAIL" starttime="20210730 17:42:05.886" endtime="20210730 17:42:05.892"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:05.886" endtime="20210730 17:42:05.892"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcd!?.!abcd!?.!abcd??</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:05.893" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:05.893" endtime="20210730 17:42:05.893"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:05.894" level="INFO">${payload} = {'password': 'abcd!?.!abcd!?.!abcd??'}</msg>
<status status="PASS" starttime="20210730 17:42:05.893" endtime="20210730 17:42:05.894"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:05.897" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:05.897" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:05.894" endtime="20210730 17:42:05.897"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:05.898" endtime="20210730 17:42:05.898"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:05.898" endtime="20210730 17:42:05.898"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:05.894" endtime="20210730 17:42:05.898"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:05.894" endtime="20210730 17:42:05.898"/>
</for>
<status status="FAIL" starttime="20210730 17:42:05.892" endtime="20210730 17:42:05.898"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:05.892" endtime="20210730 17:42:05.898"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:05.874" endtime="20210730 17:42:05.898"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:05.902" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:05.913" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:05.913" level="INFO">${pids} = 23123
23130
23136</msg>
<status status="PASS" starttime="20210730 17:42:05.899" endtime="20210730 17:42:05.913"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:05.914" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:05.913" endtime="20210730 17:42:05.914"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:05.914" level="INFO">${pids} = ['23123', '23130', '23136']</msg>
<status status="PASS" starttime="20210730 17:42:05.914" endtime="20210730 17:42:05.914"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23123</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:05.918" level="INFO">Running command 'kill 23123 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:05.915" endtime="20210730 17:42:05.918"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.915" endtime="20210730 17:42:05.918"/>
</iter>
<iter>
<var name="${pid}">23130</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:05.922" level="INFO">Running command 'kill 23130 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:05.919" endtime="20210730 17:42:05.922"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.919" endtime="20210730 17:42:05.922"/>
</iter>
<iter>
<var name="${pid}">23136</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:05.926" level="INFO">Running command 'kill 23136 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:05.922" endtime="20210730 17:42:05.927"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.922" endtime="20210730 17:42:05.927"/>
</iter>
<status status="PASS" starttime="20210730 17:42:05.915" endtime="20210730 17:42:05.927"/>
</for>
<status status="PASS" starttime="20210730 17:42:05.914" endtime="20210730 17:42:05.927"/>
</branch>
<status status="PASS" starttime="20210730 17:42:05.914" endtime="20210730 17:42:05.927"/>
</if>
<status status="PASS" starttime="20210730 17:42:05.898" endtime="20210730 17:42:05.927"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcd!?.!abcd!?.!abcd??'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:04.288" endtime="20210730 17:42:05.927">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t66" name="With Each Valid Token, Updating Password Of Each System User With ABCD012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:05.932" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:05.943" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:05.943" level="INFO">${pids} = 23165</msg>
<status status="PASS" starttime="20210730 17:42:05.929" endtime="20210730 17:42:05.943"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:05.944" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:05.944" endtime="20210730 17:42:05.944"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:05.945" level="INFO">${pids} = ['23165']</msg>
<status status="PASS" starttime="20210730 17:42:05.945" endtime="20210730 17:42:05.945"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23165</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:05.948" level="INFO">Running command 'kill 23165 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:05.945" endtime="20210730 17:42:05.949"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.945" endtime="20210730 17:42:05.949"/>
</iter>
<status status="PASS" starttime="20210730 17:42:05.945" endtime="20210730 17:42:05.949"/>
</for>
<status status="PASS" starttime="20210730 17:42:05.945" endtime="20210730 17:42:05.949"/>
</branch>
<status status="PASS" starttime="20210730 17:42:05.944" endtime="20210730 17:42:05.949"/>
</if>
<status status="PASS" starttime="20210730 17:42:05.929" endtime="20210730 17:42:05.949"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:05.950" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:05.950" endtime="20210730 17:42:05.950"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:05.952" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:05.950" endtime="20210730 17:42:05.952"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:05.953" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:05.952" endtime="20210730 17:42:05.953"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:05.953" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:05.953" endtime="20210730 17:42:05.953"/>
</kw>
<msg timestamp="20210730 17:42:05.953" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:05.950" endtime="20210730 17:42:05.953"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:05.965" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:05.954" endtime="20210730 17:42:05.967"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.949" endtime="20210730 17:42:05.968"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:05.969" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:05.969" endtime="20210730 17:42:05.973"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:07.477" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:05.973" endtime="20210730 17:42:07.477"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.968" endtime="20210730 17:42:07.477"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:07.479" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:07.479" endtime="20210730 17:42:07.479"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:07.480" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:07.480" endtime="20210730 17:42:07.480"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:07.481" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:07.480" endtime="20210730 17:42:07.481"/>
</kw>
<msg timestamp="20210730 17:42:07.481" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:07.478" endtime="20210730 17:42:07.481"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:07.482" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:07.481" endtime="20210730 17:42:07.482"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.478" endtime="20210730 17:42:07.482"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:07.483" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:07.483" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:07.483" endtime="20210730 17:42:07.484"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.483" endtime="20210730 17:42:07.484"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:07.485" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:07.486" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:07.484" endtime="20210730 17:42:07.486"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:07.486" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:07.486" endtime="20210730 17:42:07.486"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:07.487" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:07.487" endtime="20210730 17:42:07.487"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:07.487" endtime="20210730 17:42:07.488"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:07.488" endtime="20210730 17:42:07.489"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.486" endtime="20210730 17:42:07.489"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:07.489" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:07.489" endtime="20210730 17:42:07.489"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:07.489" endtime="20210730 17:42:07.490"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:07.490" endtime="20210730 17:42:07.491"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.489" endtime="20210730 17:42:07.491"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:07.491" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:07.491" endtime="20210730 17:42:07.491"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:07.491" endtime="20210730 17:42:07.492"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:07.492" endtime="20210730 17:42:07.493"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.491" endtime="20210730 17:42:07.493"/>
</iter>
<status status="PASS" starttime="20210730 17:42:07.486" endtime="20210730 17:42:07.493"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:07.493" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:07.493" endtime="20210730 17:42:07.493"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.484" endtime="20210730 17:42:07.493"/>
</kw>
<status status="PASS" starttime="20210730 17:42:05.929" endtime="20210730 17:42:07.493"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:07.495" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:07.494" endtime="20210730 17:42:07.495"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:07.495" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210730 17:42:07.495" endtime="20210730 17:42:07.495"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:07.504" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:07.504" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:07.495" endtime="20210730 17:42:07.504"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:07.504" endtime="20210730 17:42:07.505"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:07.505" endtime="20210730 17:42:07.505"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:07.495" endtime="20210730 17:42:07.505"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:07.495" endtime="20210730 17:42:07.505"/>
</for>
<status status="FAIL" starttime="20210730 17:42:07.494" endtime="20210730 17:42:07.505"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:07.494" endtime="20210730 17:42:07.505"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:07.506" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:07.506" endtime="20210730 17:42:07.506"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:07.507" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210730 17:42:07.506" endtime="20210730 17:42:07.507"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:07.511" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:07.511" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:07.507" endtime="20210730 17:42:07.511"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:07.511" endtime="20210730 17:42:07.511"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:07.511" endtime="20210730 17:42:07.511"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:07.507" endtime="20210730 17:42:07.511"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:07.507" endtime="20210730 17:42:07.511"/>
</for>
<status status="FAIL" starttime="20210730 17:42:07.505" endtime="20210730 17:42:07.511"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:07.505" endtime="20210730 17:42:07.511"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:07.512" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:07.512" endtime="20210730 17:42:07.512"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:07.513" level="INFO">${payload} = {'password': 'ABCD012'}</msg>
<status status="PASS" starttime="20210730 17:42:07.512" endtime="20210730 17:42:07.513"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:07.516" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:07.516" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:07.513" endtime="20210730 17:42:07.516"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:07.516" endtime="20210730 17:42:07.516"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:07.517" endtime="20210730 17:42:07.517"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:07.513" endtime="20210730 17:42:07.517"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:07.513" endtime="20210730 17:42:07.517"/>
</for>
<status status="FAIL" starttime="20210730 17:42:07.512" endtime="20210730 17:42:07.517"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:07.512" endtime="20210730 17:42:07.517"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:07.494" endtime="20210730 17:42:07.517"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:07.525" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:07.536" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:07.536" level="INFO">${pids} = 23188
23195
23199</msg>
<status status="PASS" starttime="20210730 17:42:07.518" endtime="20210730 17:42:07.536"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:07.537" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:07.537" endtime="20210730 17:42:07.537"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:07.538" level="INFO">${pids} = ['23188', '23195', '23199']</msg>
<status status="PASS" starttime="20210730 17:42:07.537" endtime="20210730 17:42:07.538"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23188</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:07.542" level="INFO">Running command 'kill 23188 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:07.538" endtime="20210730 17:42:07.543"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.538" endtime="20210730 17:42:07.543"/>
</iter>
<iter>
<var name="${pid}">23195</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:07.547" level="INFO">Running command 'kill 23195 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:07.544" endtime="20210730 17:42:07.547"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.543" endtime="20210730 17:42:07.547"/>
</iter>
<iter>
<var name="${pid}">23199</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:07.551" level="INFO">Running command 'kill 23199 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:07.548" endtime="20210730 17:42:07.551"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.548" endtime="20210730 17:42:07.551"/>
</iter>
<status status="PASS" starttime="20210730 17:42:07.538" endtime="20210730 17:42:07.551"/>
</for>
<status status="PASS" starttime="20210730 17:42:07.537" endtime="20210730 17:42:07.551"/>
</branch>
<status status="PASS" starttime="20210730 17:42:07.537" endtime="20210730 17:42:07.552"/>
</if>
<status status="PASS" starttime="20210730 17:42:07.517" endtime="20210730 17:42:07.552"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:05.928" endtime="20210730 17:42:07.552">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t67" name="With Each Valid Token, Updating Password Of Each System User With ABCD0123 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:07.557" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:07.568" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:07.568" level="INFO">${pids} = 23228</msg>
<status status="PASS" starttime="20210730 17:42:07.554" endtime="20210730 17:42:07.568"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:07.569" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:07.568" endtime="20210730 17:42:07.569"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:07.570" level="INFO">${pids} = ['23228']</msg>
<status status="PASS" starttime="20210730 17:42:07.569" endtime="20210730 17:42:07.570"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23228</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:07.573" level="INFO">Running command 'kill 23228 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:07.570" endtime="20210730 17:42:07.573"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.570" endtime="20210730 17:42:07.573"/>
</iter>
<status status="PASS" starttime="20210730 17:42:07.570" endtime="20210730 17:42:07.573"/>
</for>
<status status="PASS" starttime="20210730 17:42:07.569" endtime="20210730 17:42:07.574"/>
</branch>
<status status="PASS" starttime="20210730 17:42:07.569" endtime="20210730 17:42:07.574"/>
</if>
<status status="PASS" starttime="20210730 17:42:07.554" endtime="20210730 17:42:07.574"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:07.575" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:07.575" endtime="20210730 17:42:07.575"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:07.576" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:07.575" endtime="20210730 17:42:07.576"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:07.576" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:07.576" endtime="20210730 17:42:07.576"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:07.576" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:07.576" endtime="20210730 17:42:07.576"/>
</kw>
<msg timestamp="20210730 17:42:07.577" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:07.575" endtime="20210730 17:42:07.577"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:07.580" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:07.577" endtime="20210730 17:42:07.583"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.574" endtime="20210730 17:42:07.583"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:07.585" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:07.584" endtime="20210730 17:42:07.589"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:09.095" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:07.589" endtime="20210730 17:42:09.095"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.583" endtime="20210730 17:42:09.096"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:09.100" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:09.099" endtime="20210730 17:42:09.100"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:09.100" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:09.100" endtime="20210730 17:42:09.100"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:09.100" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:09.100" endtime="20210730 17:42:09.101"/>
</kw>
<msg timestamp="20210730 17:42:09.101" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:09.099" endtime="20210730 17:42:09.101"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:09.101" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:09.101" endtime="20210730 17:42:09.102"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.097" endtime="20210730 17:42:09.102"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:09.102" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:09.102" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:09.102" endtime="20210730 17:42:09.102"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.102" endtime="20210730 17:42:09.103"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:09.103" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:09.103" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:09.103" endtime="20210730 17:42:09.103"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:09.104" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:09.103" endtime="20210730 17:42:09.104"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:09.104" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:09.104" endtime="20210730 17:42:09.104"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:09.104" endtime="20210730 17:42:09.105"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:09.105" endtime="20210730 17:42:09.105"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.104" endtime="20210730 17:42:09.105"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:09.106" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:09.106" endtime="20210730 17:42:09.106"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:09.106" endtime="20210730 17:42:09.107"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:09.107" endtime="20210730 17:42:09.107"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.106" endtime="20210730 17:42:09.107"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:09.108" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:09.107" endtime="20210730 17:42:09.108"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:09.108" endtime="20210730 17:42:09.108"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:09.108" endtime="20210730 17:42:09.109"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.107" endtime="20210730 17:42:09.109"/>
</iter>
<status status="PASS" starttime="20210730 17:42:09.104" endtime="20210730 17:42:09.109"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:09.109" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:09.109" endtime="20210730 17:42:09.109"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.103" endtime="20210730 17:42:09.110"/>
</kw>
<status status="PASS" starttime="20210730 17:42:07.554" endtime="20210730 17:42:09.110"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:09.111" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:09.111" endtime="20210730 17:42:09.111"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:09.111" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210730 17:42:09.111" endtime="20210730 17:42:09.111"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:09.120" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:09.123" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:09.112" endtime="20210730 17:42:09.123"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:09.123" endtime="20210730 17:42:09.124"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:09.124" endtime="20210730 17:42:09.124"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:09.111" endtime="20210730 17:42:09.124"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:09.111" endtime="20210730 17:42:09.124"/>
</for>
<status status="FAIL" starttime="20210730 17:42:09.110" endtime="20210730 17:42:09.124"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:09.110" endtime="20210730 17:42:09.124"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:09.125" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:09.125" endtime="20210730 17:42:09.125"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:09.126" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210730 17:42:09.125" endtime="20210730 17:42:09.126"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:09.130" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:09.131" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:09.126" endtime="20210730 17:42:09.131"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:09.131" endtime="20210730 17:42:09.131"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:09.131" endtime="20210730 17:42:09.131"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:09.126" endtime="20210730 17:42:09.131"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:09.126" endtime="20210730 17:42:09.131"/>
</for>
<status status="FAIL" starttime="20210730 17:42:09.124" endtime="20210730 17:42:09.131"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:09.124" endtime="20210730 17:42:09.131"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:09.132" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:09.132" endtime="20210730 17:42:09.132"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:09.132" level="INFO">${payload} = {'password': 'ABCD0123'}</msg>
<status status="PASS" starttime="20210730 17:42:09.132" endtime="20210730 17:42:09.132"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:09.136" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:09.137" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:09.133" endtime="20210730 17:42:09.137"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:09.137" endtime="20210730 17:42:09.137"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:09.137" endtime="20210730 17:42:09.137"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:09.133" endtime="20210730 17:42:09.137"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:09.133" endtime="20210730 17:42:09.137"/>
</for>
<status status="FAIL" starttime="20210730 17:42:09.131" endtime="20210730 17:42:09.137"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:09.131" endtime="20210730 17:42:09.137"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:09.110" endtime="20210730 17:42:09.137"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:09.144" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:09.153" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:09.153" level="INFO">${pids} = 23251
23258
23262</msg>
<status status="PASS" starttime="20210730 17:42:09.139" endtime="20210730 17:42:09.153"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:09.154" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:09.153" endtime="20210730 17:42:09.154"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:09.155" level="INFO">${pids} = ['23251', '23258', '23262']</msg>
<status status="PASS" starttime="20210730 17:42:09.154" endtime="20210730 17:42:09.155"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23251</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:09.158" level="INFO">Running command 'kill 23251 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:09.155" endtime="20210730 17:42:09.159"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.155" endtime="20210730 17:42:09.159"/>
</iter>
<iter>
<var name="${pid}">23258</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:09.162" level="INFO">Running command 'kill 23258 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:09.159" endtime="20210730 17:42:09.163"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.159" endtime="20210730 17:42:09.163"/>
</iter>
<iter>
<var name="${pid}">23262</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:09.169" level="INFO">Running command 'kill 23262 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:09.164" endtime="20210730 17:42:09.169"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.164" endtime="20210730 17:42:09.169"/>
</iter>
<status status="PASS" starttime="20210730 17:42:09.155" endtime="20210730 17:42:09.170"/>
</for>
<status status="PASS" starttime="20210730 17:42:09.154" endtime="20210730 17:42:09.170"/>
</branch>
<status status="PASS" starttime="20210730 17:42:09.154" endtime="20210730 17:42:09.170"/>
</if>
<status status="PASS" starttime="20210730 17:42:09.138" endtime="20210730 17:42:09.170"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD0123'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:07.553" endtime="20210730 17:42:09.171">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t68" name="With Each Valid Token, Updating Password Of Each System User With ABCD0123ABCD0123ABCD01 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:09.176" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:09.186" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:09.186" level="INFO">${pids} = 23291</msg>
<status status="PASS" starttime="20210730 17:42:09.172" endtime="20210730 17:42:09.186"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:09.187" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:09.186" endtime="20210730 17:42:09.187"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:09.187" level="INFO">${pids} = ['23291']</msg>
<status status="PASS" starttime="20210730 17:42:09.187" endtime="20210730 17:42:09.187"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23291</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:09.191" level="INFO">Running command 'kill 23291 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:09.188" endtime="20210730 17:42:09.191"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.188" endtime="20210730 17:42:09.191"/>
</iter>
<status status="PASS" starttime="20210730 17:42:09.188" endtime="20210730 17:42:09.191"/>
</for>
<status status="PASS" starttime="20210730 17:42:09.187" endtime="20210730 17:42:09.191"/>
</branch>
<status status="PASS" starttime="20210730 17:42:09.187" endtime="20210730 17:42:09.191"/>
</if>
<status status="PASS" starttime="20210730 17:42:09.172" endtime="20210730 17:42:09.192"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:09.193" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:09.192" endtime="20210730 17:42:09.193"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:09.193" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:09.193" endtime="20210730 17:42:09.193"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:09.194" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:09.193" endtime="20210730 17:42:09.194"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:09.194" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:09.194" endtime="20210730 17:42:09.194"/>
</kw>
<msg timestamp="20210730 17:42:09.194" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:09.193" endtime="20210730 17:42:09.194"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:09.198" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:09.194" endtime="20210730 17:42:09.202"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.192" endtime="20210730 17:42:09.203"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:09.204" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:09.203" endtime="20210730 17:42:09.208"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:10.710" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:09.209" endtime="20210730 17:42:10.712"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.203" endtime="20210730 17:42:10.713"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:10.716" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:10.715" endtime="20210730 17:42:10.716"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:10.716" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:10.716" endtime="20210730 17:42:10.716"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:10.716" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:10.716" endtime="20210730 17:42:10.716"/>
</kw>
<msg timestamp="20210730 17:42:10.717" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:10.715" endtime="20210730 17:42:10.717"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:10.717" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:10.717" endtime="20210730 17:42:10.718"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.714" endtime="20210730 17:42:10.718"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:10.718" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:10.718" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:10.718" endtime="20210730 17:42:10.719"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.718" endtime="20210730 17:42:10.719"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:10.720" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:10.720" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:10.719" endtime="20210730 17:42:10.720"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:10.720" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:10.720" endtime="20210730 17:42:10.720"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:10.721" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:10.720" endtime="20210730 17:42:10.721"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:10.721" endtime="20210730 17:42:10.722"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:10.722" endtime="20210730 17:42:10.722"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.720" endtime="20210730 17:42:10.722"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:10.722" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:10.722" endtime="20210730 17:42:10.722"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:10.723" endtime="20210730 17:42:10.723"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:10.723" endtime="20210730 17:42:10.724"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.722" endtime="20210730 17:42:10.724"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:10.724" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:10.724" endtime="20210730 17:42:10.724"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:10.724" endtime="20210730 17:42:10.725"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:10.725" endtime="20210730 17:42:10.725"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.724" endtime="20210730 17:42:10.725"/>
</iter>
<status status="PASS" starttime="20210730 17:42:10.720" endtime="20210730 17:42:10.725"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:10.726" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:10.725" endtime="20210730 17:42:10.726"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.719" endtime="20210730 17:42:10.726"/>
</kw>
<status status="PASS" starttime="20210730 17:42:09.172" endtime="20210730 17:42:10.726"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:10.727" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:10.727" endtime="20210730 17:42:10.727"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:10.727" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210730 17:42:10.727" endtime="20210730 17:42:10.727"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:10.735" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:10.736" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:10.728" endtime="20210730 17:42:10.736"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:10.736" endtime="20210730 17:42:10.736"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:10.737" endtime="20210730 17:42:10.737"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:10.727" endtime="20210730 17:42:10.737"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:10.727" endtime="20210730 17:42:10.737"/>
</for>
<status status="FAIL" starttime="20210730 17:42:10.726" endtime="20210730 17:42:10.737"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:10.726" endtime="20210730 17:42:10.737"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:10.738" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:10.738" endtime="20210730 17:42:10.738"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:10.739" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210730 17:42:10.738" endtime="20210730 17:42:10.739"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:10.743" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:10.743" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:10.739" endtime="20210730 17:42:10.743"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:10.743" endtime="20210730 17:42:10.744"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:10.744" endtime="20210730 17:42:10.744"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:10.739" endtime="20210730 17:42:10.744"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:10.739" endtime="20210730 17:42:10.744"/>
</for>
<status status="FAIL" starttime="20210730 17:42:10.737" endtime="20210730 17:42:10.744"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:10.737" endtime="20210730 17:42:10.744"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD0123ABCD0123ABCD01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:10.745" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:10.745" endtime="20210730 17:42:10.745"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:10.745" level="INFO">${payload} = {'password': 'ABCD0123ABCD0123ABCD01'}</msg>
<status status="PASS" starttime="20210730 17:42:10.745" endtime="20210730 17:42:10.745"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:10.749" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:10.750" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:10.746" endtime="20210730 17:42:10.750"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:10.750" endtime="20210730 17:42:10.750"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:10.750" endtime="20210730 17:42:10.750"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:10.746" endtime="20210730 17:42:10.750"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:10.746" endtime="20210730 17:42:10.750"/>
</for>
<status status="FAIL" starttime="20210730 17:42:10.744" endtime="20210730 17:42:10.750"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:10.744" endtime="20210730 17:42:10.750"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:10.726" endtime="20210730 17:42:10.750"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:10.757" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:10.767" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:10.767" level="INFO">${pids} = 23314
23321
23326</msg>
<status status="PASS" starttime="20210730 17:42:10.751" endtime="20210730 17:42:10.767"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:10.768" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:10.767" endtime="20210730 17:42:10.768"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:10.768" level="INFO">${pids} = ['23314', '23321', '23326']</msg>
<status status="PASS" starttime="20210730 17:42:10.768" endtime="20210730 17:42:10.768"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23314</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:10.772" level="INFO">Running command 'kill 23314 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:10.769" endtime="20210730 17:42:10.772"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.769" endtime="20210730 17:42:10.772"/>
</iter>
<iter>
<var name="${pid}">23321</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:10.776" level="INFO">Running command 'kill 23321 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:10.773" endtime="20210730 17:42:10.776"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.773" endtime="20210730 17:42:10.776"/>
</iter>
<iter>
<var name="${pid}">23326</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:10.780" level="INFO">Running command 'kill 23326 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:10.777" endtime="20210730 17:42:10.780"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.777" endtime="20210730 17:42:10.780"/>
</iter>
<status status="PASS" starttime="20210730 17:42:10.769" endtime="20210730 17:42:10.780"/>
</for>
<status status="PASS" starttime="20210730 17:42:10.768" endtime="20210730 17:42:10.780"/>
</branch>
<status status="PASS" starttime="20210730 17:42:10.768" endtime="20210730 17:42:10.780"/>
</if>
<status status="PASS" starttime="20210730 17:42:10.751" endtime="20210730 17:42:10.781"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD0123ABCD0123ABCD01'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:09.171" endtime="20210730 17:42:10.781">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t69" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:10.789" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:10.799" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:10.799" level="INFO">${pids} = 23355</msg>
<status status="PASS" starttime="20210730 17:42:10.785" endtime="20210730 17:42:10.799"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:10.800" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:10.800" endtime="20210730 17:42:10.800"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:10.801" level="INFO">${pids} = ['23355']</msg>
<status status="PASS" starttime="20210730 17:42:10.800" endtime="20210730 17:42:10.801"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23355</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:10.814" level="INFO">Running command 'kill 23355 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:10.801" endtime="20210730 17:42:10.814"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.801" endtime="20210730 17:42:10.814"/>
</iter>
<status status="PASS" starttime="20210730 17:42:10.801" endtime="20210730 17:42:10.814"/>
</for>
<status status="PASS" starttime="20210730 17:42:10.800" endtime="20210730 17:42:10.815"/>
</branch>
<status status="PASS" starttime="20210730 17:42:10.800" endtime="20210730 17:42:10.815"/>
</if>
<status status="PASS" starttime="20210730 17:42:10.784" endtime="20210730 17:42:10.815"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:10.816" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:10.815" endtime="20210730 17:42:10.816"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:10.816" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:10.816" endtime="20210730 17:42:10.817"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:10.817" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:10.817" endtime="20210730 17:42:10.817"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:10.817" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:10.817" endtime="20210730 17:42:10.817"/>
</kw>
<msg timestamp="20210730 17:42:10.818" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:10.816" endtime="20210730 17:42:10.818"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:10.823" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:10.818" endtime="20210730 17:42:10.825"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.815" endtime="20210730 17:42:10.825"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:10.826" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:10.826" endtime="20210730 17:42:10.830"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:12.331" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:10.830" endtime="20210730 17:42:12.332"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.825" endtime="20210730 17:42:12.332"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:12.333" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:12.333" endtime="20210730 17:42:12.333"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:12.333" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:12.333" endtime="20210730 17:42:12.333"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:12.334" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:12.333" endtime="20210730 17:42:12.334"/>
</kw>
<msg timestamp="20210730 17:42:12.334" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:12.332" endtime="20210730 17:42:12.334"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:12.335" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:12.334" endtime="20210730 17:42:12.335"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.332" endtime="20210730 17:42:12.335"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:12.336" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:12.336" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:12.335" endtime="20210730 17:42:12.336"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.335" endtime="20210730 17:42:12.336"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:12.337" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:12.337" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:12.336" endtime="20210730 17:42:12.337"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:12.337" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:12.337" endtime="20210730 17:42:12.337"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:12.338" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:12.337" endtime="20210730 17:42:12.338"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:12.338" endtime="20210730 17:42:12.339"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:12.339" endtime="20210730 17:42:12.339"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.337" endtime="20210730 17:42:12.339"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:12.339" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:12.339" endtime="20210730 17:42:12.339"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:12.339" endtime="20210730 17:42:12.340"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:12.340" endtime="20210730 17:42:12.340"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.339" endtime="20210730 17:42:12.341"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:12.341" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:12.341" endtime="20210730 17:42:12.341"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:12.341" endtime="20210730 17:42:12.342"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:12.342" endtime="20210730 17:42:12.342"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.341" endtime="20210730 17:42:12.342"/>
</iter>
<status status="PASS" starttime="20210730 17:42:12.337" endtime="20210730 17:42:12.342"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:12.343" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:12.342" endtime="20210730 17:42:12.343"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.336" endtime="20210730 17:42:12.343"/>
</kw>
<status status="PASS" starttime="20210730 17:42:10.784" endtime="20210730 17:42:12.343"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:12.344" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:12.344" endtime="20210730 17:42:12.344"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:12.344" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:12.344" endtime="20210730 17:42:12.344"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:12.353" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:12.353" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:12.345" endtime="20210730 17:42:12.353"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:12.353" endtime="20210730 17:42:12.353"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:12.353" endtime="20210730 17:42:12.353"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:12.345" endtime="20210730 17:42:12.354"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:12.344" endtime="20210730 17:42:12.354"/>
</for>
<status status="FAIL" starttime="20210730 17:42:12.343" endtime="20210730 17:42:12.354"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:12.343" endtime="20210730 17:42:12.354"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:12.355" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:12.355" endtime="20210730 17:42:12.355"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:12.355" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:12.355" endtime="20210730 17:42:12.355"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:12.359" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:12.359" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:12.356" endtime="20210730 17:42:12.359"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:12.360" endtime="20210730 17:42:12.360"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:12.360" endtime="20210730 17:42:12.360"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:12.356" endtime="20210730 17:42:12.360"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:12.355" endtime="20210730 17:42:12.360"/>
</for>
<status status="FAIL" starttime="20210730 17:42:12.354" endtime="20210730 17:42:12.360"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:12.354" endtime="20210730 17:42:12.360"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:12.361" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:12.361" endtime="20210730 17:42:12.361"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:12.361" level="INFO">${payload} = {'password': 'ABCD!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:12.361" endtime="20210730 17:42:12.361"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:12.365" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:12.365" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:12.361" endtime="20210730 17:42:12.365"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:12.365" endtime="20210730 17:42:12.365"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:12.365" endtime="20210730 17:42:12.365"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:12.361" endtime="20210730 17:42:12.365"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:12.361" endtime="20210730 17:42:12.365"/>
</for>
<status status="FAIL" starttime="20210730 17:42:12.360" endtime="20210730 17:42:12.365"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:12.360" endtime="20210730 17:42:12.365"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:12.343" endtime="20210730 17:42:12.365"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:12.370" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:12.383" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:12.383" level="INFO">${pids} = 23378
23385
23397</msg>
<status status="PASS" starttime="20210730 17:42:12.366" endtime="20210730 17:42:12.383"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:12.384" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:12.384" endtime="20210730 17:42:12.384"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:12.385" level="INFO">${pids} = ['23378', '23385', '23397']</msg>
<status status="PASS" starttime="20210730 17:42:12.385" endtime="20210730 17:42:12.385"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23378</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:12.389" level="INFO">Running command 'kill 23378 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:12.386" endtime="20210730 17:42:12.389"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.385" endtime="20210730 17:42:12.390"/>
</iter>
<iter>
<var name="${pid}">23385</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:12.393" level="INFO">Running command 'kill 23385 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:12.390" endtime="20210730 17:42:12.395"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.390" endtime="20210730 17:42:12.395"/>
</iter>
<iter>
<var name="${pid}">23397</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:12.398" level="INFO">Running command 'kill 23397 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:12.395" endtime="20210730 17:42:12.399"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.395" endtime="20210730 17:42:12.399"/>
</iter>
<status status="PASS" starttime="20210730 17:42:12.385" endtime="20210730 17:42:12.399"/>
</for>
<status status="PASS" starttime="20210730 17:42:12.385" endtime="20210730 17:42:12.399"/>
</branch>
<status status="PASS" starttime="20210730 17:42:12.384" endtime="20210730 17:42:12.399"/>
</if>
<status status="PASS" starttime="20210730 17:42:12.366" endtime="20210730 17:42:12.399"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:10.782" endtime="20210730 17:42:12.399">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t70" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?.. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:12.407" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:12.417" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:12.417" level="INFO">${pids} = 23426</msg>
<status status="PASS" starttime="20210730 17:42:12.401" endtime="20210730 17:42:12.417"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:12.418" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:12.417" endtime="20210730 17:42:12.418"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:12.419" level="INFO">${pids} = ['23426']</msg>
<status status="PASS" starttime="20210730 17:42:12.418" endtime="20210730 17:42:12.419"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23426</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:12.424" level="INFO">Running command 'kill 23426 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:12.419" endtime="20210730 17:42:12.424"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.419" endtime="20210730 17:42:12.424"/>
</iter>
<status status="PASS" starttime="20210730 17:42:12.419" endtime="20210730 17:42:12.425"/>
</for>
<status status="PASS" starttime="20210730 17:42:12.418" endtime="20210730 17:42:12.425"/>
</branch>
<status status="PASS" starttime="20210730 17:42:12.418" endtime="20210730 17:42:12.425"/>
</if>
<status status="PASS" starttime="20210730 17:42:12.400" endtime="20210730 17:42:12.425"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:12.426" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:12.426" endtime="20210730 17:42:12.426"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:12.427" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:12.427" endtime="20210730 17:42:12.427"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:12.427" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:12.427" endtime="20210730 17:42:12.427"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:12.428" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:12.427" endtime="20210730 17:42:12.428"/>
</kw>
<msg timestamp="20210730 17:42:12.428" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:12.426" endtime="20210730 17:42:12.428"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:12.435" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:12.428" endtime="20210730 17:42:12.437"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.425" endtime="20210730 17:42:12.438"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:12.439" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:12.439" endtime="20210730 17:42:12.445"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:13.946" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:12.445" endtime="20210730 17:42:13.947"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.438" endtime="20210730 17:42:13.948"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:13.951" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:13.951" endtime="20210730 17:42:13.951"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:13.952" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:13.952" endtime="20210730 17:42:13.952"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:13.952" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:13.952" endtime="20210730 17:42:13.952"/>
</kw>
<msg timestamp="20210730 17:42:13.953" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:13.950" endtime="20210730 17:42:13.953"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:13.953" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:13.953" endtime="20210730 17:42:13.954"/>
</kw>
<status status="PASS" starttime="20210730 17:42:13.948" endtime="20210730 17:42:13.954"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:13.954" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:13.954" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:13.954" endtime="20210730 17:42:13.954"/>
</kw>
<status status="PASS" starttime="20210730 17:42:13.954" endtime="20210730 17:42:13.955"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:13.955" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:13.956" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:13.955" endtime="20210730 17:42:13.956"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:13.956" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:13.956" endtime="20210730 17:42:13.956"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:13.956" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:13.956" endtime="20210730 17:42:13.957"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:13.957" endtime="20210730 17:42:13.957"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:13.958" endtime="20210730 17:42:13.958"/>
</kw>
<status status="PASS" starttime="20210730 17:42:13.956" endtime="20210730 17:42:13.958"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:13.958" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:13.958" endtime="20210730 17:42:13.958"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:13.958" endtime="20210730 17:42:13.959"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:13.959" endtime="20210730 17:42:13.959"/>
</kw>
<status status="PASS" starttime="20210730 17:42:13.958" endtime="20210730 17:42:13.959"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:13.960" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:13.959" endtime="20210730 17:42:13.960"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:13.960" endtime="20210730 17:42:13.960"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:13.960" endtime="20210730 17:42:13.961"/>
</kw>
<status status="PASS" starttime="20210730 17:42:13.959" endtime="20210730 17:42:13.961"/>
</iter>
<status status="PASS" starttime="20210730 17:42:13.956" endtime="20210730 17:42:13.961"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:13.961" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:13.961" endtime="20210730 17:42:13.961"/>
</kw>
<status status="PASS" starttime="20210730 17:42:13.955" endtime="20210730 17:42:13.961"/>
</kw>
<status status="PASS" starttime="20210730 17:42:12.400" endtime="20210730 17:42:13.961"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:13.962" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:13.962" endtime="20210730 17:42:13.962"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:13.963" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210730 17:42:13.963" endtime="20210730 17:42:13.963"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:13.971" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:13.971" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:13.963" endtime="20210730 17:42:13.971"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:13.971" endtime="20210730 17:42:13.972"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:13.972" endtime="20210730 17:42:13.972"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:13.963" endtime="20210730 17:42:13.972"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:13.963" endtime="20210730 17:42:13.972"/>
</for>
<status status="FAIL" starttime="20210730 17:42:13.962" endtime="20210730 17:42:13.972"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:13.962" endtime="20210730 17:42:13.972"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:13.973" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:13.973" endtime="20210730 17:42:13.974"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:13.974" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210730 17:42:13.974" endtime="20210730 17:42:13.974"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:13.978" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:13.978" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:13.975" endtime="20210730 17:42:13.978"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:13.979" endtime="20210730 17:42:13.979"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:13.979" endtime="20210730 17:42:13.979"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:13.974" endtime="20210730 17:42:13.979"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:13.974" endtime="20210730 17:42:13.979"/>
</for>
<status status="FAIL" starttime="20210730 17:42:13.972" endtime="20210730 17:42:13.979"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:13.972" endtime="20210730 17:42:13.979"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:13.980" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:13.980" endtime="20210730 17:42:13.980"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:13.980" level="INFO">${payload} = {'password': 'ABCD!?..'}</msg>
<status status="PASS" starttime="20210730 17:42:13.980" endtime="20210730 17:42:13.980"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:13.984" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:13.984" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:13.981" endtime="20210730 17:42:13.984"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:13.984" endtime="20210730 17:42:13.984"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:13.984" endtime="20210730 17:42:13.984"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:13.980" endtime="20210730 17:42:13.984"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:13.980" endtime="20210730 17:42:13.984"/>
</for>
<status status="FAIL" starttime="20210730 17:42:13.979" endtime="20210730 17:42:13.984"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:13.979" endtime="20210730 17:42:13.985"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:13.962" endtime="20210730 17:42:13.985"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:13.990" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:14.003" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:14.003" level="INFO">${pids} = 23449
23456
23461</msg>
<status status="PASS" starttime="20210730 17:42:13.986" endtime="20210730 17:42:14.003"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:14.004" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:14.003" endtime="20210730 17:42:14.004"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:14.005" level="INFO">${pids} = ['23449', '23456', '23461']</msg>
<status status="PASS" starttime="20210730 17:42:14.004" endtime="20210730 17:42:14.005"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23449</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:14.008" level="INFO">Running command 'kill 23449 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:14.005" endtime="20210730 17:42:14.009"/>
</kw>
<status status="PASS" starttime="20210730 17:42:14.005" endtime="20210730 17:42:14.009"/>
</iter>
<iter>
<var name="${pid}">23456</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:14.013" level="INFO">Running command 'kill 23456 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:14.010" endtime="20210730 17:42:14.015"/>
</kw>
<status status="PASS" starttime="20210730 17:42:14.009" endtime="20210730 17:42:14.015"/>
</iter>
<iter>
<var name="${pid}">23461</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:14.018" level="INFO">Running command 'kill 23461 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:14.015" endtime="20210730 17:42:14.019"/>
</kw>
<status status="PASS" starttime="20210730 17:42:14.015" endtime="20210730 17:42:14.019"/>
</iter>
<status status="PASS" starttime="20210730 17:42:14.005" endtime="20210730 17:42:14.019"/>
</for>
<status status="PASS" starttime="20210730 17:42:14.004" endtime="20210730 17:42:14.019"/>
</branch>
<status status="PASS" starttime="20210730 17:42:14.004" endtime="20210730 17:42:14.019"/>
</if>
<status status="PASS" starttime="20210730 17:42:13.985" endtime="20210730 17:42:14.019"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?..'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:12.400" endtime="20210730 17:42:14.019">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t71" name="With Each Valid Token, Updating Password Of Each System User With ABCD!?..ABCD!?..ABCD!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:14.024" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:14.037" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:14.037" level="INFO">${pids} = 23490</msg>
<status status="PASS" starttime="20210730 17:42:14.021" endtime="20210730 17:42:14.037"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:14.038" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:14.037" endtime="20210730 17:42:14.038"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:14.038" level="INFO">${pids} = ['23490']</msg>
<status status="PASS" starttime="20210730 17:42:14.038" endtime="20210730 17:42:14.038"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23490</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:14.042" level="INFO">Running command 'kill 23490 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:14.039" endtime="20210730 17:42:14.043"/>
</kw>
<status status="PASS" starttime="20210730 17:42:14.039" endtime="20210730 17:42:14.043"/>
</iter>
<status status="PASS" starttime="20210730 17:42:14.038" endtime="20210730 17:42:14.043"/>
</for>
<status status="PASS" starttime="20210730 17:42:14.038" endtime="20210730 17:42:14.043"/>
</branch>
<status status="PASS" starttime="20210730 17:42:14.038" endtime="20210730 17:42:14.043"/>
</if>
<status status="PASS" starttime="20210730 17:42:14.021" endtime="20210730 17:42:14.043"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:14.044" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:14.044" endtime="20210730 17:42:14.044"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:14.045" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:14.044" endtime="20210730 17:42:14.045"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:14.045" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:14.045" endtime="20210730 17:42:14.045"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:14.045" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:14.045" endtime="20210730 17:42:14.045"/>
</kw>
<msg timestamp="20210730 17:42:14.045" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:14.044" endtime="20210730 17:42:14.045"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:14.052" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:14.046" endtime="20210730 17:42:14.067"/>
</kw>
<status status="PASS" starttime="20210730 17:42:14.043" endtime="20210730 17:42:14.067"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:14.069" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:14.068" endtime="20210730 17:42:14.083"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:15.585" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:14.084" endtime="20210730 17:42:15.585"/>
</kw>
<status status="PASS" starttime="20210730 17:42:14.068" endtime="20210730 17:42:15.585"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:15.587" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:15.586" endtime="20210730 17:42:15.587"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:15.587" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:15.587" endtime="20210730 17:42:15.587"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:15.587" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:15.587" endtime="20210730 17:42:15.588"/>
</kw>
<msg timestamp="20210730 17:42:15.588" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:15.586" endtime="20210730 17:42:15.588"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:15.588" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:15.588" endtime="20210730 17:42:15.589"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.586" endtime="20210730 17:42:15.589"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:15.589" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:15.589" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:15.589" endtime="20210730 17:42:15.590"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.589" endtime="20210730 17:42:15.590"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:15.591" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:15.591" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:15.590" endtime="20210730 17:42:15.591"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:15.591" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:15.591" endtime="20210730 17:42:15.591"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:15.592" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:15.592" endtime="20210730 17:42:15.592"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:15.592" endtime="20210730 17:42:15.593"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:15.593" endtime="20210730 17:42:15.593"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.592" endtime="20210730 17:42:15.593"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:15.593" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:15.593" endtime="20210730 17:42:15.594"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:15.594" endtime="20210730 17:42:15.594"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:15.594" endtime="20210730 17:42:15.595"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.593" endtime="20210730 17:42:15.595"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:15.595" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:15.595" endtime="20210730 17:42:15.595"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:15.595" endtime="20210730 17:42:15.596"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:15.596" endtime="20210730 17:42:15.596"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.595" endtime="20210730 17:42:15.596"/>
</iter>
<status status="PASS" starttime="20210730 17:42:15.591" endtime="20210730 17:42:15.596"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:15.597" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:15.596" endtime="20210730 17:42:15.597"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.590" endtime="20210730 17:42:15.597"/>
</kw>
<status status="PASS" starttime="20210730 17:42:14.020" endtime="20210730 17:42:15.597"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:15.598" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:15.598" endtime="20210730 17:42:15.598"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:15.598" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210730 17:42:15.598" endtime="20210730 17:42:15.598"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:15.607" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:15.608" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:15.599" endtime="20210730 17:42:15.608"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:15.608" endtime="20210730 17:42:15.608"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:15.608" endtime="20210730 17:42:15.609"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:15.599" endtime="20210730 17:42:15.609"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:15.599" endtime="20210730 17:42:15.609"/>
</for>
<status status="FAIL" starttime="20210730 17:42:15.597" endtime="20210730 17:42:15.609"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:15.597" endtime="20210730 17:42:15.609"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:15.610" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:15.610" endtime="20210730 17:42:15.610"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:15.611" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210730 17:42:15.610" endtime="20210730 17:42:15.611"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:15.615" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:15.615" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:15.611" endtime="20210730 17:42:15.615"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:15.615" endtime="20210730 17:42:15.615"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:15.615" endtime="20210730 17:42:15.615"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:15.611" endtime="20210730 17:42:15.615"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:15.611" endtime="20210730 17:42:15.615"/>
</for>
<status status="FAIL" starttime="20210730 17:42:15.609" endtime="20210730 17:42:15.616"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:15.609" endtime="20210730 17:42:15.616"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCD!?..ABCD!?..ABCD!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:15.617" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:15.616" endtime="20210730 17:42:15.617"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:15.617" level="INFO">${payload} = {'password': 'ABCD!?..ABCD!?..ABCD!?'}</msg>
<status status="PASS" starttime="20210730 17:42:15.617" endtime="20210730 17:42:15.617"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:15.621" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:15.621" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:15.617" endtime="20210730 17:42:15.621"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:15.621" endtime="20210730 17:42:15.621"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:15.621" endtime="20210730 17:42:15.621"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:15.617" endtime="20210730 17:42:15.621"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:15.617" endtime="20210730 17:42:15.621"/>
</for>
<status status="FAIL" starttime="20210730 17:42:15.616" endtime="20210730 17:42:15.621"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:15.616" endtime="20210730 17:42:15.621"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:15.597" endtime="20210730 17:42:15.621"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:15.627" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:15.637" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:15.637" level="INFO">${pids} = 23513
23520
23525</msg>
<status status="PASS" starttime="20210730 17:42:15.622" endtime="20210730 17:42:15.637"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:15.638" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:15.638" endtime="20210730 17:42:15.639"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:15.639" level="INFO">${pids} = ['23513', '23520', '23525']</msg>
<status status="PASS" starttime="20210730 17:42:15.639" endtime="20210730 17:42:15.639"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23513</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:15.645" level="INFO">Running command 'kill 23513 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:15.639" endtime="20210730 17:42:15.645"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.639" endtime="20210730 17:42:15.646"/>
</iter>
<iter>
<var name="${pid}">23520</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:15.649" level="INFO">Running command 'kill 23520 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:15.646" endtime="20210730 17:42:15.649"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.646" endtime="20210730 17:42:15.649"/>
</iter>
<iter>
<var name="${pid}">23525</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:15.653" level="INFO">Running command 'kill 23525 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:15.650" endtime="20210730 17:42:15.653"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.650" endtime="20210730 17:42:15.653"/>
</iter>
<status status="PASS" starttime="20210730 17:42:15.639" endtime="20210730 17:42:15.653"/>
</for>
<status status="PASS" starttime="20210730 17:42:15.639" endtime="20210730 17:42:15.653"/>
</branch>
<status status="PASS" starttime="20210730 17:42:15.639" endtime="20210730 17:42:15.653"/>
</if>
<status status="PASS" starttime="20210730 17:42:15.622" endtime="20210730 17:42:15.654"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCD!?..ABCD!?..ABCD!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:14.020" endtime="20210730 17:42:15.654">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t72" name="With Each Valid Token, Updating Password Of Each System User With 0123!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:15.666" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:15.675" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:15.675" level="INFO">${pids} = 23554</msg>
<status status="PASS" starttime="20210730 17:42:15.662" endtime="20210730 17:42:15.675"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:15.676" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:15.675" endtime="20210730 17:42:15.676"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:15.676" level="INFO">${pids} = ['23554']</msg>
<status status="PASS" starttime="20210730 17:42:15.676" endtime="20210730 17:42:15.676"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23554</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:15.682" level="INFO">Running command 'kill 23554 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:15.677" endtime="20210730 17:42:15.690"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.676" endtime="20210730 17:42:15.690"/>
</iter>
<status status="PASS" starttime="20210730 17:42:15.676" endtime="20210730 17:42:15.690"/>
</for>
<status status="PASS" starttime="20210730 17:42:15.676" endtime="20210730 17:42:15.690"/>
</branch>
<status status="PASS" starttime="20210730 17:42:15.676" endtime="20210730 17:42:15.690"/>
</if>
<status status="PASS" starttime="20210730 17:42:15.662" endtime="20210730 17:42:15.690"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:15.696" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:15.692" endtime="20210730 17:42:15.696"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:15.702" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:15.697" endtime="20210730 17:42:15.702"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:15.702" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:15.702" endtime="20210730 17:42:15.702"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:15.703" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:15.702" endtime="20210730 17:42:15.703"/>
</kw>
<msg timestamp="20210730 17:42:15.703" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:15.697" endtime="20210730 17:42:15.703"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:15.717" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:15.703" endtime="20210730 17:42:15.719"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.691" endtime="20210730 17:42:15.719"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:15.721" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:15.720" endtime="20210730 17:42:15.724"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:17.226" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:15.725" endtime="20210730 17:42:17.226"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.720" endtime="20210730 17:42:17.226"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:17.227" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:17.227" endtime="20210730 17:42:17.228"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:17.228" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:17.228" endtime="20210730 17:42:17.228"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:17.228" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:17.228" endtime="20210730 17:42:17.228"/>
</kw>
<msg timestamp="20210730 17:42:17.229" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:17.227" endtime="20210730 17:42:17.229"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:17.230" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:17.229" endtime="20210730 17:42:17.230"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.226" endtime="20210730 17:42:17.230"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:17.231" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:17.231" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:17.231" endtime="20210730 17:42:17.231"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.230" endtime="20210730 17:42:17.231"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:17.232" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:17.232" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:17.231" endtime="20210730 17:42:17.232"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:17.233" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:17.233" endtime="20210730 17:42:17.233"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:17.233" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:17.233" endtime="20210730 17:42:17.233"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:17.233" endtime="20210730 17:42:17.235"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:17.235" endtime="20210730 17:42:17.235"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.233" endtime="20210730 17:42:17.235"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:17.235" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:17.235" endtime="20210730 17:42:17.235"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:17.236" endtime="20210730 17:42:17.236"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:17.236" endtime="20210730 17:42:17.236"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.235" endtime="20210730 17:42:17.237"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:17.237" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:17.237" endtime="20210730 17:42:17.237"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:17.237" endtime="20210730 17:42:17.238"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:17.238" endtime="20210730 17:42:17.238"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.237" endtime="20210730 17:42:17.238"/>
</iter>
<status status="PASS" starttime="20210730 17:42:17.233" endtime="20210730 17:42:17.238"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:17.239" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:17.238" endtime="20210730 17:42:17.239"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.231" endtime="20210730 17:42:17.239"/>
</kw>
<status status="PASS" starttime="20210730 17:42:15.662" endtime="20210730 17:42:17.239"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:17.240" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:17.239" endtime="20210730 17:42:17.240"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:17.240" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:17.240" endtime="20210730 17:42:17.240"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:17.248" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:17.249" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:17.240" endtime="20210730 17:42:17.249"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:17.249" endtime="20210730 17:42:17.249"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:17.249" endtime="20210730 17:42:17.249"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:17.240" endtime="20210730 17:42:17.249"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:17.240" endtime="20210730 17:42:17.249"/>
</for>
<status status="FAIL" starttime="20210730 17:42:17.239" endtime="20210730 17:42:17.249"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:17.239" endtime="20210730 17:42:17.249"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:17.251" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:17.250" endtime="20210730 17:42:17.251"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:17.251" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:17.251" endtime="20210730 17:42:17.251"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:17.256" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:17.256" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:17.252" endtime="20210730 17:42:17.256"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:17.256" endtime="20210730 17:42:17.256"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:17.257" endtime="20210730 17:42:17.257"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:17.251" endtime="20210730 17:42:17.257"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:17.251" endtime="20210730 17:42:17.257"/>
</for>
<status status="FAIL" starttime="20210730 17:42:17.250" endtime="20210730 17:42:17.257"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:17.249" endtime="20210730 17:42:17.257"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:17.258" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:17.258" endtime="20210730 17:42:17.258"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:17.258" level="INFO">${payload} = {'password': '0123!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:17.258" endtime="20210730 17:42:17.258"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:17.262" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:17.262" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:17.259" endtime="20210730 17:42:17.263"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:17.263" endtime="20210730 17:42:17.263"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:17.263" endtime="20210730 17:42:17.263"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:17.259" endtime="20210730 17:42:17.263"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:17.259" endtime="20210730 17:42:17.263"/>
</for>
<status status="FAIL" starttime="20210730 17:42:17.257" endtime="20210730 17:42:17.263"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:17.257" endtime="20210730 17:42:17.263"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:17.239" endtime="20210730 17:42:17.263"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:17.267" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:17.279" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:17.279" level="INFO">${pids} = 23579
23586
23590</msg>
<status status="PASS" starttime="20210730 17:42:17.264" endtime="20210730 17:42:17.279"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:17.280" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:17.279" endtime="20210730 17:42:17.280"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:17.280" level="INFO">${pids} = ['23579', '23586', '23590']</msg>
<status status="PASS" starttime="20210730 17:42:17.280" endtime="20210730 17:42:17.280"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23579</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:17.284" level="INFO">Running command 'kill 23579 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:17.281" endtime="20210730 17:42:17.284"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.281" endtime="20210730 17:42:17.284"/>
</iter>
<iter>
<var name="${pid}">23586</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:17.287" level="INFO">Running command 'kill 23586 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:17.285" endtime="20210730 17:42:17.288"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.284" endtime="20210730 17:42:17.288"/>
</iter>
<iter>
<var name="${pid}">23590</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:17.294" level="INFO">Running command 'kill 23590 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:17.288" endtime="20210730 17:42:17.295"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.288" endtime="20210730 17:42:17.295"/>
</iter>
<status status="PASS" starttime="20210730 17:42:17.281" endtime="20210730 17:42:17.295"/>
</for>
<status status="PASS" starttime="20210730 17:42:17.280" endtime="20210730 17:42:17.295"/>
</branch>
<status status="PASS" starttime="20210730 17:42:17.280" endtime="20210730 17:42:17.295"/>
</if>
<status status="PASS" starttime="20210730 17:42:17.263" endtime="20210730 17:42:17.295"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:15.660" endtime="20210730 17:42:17.295">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t73" name="With Each Valid Token, Updating Password Of Each System User With 0123!?.0 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:17.300" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:17.313" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:17.313" level="INFO">${pids} = 23619</msg>
<status status="PASS" starttime="20210730 17:42:17.297" endtime="20210730 17:42:17.313"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:17.314" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:17.314" endtime="20210730 17:42:17.314"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:17.315" level="INFO">${pids} = ['23619']</msg>
<status status="PASS" starttime="20210730 17:42:17.315" endtime="20210730 17:42:17.315"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23619</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:17.334" level="INFO">Running command 'kill 23619 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:17.316" endtime="20210730 17:42:17.334"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.316" endtime="20210730 17:42:17.335"/>
</iter>
<status status="PASS" starttime="20210730 17:42:17.315" endtime="20210730 17:42:17.335"/>
</for>
<status status="PASS" starttime="20210730 17:42:17.315" endtime="20210730 17:42:17.335"/>
</branch>
<status status="PASS" starttime="20210730 17:42:17.314" endtime="20210730 17:42:17.335"/>
</if>
<status status="PASS" starttime="20210730 17:42:17.297" endtime="20210730 17:42:17.335"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:17.337" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:17.336" endtime="20210730 17:42:17.337"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:17.337" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:17.337" endtime="20210730 17:42:17.337"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:17.338" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:17.337" endtime="20210730 17:42:17.338"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:17.338" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:17.338" endtime="20210730 17:42:17.338"/>
</kw>
<msg timestamp="20210730 17:42:17.338" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:17.337" endtime="20210730 17:42:17.338"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:17.351" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:17.339" endtime="20210730 17:42:17.353"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.335" endtime="20210730 17:42:17.353"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:17.354" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:17.354" endtime="20210730 17:42:17.358"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:18.868" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:17.359" endtime="20210730 17:42:18.868"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.353" endtime="20210730 17:42:18.868"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:18.870" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:18.869" endtime="20210730 17:42:18.870"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:18.870" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:18.870" endtime="20210730 17:42:18.870"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:18.871" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:18.870" endtime="20210730 17:42:18.871"/>
</kw>
<msg timestamp="20210730 17:42:18.871" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:18.869" endtime="20210730 17:42:18.871"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:18.871" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:18.871" endtime="20210730 17:42:18.872"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.869" endtime="20210730 17:42:18.872"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:18.872" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:18.872" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:18.872" endtime="20210730 17:42:18.873"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.872" endtime="20210730 17:42:18.873"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:18.873" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:18.874" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:18.873" endtime="20210730 17:42:18.874"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:18.874" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:18.874" endtime="20210730 17:42:18.874"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:18.874" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:18.874" endtime="20210730 17:42:18.874"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:18.875" endtime="20210730 17:42:18.875"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:18.875" endtime="20210730 17:42:18.876"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.874" endtime="20210730 17:42:18.876"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:18.876" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:18.876" endtime="20210730 17:42:18.876"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:18.876" endtime="20210730 17:42:18.877"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:18.877" endtime="20210730 17:42:18.877"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.876" endtime="20210730 17:42:18.877"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:18.877" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:18.877" endtime="20210730 17:42:18.877"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:18.878" endtime="20210730 17:42:18.878"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:18.878" endtime="20210730 17:42:18.879"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.877" endtime="20210730 17:42:18.879"/>
</iter>
<status status="PASS" starttime="20210730 17:42:18.874" endtime="20210730 17:42:18.879"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:18.879" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:18.879" endtime="20210730 17:42:18.879"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.873" endtime="20210730 17:42:18.879"/>
</kw>
<status status="PASS" starttime="20210730 17:42:17.297" endtime="20210730 17:42:18.879"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:18.880" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:18.880" endtime="20210730 17:42:18.880"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:18.881" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210730 17:42:18.880" endtime="20210730 17:42:18.881"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:18.890" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:18.890" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:18.881" endtime="20210730 17:42:18.890"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:18.890" endtime="20210730 17:42:18.890"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:18.890" endtime="20210730 17:42:18.890"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:18.881" endtime="20210730 17:42:18.890"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:18.881" endtime="20210730 17:42:18.891"/>
</for>
<status status="FAIL" starttime="20210730 17:42:18.880" endtime="20210730 17:42:18.891"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:18.880" endtime="20210730 17:42:18.891"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:18.892" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:18.892" endtime="20210730 17:42:18.892"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:18.892" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210730 17:42:18.892" endtime="20210730 17:42:18.892"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:18.896" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:18.896" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:18.893" endtime="20210730 17:42:18.897"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:18.897" endtime="20210730 17:42:18.897"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:18.897" endtime="20210730 17:42:18.897"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:18.893" endtime="20210730 17:42:18.897"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:18.892" endtime="20210730 17:42:18.897"/>
</for>
<status status="FAIL" starttime="20210730 17:42:18.891" endtime="20210730 17:42:18.897"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:18.891" endtime="20210730 17:42:18.897"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:18.898" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:18.898" endtime="20210730 17:42:18.898"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:18.899" level="INFO">${payload} = {'password': '0123!?.0'}</msg>
<status status="PASS" starttime="20210730 17:42:18.898" endtime="20210730 17:42:18.899"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:18.902" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:18.903" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:18.899" endtime="20210730 17:42:18.903"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:18.903" endtime="20210730 17:42:18.903"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:18.903" endtime="20210730 17:42:18.903"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:18.899" endtime="20210730 17:42:18.903"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:18.899" endtime="20210730 17:42:18.903"/>
</for>
<status status="FAIL" starttime="20210730 17:42:18.897" endtime="20210730 17:42:18.903"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:18.897" endtime="20210730 17:42:18.903"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:18.879" endtime="20210730 17:42:18.903"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:18.909" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:18.921" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:18.921" level="INFO">${pids} = 23642
23649
23653</msg>
<status status="PASS" starttime="20210730 17:42:18.905" endtime="20210730 17:42:18.921"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:18.922" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:18.921" endtime="20210730 17:42:18.922"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:18.923" level="INFO">${pids} = ['23642', '23649', '23653']</msg>
<status status="PASS" starttime="20210730 17:42:18.922" endtime="20210730 17:42:18.923"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23642</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:18.926" level="INFO">Running command 'kill 23642 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:18.923" endtime="20210730 17:42:18.927"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.923" endtime="20210730 17:42:18.927"/>
</iter>
<iter>
<var name="${pid}">23649</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:18.930" level="INFO">Running command 'kill 23649 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:18.927" endtime="20210730 17:42:18.930"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.927" endtime="20210730 17:42:18.930"/>
</iter>
<iter>
<var name="${pid}">23653</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:18.935" level="INFO">Running command 'kill 23653 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:18.931" endtime="20210730 17:42:18.935"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.930" endtime="20210730 17:42:18.935"/>
</iter>
<status status="PASS" starttime="20210730 17:42:18.923" endtime="20210730 17:42:18.935"/>
</for>
<status status="PASS" starttime="20210730 17:42:18.922" endtime="20210730 17:42:18.935"/>
</branch>
<status status="PASS" starttime="20210730 17:42:18.922" endtime="20210730 17:42:18.935"/>
</if>
<status status="PASS" starttime="20210730 17:42:18.904" endtime="20210730 17:42:18.935"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.0'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:17.296" endtime="20210730 17:42:18.936">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t74" name="With Each Valid Token, Updating Password Of Each System User With 0123!?.00123!?.00123!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:18.947" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:18.971" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:18.971" level="INFO">${pids} = 23682</msg>
<status status="PASS" starttime="20210730 17:42:18.938" endtime="20210730 17:42:18.971"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:18.972" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:18.971" endtime="20210730 17:42:18.972"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:18.973" level="INFO">${pids} = ['23682']</msg>
<status status="PASS" starttime="20210730 17:42:18.972" endtime="20210730 17:42:18.973"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23682</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:18.977" level="INFO">Running command 'kill 23682 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:18.973" endtime="20210730 17:42:18.977"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.973" endtime="20210730 17:42:18.977"/>
</iter>
<status status="PASS" starttime="20210730 17:42:18.973" endtime="20210730 17:42:18.978"/>
</for>
<status status="PASS" starttime="20210730 17:42:18.972" endtime="20210730 17:42:18.978"/>
</branch>
<status status="PASS" starttime="20210730 17:42:18.972" endtime="20210730 17:42:18.978"/>
</if>
<status status="PASS" starttime="20210730 17:42:18.938" endtime="20210730 17:42:18.978"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:18.979" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:18.979" endtime="20210730 17:42:18.979"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:18.980" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:18.979" endtime="20210730 17:42:18.980"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:18.980" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:18.980" endtime="20210730 17:42:18.980"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:18.980" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:18.980" endtime="20210730 17:42:18.980"/>
</kw>
<msg timestamp="20210730 17:42:18.981" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:18.979" endtime="20210730 17:42:18.981"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:18.984" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:18.981" endtime="20210730 17:42:18.985"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.978" endtime="20210730 17:42:18.985"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:18.987" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:18.986" endtime="20210730 17:42:18.991"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:20.494" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:18.992" endtime="20210730 17:42:20.495"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.986" endtime="20210730 17:42:20.496"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:20.499" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:20.499" endtime="20210730 17:42:20.499"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:20.499" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:20.499" endtime="20210730 17:42:20.499"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:20.500" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:20.500" endtime="20210730 17:42:20.500"/>
</kw>
<msg timestamp="20210730 17:42:20.500" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:20.498" endtime="20210730 17:42:20.500"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:20.501" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:20.500" endtime="20210730 17:42:20.501"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.497" endtime="20210730 17:42:20.501"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:20.502" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:20.502" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:20.501" endtime="20210730 17:42:20.502"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.501" endtime="20210730 17:42:20.502"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:20.503" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:20.503" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:20.502" endtime="20210730 17:42:20.503"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:20.503" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:20.503" endtime="20210730 17:42:20.503"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:20.504" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:20.504" endtime="20210730 17:42:20.504"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:20.504" endtime="20210730 17:42:20.505"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:20.505" endtime="20210730 17:42:20.505"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.503" endtime="20210730 17:42:20.505"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:20.505" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:20.505" endtime="20210730 17:42:20.505"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:20.505" endtime="20210730 17:42:20.506"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:20.506" endtime="20210730 17:42:20.506"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.505" endtime="20210730 17:42:20.506"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:20.507" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:20.507" endtime="20210730 17:42:20.507"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:20.507" endtime="20210730 17:42:20.508"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:20.508" endtime="20210730 17:42:20.508"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.507" endtime="20210730 17:42:20.508"/>
</iter>
<status status="PASS" starttime="20210730 17:42:20.503" endtime="20210730 17:42:20.508"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:20.508" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:20.508" endtime="20210730 17:42:20.508"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.502" endtime="20210730 17:42:20.509"/>
</kw>
<status status="PASS" starttime="20210730 17:42:18.937" endtime="20210730 17:42:20.509"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:20.510" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:20.509" endtime="20210730 17:42:20.510"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:20.510" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210730 17:42:20.510" endtime="20210730 17:42:20.510"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:20.519" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:20.519" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:20.510" endtime="20210730 17:42:20.519"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:20.519" endtime="20210730 17:42:20.519"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:20.519" endtime="20210730 17:42:20.519"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:20.510" endtime="20210730 17:42:20.519"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:20.510" endtime="20210730 17:42:20.519"/>
</for>
<status status="FAIL" starttime="20210730 17:42:20.509" endtime="20210730 17:42:20.520"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:20.509" endtime="20210730 17:42:20.520"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:20.521" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:20.520" endtime="20210730 17:42:20.521"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:20.521" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210730 17:42:20.521" endtime="20210730 17:42:20.521"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:20.526" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:20.526" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:20.522" endtime="20210730 17:42:20.526"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:20.526" endtime="20210730 17:42:20.526"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:20.526" endtime="20210730 17:42:20.526"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:20.521" endtime="20210730 17:42:20.526"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:20.521" endtime="20210730 17:42:20.526"/>
</for>
<status status="FAIL" starttime="20210730 17:42:20.520" endtime="20210730 17:42:20.527"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:20.520" endtime="20210730 17:42:20.527"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=0123!?.00123!?.00123!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:20.527" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:20.527" endtime="20210730 17:42:20.528"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:20.528" level="INFO">${payload} = {'password': '0123!?.00123!?.00123!?'}</msg>
<status status="PASS" starttime="20210730 17:42:20.528" endtime="20210730 17:42:20.528"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:20.532" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:20.532" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:20.528" endtime="20210730 17:42:20.532"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:20.532" endtime="20210730 17:42:20.532"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:20.532" endtime="20210730 17:42:20.532"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:20.528" endtime="20210730 17:42:20.532"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:20.528" endtime="20210730 17:42:20.532"/>
</for>
<status status="FAIL" starttime="20210730 17:42:20.527" endtime="20210730 17:42:20.532"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:20.527" endtime="20210730 17:42:20.532"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:20.509" endtime="20210730 17:42:20.532"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:20.538" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:20.548" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:20.548" level="INFO">${pids} = 23705
23712
23716</msg>
<status status="PASS" starttime="20210730 17:42:20.533" endtime="20210730 17:42:20.548"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:20.548" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:20.548" endtime="20210730 17:42:20.549"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:20.549" level="INFO">${pids} = ['23705', '23712', '23716']</msg>
<status status="PASS" starttime="20210730 17:42:20.549" endtime="20210730 17:42:20.549"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23705</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:20.553" level="INFO">Running command 'kill 23705 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:20.550" endtime="20210730 17:42:20.553"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.549" endtime="20210730 17:42:20.554"/>
</iter>
<iter>
<var name="${pid}">23712</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:20.561" level="INFO">Running command 'kill 23712 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:20.554" endtime="20210730 17:42:20.564"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.554" endtime="20210730 17:42:20.564"/>
</iter>
<iter>
<var name="${pid}">23716</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:20.568" level="INFO">Running command 'kill 23716 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:20.564" endtime="20210730 17:42:20.569"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.564" endtime="20210730 17:42:20.569"/>
</iter>
<status status="PASS" starttime="20210730 17:42:20.549" endtime="20210730 17:42:20.569"/>
</for>
<status status="PASS" starttime="20210730 17:42:20.549" endtime="20210730 17:42:20.569"/>
</branch>
<status status="PASS" starttime="20210730 17:42:20.549" endtime="20210730 17:42:20.569"/>
</if>
<status status="PASS" starttime="20210730 17:42:20.533" endtime="20210730 17:42:20.569"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '0123!?.00123!?.00123!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:18.936" endtime="20210730 17:42:20.569">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t75" name="With Each Valid Token, Updating Password Of Each System User With abcdAB9 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:20.574" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:20.586" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:20.586" level="INFO">${pids} = 23745</msg>
<status status="PASS" starttime="20210730 17:42:20.571" endtime="20210730 17:42:20.586"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:20.587" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:20.586" endtime="20210730 17:42:20.587"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:20.587" level="INFO">${pids} = ['23745']</msg>
<status status="PASS" starttime="20210730 17:42:20.587" endtime="20210730 17:42:20.587"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23745</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:20.591" level="INFO">Running command 'kill 23745 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:20.588" endtime="20210730 17:42:20.591"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.588" endtime="20210730 17:42:20.591"/>
</iter>
<status status="PASS" starttime="20210730 17:42:20.587" endtime="20210730 17:42:20.591"/>
</for>
<status status="PASS" starttime="20210730 17:42:20.587" endtime="20210730 17:42:20.591"/>
</branch>
<status status="PASS" starttime="20210730 17:42:20.587" endtime="20210730 17:42:20.592"/>
</if>
<status status="PASS" starttime="20210730 17:42:20.571" endtime="20210730 17:42:20.592"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:20.593" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:20.592" endtime="20210730 17:42:20.593"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:20.593" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:20.593" endtime="20210730 17:42:20.593"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:20.594" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:20.593" endtime="20210730 17:42:20.594"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:20.594" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:20.594" endtime="20210730 17:42:20.594"/>
</kw>
<msg timestamp="20210730 17:42:20.594" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:20.593" endtime="20210730 17:42:20.594"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:20.598" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:20.595" endtime="20210730 17:42:20.599"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.592" endtime="20210730 17:42:20.600"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:20.601" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:20.600" endtime="20210730 17:42:20.621"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:22.123" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:20.622" endtime="20210730 17:42:22.124"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.600" endtime="20210730 17:42:22.126"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:22.128" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:22.127" endtime="20210730 17:42:22.128"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:22.128" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:22.128" endtime="20210730 17:42:22.128"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:22.129" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:22.128" endtime="20210730 17:42:22.129"/>
</kw>
<msg timestamp="20210730 17:42:22.129" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:22.127" endtime="20210730 17:42:22.129"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:22.130" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:22.129" endtime="20210730 17:42:22.130"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.127" endtime="20210730 17:42:22.130"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:22.131" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:22.131" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:22.130" endtime="20210730 17:42:22.131"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.130" endtime="20210730 17:42:22.131"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:22.132" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:22.132" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:22.131" endtime="20210730 17:42:22.132"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:22.132" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:22.132" endtime="20210730 17:42:22.132"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:22.133" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:22.132" endtime="20210730 17:42:22.133"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:22.133" endtime="20210730 17:42:22.134"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:22.134" endtime="20210730 17:42:22.134"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.132" endtime="20210730 17:42:22.134"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:22.134" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:22.134" endtime="20210730 17:42:22.134"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:22.135" endtime="20210730 17:42:22.135"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:22.135" endtime="20210730 17:42:22.135"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.134" endtime="20210730 17:42:22.136"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:22.136" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:22.136" endtime="20210730 17:42:22.136"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:22.136" endtime="20210730 17:42:22.137"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:22.137" endtime="20210730 17:42:22.137"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.136" endtime="20210730 17:42:22.137"/>
</iter>
<status status="PASS" starttime="20210730 17:42:22.132" endtime="20210730 17:42:22.137"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:22.137" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:22.137" endtime="20210730 17:42:22.137"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.131" endtime="20210730 17:42:22.138"/>
</kw>
<status status="PASS" starttime="20210730 17:42:20.570" endtime="20210730 17:42:22.138"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:22.139" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:22.138" endtime="20210730 17:42:22.139"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:22.139" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210730 17:42:22.139" endtime="20210730 17:42:22.139"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:22.147" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:22.148" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:22.139" endtime="20210730 17:42:22.148"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:22.148" endtime="20210730 17:42:22.148"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:22.148" endtime="20210730 17:42:22.148"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:22.139" endtime="20210730 17:42:22.148"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:22.139" endtime="20210730 17:42:22.148"/>
</for>
<status status="FAIL" starttime="20210730 17:42:22.138" endtime="20210730 17:42:22.148"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:22.138" endtime="20210730 17:42:22.148"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:22.150" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:22.149" endtime="20210730 17:42:22.150"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:22.150" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210730 17:42:22.150" endtime="20210730 17:42:22.150"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:22.155" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:22.155" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:22.150" endtime="20210730 17:42:22.155"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:22.155" endtime="20210730 17:42:22.155"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:22.155" endtime="20210730 17:42:22.155"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:22.150" endtime="20210730 17:42:22.156"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:22.150" endtime="20210730 17:42:22.156"/>
</for>
<status status="FAIL" starttime="20210730 17:42:22.149" endtime="20210730 17:42:22.156"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:22.149" endtime="20210730 17:42:22.156"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB9</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:22.157" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:22.157" endtime="20210730 17:42:22.157"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:22.157" level="INFO">${payload} = {'password': 'abcdAB9'}</msg>
<status status="PASS" starttime="20210730 17:42:22.157" endtime="20210730 17:42:22.157"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:22.162" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:22.162" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:22.158" endtime="20210730 17:42:22.162"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:22.162" endtime="20210730 17:42:22.162"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:22.162" endtime="20210730 17:42:22.162"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:22.157" endtime="20210730 17:42:22.162"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:22.157" endtime="20210730 17:42:22.162"/>
</for>
<status status="FAIL" starttime="20210730 17:42:22.156" endtime="20210730 17:42:22.162"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:22.156" endtime="20210730 17:42:22.163"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:22.138" endtime="20210730 17:42:22.163"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:22.167" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:22.177" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:22.177" level="INFO">${pids} = 23768
23775
23780</msg>
<status status="PASS" starttime="20210730 17:42:22.164" endtime="20210730 17:42:22.177"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:22.178" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:22.177" endtime="20210730 17:42:22.178"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:22.178" level="INFO">${pids} = ['23768', '23775', '23780']</msg>
<status status="PASS" starttime="20210730 17:42:22.178" endtime="20210730 17:42:22.178"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23768</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:22.182" level="INFO">Running command 'kill 23768 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:22.179" endtime="20210730 17:42:22.182"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.179" endtime="20210730 17:42:22.182"/>
</iter>
<iter>
<var name="${pid}">23775</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:22.187" level="INFO">Running command 'kill 23775 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:22.183" endtime="20210730 17:42:22.187"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.182" endtime="20210730 17:42:22.187"/>
</iter>
<iter>
<var name="${pid}">23780</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:22.191" level="INFO">Running command 'kill 23780 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:22.188" endtime="20210730 17:42:22.191"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.187" endtime="20210730 17:42:22.192"/>
</iter>
<status status="PASS" starttime="20210730 17:42:22.178" endtime="20210730 17:42:22.192"/>
</for>
<status status="PASS" starttime="20210730 17:42:22.178" endtime="20210730 17:42:22.192"/>
</branch>
<status status="PASS" starttime="20210730 17:42:22.178" endtime="20210730 17:42:22.192"/>
</if>
<status status="PASS" starttime="20210730 17:42:22.163" endtime="20210730 17:42:22.192"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB9'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:20.570" endtime="20210730 17:42:22.192">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t76" name="With Each Valid Token, Updating Password Of Each System User With abcdAB90 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:22.219" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:22.229" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:22.229" level="INFO">${pids} = 23809</msg>
<status status="PASS" starttime="20210730 17:42:22.194" endtime="20210730 17:42:22.229"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:22.230" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:22.230" endtime="20210730 17:42:22.230"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:22.231" level="INFO">${pids} = ['23809']</msg>
<status status="PASS" starttime="20210730 17:42:22.231" endtime="20210730 17:42:22.231"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23809</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:22.234" level="INFO">Running command 'kill 23809 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:22.231" endtime="20210730 17:42:22.235"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.231" endtime="20210730 17:42:22.235"/>
</iter>
<status status="PASS" starttime="20210730 17:42:22.231" endtime="20210730 17:42:22.235"/>
</for>
<status status="PASS" starttime="20210730 17:42:22.230" endtime="20210730 17:42:22.235"/>
</branch>
<status status="PASS" starttime="20210730 17:42:22.230" endtime="20210730 17:42:22.235"/>
</if>
<status status="PASS" starttime="20210730 17:42:22.194" endtime="20210730 17:42:22.235"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:22.236" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:22.236" endtime="20210730 17:42:22.236"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:22.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:22.236" endtime="20210730 17:42:22.236"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:22.237" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:22.237" endtime="20210730 17:42:22.237"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:22.237" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:22.237" endtime="20210730 17:42:22.237"/>
</kw>
<msg timestamp="20210730 17:42:22.237" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:22.236" endtime="20210730 17:42:22.237"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:22.241" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:22.238" endtime="20210730 17:42:22.243"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.235" endtime="20210730 17:42:22.243"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:22.244" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:22.244" endtime="20210730 17:42:22.248"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:23.753" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:22.249" endtime="20210730 17:42:23.754"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.243" endtime="20210730 17:42:23.755"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:23.758" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:23.758" endtime="20210730 17:42:23.758"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:23.758" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:23.758" endtime="20210730 17:42:23.758"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:23.759" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:23.758" endtime="20210730 17:42:23.759"/>
</kw>
<msg timestamp="20210730 17:42:23.759" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:23.757" endtime="20210730 17:42:23.759"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:23.760" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:23.759" endtime="20210730 17:42:23.760"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.756" endtime="20210730 17:42:23.760"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:23.761" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:23.761" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:23.761" endtime="20210730 17:42:23.761"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.760" endtime="20210730 17:42:23.761"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:23.762" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:23.762" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:23.762" endtime="20210730 17:42:23.762"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:23.762" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:23.762" endtime="20210730 17:42:23.763"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:23.763" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:23.763" endtime="20210730 17:42:23.763"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:23.763" endtime="20210730 17:42:23.764"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:23.764" endtime="20210730 17:42:23.765"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.763" endtime="20210730 17:42:23.765"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:23.765" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:23.765" endtime="20210730 17:42:23.765"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:23.765" endtime="20210730 17:42:23.766"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:23.766" endtime="20210730 17:42:23.766"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.765" endtime="20210730 17:42:23.766"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:23.767" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:23.766" endtime="20210730 17:42:23.767"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:23.767" endtime="20210730 17:42:23.767"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:23.767" endtime="20210730 17:42:23.768"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.766" endtime="20210730 17:42:23.768"/>
</iter>
<status status="PASS" starttime="20210730 17:42:23.763" endtime="20210730 17:42:23.768"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:23.768" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:23.768" endtime="20210730 17:42:23.768"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.761" endtime="20210730 17:42:23.768"/>
</kw>
<status status="PASS" starttime="20210730 17:42:22.193" endtime="20210730 17:42:23.768"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:23.770" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:23.769" endtime="20210730 17:42:23.770"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:23.770" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210730 17:42:23.770" endtime="20210730 17:42:23.770"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:23.778" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:23.781" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:23.770" endtime="20210730 17:42:23.781"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:23.781" endtime="20210730 17:42:23.782"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:23.782" endtime="20210730 17:42:23.782"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:23.770" endtime="20210730 17:42:23.782"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:23.770" endtime="20210730 17:42:23.782"/>
</for>
<status status="FAIL" starttime="20210730 17:42:23.769" endtime="20210730 17:42:23.782"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:23.769" endtime="20210730 17:42:23.782"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:23.783" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:23.783" endtime="20210730 17:42:23.783"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:23.784" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210730 17:42:23.783" endtime="20210730 17:42:23.784"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:23.788" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:23.788" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:23.784" endtime="20210730 17:42:23.788"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:23.788" endtime="20210730 17:42:23.788"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:23.788" endtime="20210730 17:42:23.788"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:23.784" endtime="20210730 17:42:23.788"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:23.784" endtime="20210730 17:42:23.788"/>
</for>
<status status="FAIL" starttime="20210730 17:42:23.782" endtime="20210730 17:42:23.788"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:23.782" endtime="20210730 17:42:23.788"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:23.790" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:23.789" endtime="20210730 17:42:23.790"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:23.790" level="INFO">${payload} = {'password': 'abcdAB90'}</msg>
<status status="PASS" starttime="20210730 17:42:23.790" endtime="20210730 17:42:23.790"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:23.794" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:23.794" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:23.790" endtime="20210730 17:42:23.794"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:23.794" endtime="20210730 17:42:23.795"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:23.795" endtime="20210730 17:42:23.795"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:23.790" endtime="20210730 17:42:23.795"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:23.790" endtime="20210730 17:42:23.795"/>
</for>
<status status="FAIL" starttime="20210730 17:42:23.789" endtime="20210730 17:42:23.795"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:23.789" endtime="20210730 17:42:23.795"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:23.769" endtime="20210730 17:42:23.795"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:23.803" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:23.813" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:23.813" level="INFO">${pids} = 23832
23839
23848</msg>
<status status="PASS" starttime="20210730 17:42:23.800" endtime="20210730 17:42:23.813"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:23.814" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:23.813" endtime="20210730 17:42:23.814"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:23.815" level="INFO">${pids} = ['23832', '23839', '23848']</msg>
<status status="PASS" starttime="20210730 17:42:23.814" endtime="20210730 17:42:23.815"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23832</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:23.818" level="INFO">Running command 'kill 23832 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:23.815" endtime="20210730 17:42:23.819"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.815" endtime="20210730 17:42:23.819"/>
</iter>
<iter>
<var name="${pid}">23839</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:23.822" level="INFO">Running command 'kill 23839 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:23.819" endtime="20210730 17:42:23.824"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.819" endtime="20210730 17:42:23.824"/>
</iter>
<iter>
<var name="${pid}">23848</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:23.830" level="INFO">Running command 'kill 23848 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:23.824" endtime="20210730 17:42:23.831"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.824" endtime="20210730 17:42:23.831"/>
</iter>
<status status="PASS" starttime="20210730 17:42:23.815" endtime="20210730 17:42:23.831"/>
</for>
<status status="PASS" starttime="20210730 17:42:23.814" endtime="20210730 17:42:23.831"/>
</branch>
<status status="PASS" starttime="20210730 17:42:23.814" endtime="20210730 17:42:23.831"/>
</if>
<status status="PASS" starttime="20210730 17:42:23.796" endtime="20210730 17:42:23.831"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB90'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:22.193" endtime="20210730 17:42:23.832">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t77" name="With Each Valid Token, Updating Password Of Each System User With abcdAB90abcdAB90abcdAB Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:23.836" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:23.847" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:23.847" level="INFO">${pids} = 23877</msg>
<status status="PASS" starttime="20210730 17:42:23.834" endtime="20210730 17:42:23.847"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:23.848" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:23.847" endtime="20210730 17:42:23.848"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:23.848" level="INFO">${pids} = ['23877']</msg>
<status status="PASS" starttime="20210730 17:42:23.848" endtime="20210730 17:42:23.848"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23877</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:23.852" level="INFO">Running command 'kill 23877 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:23.849" endtime="20210730 17:42:23.853"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.848" endtime="20210730 17:42:23.853"/>
</iter>
<status status="PASS" starttime="20210730 17:42:23.848" endtime="20210730 17:42:23.853"/>
</for>
<status status="PASS" starttime="20210730 17:42:23.848" endtime="20210730 17:42:23.853"/>
</branch>
<status status="PASS" starttime="20210730 17:42:23.848" endtime="20210730 17:42:23.853"/>
</if>
<status status="PASS" starttime="20210730 17:42:23.833" endtime="20210730 17:42:23.853"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:23.854" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:23.854" endtime="20210730 17:42:23.854"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:23.855" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:23.855" endtime="20210730 17:42:23.855"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:23.855" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:23.855" endtime="20210730 17:42:23.855"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:23.855" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:23.855" endtime="20210730 17:42:23.855"/>
</kw>
<msg timestamp="20210730 17:42:23.856" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:23.854" endtime="20210730 17:42:23.856"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:23.868" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:23.864" endtime="20210730 17:42:23.869"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.853" endtime="20210730 17:42:23.869"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:23.871" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:23.870" endtime="20210730 17:42:23.874"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:25.387" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:23.875" endtime="20210730 17:42:25.387"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.870" endtime="20210730 17:42:25.387"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:25.388" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:25.388" endtime="20210730 17:42:25.388"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:25.388" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:25.388" endtime="20210730 17:42:25.388"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:25.389" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:25.389" endtime="20210730 17:42:25.389"/>
</kw>
<msg timestamp="20210730 17:42:25.389" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:25.388" endtime="20210730 17:42:25.389"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:25.390" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:25.389" endtime="20210730 17:42:25.390"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.387" endtime="20210730 17:42:25.390"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:25.391" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:25.391" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:25.390" endtime="20210730 17:42:25.391"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.390" endtime="20210730 17:42:25.391"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:25.392" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:25.392" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:25.391" endtime="20210730 17:42:25.392"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:25.392" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:25.392" endtime="20210730 17:42:25.392"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:25.393" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:25.392" endtime="20210730 17:42:25.393"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:25.393" endtime="20210730 17:42:25.393"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:25.394" endtime="20210730 17:42:25.394"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.392" endtime="20210730 17:42:25.394"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:25.394" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:25.394" endtime="20210730 17:42:25.394"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:25.394" endtime="20210730 17:42:25.395"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:25.395" endtime="20210730 17:42:25.396"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.394" endtime="20210730 17:42:25.396"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:25.396" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:25.396" endtime="20210730 17:42:25.396"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:25.396" endtime="20210730 17:42:25.397"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:25.397" endtime="20210730 17:42:25.397"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.396" endtime="20210730 17:42:25.397"/>
</iter>
<status status="PASS" starttime="20210730 17:42:25.392" endtime="20210730 17:42:25.397"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:25.398" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:25.397" endtime="20210730 17:42:25.398"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.391" endtime="20210730 17:42:25.398"/>
</kw>
<status status="PASS" starttime="20210730 17:42:23.833" endtime="20210730 17:42:25.398"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:25.399" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:25.399" endtime="20210730 17:42:25.399"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:25.400" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210730 17:42:25.399" endtime="20210730 17:42:25.400"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:25.408" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:25.408" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:25.400" endtime="20210730 17:42:25.408"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:25.409" endtime="20210730 17:42:25.409"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:25.409" endtime="20210730 17:42:25.409"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:25.400" endtime="20210730 17:42:25.409"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:25.400" endtime="20210730 17:42:25.409"/>
</for>
<status status="FAIL" starttime="20210730 17:42:25.398" endtime="20210730 17:42:25.409"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:25.398" endtime="20210730 17:42:25.409"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:25.410" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:25.410" endtime="20210730 17:42:25.410"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:25.411" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210730 17:42:25.410" endtime="20210730 17:42:25.411"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:25.415" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:25.415" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:25.411" endtime="20210730 17:42:25.415"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:25.415" endtime="20210730 17:42:25.415"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:25.415" endtime="20210730 17:42:25.415"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:25.411" endtime="20210730 17:42:25.415"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:25.411" endtime="20210730 17:42:25.415"/>
</for>
<status status="FAIL" starttime="20210730 17:42:25.409" endtime="20210730 17:42:25.415"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:25.409" endtime="20210730 17:42:25.416"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abcdAB90abcdAB90abcdAB</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:25.416" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:25.416" endtime="20210730 17:42:25.416"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:25.417" level="INFO">${payload} = {'password': 'abcdAB90abcdAB90abcdAB'}</msg>
<status status="PASS" starttime="20210730 17:42:25.417" endtime="20210730 17:42:25.417"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:25.420" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:25.421" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:25.417" endtime="20210730 17:42:25.421"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:25.421" endtime="20210730 17:42:25.421"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:25.421" endtime="20210730 17:42:25.421"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:25.417" endtime="20210730 17:42:25.421"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:25.417" endtime="20210730 17:42:25.421"/>
</for>
<status status="FAIL" starttime="20210730 17:42:25.416" endtime="20210730 17:42:25.421"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:25.416" endtime="20210730 17:42:25.421"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:25.398" endtime="20210730 17:42:25.421"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:25.426" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:25.436" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:25.436" level="INFO">${pids} = 23900
23907
23911</msg>
<status status="PASS" starttime="20210730 17:42:25.422" endtime="20210730 17:42:25.436"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:25.437" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:25.437" endtime="20210730 17:42:25.437"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:25.438" level="INFO">${pids} = ['23900', '23907', '23911']</msg>
<status status="PASS" starttime="20210730 17:42:25.437" endtime="20210730 17:42:25.438"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23900</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:25.442" level="INFO">Running command 'kill 23900 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:25.438" endtime="20210730 17:42:25.443"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.438" endtime="20210730 17:42:25.443"/>
</iter>
<iter>
<var name="${pid}">23907</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:25.446" level="INFO">Running command 'kill 23907 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:25.443" endtime="20210730 17:42:25.448"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.443" endtime="20210730 17:42:25.448"/>
</iter>
<iter>
<var name="${pid}">23911</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:25.452" level="INFO">Running command 'kill 23911 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:25.449" endtime="20210730 17:42:25.453"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.449" endtime="20210730 17:42:25.453"/>
</iter>
<status status="PASS" starttime="20210730 17:42:25.438" endtime="20210730 17:42:25.453"/>
</for>
<status status="PASS" starttime="20210730 17:42:25.437" endtime="20210730 17:42:25.453"/>
</branch>
<status status="PASS" starttime="20210730 17:42:25.437" endtime="20210730 17:42:25.453"/>
</if>
<status status="PASS" starttime="20210730 17:42:25.422" endtime="20210730 17:42:25.453"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abcdAB90abcdAB90abcdAB'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:23.832" endtime="20210730 17:42:25.453">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t78" name="With Each Valid Token, Updating Password Of Each System User With ABCabc! Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:25.466" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:25.477" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:25.477" level="INFO">${pids} = 23940</msg>
<status status="PASS" starttime="20210730 17:42:25.455" endtime="20210730 17:42:25.477"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:25.478" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:25.477" endtime="20210730 17:42:25.478"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:25.478" level="INFO">${pids} = ['23940']</msg>
<status status="PASS" starttime="20210730 17:42:25.478" endtime="20210730 17:42:25.478"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23940</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:25.498" level="INFO">Running command 'kill 23940 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:25.479" endtime="20210730 17:42:25.498"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.479" endtime="20210730 17:42:25.498"/>
</iter>
<status status="PASS" starttime="20210730 17:42:25.479" endtime="20210730 17:42:25.498"/>
</for>
<status status="PASS" starttime="20210730 17:42:25.478" endtime="20210730 17:42:25.499"/>
</branch>
<status status="PASS" starttime="20210730 17:42:25.478" endtime="20210730 17:42:25.499"/>
</if>
<status status="PASS" starttime="20210730 17:42:25.455" endtime="20210730 17:42:25.499"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:25.500" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:25.500" endtime="20210730 17:42:25.500"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:25.501" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:25.500" endtime="20210730 17:42:25.501"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:25.501" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:25.501" endtime="20210730 17:42:25.501"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:25.502" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:25.501" endtime="20210730 17:42:25.502"/>
</kw>
<msg timestamp="20210730 17:42:25.502" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:25.500" endtime="20210730 17:42:25.502"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:25.505" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:25.502" endtime="20210730 17:42:25.506"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.499" endtime="20210730 17:42:25.506"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:25.507" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:25.507" endtime="20210730 17:42:25.512"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:27.032" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:25.512" endtime="20210730 17:42:27.032"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.507" endtime="20210730 17:42:27.032"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:27.034" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:27.034" endtime="20210730 17:42:27.034"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:27.034" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:27.034" endtime="20210730 17:42:27.034"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:27.035" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:27.035" endtime="20210730 17:42:27.035"/>
</kw>
<msg timestamp="20210730 17:42:27.035" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:27.033" endtime="20210730 17:42:27.035"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:27.036" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:27.035" endtime="20210730 17:42:27.036"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.033" endtime="20210730 17:42:27.036"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:27.037" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:27.037" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:27.036" endtime="20210730 17:42:27.037"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.036" endtime="20210730 17:42:27.037"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:27.038" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:27.038" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:27.037" endtime="20210730 17:42:27.038"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:27.038" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:27.038" endtime="20210730 17:42:27.038"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:27.039" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:27.038" endtime="20210730 17:42:27.039"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:27.039" endtime="20210730 17:42:27.039"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:27.040" endtime="20210730 17:42:27.040"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.038" endtime="20210730 17:42:27.040"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:27.040" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:27.040" endtime="20210730 17:42:27.040"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:27.040" endtime="20210730 17:42:27.041"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:27.041" endtime="20210730 17:42:27.041"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.040" endtime="20210730 17:42:27.041"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:27.042" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:27.042" endtime="20210730 17:42:27.042"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:27.042" endtime="20210730 17:42:27.043"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:27.043" endtime="20210730 17:42:27.043"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.042" endtime="20210730 17:42:27.043"/>
</iter>
<status status="PASS" starttime="20210730 17:42:27.038" endtime="20210730 17:42:27.043"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:27.043" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:27.043" endtime="20210730 17:42:27.043"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.037" endtime="20210730 17:42:27.043"/>
</kw>
<status status="PASS" starttime="20210730 17:42:25.455" endtime="20210730 17:42:27.044"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:27.045" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:27.044" endtime="20210730 17:42:27.045"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:27.045" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210730 17:42:27.045" endtime="20210730 17:42:27.045"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:27.054" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:27.054" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:27.046" endtime="20210730 17:42:27.054"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:27.054" endtime="20210730 17:42:27.054"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:27.054" endtime="20210730 17:42:27.054"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:27.046" endtime="20210730 17:42:27.055"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:27.045" endtime="20210730 17:42:27.055"/>
</for>
<status status="FAIL" starttime="20210730 17:42:27.044" endtime="20210730 17:42:27.055"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:27.044" endtime="20210730 17:42:27.055"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:27.056" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:27.056" endtime="20210730 17:42:27.056"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:27.056" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210730 17:42:27.056" endtime="20210730 17:42:27.056"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:27.060" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:27.061" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:27.057" endtime="20210730 17:42:27.061"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:27.061" endtime="20210730 17:42:27.061"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:27.061" endtime="20210730 17:42:27.061"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:27.057" endtime="20210730 17:42:27.061"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:27.057" endtime="20210730 17:42:27.061"/>
</for>
<status status="FAIL" starttime="20210730 17:42:27.055" endtime="20210730 17:42:27.061"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:27.055" endtime="20210730 17:42:27.061"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:27.062" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:27.062" endtime="20210730 17:42:27.062"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:27.062" level="INFO">${payload} = {'password': 'ABCabc!'}</msg>
<status status="PASS" starttime="20210730 17:42:27.062" endtime="20210730 17:42:27.062"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:27.066" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:27.066" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:27.063" endtime="20210730 17:42:27.067"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:27.067" endtime="20210730 17:42:27.067"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:27.067" endtime="20210730 17:42:27.067"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:27.063" endtime="20210730 17:42:27.067"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:27.063" endtime="20210730 17:42:27.067"/>
</for>
<status status="FAIL" starttime="20210730 17:42:27.061" endtime="20210730 17:42:27.067"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:27.061" endtime="20210730 17:42:27.067"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:27.044" endtime="20210730 17:42:27.067"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:27.072" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:27.083" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:27.083" level="INFO">${pids} = 23963
23970
23975</msg>
<status status="PASS" starttime="20210730 17:42:27.068" endtime="20210730 17:42:27.083"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:27.084" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:27.083" endtime="20210730 17:42:27.084"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:27.084" level="INFO">${pids} = ['23963', '23970', '23975']</msg>
<status status="PASS" starttime="20210730 17:42:27.084" endtime="20210730 17:42:27.084"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">23963</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:27.091" level="INFO">Running command 'kill 23963 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:27.085" endtime="20210730 17:42:27.092"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.084" endtime="20210730 17:42:27.092"/>
</iter>
<iter>
<var name="${pid}">23970</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:27.106" level="INFO">Running command 'kill 23970 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:27.092" endtime="20210730 17:42:27.106"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.092" endtime="20210730 17:42:27.106"/>
</iter>
<iter>
<var name="${pid}">23975</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:27.111" level="INFO">Running command 'kill 23975 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:27.107" endtime="20210730 17:42:27.112"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.106" endtime="20210730 17:42:27.112"/>
</iter>
<status status="PASS" starttime="20210730 17:42:27.084" endtime="20210730 17:42:27.112"/>
</for>
<status status="PASS" starttime="20210730 17:42:27.084" endtime="20210730 17:42:27.112"/>
</branch>
<status status="PASS" starttime="20210730 17:42:27.084" endtime="20210730 17:42:27.112"/>
</if>
<status status="PASS" starttime="20210730 17:42:27.068" endtime="20210730 17:42:27.112"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:25.454" endtime="20210730 17:42:27.113">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t79" name="With Each Valid Token, Updating Password Of Each System User With ABCabc!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:27.117" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:27.127" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:27.127" level="INFO">${pids} = 24004</msg>
<status status="PASS" starttime="20210730 17:42:27.114" endtime="20210730 17:42:27.127"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:27.128" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:27.128" endtime="20210730 17:42:27.128"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:27.129" level="INFO">${pids} = ['24004']</msg>
<status status="PASS" starttime="20210730 17:42:27.129" endtime="20210730 17:42:27.129"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24004</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:27.133" level="INFO">Running command 'kill 24004 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:27.129" endtime="20210730 17:42:27.133"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.129" endtime="20210730 17:42:27.134"/>
</iter>
<status status="PASS" starttime="20210730 17:42:27.129" endtime="20210730 17:42:27.134"/>
</for>
<status status="PASS" starttime="20210730 17:42:27.128" endtime="20210730 17:42:27.134"/>
</branch>
<status status="PASS" starttime="20210730 17:42:27.128" endtime="20210730 17:42:27.134"/>
</if>
<status status="PASS" starttime="20210730 17:42:27.114" endtime="20210730 17:42:27.134"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:27.135" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:27.135" endtime="20210730 17:42:27.135"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:27.136" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:27.136" endtime="20210730 17:42:27.136"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:27.136" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:27.136" endtime="20210730 17:42:27.136"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:27.136" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:27.136" endtime="20210730 17:42:27.136"/>
</kw>
<msg timestamp="20210730 17:42:27.137" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:27.135" endtime="20210730 17:42:27.137"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:27.140" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:27.137" endtime="20210730 17:42:27.142"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.134" endtime="20210730 17:42:27.142"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:27.144" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:27.143" endtime="20210730 17:42:27.167"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:28.671" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:27.168" endtime="20210730 17:42:28.671"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.143" endtime="20210730 17:42:28.673"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:28.675" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:28.675" endtime="20210730 17:42:28.675"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:28.676" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:28.675" endtime="20210730 17:42:28.676"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:28.676" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:28.676" endtime="20210730 17:42:28.676"/>
</kw>
<msg timestamp="20210730 17:42:28.676" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:28.675" endtime="20210730 17:42:28.676"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:28.677" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:28.676" endtime="20210730 17:42:28.677"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.674" endtime="20210730 17:42:28.677"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:28.678" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:28.678" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:28.678" endtime="20210730 17:42:28.678"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.677" endtime="20210730 17:42:28.678"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:28.679" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:28.679" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:28.678" endtime="20210730 17:42:28.679"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:28.679" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:28.679" endtime="20210730 17:42:28.679"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:28.680" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:28.679" endtime="20210730 17:42:28.680"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:28.680" endtime="20210730 17:42:28.680"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:28.681" endtime="20210730 17:42:28.681"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.679" endtime="20210730 17:42:28.681"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:28.681" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:28.681" endtime="20210730 17:42:28.681"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:28.681" endtime="20210730 17:42:28.682"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:28.682" endtime="20210730 17:42:28.682"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.681" endtime="20210730 17:42:28.682"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:28.683" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:28.682" endtime="20210730 17:42:28.683"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:28.683" endtime="20210730 17:42:28.683"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:28.684" endtime="20210730 17:42:28.684"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.682" endtime="20210730 17:42:28.684"/>
</iter>
<status status="PASS" starttime="20210730 17:42:28.679" endtime="20210730 17:42:28.684"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:28.684" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:28.684" endtime="20210730 17:42:28.684"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.678" endtime="20210730 17:42:28.684"/>
</kw>
<status status="PASS" starttime="20210730 17:42:27.114" endtime="20210730 17:42:28.684"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:28.686" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:28.685" endtime="20210730 17:42:28.686"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:28.686" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210730 17:42:28.686" endtime="20210730 17:42:28.686"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:28.694" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:28.695" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:28.686" endtime="20210730 17:42:28.695"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:28.695" endtime="20210730 17:42:28.695"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:28.695" endtime="20210730 17:42:28.695"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:28.686" endtime="20210730 17:42:28.695"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:28.686" endtime="20210730 17:42:28.695"/>
</for>
<status status="FAIL" starttime="20210730 17:42:28.685" endtime="20210730 17:42:28.695"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:28.685" endtime="20210730 17:42:28.695"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:28.696" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:28.696" endtime="20210730 17:42:28.696"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:28.697" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210730 17:42:28.697" endtime="20210730 17:42:28.697"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:28.701" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:28.701" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:28.697" endtime="20210730 17:42:28.701"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:28.701" endtime="20210730 17:42:28.701"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:28.701" endtime="20210730 17:42:28.701"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:28.697" endtime="20210730 17:42:28.701"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:28.697" endtime="20210730 17:42:28.701"/>
</for>
<status status="FAIL" starttime="20210730 17:42:28.696" endtime="20210730 17:42:28.702"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:28.695" endtime="20210730 17:42:28.702"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:28.702" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:28.702" endtime="20210730 17:42:28.703"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:28.703" level="INFO">${payload} = {'password': 'ABCabc!?'}</msg>
<status status="PASS" starttime="20210730 17:42:28.703" endtime="20210730 17:42:28.703"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:28.706" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:28.706" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:28.703" endtime="20210730 17:42:28.706"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:28.707" endtime="20210730 17:42:28.707"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:28.707" endtime="20210730 17:42:28.707"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:28.703" endtime="20210730 17:42:28.707"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:28.703" endtime="20210730 17:42:28.707"/>
</for>
<status status="FAIL" starttime="20210730 17:42:28.702" endtime="20210730 17:42:28.707"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:28.702" endtime="20210730 17:42:28.707"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:28.685" endtime="20210730 17:42:28.707"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:28.716" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:28.726" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:28.726" level="INFO">${pids} = 24027
24034
24038</msg>
<status status="PASS" starttime="20210730 17:42:28.708" endtime="20210730 17:42:28.726"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:28.727" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:28.726" endtime="20210730 17:42:28.727"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:28.727" level="INFO">${pids} = ['24027', '24034', '24038']</msg>
<status status="PASS" starttime="20210730 17:42:28.727" endtime="20210730 17:42:28.727"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24027</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:28.731" level="INFO">Running command 'kill 24027 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:28.728" endtime="20210730 17:42:28.731"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.727" endtime="20210730 17:42:28.731"/>
</iter>
<iter>
<var name="${pid}">24034</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:28.734" level="INFO">Running command 'kill 24034 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:28.731" endtime="20210730 17:42:28.734"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.731" endtime="20210730 17:42:28.735"/>
</iter>
<iter>
<var name="${pid}">24038</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:28.738" level="INFO">Running command 'kill 24038 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:28.735" endtime="20210730 17:42:28.738"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.735" endtime="20210730 17:42:28.738"/>
</iter>
<status status="PASS" starttime="20210730 17:42:28.727" endtime="20210730 17:42:28.738"/>
</for>
<status status="PASS" starttime="20210730 17:42:28.727" endtime="20210730 17:42:28.738"/>
</branch>
<status status="PASS" starttime="20210730 17:42:28.727" endtime="20210730 17:42:28.738"/>
</if>
<status status="PASS" starttime="20210730 17:42:28.707" endtime="20210730 17:42:28.739"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:27.113" endtime="20210730 17:42:28.739">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t80" name="With Each Valid Token, Updating Password Of Each System User With ABCabc!?ABCabc!?ABCab. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:28.751" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:28.777" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:28.777" level="INFO">${pids} = 24067</msg>
<status status="PASS" starttime="20210730 17:42:28.740" endtime="20210730 17:42:28.777"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:28.778" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:28.777" endtime="20210730 17:42:28.778"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:28.779" level="INFO">${pids} = ['24067']</msg>
<status status="PASS" starttime="20210730 17:42:28.778" endtime="20210730 17:42:28.779"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24067</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:28.782" level="INFO">Running command 'kill 24067 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:28.779" endtime="20210730 17:42:28.783"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.779" endtime="20210730 17:42:28.783"/>
</iter>
<status status="PASS" starttime="20210730 17:42:28.779" endtime="20210730 17:42:28.783"/>
</for>
<status status="PASS" starttime="20210730 17:42:28.778" endtime="20210730 17:42:28.783"/>
</branch>
<status status="PASS" starttime="20210730 17:42:28.778" endtime="20210730 17:42:28.783"/>
</if>
<status status="PASS" starttime="20210730 17:42:28.740" endtime="20210730 17:42:28.783"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:28.784" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:28.784" endtime="20210730 17:42:28.784"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:28.784" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:28.784" endtime="20210730 17:42:28.784"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:28.785" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:28.785" endtime="20210730 17:42:28.785"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:28.785" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:28.785" endtime="20210730 17:42:28.785"/>
</kw>
<msg timestamp="20210730 17:42:28.785" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:28.784" endtime="20210730 17:42:28.785"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:28.788" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:28.785" endtime="20210730 17:42:28.790"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.783" endtime="20210730 17:42:28.790"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:28.791" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:28.791" endtime="20210730 17:42:28.796"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:30.299" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:28.797" endtime="20210730 17:42:30.300"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.790" endtime="20210730 17:42:30.300"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:30.303" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:30.302" endtime="20210730 17:42:30.303"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:30.303" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:30.303" endtime="20210730 17:42:30.303"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:30.304" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:30.304" endtime="20210730 17:42:30.304"/>
</kw>
<msg timestamp="20210730 17:42:30.304" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:30.302" endtime="20210730 17:42:30.304"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:30.304" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:30.304" endtime="20210730 17:42:30.305"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.301" endtime="20210730 17:42:30.305"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:30.305" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:30.306" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:30.305" endtime="20210730 17:42:30.306"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.305" endtime="20210730 17:42:30.306"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:30.307" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:30.307" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:30.306" endtime="20210730 17:42:30.307"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:30.307" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:30.307" endtime="20210730 17:42:30.307"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:30.307" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:30.307" endtime="20210730 17:42:30.308"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:30.308" endtime="20210730 17:42:30.308"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:30.309" endtime="20210730 17:42:30.309"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.307" endtime="20210730 17:42:30.309"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:30.309" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:30.309" endtime="20210730 17:42:30.309"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:30.309" endtime="20210730 17:42:30.310"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:30.310" endtime="20210730 17:42:30.310"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.309" endtime="20210730 17:42:30.310"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:30.311" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:30.310" endtime="20210730 17:42:30.311"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:30.311" endtime="20210730 17:42:30.311"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:30.311" endtime="20210730 17:42:30.312"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.310" endtime="20210730 17:42:30.312"/>
</iter>
<status status="PASS" starttime="20210730 17:42:30.307" endtime="20210730 17:42:30.312"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:30.312" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:30.312" endtime="20210730 17:42:30.312"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.306" endtime="20210730 17:42:30.312"/>
</kw>
<status status="PASS" starttime="20210730 17:42:28.740" endtime="20210730 17:42:30.312"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:30.313" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:30.313" endtime="20210730 17:42:30.313"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:30.314" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210730 17:42:30.314" endtime="20210730 17:42:30.314"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:30.323" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:30.323" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:30.315" endtime="20210730 17:42:30.323"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:30.323" endtime="20210730 17:42:30.323"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:30.323" endtime="20210730 17:42:30.323"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:30.314" endtime="20210730 17:42:30.323"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:30.314" endtime="20210730 17:42:30.323"/>
</for>
<status status="FAIL" starttime="20210730 17:42:30.313" endtime="20210730 17:42:30.324"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:30.313" endtime="20210730 17:42:30.324"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:30.326" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:30.325" endtime="20210730 17:42:30.326"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:30.326" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210730 17:42:30.326" endtime="20210730 17:42:30.326"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:30.330" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:30.331" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:30.326" endtime="20210730 17:42:30.331"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:30.331" endtime="20210730 17:42:30.331"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:30.331" endtime="20210730 17:42:30.331"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:30.326" endtime="20210730 17:42:30.331"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:30.326" endtime="20210730 17:42:30.331"/>
</for>
<status status="FAIL" starttime="20210730 17:42:30.324" endtime="20210730 17:42:30.331"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:30.324" endtime="20210730 17:42:30.331"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABCabc!?ABCabc!?ABCab.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:30.332" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:30.332" endtime="20210730 17:42:30.332"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:30.332" level="INFO">${payload} = {'password': 'ABCabc!?ABCabc!?ABCab.'}</msg>
<status status="PASS" starttime="20210730 17:42:30.332" endtime="20210730 17:42:30.333"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:30.336" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:30.337" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:30.333" endtime="20210730 17:42:30.337"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:30.337" endtime="20210730 17:42:30.337"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:30.337" endtime="20210730 17:42:30.337"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:30.333" endtime="20210730 17:42:30.337"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:30.333" endtime="20210730 17:42:30.337"/>
</for>
<status status="FAIL" starttime="20210730 17:42:30.331" endtime="20210730 17:42:30.337"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:30.331" endtime="20210730 17:42:30.337"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:30.312" endtime="20210730 17:42:30.337"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:30.344" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:30.354" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:30.354" level="INFO">${pids} = 24090
24097
24101</msg>
<status status="PASS" starttime="20210730 17:42:30.338" endtime="20210730 17:42:30.354"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:30.355" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:30.355" endtime="20210730 17:42:30.355"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:30.356" level="INFO">${pids} = ['24090', '24097', '24101']</msg>
<status status="PASS" starttime="20210730 17:42:30.356" endtime="20210730 17:42:30.356"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24090</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:30.360" level="INFO">Running command 'kill 24090 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:30.356" endtime="20210730 17:42:30.360"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.356" endtime="20210730 17:42:30.360"/>
</iter>
<iter>
<var name="${pid}">24097</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:30.363" level="INFO">Running command 'kill 24097 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:30.361" endtime="20210730 17:42:30.364"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.360" endtime="20210730 17:42:30.364"/>
</iter>
<iter>
<var name="${pid}">24101</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:30.368" level="INFO">Running command 'kill 24101 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:30.364" endtime="20210730 17:42:30.368"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.364" endtime="20210730 17:42:30.368"/>
</iter>
<status status="PASS" starttime="20210730 17:42:30.356" endtime="20210730 17:42:30.368"/>
</for>
<status status="PASS" starttime="20210730 17:42:30.356" endtime="20210730 17:42:30.368"/>
</branch>
<status status="PASS" starttime="20210730 17:42:30.355" endtime="20210730 17:42:30.368"/>
</if>
<status status="PASS" starttime="20210730 17:42:30.338" endtime="20210730 17:42:30.369"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABCabc!?ABCabc!?ABCab.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:28.739" endtime="20210730 17:42:30.369">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t81" name="With Each Valid Token, Updating Password Of Each System User With abc012. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:30.375" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:30.385" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:30.385" level="INFO">${pids} = 24130</msg>
<status status="PASS" starttime="20210730 17:42:30.371" endtime="20210730 17:42:30.386"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:30.387" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:30.386" endtime="20210730 17:42:30.387"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:30.387" level="INFO">${pids} = ['24130']</msg>
<status status="PASS" starttime="20210730 17:42:30.387" endtime="20210730 17:42:30.387"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24130</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:30.392" level="INFO">Running command 'kill 24130 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:30.388" endtime="20210730 17:42:30.393"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.388" endtime="20210730 17:42:30.393"/>
</iter>
<status status="PASS" starttime="20210730 17:42:30.388" endtime="20210730 17:42:30.393"/>
</for>
<status status="PASS" starttime="20210730 17:42:30.387" endtime="20210730 17:42:30.393"/>
</branch>
<status status="PASS" starttime="20210730 17:42:30.387" endtime="20210730 17:42:30.393"/>
</if>
<status status="PASS" starttime="20210730 17:42:30.371" endtime="20210730 17:42:30.393"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:30.394" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:30.394" endtime="20210730 17:42:30.394"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:30.395" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:30.394" endtime="20210730 17:42:30.395"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:30.395" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:30.395" endtime="20210730 17:42:30.395"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:30.395" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:30.395" endtime="20210730 17:42:30.395"/>
</kw>
<msg timestamp="20210730 17:42:30.396" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:30.394" endtime="20210730 17:42:30.396"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:30.399" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:30.396" endtime="20210730 17:42:30.400"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.393" endtime="20210730 17:42:30.400"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:30.402" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:30.401" endtime="20210730 17:42:30.428"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:31.935" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:30.428" endtime="20210730 17:42:31.936"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.401" endtime="20210730 17:42:31.936"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:31.939" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:31.938" endtime="20210730 17:42:31.939"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:31.940" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:31.939" endtime="20210730 17:42:31.940"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:31.941" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:31.940" endtime="20210730 17:42:31.941"/>
</kw>
<msg timestamp="20210730 17:42:31.942" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:31.937" endtime="20210730 17:42:31.942"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:31.943" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:31.942" endtime="20210730 17:42:31.943"/>
</kw>
<status status="PASS" starttime="20210730 17:42:31.937" endtime="20210730 17:42:31.944"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:31.945" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:31.945" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:31.944" endtime="20210730 17:42:31.945"/>
</kw>
<status status="PASS" starttime="20210730 17:42:31.944" endtime="20210730 17:42:31.945"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:31.947" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:31.947" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:31.946" endtime="20210730 17:42:31.947"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:31.948" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:31.947" endtime="20210730 17:42:31.948"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:31.949" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:31.948" endtime="20210730 17:42:31.949"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:31.949" endtime="20210730 17:42:31.950"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:31.951" endtime="20210730 17:42:31.951"/>
</kw>
<status status="PASS" starttime="20210730 17:42:31.948" endtime="20210730 17:42:31.951"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:31.952" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:31.951" endtime="20210730 17:42:31.952"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:31.952" endtime="20210730 17:42:31.953"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:31.953" endtime="20210730 17:42:31.953"/>
</kw>
<status status="PASS" starttime="20210730 17:42:31.951" endtime="20210730 17:42:31.953"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:31.954" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:31.954" endtime="20210730 17:42:31.954"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:31.954" endtime="20210730 17:42:31.955"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:31.955" endtime="20210730 17:42:31.955"/>
</kw>
<status status="PASS" starttime="20210730 17:42:31.953" endtime="20210730 17:42:31.956"/>
</iter>
<status status="PASS" starttime="20210730 17:42:31.948" endtime="20210730 17:42:31.956"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:31.956" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:31.956" endtime="20210730 17:42:31.956"/>
</kw>
<status status="PASS" starttime="20210730 17:42:31.945" endtime="20210730 17:42:31.956"/>
</kw>
<status status="PASS" starttime="20210730 17:42:30.371" endtime="20210730 17:42:31.956"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:31.958" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:31.957" endtime="20210730 17:42:31.958"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:31.958" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210730 17:42:31.958" endtime="20210730 17:42:31.958"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:31.971" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:31.971" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:31.959" endtime="20210730 17:42:31.971"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:31.971" endtime="20210730 17:42:31.971"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:31.971" endtime="20210730 17:42:31.971"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:31.959" endtime="20210730 17:42:31.971"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:31.958" endtime="20210730 17:42:31.972"/>
</for>
<status status="FAIL" starttime="20210730 17:42:31.957" endtime="20210730 17:42:31.972"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:31.957" endtime="20210730 17:42:31.972"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:31.973" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:31.972" endtime="20210730 17:42:31.973"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:31.973" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210730 17:42:31.973" endtime="20210730 17:42:31.973"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:31.977" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:31.977" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:31.973" endtime="20210730 17:42:31.977"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:31.978" endtime="20210730 17:42:31.978"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:31.978" endtime="20210730 17:42:31.978"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:31.973" endtime="20210730 17:42:31.978"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:31.973" endtime="20210730 17:42:31.978"/>
</for>
<status status="FAIL" starttime="20210730 17:42:31.972" endtime="20210730 17:42:31.978"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:31.972" endtime="20210730 17:42:31.978"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:31.979" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:31.979" endtime="20210730 17:42:31.979"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:31.979" level="INFO">${payload} = {'password': 'abc012.'}</msg>
<status status="PASS" starttime="20210730 17:42:31.979" endtime="20210730 17:42:31.979"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:31.983" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:31.983" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:31.980" endtime="20210730 17:42:31.983"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:31.983" endtime="20210730 17:42:31.983"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:31.983" endtime="20210730 17:42:31.983"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:31.979" endtime="20210730 17:42:31.983"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:31.979" endtime="20210730 17:42:31.983"/>
</for>
<status status="FAIL" starttime="20210730 17:42:31.978" endtime="20210730 17:42:31.983"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:31.978" endtime="20210730 17:42:31.983"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:31.957" endtime="20210730 17:42:31.984"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:31.989" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:31.999" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:31.999" level="INFO">${pids} = 24153
24160
24165</msg>
<status status="PASS" starttime="20210730 17:42:31.985" endtime="20210730 17:42:31.999"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:32.000" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:32.000" endtime="20210730 17:42:32.000"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:32.001" level="INFO">${pids} = ['24153', '24160', '24165']</msg>
<status status="PASS" starttime="20210730 17:42:32.001" endtime="20210730 17:42:32.001"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24153</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:32.006" level="INFO">Running command 'kill 24153 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:32.001" endtime="20210730 17:42:32.006"/>
</kw>
<status status="PASS" starttime="20210730 17:42:32.001" endtime="20210730 17:42:32.007"/>
</iter>
<iter>
<var name="${pid}">24160</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:32.011" level="INFO">Running command 'kill 24160 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:32.007" endtime="20210730 17:42:32.012"/>
</kw>
<status status="PASS" starttime="20210730 17:42:32.007" endtime="20210730 17:42:32.013"/>
</iter>
<iter>
<var name="${pid}">24165</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:32.019" level="INFO">Running command 'kill 24165 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:32.013" endtime="20210730 17:42:32.019"/>
</kw>
<status status="PASS" starttime="20210730 17:42:32.013" endtime="20210730 17:42:32.019"/>
</iter>
<status status="PASS" starttime="20210730 17:42:32.001" endtime="20210730 17:42:32.019"/>
</for>
<status status="PASS" starttime="20210730 17:42:32.001" endtime="20210730 17:42:32.019"/>
</branch>
<status status="PASS" starttime="20210730 17:42:32.000" endtime="20210730 17:42:32.019"/>
</if>
<status status="PASS" starttime="20210730 17:42:31.984" endtime="20210730 17:42:32.019"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:30.370" endtime="20210730 17:42:32.020">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t82" name="With Each Valid Token, Updating Password Of Each System User With abc012!? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:32.025" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:32.038" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:32.038" level="INFO">${pids} = 24194</msg>
<status status="PASS" starttime="20210730 17:42:32.021" endtime="20210730 17:42:32.038"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:32.039" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:32.038" endtime="20210730 17:42:32.039"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:32.039" level="INFO">${pids} = ['24194']</msg>
<status status="PASS" starttime="20210730 17:42:32.039" endtime="20210730 17:42:32.039"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24194</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:32.043" level="INFO">Running command 'kill 24194 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:32.039" endtime="20210730 17:42:32.043"/>
</kw>
<status status="PASS" starttime="20210730 17:42:32.039" endtime="20210730 17:42:32.043"/>
</iter>
<status status="PASS" starttime="20210730 17:42:32.039" endtime="20210730 17:42:32.043"/>
</for>
<status status="PASS" starttime="20210730 17:42:32.039" endtime="20210730 17:42:32.043"/>
</branch>
<status status="PASS" starttime="20210730 17:42:32.039" endtime="20210730 17:42:32.043"/>
</if>
<status status="PASS" starttime="20210730 17:42:32.021" endtime="20210730 17:42:32.043"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:32.045" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:32.044" endtime="20210730 17:42:32.045"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:32.045" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:32.045" endtime="20210730 17:42:32.045"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:32.046" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:32.045" endtime="20210730 17:42:32.046"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:32.046" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:32.046" endtime="20210730 17:42:32.046"/>
</kw>
<msg timestamp="20210730 17:42:32.046" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:32.045" endtime="20210730 17:42:32.046"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:32.068" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:32.046" endtime="20210730 17:42:32.070"/>
</kw>
<status status="PASS" starttime="20210730 17:42:32.044" endtime="20210730 17:42:32.070"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:32.071" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:32.071" endtime="20210730 17:42:32.076"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:33.578" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:32.076" endtime="20210730 17:42:33.579"/>
</kw>
<status status="PASS" starttime="20210730 17:42:32.070" endtime="20210730 17:42:33.580"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:33.583" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:33.582" endtime="20210730 17:42:33.583"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:33.584" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:33.583" endtime="20210730 17:42:33.584"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:33.584" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:33.584" endtime="20210730 17:42:33.584"/>
</kw>
<msg timestamp="20210730 17:42:33.584" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:33.582" endtime="20210730 17:42:33.585"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:33.585" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:33.585" endtime="20210730 17:42:33.586"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.581" endtime="20210730 17:42:33.586"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:33.586" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:33.587" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:33.586" endtime="20210730 17:42:33.587"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.586" endtime="20210730 17:42:33.587"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:33.589" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:33.589" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:33.588" endtime="20210730 17:42:33.589"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:33.589" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:33.589" endtime="20210730 17:42:33.589"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:33.590" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:33.590" endtime="20210730 17:42:33.590"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:33.590" endtime="20210730 17:42:33.591"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:33.591" endtime="20210730 17:42:33.591"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.590" endtime="20210730 17:42:33.591"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:33.592" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:33.592" endtime="20210730 17:42:33.592"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:33.592" endtime="20210730 17:42:33.593"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:33.593" endtime="20210730 17:42:33.593"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.592" endtime="20210730 17:42:33.593"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:33.594" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:33.593" endtime="20210730 17:42:33.594"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:33.594" endtime="20210730 17:42:33.595"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:33.595" endtime="20210730 17:42:33.595"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.593" endtime="20210730 17:42:33.595"/>
</iter>
<status status="PASS" starttime="20210730 17:42:33.589" endtime="20210730 17:42:33.595"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:33.596" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:33.595" endtime="20210730 17:42:33.596"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.587" endtime="20210730 17:42:33.596"/>
</kw>
<status status="PASS" starttime="20210730 17:42:32.021" endtime="20210730 17:42:33.596"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:33.597" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:33.597" endtime="20210730 17:42:33.597"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:33.597" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210730 17:42:33.597" endtime="20210730 17:42:33.597"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:33.605" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:33.606" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:33.598" endtime="20210730 17:42:33.606"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:33.606" endtime="20210730 17:42:33.606"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:33.606" endtime="20210730 17:42:33.606"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:33.598" endtime="20210730 17:42:33.606"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:33.597" endtime="20210730 17:42:33.606"/>
</for>
<status status="FAIL" starttime="20210730 17:42:33.596" endtime="20210730 17:42:33.606"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:33.596" endtime="20210730 17:42:33.606"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:33.607" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:33.607" endtime="20210730 17:42:33.607"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:33.608" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210730 17:42:33.607" endtime="20210730 17:42:33.608"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:33.612" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:33.612" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:33.608" endtime="20210730 17:42:33.612"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:33.612" endtime="20210730 17:42:33.612"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:33.612" endtime="20210730 17:42:33.612"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:33.608" endtime="20210730 17:42:33.613"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:33.608" endtime="20210730 17:42:33.613"/>
</for>
<status status="FAIL" starttime="20210730 17:42:33.606" endtime="20210730 17:42:33.613"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:33.606" endtime="20210730 17:42:33.613"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:33.614" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:33.613" endtime="20210730 17:42:33.614"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:33.614" level="INFO">${payload} = {'password': 'abc012!?'}</msg>
<status status="PASS" starttime="20210730 17:42:33.614" endtime="20210730 17:42:33.614"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:33.618" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:33.618" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:33.615" endtime="20210730 17:42:33.618"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:33.618" endtime="20210730 17:42:33.618"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:33.618" endtime="20210730 17:42:33.618"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:33.614" endtime="20210730 17:42:33.618"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:33.614" endtime="20210730 17:42:33.618"/>
</for>
<status status="FAIL" starttime="20210730 17:42:33.613" endtime="20210730 17:42:33.618"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:33.613" endtime="20210730 17:42:33.618"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:33.596" endtime="20210730 17:42:33.618"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:33.627" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:33.637" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:33.637" level="INFO">${pids} = 24217
24224
24228</msg>
<status status="PASS" starttime="20210730 17:42:33.619" endtime="20210730 17:42:33.637"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:33.638" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:33.637" endtime="20210730 17:42:33.638"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:33.638" level="INFO">${pids} = ['24217', '24224', '24228']</msg>
<status status="PASS" starttime="20210730 17:42:33.638" endtime="20210730 17:42:33.638"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24217</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:33.642" level="INFO">Running command 'kill 24217 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:33.639" endtime="20210730 17:42:33.643"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.639" endtime="20210730 17:42:33.643"/>
</iter>
<iter>
<var name="${pid}">24224</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:33.647" level="INFO">Running command 'kill 24224 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:33.643" endtime="20210730 17:42:33.647"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.643" endtime="20210730 17:42:33.647"/>
</iter>
<iter>
<var name="${pid}">24228</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:33.651" level="INFO">Running command 'kill 24228 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:33.648" endtime="20210730 17:42:33.651"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.647" endtime="20210730 17:42:33.651"/>
</iter>
<status status="PASS" starttime="20210730 17:42:33.639" endtime="20210730 17:42:33.651"/>
</for>
<status status="PASS" starttime="20210730 17:42:33.638" endtime="20210730 17:42:33.651"/>
</branch>
<status status="PASS" starttime="20210730 17:42:33.638" endtime="20210730 17:42:33.651"/>
</if>
<status status="PASS" starttime="20210730 17:42:33.619" endtime="20210730 17:42:33.652"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012!?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:32.020" endtime="20210730 17:42:33.652">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t83" name="With Each Valid Token, Updating Password Of Each System User With abc012!?abc012!?abc012 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:33.658" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:33.669" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:33.669" level="INFO">${pids} = 24257</msg>
<status status="PASS" starttime="20210730 17:42:33.654" endtime="20210730 17:42:33.669"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:33.670" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:33.669" endtime="20210730 17:42:33.670"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:33.670" level="INFO">${pids} = ['24257']</msg>
<status status="PASS" starttime="20210730 17:42:33.670" endtime="20210730 17:42:33.670"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24257</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:33.683" level="INFO">Running command 'kill 24257 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:33.671" endtime="20210730 17:42:33.684"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.671" endtime="20210730 17:42:33.684"/>
</iter>
<status status="PASS" starttime="20210730 17:42:33.670" endtime="20210730 17:42:33.684"/>
</for>
<status status="PASS" starttime="20210730 17:42:33.670" endtime="20210730 17:42:33.684"/>
</branch>
<status status="PASS" starttime="20210730 17:42:33.670" endtime="20210730 17:42:33.684"/>
</if>
<status status="PASS" starttime="20210730 17:42:33.653" endtime="20210730 17:42:33.685"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:33.686" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:33.685" endtime="20210730 17:42:33.686"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:33.687" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:33.686" endtime="20210730 17:42:33.687"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:33.687" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:33.687" endtime="20210730 17:42:33.687"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:33.687" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:33.687" endtime="20210730 17:42:33.687"/>
</kw>
<msg timestamp="20210730 17:42:33.688" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:33.686" endtime="20210730 17:42:33.688"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:33.691" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:33.688" endtime="20210730 17:42:33.693"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.685" endtime="20210730 17:42:33.694"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:33.695" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:33.695" endtime="20210730 17:42:33.699"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:35.200" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:33.700" endtime="20210730 17:42:35.201"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.694" endtime="20210730 17:42:35.201"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:35.202" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:35.202" endtime="20210730 17:42:35.202"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:35.203" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:35.203" endtime="20210730 17:42:35.203"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:35.203" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:35.203" endtime="20210730 17:42:35.203"/>
</kw>
<msg timestamp="20210730 17:42:35.204" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:35.202" endtime="20210730 17:42:35.204"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:35.204" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:35.204" endtime="20210730 17:42:35.205"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.201" endtime="20210730 17:42:35.205"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:35.205" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:35.205" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:35.205" endtime="20210730 17:42:35.205"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.205" endtime="20210730 17:42:35.206"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:35.206" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:35.206" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:35.206" endtime="20210730 17:42:35.206"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:35.207" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:35.207" endtime="20210730 17:42:35.207"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:35.207" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:35.207" endtime="20210730 17:42:35.207"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:35.207" endtime="20210730 17:42:35.208"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:35.208" endtime="20210730 17:42:35.209"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.207" endtime="20210730 17:42:35.209"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:35.209" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:35.209" endtime="20210730 17:42:35.209"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:35.209" endtime="20210730 17:42:35.210"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:35.210" endtime="20210730 17:42:35.210"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.209" endtime="20210730 17:42:35.210"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:35.210" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:35.210" endtime="20210730 17:42:35.210"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:35.211" endtime="20210730 17:42:35.211"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:35.211" endtime="20210730 17:42:35.211"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.210" endtime="20210730 17:42:35.212"/>
</iter>
<status status="PASS" starttime="20210730 17:42:35.207" endtime="20210730 17:42:35.212"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:35.212" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:35.212" endtime="20210730 17:42:35.212"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.206" endtime="20210730 17:42:35.212"/>
</kw>
<status status="PASS" starttime="20210730 17:42:33.653" endtime="20210730 17:42:35.212"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:35.213" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:35.213" endtime="20210730 17:42:35.213"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:35.214" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210730 17:42:35.214" endtime="20210730 17:42:35.214"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:35.222" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:35.225" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:35.214" endtime="20210730 17:42:35.225"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:35.225" endtime="20210730 17:42:35.226"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:35.226" endtime="20210730 17:42:35.226"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:35.214" endtime="20210730 17:42:35.226"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:35.214" endtime="20210730 17:42:35.226"/>
</for>
<status status="FAIL" starttime="20210730 17:42:35.213" endtime="20210730 17:42:35.226"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:35.213" endtime="20210730 17:42:35.226"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:35.227" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:35.227" endtime="20210730 17:42:35.227"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:35.227" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210730 17:42:35.227" endtime="20210730 17:42:35.228"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:35.233" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:35.233" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:35.228" endtime="20210730 17:42:35.233"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:35.233" endtime="20210730 17:42:35.233"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:35.233" endtime="20210730 17:42:35.233"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:35.228" endtime="20210730 17:42:35.233"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:35.228" endtime="20210730 17:42:35.233"/>
</for>
<status status="FAIL" starttime="20210730 17:42:35.226" endtime="20210730 17:42:35.234"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:35.226" endtime="20210730 17:42:35.234"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc012!?abc012!?abc012</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:35.235" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:35.234" endtime="20210730 17:42:35.235"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:35.235" level="INFO">${payload} = {'password': 'abc012!?abc012!?abc012'}</msg>
<status status="PASS" starttime="20210730 17:42:35.235" endtime="20210730 17:42:35.235"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:35.239" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:35.239" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:35.235" endtime="20210730 17:42:35.239"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:35.239" endtime="20210730 17:42:35.239"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:35.239" endtime="20210730 17:42:35.239"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:35.235" endtime="20210730 17:42:35.240"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:35.235" endtime="20210730 17:42:35.243"/>
</for>
<status status="FAIL" starttime="20210730 17:42:35.234" endtime="20210730 17:42:35.243"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:35.234" endtime="20210730 17:42:35.243"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:35.212" endtime="20210730 17:42:35.243"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:35.248" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:35.257" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:35.257" level="INFO">${pids} = 24280
24287
24291</msg>
<status status="PASS" starttime="20210730 17:42:35.244" endtime="20210730 17:42:35.257"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:35.258" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:35.258" endtime="20210730 17:42:35.258"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:35.259" level="INFO">${pids} = ['24280', '24287', '24291']</msg>
<status status="PASS" starttime="20210730 17:42:35.259" endtime="20210730 17:42:35.259"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24280</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:35.263" level="INFO">Running command 'kill 24280 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:35.259" endtime="20210730 17:42:35.264"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.259" endtime="20210730 17:42:35.264"/>
</iter>
<iter>
<var name="${pid}">24287</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:35.267" level="INFO">Running command 'kill 24287 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:35.264" endtime="20210730 17:42:35.267"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.264" endtime="20210730 17:42:35.268"/>
</iter>
<iter>
<var name="${pid}">24291</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:35.275" level="INFO">Running command 'kill 24291 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:35.268" endtime="20210730 17:42:35.275"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.268" endtime="20210730 17:42:35.275"/>
</iter>
<status status="PASS" starttime="20210730 17:42:35.259" endtime="20210730 17:42:35.276"/>
</for>
<status status="PASS" starttime="20210730 17:42:35.259" endtime="20210730 17:42:35.276"/>
</branch>
<status status="PASS" starttime="20210730 17:42:35.258" endtime="20210730 17:42:35.276"/>
</if>
<status status="PASS" starttime="20210730 17:42:35.243" endtime="20210730 17:42:35.276"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc012!?abc012!?abc012'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:33.652" endtime="20210730 17:42:35.276">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t84" name="With Each Valid Token, Updating Password Of Each System User With abc!?.Z Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:35.281" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:35.292" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:35.292" level="INFO">${pids} = 24320</msg>
<status status="PASS" starttime="20210730 17:42:35.278" endtime="20210730 17:42:35.292"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:35.293" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:35.292" endtime="20210730 17:42:35.293"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:35.294" level="INFO">${pids} = ['24320']</msg>
<status status="PASS" starttime="20210730 17:42:35.294" endtime="20210730 17:42:35.294"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24320</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:35.298" level="INFO">Running command 'kill 24320 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:35.294" endtime="20210730 17:42:35.298"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.294" endtime="20210730 17:42:35.298"/>
</iter>
<status status="PASS" starttime="20210730 17:42:35.294" endtime="20210730 17:42:35.298"/>
</for>
<status status="PASS" starttime="20210730 17:42:35.294" endtime="20210730 17:42:35.298"/>
</branch>
<status status="PASS" starttime="20210730 17:42:35.294" endtime="20210730 17:42:35.298"/>
</if>
<status status="PASS" starttime="20210730 17:42:35.278" endtime="20210730 17:42:35.299"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:35.307" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:35.306" endtime="20210730 17:42:35.307"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:35.308" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:35.307" endtime="20210730 17:42:35.308"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:35.308" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:35.308" endtime="20210730 17:42:35.308"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:35.308" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:35.308" endtime="20210730 17:42:35.308"/>
</kw>
<msg timestamp="20210730 17:42:35.309" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:35.307" endtime="20210730 17:42:35.309"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:35.326" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:35.309" endtime="20210730 17:42:35.327"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.299" endtime="20210730 17:42:35.328"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:35.329" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:35.328" endtime="20210730 17:42:35.333"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:36.834" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:35.333" endtime="20210730 17:42:36.835"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.328" endtime="20210730 17:42:36.836"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:36.839" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:36.839" endtime="20210730 17:42:36.839"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:36.840" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:36.839" endtime="20210730 17:42:36.840"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:36.840" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:36.840" endtime="20210730 17:42:36.840"/>
</kw>
<msg timestamp="20210730 17:42:36.840" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:36.838" endtime="20210730 17:42:36.840"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:36.841" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:36.840" endtime="20210730 17:42:36.841"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.836" endtime="20210730 17:42:36.841"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:36.842" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:36.842" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:36.842" endtime="20210730 17:42:36.842"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.841" endtime="20210730 17:42:36.842"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:36.843" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:36.843" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:36.842" endtime="20210730 17:42:36.843"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:36.843" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:36.843" endtime="20210730 17:42:36.843"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:36.844" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:36.843" endtime="20210730 17:42:36.844"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:36.844" endtime="20210730 17:42:36.845"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:36.845" endtime="20210730 17:42:36.845"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.843" endtime="20210730 17:42:36.845"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:36.845" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:36.845" endtime="20210730 17:42:36.845"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:36.845" endtime="20210730 17:42:36.846"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:36.846" endtime="20210730 17:42:36.846"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.845" endtime="20210730 17:42:36.846"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:36.847" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:36.847" endtime="20210730 17:42:36.847"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:36.847" endtime="20210730 17:42:36.847"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:36.848" endtime="20210730 17:42:36.848"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.846" endtime="20210730 17:42:36.848"/>
</iter>
<status status="PASS" starttime="20210730 17:42:36.843" endtime="20210730 17:42:36.848"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:36.848" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:36.848" endtime="20210730 17:42:36.848"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.842" endtime="20210730 17:42:36.848"/>
</kw>
<status status="PASS" starttime="20210730 17:42:35.277" endtime="20210730 17:42:36.848"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:36.850" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:36.849" endtime="20210730 17:42:36.850"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:36.850" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210730 17:42:36.850" endtime="20210730 17:42:36.850"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:36.860" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:36.862" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:36.850" endtime="20210730 17:42:36.862"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:36.862" endtime="20210730 17:42:36.862"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:36.862" endtime="20210730 17:42:36.862"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:36.850" endtime="20210730 17:42:36.862"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:36.850" endtime="20210730 17:42:36.862"/>
</for>
<status status="FAIL" starttime="20210730 17:42:36.849" endtime="20210730 17:42:36.862"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:36.849" endtime="20210730 17:42:36.862"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:36.863" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:36.863" endtime="20210730 17:42:36.863"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:36.864" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210730 17:42:36.863" endtime="20210730 17:42:36.864"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:36.868" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:36.868" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:36.864" endtime="20210730 17:42:36.868"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:36.868" endtime="20210730 17:42:36.868"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:36.868" endtime="20210730 17:42:36.868"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:36.864" endtime="20210730 17:42:36.868"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:36.864" endtime="20210730 17:42:36.868"/>
</for>
<status status="FAIL" starttime="20210730 17:42:36.862" endtime="20210730 17:42:36.868"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:36.862" endtime="20210730 17:42:36.868"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.Z</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:36.869" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:36.869" endtime="20210730 17:42:36.870"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:36.870" level="INFO">${payload} = {'password': 'abc!?.Z'}</msg>
<status status="PASS" starttime="20210730 17:42:36.870" endtime="20210730 17:42:36.870"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:36.875" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:36.875" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:36.870" endtime="20210730 17:42:36.875"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:36.876" endtime="20210730 17:42:36.876"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:36.876" endtime="20210730 17:42:36.876"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:36.870" endtime="20210730 17:42:36.876"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:36.870" endtime="20210730 17:42:36.876"/>
</for>
<status status="FAIL" starttime="20210730 17:42:36.869" endtime="20210730 17:42:36.877"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:36.869" endtime="20210730 17:42:36.877"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:36.849" endtime="20210730 17:42:36.877"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:36.883" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:36.893" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:36.893" level="INFO">${pids} = 24343
24350
24361</msg>
<status status="PASS" starttime="20210730 17:42:36.880" endtime="20210730 17:42:36.893"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:36.893" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:36.893" endtime="20210730 17:42:36.893"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:36.894" level="INFO">${pids} = ['24343', '24350', '24361']</msg>
<status status="PASS" starttime="20210730 17:42:36.894" endtime="20210730 17:42:36.894"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24343</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:36.898" level="INFO">Running command 'kill 24343 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:36.894" endtime="20210730 17:42:36.898"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.894" endtime="20210730 17:42:36.898"/>
</iter>
<iter>
<var name="${pid}">24350</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:36.901" level="INFO">Running command 'kill 24350 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:36.898" endtime="20210730 17:42:36.901"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.898" endtime="20210730 17:42:36.901"/>
</iter>
<iter>
<var name="${pid}">24361</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:36.908" level="INFO">Running command 'kill 24361 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:36.902" endtime="20210730 17:42:36.908"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.902" endtime="20210730 17:42:36.909"/>
</iter>
<status status="PASS" starttime="20210730 17:42:36.894" endtime="20210730 17:42:36.909"/>
</for>
<status status="PASS" starttime="20210730 17:42:36.894" endtime="20210730 17:42:36.909"/>
</branch>
<status status="PASS" starttime="20210730 17:42:36.894" endtime="20210730 17:42:36.909"/>
</if>
<status status="PASS" starttime="20210730 17:42:36.877" endtime="20210730 17:42:36.909"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.Z'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:35.277" endtime="20210730 17:42:36.910">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t85" name="With Each Valid Token, Updating Password Of Each System User With abc!?.ZA Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:36.915" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:36.926" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:36.926" level="INFO">${pids} = 24390</msg>
<status status="PASS" starttime="20210730 17:42:36.912" endtime="20210730 17:42:36.926"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:36.927" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:36.927" endtime="20210730 17:42:36.927"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:36.928" level="INFO">${pids} = ['24390']</msg>
<status status="PASS" starttime="20210730 17:42:36.927" endtime="20210730 17:42:36.928"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24390</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:36.931" level="INFO">Running command 'kill 24390 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:36.928" endtime="20210730 17:42:36.932"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.928" endtime="20210730 17:42:36.932"/>
</iter>
<status status="PASS" starttime="20210730 17:42:36.928" endtime="20210730 17:42:36.932"/>
</for>
<status status="PASS" starttime="20210730 17:42:36.927" endtime="20210730 17:42:36.932"/>
</branch>
<status status="PASS" starttime="20210730 17:42:36.927" endtime="20210730 17:42:36.932"/>
</if>
<status status="PASS" starttime="20210730 17:42:36.912" endtime="20210730 17:42:36.932"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:36.933" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:36.933" endtime="20210730 17:42:36.933"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:36.934" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:36.934" endtime="20210730 17:42:36.934"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:36.934" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:36.934" endtime="20210730 17:42:36.935"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:36.935" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:36.935" endtime="20210730 17:42:36.935"/>
</kw>
<msg timestamp="20210730 17:42:36.935" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:36.933" endtime="20210730 17:42:36.935"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:36.944" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:36.935" endtime="20210730 17:42:36.946"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.933" endtime="20210730 17:42:36.946"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:36.947" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:36.947" endtime="20210730 17:42:36.951"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:38.455" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:36.952" endtime="20210730 17:42:38.455"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.946" endtime="20210730 17:42:38.456"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:38.459" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:38.458" endtime="20210730 17:42:38.459"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:38.460" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:38.460" endtime="20210730 17:42:38.460"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:38.462" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:38.461" endtime="20210730 17:42:38.462"/>
</kw>
<msg timestamp="20210730 17:42:38.462" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:38.457" endtime="20210730 17:42:38.463"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:38.464" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:38.463" endtime="20210730 17:42:38.465"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.456" endtime="20210730 17:42:38.465"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:38.466" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:38.466" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:38.466" endtime="20210730 17:42:38.467"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.465" endtime="20210730 17:42:38.467"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:38.469" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:38.469" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:38.468" endtime="20210730 17:42:38.469"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:38.470" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:38.470" endtime="20210730 17:42:38.470"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:38.471" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:38.470" endtime="20210730 17:42:38.471"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:38.471" endtime="20210730 17:42:38.473"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:38.473" endtime="20210730 17:42:38.473"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.470" endtime="20210730 17:42:38.473"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:38.474" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:38.474" endtime="20210730 17:42:38.474"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:38.474" endtime="20210730 17:42:38.475"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:38.475" endtime="20210730 17:42:38.476"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.473" endtime="20210730 17:42:38.476"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:38.476" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:38.476" endtime="20210730 17:42:38.476"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:38.477" endtime="20210730 17:42:38.478"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:38.478" endtime="20210730 17:42:38.478"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.476" endtime="20210730 17:42:38.478"/>
</iter>
<status status="PASS" starttime="20210730 17:42:38.470" endtime="20210730 17:42:38.478"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:38.479" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:38.478" endtime="20210730 17:42:38.479"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.467" endtime="20210730 17:42:38.479"/>
</kw>
<status status="PASS" starttime="20210730 17:42:36.911" endtime="20210730 17:42:38.479"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:38.481" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:38.480" endtime="20210730 17:42:38.481"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:38.481" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210730 17:42:38.481" endtime="20210730 17:42:38.481"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:38.491" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:38.491" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:38.482" endtime="20210730 17:42:38.491"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:38.491" endtime="20210730 17:42:38.492"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:38.492" endtime="20210730 17:42:38.492"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:38.482" endtime="20210730 17:42:38.492"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:38.481" endtime="20210730 17:42:38.492"/>
</for>
<status status="FAIL" starttime="20210730 17:42:38.480" endtime="20210730 17:42:38.492"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:38.480" endtime="20210730 17:42:38.492"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:38.493" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:38.493" endtime="20210730 17:42:38.493"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:38.493" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210730 17:42:38.493" endtime="20210730 17:42:38.493"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:38.497" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:38.497" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:38.494" endtime="20210730 17:42:38.497"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:38.497" endtime="20210730 17:42:38.498"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:38.498" endtime="20210730 17:42:38.498"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:38.494" endtime="20210730 17:42:38.498"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:38.494" endtime="20210730 17:42:38.498"/>
</for>
<status status="FAIL" starttime="20210730 17:42:38.492" endtime="20210730 17:42:38.498"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:38.492" endtime="20210730 17:42:38.498"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZA</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:38.499" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:38.498" endtime="20210730 17:42:38.499"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:38.499" level="INFO">${payload} = {'password': 'abc!?.ZA'}</msg>
<status status="PASS" starttime="20210730 17:42:38.499" endtime="20210730 17:42:38.499"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:38.502" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:38.502" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:38.499" endtime="20210730 17:42:38.503"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:38.503" endtime="20210730 17:42:38.503"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:38.503" endtime="20210730 17:42:38.503"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:38.499" endtime="20210730 17:42:38.503"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:38.499" endtime="20210730 17:42:38.503"/>
</for>
<status status="FAIL" starttime="20210730 17:42:38.498" endtime="20210730 17:42:38.503"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:38.498" endtime="20210730 17:42:38.503"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:38.479" endtime="20210730 17:42:38.503"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:38.508" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:38.520" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:38.520" level="INFO">${pids} = 24413
24420
24424</msg>
<status status="PASS" starttime="20210730 17:42:38.504" endtime="20210730 17:42:38.520"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:38.520" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:38.520" endtime="20210730 17:42:38.520"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:38.521" level="INFO">${pids} = ['24413', '24420', '24424']</msg>
<status status="PASS" starttime="20210730 17:42:38.521" endtime="20210730 17:42:38.521"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24413</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:38.525" level="INFO">Running command 'kill 24413 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:38.521" endtime="20210730 17:42:38.526"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.521" endtime="20210730 17:42:38.526"/>
</iter>
<iter>
<var name="${pid}">24420</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:38.530" level="INFO">Running command 'kill 24420 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:38.526" endtime="20210730 17:42:38.530"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.526" endtime="20210730 17:42:38.531"/>
</iter>
<iter>
<var name="${pid}">24424</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:38.534" level="INFO">Running command 'kill 24424 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:38.531" endtime="20210730 17:42:38.534"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.531" endtime="20210730 17:42:38.535"/>
</iter>
<status status="PASS" starttime="20210730 17:42:38.521" endtime="20210730 17:42:38.535"/>
</for>
<status status="PASS" starttime="20210730 17:42:38.521" endtime="20210730 17:42:38.535"/>
</branch>
<status status="PASS" starttime="20210730 17:42:38.521" endtime="20210730 17:42:38.535"/>
</if>
<status status="PASS" starttime="20210730 17:42:38.503" endtime="20210730 17:42:38.535"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.ZA'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:36.911" endtime="20210730 17:42:38.535">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t86" name="With Each Valid Token, Updating Password Of Each System User With abc!?.ZAabc!?.ZAabc!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:38.547" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:38.569" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:38.570" level="INFO">${pids} = 24453</msg>
<status status="PASS" starttime="20210730 17:42:38.537" endtime="20210730 17:42:38.570"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:38.571" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:38.570" endtime="20210730 17:42:38.571"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:38.571" level="INFO">${pids} = ['24453']</msg>
<status status="PASS" starttime="20210730 17:42:38.571" endtime="20210730 17:42:38.571"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24453</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:38.575" level="INFO">Running command 'kill 24453 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:38.572" endtime="20210730 17:42:38.576"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.572" endtime="20210730 17:42:38.576"/>
</iter>
<status status="PASS" starttime="20210730 17:42:38.571" endtime="20210730 17:42:38.576"/>
</for>
<status status="PASS" starttime="20210730 17:42:38.571" endtime="20210730 17:42:38.576"/>
</branch>
<status status="PASS" starttime="20210730 17:42:38.571" endtime="20210730 17:42:38.576"/>
</if>
<status status="PASS" starttime="20210730 17:42:38.537" endtime="20210730 17:42:38.576"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:38.578" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:38.577" endtime="20210730 17:42:38.578"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:38.578" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:38.578" endtime="20210730 17:42:38.578"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:38.582" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:38.582" endtime="20210730 17:42:38.582"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:38.583" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:38.582" endtime="20210730 17:42:38.583"/>
</kw>
<msg timestamp="20210730 17:42:38.583" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:38.578" endtime="20210730 17:42:38.583"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:38.594" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:38.583" endtime="20210730 17:42:38.596"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.577" endtime="20210730 17:42:38.596"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:38.597" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:38.597" endtime="20210730 17:42:38.601"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:40.103" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:38.601" endtime="20210730 17:42:40.104"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.596" endtime="20210730 17:42:40.105"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:40.110" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:40.110" endtime="20210730 17:42:40.111"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:40.112" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:40.111" endtime="20210730 17:42:40.112"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:40.113" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:40.112" endtime="20210730 17:42:40.113"/>
</kw>
<msg timestamp="20210730 17:42:40.114" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:40.108" endtime="20210730 17:42:40.114"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:40.115" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:40.114" endtime="20210730 17:42:40.116"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.106" endtime="20210730 17:42:40.116"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:40.117" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:40.117" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:40.117" endtime="20210730 17:42:40.118"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.116" endtime="20210730 17:42:40.118"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:40.120" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:40.120" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:40.119" endtime="20210730 17:42:40.120"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:40.120" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:40.120" endtime="20210730 17:42:40.121"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:40.122" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:40.121" endtime="20210730 17:42:40.122"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:40.122" endtime="20210730 17:42:40.123"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:40.123" endtime="20210730 17:42:40.124"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.121" endtime="20210730 17:42:40.124"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:40.125" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:40.124" endtime="20210730 17:42:40.125"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:40.125" endtime="20210730 17:42:40.126"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:40.126" endtime="20210730 17:42:40.126"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.124" endtime="20210730 17:42:40.127"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:40.127" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:40.127" endtime="20210730 17:42:40.127"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:40.127" endtime="20210730 17:42:40.128"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:40.128" endtime="20210730 17:42:40.129"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.127" endtime="20210730 17:42:40.129"/>
</iter>
<status status="PASS" starttime="20210730 17:42:40.121" endtime="20210730 17:42:40.129"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:40.130" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:40.129" endtime="20210730 17:42:40.130"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.118" endtime="20210730 17:42:40.130"/>
</kw>
<status status="PASS" starttime="20210730 17:42:38.536" endtime="20210730 17:42:40.130"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:40.131" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:40.131" endtime="20210730 17:42:40.131"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:40.132" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:40.132" endtime="20210730 17:42:40.132"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:40.144" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:40.144" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:40.132" endtime="20210730 17:42:40.144"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:40.145" endtime="20210730 17:42:40.145"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:40.145" endtime="20210730 17:42:40.145"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:40.132" endtime="20210730 17:42:40.145"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:40.132" endtime="20210730 17:42:40.145"/>
</for>
<status status="FAIL" starttime="20210730 17:42:40.130" endtime="20210730 17:42:40.145"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:40.130" endtime="20210730 17:42:40.145"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:40.146" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:40.146" endtime="20210730 17:42:40.146"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:40.147" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:40.146" endtime="20210730 17:42:40.147"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:40.151" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:40.151" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:40.147" endtime="20210730 17:42:40.151"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:40.151" endtime="20210730 17:42:40.151"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:40.151" endtime="20210730 17:42:40.151"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:40.147" endtime="20210730 17:42:40.151"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:40.147" endtime="20210730 17:42:40.151"/>
</for>
<status status="FAIL" starttime="20210730 17:42:40.145" endtime="20210730 17:42:40.151"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:40.145" endtime="20210730 17:42:40.151"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.ZAabc!?.ZAabc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:40.152" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:40.152" endtime="20210730 17:42:40.152"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:40.153" level="INFO">${payload} = {'password': 'abc!?.ZAabc!?.ZAabc!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:40.153" endtime="20210730 17:42:40.153"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:40.157" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:40.158" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:40.153" endtime="20210730 17:42:40.158"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:40.158" endtime="20210730 17:42:40.159"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:40.159" endtime="20210730 17:42:40.159"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:40.153" endtime="20210730 17:42:40.159"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:40.153" endtime="20210730 17:42:40.159"/>
</for>
<status status="FAIL" starttime="20210730 17:42:40.152" endtime="20210730 17:42:40.159"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:40.152" endtime="20210730 17:42:40.159"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:40.130" endtime="20210730 17:42:40.159"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:40.166" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:40.176" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:40.176" level="INFO">${pids} = 24476
24483
24487</msg>
<status status="PASS" starttime="20210730 17:42:40.163" endtime="20210730 17:42:40.176"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:40.177" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:40.176" endtime="20210730 17:42:40.177"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:40.177" level="INFO">${pids} = ['24476', '24483', '24487']</msg>
<status status="PASS" starttime="20210730 17:42:40.177" endtime="20210730 17:42:40.177"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24476</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:40.181" level="INFO">Running command 'kill 24476 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:40.178" endtime="20210730 17:42:40.182"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.178" endtime="20210730 17:42:40.182"/>
</iter>
<iter>
<var name="${pid}">24483</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:40.185" level="INFO">Running command 'kill 24483 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:40.182" endtime="20210730 17:42:40.185"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.182" endtime="20210730 17:42:40.185"/>
</iter>
<iter>
<var name="${pid}">24487</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:40.193" level="INFO">Running command 'kill 24487 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:40.186" endtime="20210730 17:42:40.194"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.186" endtime="20210730 17:42:40.194"/>
</iter>
<status status="PASS" starttime="20210730 17:42:40.178" endtime="20210730 17:42:40.194"/>
</for>
<status status="PASS" starttime="20210730 17:42:40.177" endtime="20210730 17:42:40.194"/>
</branch>
<status status="PASS" starttime="20210730 17:42:40.177" endtime="20210730 17:42:40.194"/>
</if>
<status status="PASS" starttime="20210730 17:42:40.160" endtime="20210730 17:42:40.194"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.ZAabc!?.ZAabc!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:38.536" endtime="20210730 17:42:40.194">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t87" name="With Each Valid Token, Updating Password Of Each System User With abc!?.6 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:40.200" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:40.211" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:40.211" level="INFO">${pids} = 24516</msg>
<status status="PASS" starttime="20210730 17:42:40.197" endtime="20210730 17:42:40.211"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:40.212" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:40.211" endtime="20210730 17:42:40.212"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:40.213" level="INFO">${pids} = ['24516']</msg>
<status status="PASS" starttime="20210730 17:42:40.212" endtime="20210730 17:42:40.213"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24516</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:40.216" level="INFO">Running command 'kill 24516 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:40.213" endtime="20210730 17:42:40.216"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.213" endtime="20210730 17:42:40.216"/>
</iter>
<status status="PASS" starttime="20210730 17:42:40.213" endtime="20210730 17:42:40.216"/>
</for>
<status status="PASS" starttime="20210730 17:42:40.212" endtime="20210730 17:42:40.216"/>
</branch>
<status status="PASS" starttime="20210730 17:42:40.212" endtime="20210730 17:42:40.216"/>
</if>
<status status="PASS" starttime="20210730 17:42:40.196" endtime="20210730 17:42:40.217"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:40.218" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:40.217" endtime="20210730 17:42:40.218"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:40.218" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:40.218" endtime="20210730 17:42:40.218"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:40.219" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:40.218" endtime="20210730 17:42:40.219"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:40.219" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:40.219" endtime="20210730 17:42:40.219"/>
</kw>
<msg timestamp="20210730 17:42:40.219" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:40.218" endtime="20210730 17:42:40.219"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:40.229" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:40.219" endtime="20210730 17:42:40.230"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.217" endtime="20210730 17:42:40.231"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:40.232" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:40.231" endtime="20210730 17:42:40.236"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:41.740" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:40.236" endtime="20210730 17:42:41.741"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.231" endtime="20210730 17:42:41.742"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:41.744" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:41.744" endtime="20210730 17:42:41.744"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:41.744" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:41.744" endtime="20210730 17:42:41.744"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:41.745" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:41.744" endtime="20210730 17:42:41.745"/>
</kw>
<msg timestamp="20210730 17:42:41.745" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:41.743" endtime="20210730 17:42:41.745"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:41.746" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:41.745" endtime="20210730 17:42:41.746"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.743" endtime="20210730 17:42:41.746"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:41.747" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:41.747" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:41.747" endtime="20210730 17:42:41.747"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.746" endtime="20210730 17:42:41.747"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:41.748" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:41.748" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:41.747" endtime="20210730 17:42:41.748"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:41.748" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:41.748" endtime="20210730 17:42:41.748"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:41.749" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:41.749" endtime="20210730 17:42:41.749"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:41.749" endtime="20210730 17:42:41.750"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:41.750" endtime="20210730 17:42:41.750"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.749" endtime="20210730 17:42:41.750"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:41.751" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:41.751" endtime="20210730 17:42:41.751"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:41.751" endtime="20210730 17:42:41.752"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:41.752" endtime="20210730 17:42:41.752"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.751" endtime="20210730 17:42:41.752"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:41.752" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:41.752" endtime="20210730 17:42:41.752"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:41.752" endtime="20210730 17:42:41.753"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:41.753" endtime="20210730 17:42:41.753"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.752" endtime="20210730 17:42:41.753"/>
</iter>
<status status="PASS" starttime="20210730 17:42:41.748" endtime="20210730 17:42:41.753"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:41.754" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:41.753" endtime="20210730 17:42:41.754"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.747" endtime="20210730 17:42:41.754"/>
</kw>
<status status="PASS" starttime="20210730 17:42:40.196" endtime="20210730 17:42:41.754"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:41.755" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:41.755" endtime="20210730 17:42:41.755"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:41.756" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210730 17:42:41.755" endtime="20210730 17:42:41.756"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:41.764" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:41.765" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:41.756" endtime="20210730 17:42:41.765"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:41.765" endtime="20210730 17:42:41.765"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:41.765" endtime="20210730 17:42:41.765"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:41.756" endtime="20210730 17:42:41.765"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:41.756" endtime="20210730 17:42:41.765"/>
</for>
<status status="FAIL" starttime="20210730 17:42:41.754" endtime="20210730 17:42:41.765"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:41.754" endtime="20210730 17:42:41.765"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:41.766" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:41.766" endtime="20210730 17:42:41.766"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:41.767" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210730 17:42:41.767" endtime="20210730 17:42:41.767"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:41.771" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:41.771" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:41.767" endtime="20210730 17:42:41.771"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:41.771" endtime="20210730 17:42:41.771"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:41.771" endtime="20210730 17:42:41.771"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:41.767" endtime="20210730 17:42:41.771"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:41.767" endtime="20210730 17:42:41.771"/>
</for>
<status status="FAIL" starttime="20210730 17:42:41.766" endtime="20210730 17:42:41.772"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:41.765" endtime="20210730 17:42:41.772"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.6</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:41.773" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:41.772" endtime="20210730 17:42:41.773"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:41.773" level="INFO">${payload} = {'password': 'abc!?.6'}</msg>
<status status="PASS" starttime="20210730 17:42:41.773" endtime="20210730 17:42:41.773"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:41.777" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:41.777" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:41.773" endtime="20210730 17:42:41.777"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:41.777" endtime="20210730 17:42:41.777"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:41.777" endtime="20210730 17:42:41.777"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:41.773" endtime="20210730 17:42:41.777"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:41.773" endtime="20210730 17:42:41.777"/>
</for>
<status status="FAIL" starttime="20210730 17:42:41.772" endtime="20210730 17:42:41.777"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:41.772" endtime="20210730 17:42:41.778"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:41.754" endtime="20210730 17:42:41.778"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:41.783" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:41.793" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:41.793" level="INFO">${pids} = 24539
24546
24551</msg>
<status status="PASS" starttime="20210730 17:42:41.779" endtime="20210730 17:42:41.793"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:41.794" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:41.794" endtime="20210730 17:42:41.794"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:41.795" level="INFO">${pids} = ['24539', '24546', '24551']</msg>
<status status="PASS" starttime="20210730 17:42:41.795" endtime="20210730 17:42:41.795"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24539</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:41.799" level="INFO">Running command 'kill 24539 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:41.795" endtime="20210730 17:42:41.799"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.795" endtime="20210730 17:42:41.799"/>
</iter>
<iter>
<var name="${pid}">24546</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:41.803" level="INFO">Running command 'kill 24546 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:41.800" endtime="20210730 17:42:41.804"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.799" endtime="20210730 17:42:41.804"/>
</iter>
<iter>
<var name="${pid}">24551</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:41.809" level="INFO">Running command 'kill 24551 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:41.804" endtime="20210730 17:42:41.809"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.804" endtime="20210730 17:42:41.809"/>
</iter>
<status status="PASS" starttime="20210730 17:42:41.795" endtime="20210730 17:42:41.809"/>
</for>
<status status="PASS" starttime="20210730 17:42:41.794" endtime="20210730 17:42:41.809"/>
</branch>
<status status="PASS" starttime="20210730 17:42:41.794" endtime="20210730 17:42:41.809"/>
</if>
<status status="PASS" starttime="20210730 17:42:41.778" endtime="20210730 17:42:41.810"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.6'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:40.195" endtime="20210730 17:42:41.810">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t88" name="With Each Valid Token, Updating Password Of Each System User With abc!?.67 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:41.820" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:41.833" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:41.833" level="INFO">${pids} = 24580</msg>
<status status="PASS" starttime="20210730 17:42:41.812" endtime="20210730 17:42:41.833"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:41.836" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:41.833" endtime="20210730 17:42:41.836"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:41.837" level="INFO">${pids} = ['24580']</msg>
<status status="PASS" starttime="20210730 17:42:41.836" endtime="20210730 17:42:41.837"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24580</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:41.846" level="INFO">Running command 'kill 24580 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:41.837" endtime="20210730 17:42:41.847"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.837" endtime="20210730 17:42:41.847"/>
</iter>
<status status="PASS" starttime="20210730 17:42:41.837" endtime="20210730 17:42:41.847"/>
</for>
<status status="PASS" starttime="20210730 17:42:41.836" endtime="20210730 17:42:41.847"/>
</branch>
<status status="PASS" starttime="20210730 17:42:41.836" endtime="20210730 17:42:41.847"/>
</if>
<status status="PASS" starttime="20210730 17:42:41.811" endtime="20210730 17:42:41.847"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:41.849" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:41.848" endtime="20210730 17:42:41.849"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:41.849" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:41.849" endtime="20210730 17:42:41.849"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:41.850" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:41.850" endtime="20210730 17:42:41.850"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:41.850" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:41.850" endtime="20210730 17:42:41.850"/>
</kw>
<msg timestamp="20210730 17:42:41.850" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:41.849" endtime="20210730 17:42:41.850"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:41.854" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:41.851" endtime="20210730 17:42:41.856"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.848" endtime="20210730 17:42:41.856"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:41.857" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:41.857" endtime="20210730 17:42:41.862"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:43.363" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:41.862" endtime="20210730 17:42:43.363"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.856" endtime="20210730 17:42:43.364"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:43.365" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:43.365" endtime="20210730 17:42:43.365"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:43.366" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:43.365" endtime="20210730 17:42:43.366"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:43.366" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:43.366" endtime="20210730 17:42:43.366"/>
</kw>
<msg timestamp="20210730 17:42:43.367" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:43.365" endtime="20210730 17:42:43.367"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:43.367" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:43.367" endtime="20210730 17:42:43.368"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.364" endtime="20210730 17:42:43.368"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:43.368" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:43.368" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:43.368" endtime="20210730 17:42:43.369"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.368" endtime="20210730 17:42:43.369"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:43.369" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:43.370" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:43.369" endtime="20210730 17:42:43.370"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:43.370" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:43.370" endtime="20210730 17:42:43.370"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:43.370" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:43.370" endtime="20210730 17:42:43.370"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:43.371" endtime="20210730 17:42:43.371"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:43.372" endtime="20210730 17:42:43.372"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.370" endtime="20210730 17:42:43.372"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:43.372" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:43.372" endtime="20210730 17:42:43.372"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:43.372" endtime="20210730 17:42:43.373"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:43.373" endtime="20210730 17:42:43.373"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.372" endtime="20210730 17:42:43.373"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:43.373" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:43.373" endtime="20210730 17:42:43.374"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:43.374" endtime="20210730 17:42:43.374"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:43.374" endtime="20210730 17:42:43.375"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.373" endtime="20210730 17:42:43.375"/>
</iter>
<status status="PASS" starttime="20210730 17:42:43.370" endtime="20210730 17:42:43.375"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:43.375" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:43.375" endtime="20210730 17:42:43.375"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.369" endtime="20210730 17:42:43.375"/>
</kw>
<status status="PASS" starttime="20210730 17:42:41.811" endtime="20210730 17:42:43.375"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:43.376" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:43.376" endtime="20210730 17:42:43.376"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:43.377" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210730 17:42:43.377" endtime="20210730 17:42:43.377"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:43.386" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:43.386" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:43.377" endtime="20210730 17:42:43.386"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:43.386" endtime="20210730 17:42:43.387"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:43.387" endtime="20210730 17:42:43.387"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:43.377" endtime="20210730 17:42:43.387"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:43.377" endtime="20210730 17:42:43.387"/>
</for>
<status status="FAIL" starttime="20210730 17:42:43.376" endtime="20210730 17:42:43.387"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:43.376" endtime="20210730 17:42:43.387"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:43.388" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:43.388" endtime="20210730 17:42:43.388"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:43.389" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210730 17:42:43.388" endtime="20210730 17:42:43.389"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:43.393" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:43.393" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:43.389" endtime="20210730 17:42:43.393"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:43.393" endtime="20210730 17:42:43.393"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:43.394" endtime="20210730 17:42:43.394"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:43.389" endtime="20210730 17:42:43.394"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:43.389" endtime="20210730 17:42:43.394"/>
</for>
<status status="FAIL" starttime="20210730 17:42:43.387" endtime="20210730 17:42:43.394"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:43.387" endtime="20210730 17:42:43.394"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:43.396" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:43.395" endtime="20210730 17:42:43.396"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:43.396" level="INFO">${payload} = {'password': 'abc!?.67'}</msg>
<status status="PASS" starttime="20210730 17:42:43.396" endtime="20210730 17:42:43.396"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:43.400" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:43.400" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:43.397" endtime="20210730 17:42:43.400"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:43.400" endtime="20210730 17:42:43.400"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:43.401" endtime="20210730 17:42:43.401"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:43.396" endtime="20210730 17:42:43.401"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:43.396" endtime="20210730 17:42:43.401"/>
</for>
<status status="FAIL" starttime="20210730 17:42:43.394" endtime="20210730 17:42:43.401"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:43.394" endtime="20210730 17:42:43.401"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:43.375" endtime="20210730 17:42:43.401"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:43.408" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:43.418" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:43.418" level="INFO">${pids} = 24603
24610
24616</msg>
<status status="PASS" starttime="20210730 17:42:43.402" endtime="20210730 17:42:43.418"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:43.419" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:43.418" endtime="20210730 17:42:43.419"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:43.419" level="INFO">${pids} = ['24603', '24610', '24616']</msg>
<status status="PASS" starttime="20210730 17:42:43.419" endtime="20210730 17:42:43.419"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24603</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:43.423" level="INFO">Running command 'kill 24603 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:43.420" endtime="20210730 17:42:43.423"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.419" endtime="20210730 17:42:43.423"/>
</iter>
<iter>
<var name="${pid}">24610</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:43.427" level="INFO">Running command 'kill 24610 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:43.424" endtime="20210730 17:42:43.428"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.423" endtime="20210730 17:42:43.428"/>
</iter>
<iter>
<var name="${pid}">24616</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:43.432" level="INFO">Running command 'kill 24616 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:43.428" endtime="20210730 17:42:43.432"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.428" endtime="20210730 17:42:43.432"/>
</iter>
<status status="PASS" starttime="20210730 17:42:43.419" endtime="20210730 17:42:43.432"/>
</for>
<status status="PASS" starttime="20210730 17:42:43.419" endtime="20210730 17:42:43.432"/>
</branch>
<status status="PASS" starttime="20210730 17:42:43.419" endtime="20210730 17:42:43.432"/>
</if>
<status status="PASS" starttime="20210730 17:42:43.401" endtime="20210730 17:42:43.433"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.67'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:41.810" endtime="20210730 17:42:43.433">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t89" name="With Each Valid Token, Updating Password Of Each System User With abc!?.67abc!?.67abc!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:43.438" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:43.449" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:43.449" level="INFO">${pids} = 24645</msg>
<status status="PASS" starttime="20210730 17:42:43.435" endtime="20210730 17:42:43.449"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:43.450" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:43.449" endtime="20210730 17:42:43.450"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:43.450" level="INFO">${pids} = ['24645']</msg>
<status status="PASS" starttime="20210730 17:42:43.450" endtime="20210730 17:42:43.450"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24645</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:43.455" level="INFO">Running command 'kill 24645 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:43.451" endtime="20210730 17:42:43.456"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.451" endtime="20210730 17:42:43.456"/>
</iter>
<status status="PASS" starttime="20210730 17:42:43.451" endtime="20210730 17:42:43.456"/>
</for>
<status status="PASS" starttime="20210730 17:42:43.450" endtime="20210730 17:42:43.456"/>
</branch>
<status status="PASS" starttime="20210730 17:42:43.450" endtime="20210730 17:42:43.456"/>
</if>
<status status="PASS" starttime="20210730 17:42:43.435" endtime="20210730 17:42:43.456"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:43.457" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:43.457" endtime="20210730 17:42:43.457"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:43.458" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:43.457" endtime="20210730 17:42:43.458"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:43.458" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:43.458" endtime="20210730 17:42:43.458"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:43.458" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:43.458" endtime="20210730 17:42:43.458"/>
</kw>
<msg timestamp="20210730 17:42:43.459" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:43.457" endtime="20210730 17:42:43.459"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:43.462" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:43.459" endtime="20210730 17:42:43.463"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.456" endtime="20210730 17:42:43.464"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:43.465" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:43.464" endtime="20210730 17:42:43.476"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:44.978" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:43.476" endtime="20210730 17:42:44.978"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.464" endtime="20210730 17:42:44.979"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:44.983" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:44.983" endtime="20210730 17:42:44.983"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:44.983" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:44.983" endtime="20210730 17:42:44.983"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:44.983" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:44.983" endtime="20210730 17:42:44.984"/>
</kw>
<msg timestamp="20210730 17:42:44.984" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:44.981" endtime="20210730 17:42:44.984"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:44.984" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:44.984" endtime="20210730 17:42:44.985"/>
</kw>
<status status="PASS" starttime="20210730 17:42:44.980" endtime="20210730 17:42:44.985"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:44.985" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:44.985" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:44.985" endtime="20210730 17:42:44.986"/>
</kw>
<status status="PASS" starttime="20210730 17:42:44.985" endtime="20210730 17:42:44.986"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:44.987" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:44.987" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:44.986" endtime="20210730 17:42:44.987"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:44.987" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:44.987" endtime="20210730 17:42:44.987"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:44.988" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:44.987" endtime="20210730 17:42:44.988"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:44.988" endtime="20210730 17:42:44.988"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:44.989" endtime="20210730 17:42:44.989"/>
</kw>
<status status="PASS" starttime="20210730 17:42:44.987" endtime="20210730 17:42:44.989"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:44.989" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:44.989" endtime="20210730 17:42:44.989"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:44.989" endtime="20210730 17:42:44.990"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:44.990" endtime="20210730 17:42:44.990"/>
</kw>
<status status="PASS" starttime="20210730 17:42:44.989" endtime="20210730 17:42:44.990"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:44.991" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:44.991" endtime="20210730 17:42:44.991"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:44.991" endtime="20210730 17:42:44.992"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:44.992" endtime="20210730 17:42:44.992"/>
</kw>
<status status="PASS" starttime="20210730 17:42:44.991" endtime="20210730 17:42:44.992"/>
</iter>
<status status="PASS" starttime="20210730 17:42:44.987" endtime="20210730 17:42:44.992"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:44.993" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:44.992" endtime="20210730 17:42:44.993"/>
</kw>
<status status="PASS" starttime="20210730 17:42:44.986" endtime="20210730 17:42:44.993"/>
</kw>
<status status="PASS" starttime="20210730 17:42:43.434" endtime="20210730 17:42:44.993"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:44.994" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:44.994" endtime="20210730 17:42:44.994"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:44.994" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:44.994" endtime="20210730 17:42:44.994"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:45.003" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:45.003" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:44.995" endtime="20210730 17:42:45.003"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:45.004" endtime="20210730 17:42:45.004"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:45.004" endtime="20210730 17:42:45.004"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:44.995" endtime="20210730 17:42:45.004"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:44.994" endtime="20210730 17:42:45.004"/>
</for>
<status status="FAIL" starttime="20210730 17:42:44.993" endtime="20210730 17:42:45.004"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:44.993" endtime="20210730 17:42:45.004"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:45.005" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:45.005" endtime="20210730 17:42:45.005"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:45.006" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:45.005" endtime="20210730 17:42:45.006"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:45.010" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:45.010" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:45.006" endtime="20210730 17:42:45.010"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:45.010" endtime="20210730 17:42:45.010"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:45.010" endtime="20210730 17:42:45.010"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:45.006" endtime="20210730 17:42:45.010"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:45.006" endtime="20210730 17:42:45.010"/>
</for>
<status status="FAIL" starttime="20210730 17:42:45.004" endtime="20210730 17:42:45.011"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:45.004" endtime="20210730 17:42:45.011"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=abc!?.67abc!?.67abc!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:45.012" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:45.011" endtime="20210730 17:42:45.012"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:45.012" level="INFO">${payload} = {'password': 'abc!?.67abc!?.67abc!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:45.012" endtime="20210730 17:42:45.012"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:45.016" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:45.016" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:45.012" endtime="20210730 17:42:45.016"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:45.016" endtime="20210730 17:42:45.016"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:45.016" endtime="20210730 17:42:45.016"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:45.012" endtime="20210730 17:42:45.016"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:45.012" endtime="20210730 17:42:45.016"/>
</for>
<status status="FAIL" starttime="20210730 17:42:45.011" endtime="20210730 17:42:45.016"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:45.011" endtime="20210730 17:42:45.017"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:44.993" endtime="20210730 17:42:45.017"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:45.024" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:45.035" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:45.035" level="INFO">${pids} = 24668
24675
24680</msg>
<status status="PASS" starttime="20210730 17:42:45.018" endtime="20210730 17:42:45.035"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:45.036" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:45.035" endtime="20210730 17:42:45.036"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:45.037" level="INFO">${pids} = ['24668', '24675', '24680']</msg>
<status status="PASS" starttime="20210730 17:42:45.036" endtime="20210730 17:42:45.037"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24668</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:45.040" level="INFO">Running command 'kill 24668 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:45.037" endtime="20210730 17:42:45.041"/>
</kw>
<status status="PASS" starttime="20210730 17:42:45.037" endtime="20210730 17:42:45.041"/>
</iter>
<iter>
<var name="${pid}">24675</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:45.044" level="INFO">Running command 'kill 24675 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:45.041" endtime="20210730 17:42:45.044"/>
</kw>
<status status="PASS" starttime="20210730 17:42:45.041" endtime="20210730 17:42:45.044"/>
</iter>
<iter>
<var name="${pid}">24680</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:45.048" level="INFO">Running command 'kill 24680 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:45.045" endtime="20210730 17:42:45.049"/>
</kw>
<status status="PASS" starttime="20210730 17:42:45.045" endtime="20210730 17:42:45.049"/>
</iter>
<status status="PASS" starttime="20210730 17:42:45.037" endtime="20210730 17:42:45.049"/>
</for>
<status status="PASS" starttime="20210730 17:42:45.036" endtime="20210730 17:42:45.049"/>
</branch>
<status status="PASS" starttime="20210730 17:42:45.036" endtime="20210730 17:42:45.049"/>
</if>
<status status="PASS" starttime="20210730 17:42:45.017" endtime="20210730 17:42:45.049"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'abc!?.67abc!?.67abc!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:43.433" endtime="20210730 17:42:45.049">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t90" name="With Each Valid Token, Updating Password Of Each System User With ABC456. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:45.055" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:45.065" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:45.066" level="INFO">${pids} = 24709</msg>
<status status="PASS" starttime="20210730 17:42:45.051" endtime="20210730 17:42:45.066"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:45.067" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:45.066" endtime="20210730 17:42:45.067"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:45.067" level="INFO">${pids} = ['24709']</msg>
<status status="PASS" starttime="20210730 17:42:45.067" endtime="20210730 17:42:45.067"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24709</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:45.072" level="INFO">Running command 'kill 24709 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:45.068" endtime="20210730 17:42:45.073"/>
</kw>
<status status="PASS" starttime="20210730 17:42:45.067" endtime="20210730 17:42:45.073"/>
</iter>
<status status="PASS" starttime="20210730 17:42:45.067" endtime="20210730 17:42:45.073"/>
</for>
<status status="PASS" starttime="20210730 17:42:45.067" endtime="20210730 17:42:45.073"/>
</branch>
<status status="PASS" starttime="20210730 17:42:45.067" endtime="20210730 17:42:45.073"/>
</if>
<status status="PASS" starttime="20210730 17:42:45.051" endtime="20210730 17:42:45.073"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:45.074" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:45.074" endtime="20210730 17:42:45.074"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:45.075" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:45.075" endtime="20210730 17:42:45.075"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:45.075" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:45.075" endtime="20210730 17:42:45.075"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:45.076" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:45.076" endtime="20210730 17:42:45.076"/>
</kw>
<msg timestamp="20210730 17:42:45.076" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:45.074" endtime="20210730 17:42:45.076"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:45.080" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:45.076" endtime="20210730 17:42:45.103"/>
</kw>
<status status="PASS" starttime="20210730 17:42:45.074" endtime="20210730 17:42:45.104"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:45.105" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:45.105" endtime="20210730 17:42:45.110"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:46.612" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:45.111" endtime="20210730 17:42:46.612"/>
</kw>
<status status="PASS" starttime="20210730 17:42:45.104" endtime="20210730 17:42:46.612"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:46.613" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:46.613" endtime="20210730 17:42:46.613"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:46.614" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:46.613" endtime="20210730 17:42:46.614"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:46.614" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:46.614" endtime="20210730 17:42:46.614"/>
</kw>
<msg timestamp="20210730 17:42:46.614" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:46.613" endtime="20210730 17:42:46.614"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:46.615" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:46.614" endtime="20210730 17:42:46.615"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.612" endtime="20210730 17:42:46.615"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:46.616" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:46.616" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:46.615" endtime="20210730 17:42:46.616"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.615" endtime="20210730 17:42:46.616"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:46.617" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:46.617" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:46.616" endtime="20210730 17:42:46.617"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:46.617" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:46.617" endtime="20210730 17:42:46.617"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:46.618" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:46.617" endtime="20210730 17:42:46.618"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:46.618" endtime="20210730 17:42:46.619"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:46.619" endtime="20210730 17:42:46.619"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.617" endtime="20210730 17:42:46.619"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:46.619" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:46.619" endtime="20210730 17:42:46.619"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:46.619" endtime="20210730 17:42:46.620"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:46.620" endtime="20210730 17:42:46.620"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.619" endtime="20210730 17:42:46.620"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:46.621" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:46.621" endtime="20210730 17:42:46.621"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:46.621" endtime="20210730 17:42:46.622"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:46.622" endtime="20210730 17:42:46.622"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.620" endtime="20210730 17:42:46.622"/>
</iter>
<status status="PASS" starttime="20210730 17:42:46.617" endtime="20210730 17:42:46.622"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:46.622" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:46.622" endtime="20210730 17:42:46.622"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.616" endtime="20210730 17:42:46.622"/>
</kw>
<status status="PASS" starttime="20210730 17:42:45.051" endtime="20210730 17:42:46.622"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:46.623" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:46.623" endtime="20210730 17:42:46.624"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:46.624" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210730 17:42:46.624" endtime="20210730 17:42:46.624"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:46.633" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:46.633" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:46.624" endtime="20210730 17:42:46.633"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:46.633" endtime="20210730 17:42:46.633"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:46.633" endtime="20210730 17:42:46.633"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:46.624" endtime="20210730 17:42:46.633"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:46.624" endtime="20210730 17:42:46.634"/>
</for>
<status status="FAIL" starttime="20210730 17:42:46.623" endtime="20210730 17:42:46.634"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:46.623" endtime="20210730 17:42:46.634"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:46.635" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:46.634" endtime="20210730 17:42:46.635"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:46.635" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210730 17:42:46.635" endtime="20210730 17:42:46.635"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:46.639" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:46.639" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:46.636" endtime="20210730 17:42:46.640"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:46.640" endtime="20210730 17:42:46.640"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:46.640" endtime="20210730 17:42:46.640"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:46.636" endtime="20210730 17:42:46.640"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:46.636" endtime="20210730 17:42:46.640"/>
</for>
<status status="FAIL" starttime="20210730 17:42:46.634" endtime="20210730 17:42:46.640"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:46.634" endtime="20210730 17:42:46.640"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:46.641" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:46.641" endtime="20210730 17:42:46.641"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:46.641" level="INFO">${payload} = {'password': 'ABC456.'}</msg>
<status status="PASS" starttime="20210730 17:42:46.641" endtime="20210730 17:42:46.641"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:46.645" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:46.645" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:46.642" endtime="20210730 17:42:46.645"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:46.645" endtime="20210730 17:42:46.645"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:46.645" endtime="20210730 17:42:46.645"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:46.642" endtime="20210730 17:42:46.645"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:46.641" endtime="20210730 17:42:46.645"/>
</for>
<status status="FAIL" starttime="20210730 17:42:46.640" endtime="20210730 17:42:46.646"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:46.640" endtime="20210730 17:42:46.646"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:46.623" endtime="20210730 17:42:46.646"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:46.650" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:46.661" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:46.661" level="INFO">${pids} = 24732
24739
24744</msg>
<status status="PASS" starttime="20210730 17:42:46.647" endtime="20210730 17:42:46.661"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:46.662" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:46.662" endtime="20210730 17:42:46.662"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:46.663" level="INFO">${pids} = ['24732', '24739', '24744']</msg>
<status status="PASS" starttime="20210730 17:42:46.662" endtime="20210730 17:42:46.663"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24732</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:46.666" level="INFO">Running command 'kill 24732 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:46.663" endtime="20210730 17:42:46.667"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.663" endtime="20210730 17:42:46.667"/>
</iter>
<iter>
<var name="${pid}">24739</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:46.671" level="INFO">Running command 'kill 24739 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:46.667" endtime="20210730 17:42:46.671"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.667" endtime="20210730 17:42:46.671"/>
</iter>
<iter>
<var name="${pid}">24744</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:46.677" level="INFO">Running command 'kill 24744 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:46.672" endtime="20210730 17:42:46.678"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.672" endtime="20210730 17:42:46.678"/>
</iter>
<status status="PASS" starttime="20210730 17:42:46.663" endtime="20210730 17:42:46.678"/>
</for>
<status status="PASS" starttime="20210730 17:42:46.662" endtime="20210730 17:42:46.678"/>
</branch>
<status status="PASS" starttime="20210730 17:42:46.662" endtime="20210730 17:42:46.678"/>
</if>
<status status="PASS" starttime="20210730 17:42:46.646" endtime="20210730 17:42:46.678"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:45.050" endtime="20210730 17:42:46.679">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t91" name="With Each Valid Token, Updating Password Of Each System User With ABC456.? Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:46.690" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:46.699" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:46.699" level="INFO">${pids} = 24773</msg>
<status status="PASS" starttime="20210730 17:42:46.681" endtime="20210730 17:42:46.699"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:46.700" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:46.699" endtime="20210730 17:42:46.700"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:46.700" level="INFO">${pids} = ['24773']</msg>
<status status="PASS" starttime="20210730 17:42:46.700" endtime="20210730 17:42:46.700"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24773</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:46.705" level="INFO">Running command 'kill 24773 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:46.701" endtime="20210730 17:42:46.718"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.700" endtime="20210730 17:42:46.718"/>
</iter>
<status status="PASS" starttime="20210730 17:42:46.700" endtime="20210730 17:42:46.718"/>
</for>
<status status="PASS" starttime="20210730 17:42:46.700" endtime="20210730 17:42:46.718"/>
</branch>
<status status="PASS" starttime="20210730 17:42:46.700" endtime="20210730 17:42:46.718"/>
</if>
<status status="PASS" starttime="20210730 17:42:46.680" endtime="20210730 17:42:46.718"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:46.719" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:46.719" endtime="20210730 17:42:46.719"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:46.720" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:46.720" endtime="20210730 17:42:46.720"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:46.720" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:46.720" endtime="20210730 17:42:46.720"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:46.721" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:46.720" endtime="20210730 17:42:46.721"/>
</kw>
<msg timestamp="20210730 17:42:46.721" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:46.719" endtime="20210730 17:42:46.721"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:46.726" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:46.721" endtime="20210730 17:42:46.728"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.719" endtime="20210730 17:42:46.728"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:46.729" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:46.729" endtime="20210730 17:42:46.733"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:48.245" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:46.733" endtime="20210730 17:42:48.246"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.728" endtime="20210730 17:42:48.248"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:48.250" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:48.250" endtime="20210730 17:42:48.250"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:48.251" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:48.250" endtime="20210730 17:42:48.251"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:48.251" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:48.251" endtime="20210730 17:42:48.251"/>
</kw>
<msg timestamp="20210730 17:42:48.251" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:48.250" endtime="20210730 17:42:48.251"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:48.252" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:48.251" endtime="20210730 17:42:48.252"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.249" endtime="20210730 17:42:48.252"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:48.253" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:48.253" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:48.253" endtime="20210730 17:42:48.253"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.252" endtime="20210730 17:42:48.253"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:48.254" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:48.254" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:48.254" endtime="20210730 17:42:48.254"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:48.254" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:48.254" endtime="20210730 17:42:48.254"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:48.255" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:48.255" endtime="20210730 17:42:48.255"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:48.255" endtime="20210730 17:42:48.256"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:48.256" endtime="20210730 17:42:48.256"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.255" endtime="20210730 17:42:48.256"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:48.256" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:48.256" endtime="20210730 17:42:48.257"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:48.257" endtime="20210730 17:42:48.257"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:48.257" endtime="20210730 17:42:48.258"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.256" endtime="20210730 17:42:48.258"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:48.258" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:48.258" endtime="20210730 17:42:48.258"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:48.258" endtime="20210730 17:42:48.259"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:48.259" endtime="20210730 17:42:48.259"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.258" endtime="20210730 17:42:48.259"/>
</iter>
<status status="PASS" starttime="20210730 17:42:48.255" endtime="20210730 17:42:48.259"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:48.260" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:48.259" endtime="20210730 17:42:48.260"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.253" endtime="20210730 17:42:48.260"/>
</kw>
<status status="PASS" starttime="20210730 17:42:46.680" endtime="20210730 17:42:48.260"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:48.261" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:48.261" endtime="20210730 17:42:48.261"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:48.262" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210730 17:42:48.261" endtime="20210730 17:42:48.262"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:48.270" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:48.270" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:48.262" endtime="20210730 17:42:48.270"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:48.270" endtime="20210730 17:42:48.270"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:48.271" endtime="20210730 17:42:48.271"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:48.262" endtime="20210730 17:42:48.271"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:48.262" endtime="20210730 17:42:48.271"/>
</for>
<status status="FAIL" starttime="20210730 17:42:48.260" endtime="20210730 17:42:48.271"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:48.260" endtime="20210730 17:42:48.271"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:48.272" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:48.272" endtime="20210730 17:42:48.272"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:48.273" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210730 17:42:48.272" endtime="20210730 17:42:48.273"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:48.277" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:48.278" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:48.273" endtime="20210730 17:42:48.278"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:48.278" endtime="20210730 17:42:48.278"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:48.278" endtime="20210730 17:42:48.278"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:48.273" endtime="20210730 17:42:48.278"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:48.273" endtime="20210730 17:42:48.278"/>
</for>
<status status="FAIL" starttime="20210730 17:42:48.271" endtime="20210730 17:42:48.278"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:48.271" endtime="20210730 17:42:48.278"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:48.279" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:48.279" endtime="20210730 17:42:48.279"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:48.280" level="INFO">${payload} = {'password': 'ABC456.?'}</msg>
<status status="PASS" starttime="20210730 17:42:48.279" endtime="20210730 17:42:48.280"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:48.284" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:48.284" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:48.280" endtime="20210730 17:42:48.284"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:48.284" endtime="20210730 17:42:48.284"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:48.284" endtime="20210730 17:42:48.284"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:48.280" endtime="20210730 17:42:48.284"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:48.280" endtime="20210730 17:42:48.284"/>
</for>
<status status="FAIL" starttime="20210730 17:42:48.279" endtime="20210730 17:42:48.284"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:48.278" endtime="20210730 17:42:48.284"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:48.260" endtime="20210730 17:42:48.284"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:48.290" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:48.301" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:48.301" level="INFO">${pids} = 24796
24803
24807</msg>
<status status="PASS" starttime="20210730 17:42:48.286" endtime="20210730 17:42:48.301"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:48.302" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:48.302" endtime="20210730 17:42:48.302"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:48.303" level="INFO">${pids} = ['24796', '24803', '24807']</msg>
<status status="PASS" starttime="20210730 17:42:48.303" endtime="20210730 17:42:48.303"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24796</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:48.307" level="INFO">Running command 'kill 24796 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:48.303" endtime="20210730 17:42:48.308"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.303" endtime="20210730 17:42:48.308"/>
</iter>
<iter>
<var name="${pid}">24803</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:48.325" level="INFO">Running command 'kill 24803 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:48.309" endtime="20210730 17:42:48.326"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.308" endtime="20210730 17:42:48.326"/>
</iter>
<iter>
<var name="${pid}">24807</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:48.330" level="INFO">Running command 'kill 24807 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:48.326" endtime="20210730 17:42:48.330"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.326" endtime="20210730 17:42:48.330"/>
</iter>
<status status="PASS" starttime="20210730 17:42:48.303" endtime="20210730 17:42:48.330"/>
</for>
<status status="PASS" starttime="20210730 17:42:48.302" endtime="20210730 17:42:48.330"/>
</branch>
<status status="PASS" starttime="20210730 17:42:48.302" endtime="20210730 17:42:48.330"/>
</if>
<status status="PASS" starttime="20210730 17:42:48.285" endtime="20210730 17:42:48.331"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.?'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:46.679" endtime="20210730 17:42:48.331">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t92" name="With Each Valid Token, Updating Password Of Each System User With ABC456.?ABC456.?ABC456 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:48.336" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:48.345" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:48.345" level="INFO">${pids} = 24836</msg>
<status status="PASS" starttime="20210730 17:42:48.333" endtime="20210730 17:42:48.345"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:48.346" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:48.345" endtime="20210730 17:42:48.346"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:48.347" level="INFO">${pids} = ['24836']</msg>
<status status="PASS" starttime="20210730 17:42:48.346" endtime="20210730 17:42:48.347"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24836</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:48.351" level="INFO">Running command 'kill 24836 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:48.347" endtime="20210730 17:42:48.351"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.347" endtime="20210730 17:42:48.351"/>
</iter>
<status status="PASS" starttime="20210730 17:42:48.347" endtime="20210730 17:42:48.351"/>
</for>
<status status="PASS" starttime="20210730 17:42:48.346" endtime="20210730 17:42:48.351"/>
</branch>
<status status="PASS" starttime="20210730 17:42:48.346" endtime="20210730 17:42:48.352"/>
</if>
<status status="PASS" starttime="20210730 17:42:48.332" endtime="20210730 17:42:48.352"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:48.353" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:48.352" endtime="20210730 17:42:48.353"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:48.353" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:48.353" endtime="20210730 17:42:48.353"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:48.354" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:48.353" endtime="20210730 17:42:48.354"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:48.354" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:48.354" endtime="20210730 17:42:48.354"/>
</kw>
<msg timestamp="20210730 17:42:48.354" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:48.353" endtime="20210730 17:42:48.354"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:48.357" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:48.354" endtime="20210730 17:42:48.359"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.352" endtime="20210730 17:42:48.359"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:48.360" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:48.360" endtime="20210730 17:42:48.366"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:49.868" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:48.367" endtime="20210730 17:42:49.868"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.359" endtime="20210730 17:42:49.869"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:49.872" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:49.872" endtime="20210730 17:42:49.872"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:49.872" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:49.872" endtime="20210730 17:42:49.872"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:49.873" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:49.872" endtime="20210730 17:42:49.873"/>
</kw>
<msg timestamp="20210730 17:42:49.873" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:49.871" endtime="20210730 17:42:49.873"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:49.874" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:49.873" endtime="20210730 17:42:49.874"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.870" endtime="20210730 17:42:49.874"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:49.875" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:49.875" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:49.875" endtime="20210730 17:42:49.875"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.874" endtime="20210730 17:42:49.875"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:49.876" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:49.876" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:49.875" endtime="20210730 17:42:49.876"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:49.876" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:49.876" endtime="20210730 17:42:49.876"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:49.877" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:49.877" endtime="20210730 17:42:49.877"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:49.877" endtime="20210730 17:42:49.878"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:49.878" endtime="20210730 17:42:49.878"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.877" endtime="20210730 17:42:49.878"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:49.879" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:49.878" endtime="20210730 17:42:49.879"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:49.879" endtime="20210730 17:42:49.879"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:49.880" endtime="20210730 17:42:49.880"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.878" endtime="20210730 17:42:49.880"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:49.880" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:49.880" endtime="20210730 17:42:49.880"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:49.880" endtime="20210730 17:42:49.881"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:49.881" endtime="20210730 17:42:49.881"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.880" endtime="20210730 17:42:49.881"/>
</iter>
<status status="PASS" starttime="20210730 17:42:49.876" endtime="20210730 17:42:49.881"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:49.882" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:49.881" endtime="20210730 17:42:49.882"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.875" endtime="20210730 17:42:49.882"/>
</kw>
<status status="PASS" starttime="20210730 17:42:48.332" endtime="20210730 17:42:49.882"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:49.883" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:49.883" endtime="20210730 17:42:49.883"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:49.883" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210730 17:42:49.883" endtime="20210730 17:42:49.883"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:49.892" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:49.892" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:49.884" endtime="20210730 17:42:49.892"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:49.892" endtime="20210730 17:42:49.892"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:49.892" endtime="20210730 17:42:49.892"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:49.883" endtime="20210730 17:42:49.892"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:49.883" endtime="20210730 17:42:49.893"/>
</for>
<status status="FAIL" starttime="20210730 17:42:49.882" endtime="20210730 17:42:49.893"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:49.882" endtime="20210730 17:42:49.893"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:49.894" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:49.893" endtime="20210730 17:42:49.894"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:49.894" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210730 17:42:49.894" endtime="20210730 17:42:49.894"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:49.898" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:49.899" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:49.895" endtime="20210730 17:42:49.899"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:49.899" endtime="20210730 17:42:49.899"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:49.899" endtime="20210730 17:42:49.899"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:49.895" endtime="20210730 17:42:49.899"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:49.894" endtime="20210730 17:42:49.899"/>
</for>
<status status="FAIL" starttime="20210730 17:42:49.893" endtime="20210730 17:42:49.899"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:49.893" endtime="20210730 17:42:49.899"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC456.?ABC456.?ABC456</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:49.900" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:49.900" endtime="20210730 17:42:49.900"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:49.901" level="INFO">${payload} = {'password': 'ABC456.?ABC456.?ABC456'}</msg>
<status status="PASS" starttime="20210730 17:42:49.900" endtime="20210730 17:42:49.901"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:49.904" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:49.904" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:49.901" endtime="20210730 17:42:49.904"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:49.904" endtime="20210730 17:42:49.904"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:49.904" endtime="20210730 17:42:49.904"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:49.901" endtime="20210730 17:42:49.905"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:49.901" endtime="20210730 17:42:49.905"/>
</for>
<status status="FAIL" starttime="20210730 17:42:49.899" endtime="20210730 17:42:49.905"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:49.899" endtime="20210730 17:42:49.905"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:49.882" endtime="20210730 17:42:49.905"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:49.912" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:49.922" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:49.922" level="INFO">${pids} = 24859
24866
24870</msg>
<status status="PASS" starttime="20210730 17:42:49.906" endtime="20210730 17:42:49.922"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:49.923" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:49.922" endtime="20210730 17:42:49.923"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:49.923" level="INFO">${pids} = ['24859', '24866', '24870']</msg>
<status status="PASS" starttime="20210730 17:42:49.923" endtime="20210730 17:42:49.923"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24859</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:49.928" level="INFO">Running command 'kill 24859 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:49.924" endtime="20210730 17:42:49.928"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.924" endtime="20210730 17:42:49.928"/>
</iter>
<iter>
<var name="${pid}">24866</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:49.931" level="INFO">Running command 'kill 24866 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:49.929" endtime="20210730 17:42:49.932"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.928" endtime="20210730 17:42:49.932"/>
</iter>
<iter>
<var name="${pid}">24870</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:49.937" level="INFO">Running command 'kill 24870 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:49.932" endtime="20210730 17:42:49.937"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.932" endtime="20210730 17:42:49.937"/>
</iter>
<status status="PASS" starttime="20210730 17:42:49.923" endtime="20210730 17:42:49.937"/>
</for>
<status status="PASS" starttime="20210730 17:42:49.923" endtime="20210730 17:42:49.937"/>
</branch>
<status status="PASS" starttime="20210730 17:42:49.923" endtime="20210730 17:42:49.937"/>
</if>
<status status="PASS" starttime="20210730 17:42:49.905" endtime="20210730 17:42:49.938"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC456.?ABC456.?ABC456'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:48.331" endtime="20210730 17:42:49.938">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t93" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.0 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:49.952" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:49.972" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:49.972" level="INFO">${pids} = 24899</msg>
<status status="PASS" starttime="20210730 17:42:49.939" endtime="20210730 17:42:49.972"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:49.973" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:49.973" endtime="20210730 17:42:49.973"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:49.974" level="INFO">${pids} = ['24899']</msg>
<status status="PASS" starttime="20210730 17:42:49.973" endtime="20210730 17:42:49.974"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24899</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:49.981" level="INFO">Running command 'kill 24899 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:49.974" endtime="20210730 17:42:49.981"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.974" endtime="20210730 17:42:49.981"/>
</iter>
<status status="PASS" starttime="20210730 17:42:49.974" endtime="20210730 17:42:49.981"/>
</for>
<status status="PASS" starttime="20210730 17:42:49.973" endtime="20210730 17:42:49.981"/>
</branch>
<status status="PASS" starttime="20210730 17:42:49.973" endtime="20210730 17:42:49.982"/>
</if>
<status status="PASS" starttime="20210730 17:42:49.939" endtime="20210730 17:42:49.982"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:49.983" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:49.982" endtime="20210730 17:42:49.983"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:49.983" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:49.983" endtime="20210730 17:42:49.983"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:49.984" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:49.983" endtime="20210730 17:42:49.984"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:49.984" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:49.984" endtime="20210730 17:42:49.984"/>
</kw>
<msg timestamp="20210730 17:42:49.984" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:49.983" endtime="20210730 17:42:49.984"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:49.988" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:49.984" endtime="20210730 17:42:49.989"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.982" endtime="20210730 17:42:49.989"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:49.990" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:49.990" endtime="20210730 17:42:49.997"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:51.499" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:49.997" endtime="20210730 17:42:51.500"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.989" endtime="20210730 17:42:51.501"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:51.508" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:51.506" endtime="20210730 17:42:51.508"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:51.509" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:51.508" endtime="20210730 17:42:51.509"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:51.511" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:51.510" endtime="20210730 17:42:51.511"/>
</kw>
<msg timestamp="20210730 17:42:51.512" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:51.504" endtime="20210730 17:42:51.512"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:51.513" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:51.512" endtime="20210730 17:42:51.514"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.502" endtime="20210730 17:42:51.514"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:51.516" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:51.516" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:51.515" endtime="20210730 17:42:51.516"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.515" endtime="20210730 17:42:51.516"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:51.518" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:51.519" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:51.518" endtime="20210730 17:42:51.519"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:51.519" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:51.519" endtime="20210730 17:42:51.519"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:51.521" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:51.520" endtime="20210730 17:42:51.521"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:51.521" endtime="20210730 17:42:51.522"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:51.522" endtime="20210730 17:42:51.523"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.520" endtime="20210730 17:42:51.523"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:51.523" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:51.523" endtime="20210730 17:42:51.523"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:51.523" endtime="20210730 17:42:51.525"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:51.525" endtime="20210730 17:42:51.525"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.523" endtime="20210730 17:42:51.525"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:51.526" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:51.525" endtime="20210730 17:42:51.526"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:51.526" endtime="20210730 17:42:51.527"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:51.527" endtime="20210730 17:42:51.527"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.525" endtime="20210730 17:42:51.527"/>
</iter>
<status status="PASS" starttime="20210730 17:42:51.519" endtime="20210730 17:42:51.528"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:51.528" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:51.528" endtime="20210730 17:42:51.528"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.517" endtime="20210730 17:42:51.528"/>
</kw>
<status status="PASS" starttime="20210730 17:42:49.939" endtime="20210730 17:42:51.528"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:51.530" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:51.530" endtime="20210730 17:42:51.530"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:51.530" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210730 17:42:51.530" endtime="20210730 17:42:51.531"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:51.540" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:51.540" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:51.531" endtime="20210730 17:42:51.540"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:51.540" endtime="20210730 17:42:51.540"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:51.540" endtime="20210730 17:42:51.541"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:51.531" endtime="20210730 17:42:51.541"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:51.531" endtime="20210730 17:42:51.541"/>
</for>
<status status="FAIL" starttime="20210730 17:42:51.529" endtime="20210730 17:42:51.541"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:51.529" endtime="20210730 17:42:51.541"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:51.542" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:51.541" endtime="20210730 17:42:51.542"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:51.542" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210730 17:42:51.542" endtime="20210730 17:42:51.542"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:51.546" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:51.546" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:51.543" endtime="20210730 17:42:51.546"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:51.546" endtime="20210730 17:42:51.546"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:51.546" endtime="20210730 17:42:51.546"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:51.543" endtime="20210730 17:42:51.546"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:51.542" endtime="20210730 17:42:51.546"/>
</for>
<status status="FAIL" starttime="20210730 17:42:51.541" endtime="20210730 17:42:51.547"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:51.541" endtime="20210730 17:42:51.547"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.0</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:51.547" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:51.547" endtime="20210730 17:42:51.547"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:51.548" level="INFO">${payload} = {'password': 'ABC!?.0'}</msg>
<status status="PASS" starttime="20210730 17:42:51.548" endtime="20210730 17:42:51.548"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:51.551" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:51.551" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:51.548" endtime="20210730 17:42:51.551"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:51.551" endtime="20210730 17:42:51.552"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:51.552" endtime="20210730 17:42:51.552"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:51.548" endtime="20210730 17:42:51.552"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:51.548" endtime="20210730 17:42:51.552"/>
</for>
<status status="FAIL" starttime="20210730 17:42:51.547" endtime="20210730 17:42:51.552"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:51.547" endtime="20210730 17:42:51.552"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:51.529" endtime="20210730 17:42:51.552"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:51.556" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:51.567" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:51.567" level="INFO">${pids} = 24922
24929
24935</msg>
<status status="PASS" starttime="20210730 17:42:51.553" endtime="20210730 17:42:51.567"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:51.568" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:51.567" endtime="20210730 17:42:51.568"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:51.568" level="INFO">${pids} = ['24922', '24929', '24935']</msg>
<status status="PASS" starttime="20210730 17:42:51.568" endtime="20210730 17:42:51.568"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24922</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:51.572" level="INFO">Running command 'kill 24922 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:51.569" endtime="20210730 17:42:51.572"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.569" endtime="20210730 17:42:51.572"/>
</iter>
<iter>
<var name="${pid}">24929</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:51.576" level="INFO">Running command 'kill 24929 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:51.573" endtime="20210730 17:42:51.577"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.572" endtime="20210730 17:42:51.577"/>
</iter>
<iter>
<var name="${pid}">24935</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:51.582" level="INFO">Running command 'kill 24935 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:51.577" endtime="20210730 17:42:51.582"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.577" endtime="20210730 17:42:51.582"/>
</iter>
<status status="PASS" starttime="20210730 17:42:51.568" endtime="20210730 17:42:51.582"/>
</for>
<status status="PASS" starttime="20210730 17:42:51.568" endtime="20210730 17:42:51.582"/>
</branch>
<status status="PASS" starttime="20210730 17:42:51.568" endtime="20210730 17:42:51.582"/>
</if>
<status status="PASS" starttime="20210730 17:42:51.552" endtime="20210730 17:42:51.583"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.0'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:49.938" endtime="20210730 17:42:51.583">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t94" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.01 Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:51.596" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:51.630" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:51.630" level="INFO">${pids} = 24964</msg>
<status status="PASS" starttime="20210730 17:42:51.585" endtime="20210730 17:42:51.630"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:51.631" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:51.630" endtime="20210730 17:42:51.631"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:51.631" level="INFO">${pids} = ['24964']</msg>
<status status="PASS" starttime="20210730 17:42:51.631" endtime="20210730 17:42:51.631"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24964</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:51.635" level="INFO">Running command 'kill 24964 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:51.632" endtime="20210730 17:42:51.635"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.632" endtime="20210730 17:42:51.635"/>
</iter>
<status status="PASS" starttime="20210730 17:42:51.632" endtime="20210730 17:42:51.635"/>
</for>
<status status="PASS" starttime="20210730 17:42:51.631" endtime="20210730 17:42:51.635"/>
</branch>
<status status="PASS" starttime="20210730 17:42:51.631" endtime="20210730 17:42:51.635"/>
</if>
<status status="PASS" starttime="20210730 17:42:51.584" endtime="20210730 17:42:51.636"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:51.637" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:51.636" endtime="20210730 17:42:51.637"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:51.637" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:51.637" endtime="20210730 17:42:51.637"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:51.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:51.637" endtime="20210730 17:42:51.638"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:51.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:51.638" endtime="20210730 17:42:51.638"/>
</kw>
<msg timestamp="20210730 17:42:51.638" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:51.637" endtime="20210730 17:42:51.638"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:51.641" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:51.638" endtime="20210730 17:42:51.644"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.636" endtime="20210730 17:42:51.645"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:51.646" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:51.646" endtime="20210730 17:42:51.650"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:53.151" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:51.650" endtime="20210730 17:42:53.151"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.645" endtime="20210730 17:42:53.152"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:53.154" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:53.154" endtime="20210730 17:42:53.154"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:53.154" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:53.154" endtime="20210730 17:42:53.154"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:53.155" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:53.154" endtime="20210730 17:42:53.155"/>
</kw>
<msg timestamp="20210730 17:42:53.155" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:53.153" endtime="20210730 17:42:53.155"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:53.155" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:53.155" endtime="20210730 17:42:53.156"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.152" endtime="20210730 17:42:53.156"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:53.156" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:53.156" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:53.156" endtime="20210730 17:42:53.156"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.156" endtime="20210730 17:42:53.157"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:53.157" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:53.157" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:53.157" endtime="20210730 17:42:53.157"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:53.158" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:53.158" endtime="20210730 17:42:53.158"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:53.158" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:53.158" endtime="20210730 17:42:53.158"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:53.158" endtime="20210730 17:42:53.159"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:53.159" endtime="20210730 17:42:53.159"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.158" endtime="20210730 17:42:53.159"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:53.160" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:53.160" endtime="20210730 17:42:53.160"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:53.160" endtime="20210730 17:42:53.161"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:53.161" endtime="20210730 17:42:53.161"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.160" endtime="20210730 17:42:53.161"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:53.161" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:53.161" endtime="20210730 17:42:53.161"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:53.161" endtime="20210730 17:42:53.162"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:53.162" endtime="20210730 17:42:53.162"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.161" endtime="20210730 17:42:53.162"/>
</iter>
<status status="PASS" starttime="20210730 17:42:53.158" endtime="20210730 17:42:53.162"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:53.163" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:53.162" endtime="20210730 17:42:53.163"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.157" endtime="20210730 17:42:53.163"/>
</kw>
<status status="PASS" starttime="20210730 17:42:51.584" endtime="20210730 17:42:53.163"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:53.164" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:53.164" endtime="20210730 17:42:53.164"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:53.164" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210730 17:42:53.164" endtime="20210730 17:42:53.164"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:53.174" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:53.176" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:53.165" endtime="20210730 17:42:53.176"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:53.177" endtime="20210730 17:42:53.177"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:53.177" endtime="20210730 17:42:53.177"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:53.164" endtime="20210730 17:42:53.177"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:53.164" endtime="20210730 17:42:53.177"/>
</for>
<status status="FAIL" starttime="20210730 17:42:53.163" endtime="20210730 17:42:53.177"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:53.163" endtime="20210730 17:42:53.177"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:53.178" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:53.178" endtime="20210730 17:42:53.178"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:53.178" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210730 17:42:53.178" endtime="20210730 17:42:53.179"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:53.183" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:53.183" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:53.179" endtime="20210730 17:42:53.183"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:53.183" endtime="20210730 17:42:53.183"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:53.183" endtime="20210730 17:42:53.183"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:53.179" endtime="20210730 17:42:53.183"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:53.179" endtime="20210730 17:42:53.183"/>
</for>
<status status="FAIL" starttime="20210730 17:42:53.177" endtime="20210730 17:42:53.184"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:53.177" endtime="20210730 17:42:53.184"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:53.184" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:53.184" endtime="20210730 17:42:53.185"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:53.185" level="INFO">${payload} = {'password': 'ABC!?.01'}</msg>
<status status="PASS" starttime="20210730 17:42:53.185" endtime="20210730 17:42:53.185"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:53.189" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:53.189" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:53.185" endtime="20210730 17:42:53.189"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:53.190" endtime="20210730 17:42:53.190"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:53.190" endtime="20210730 17:42:53.190"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:53.185" endtime="20210730 17:42:53.190"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:53.185" endtime="20210730 17:42:53.190"/>
</for>
<status status="FAIL" starttime="20210730 17:42:53.184" endtime="20210730 17:42:53.190"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:53.184" endtime="20210730 17:42:53.190"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:53.163" endtime="20210730 17:42:53.190"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:53.198" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:53.208" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:53.208" level="INFO">${pids} = 24987
24994
24998</msg>
<status status="PASS" starttime="20210730 17:42:53.195" endtime="20210730 17:42:53.208"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:53.209" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:53.209" endtime="20210730 17:42:53.209"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:53.210" level="INFO">${pids} = ['24987', '24994', '24998']</msg>
<status status="PASS" starttime="20210730 17:42:53.210" endtime="20210730 17:42:53.210"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">24987</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:53.214" level="INFO">Running command 'kill 24987 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:53.210" endtime="20210730 17:42:53.214"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.210" endtime="20210730 17:42:53.214"/>
</iter>
<iter>
<var name="${pid}">24994</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:53.217" level="INFO">Running command 'kill 24994 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:53.214" endtime="20210730 17:42:53.219"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.214" endtime="20210730 17:42:53.219"/>
</iter>
<iter>
<var name="${pid}">24998</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:53.225" level="INFO">Running command 'kill 24998 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:53.220" endtime="20210730 17:42:53.226"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.219" endtime="20210730 17:42:53.226"/>
</iter>
<status status="PASS" starttime="20210730 17:42:53.210" endtime="20210730 17:42:53.226"/>
</for>
<status status="PASS" starttime="20210730 17:42:53.210" endtime="20210730 17:42:53.226"/>
</branch>
<status status="PASS" starttime="20210730 17:42:53.210" endtime="20210730 17:42:53.226"/>
</if>
<status status="PASS" starttime="20210730 17:42:53.191" endtime="20210730 17:42:53.226"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.01'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:51.583" endtime="20210730 17:42:53.227">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t95" name="With Each Valid Token, Updating Password Of Each System User With ABC!?.01ABC!?.01ABC!?. Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:53.232" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:53.243" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:53.243" level="INFO">${pids} = 25027</msg>
<status status="PASS" starttime="20210730 17:42:53.229" endtime="20210730 17:42:53.243"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:53.244" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:53.243" endtime="20210730 17:42:53.244"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:53.244" level="INFO">${pids} = ['25027']</msg>
<status status="PASS" starttime="20210730 17:42:53.244" endtime="20210730 17:42:53.244"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25027</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:53.248" level="INFO">Running command 'kill 25027 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:53.245" endtime="20210730 17:42:53.248"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.245" endtime="20210730 17:42:53.248"/>
</iter>
<status status="PASS" starttime="20210730 17:42:53.244" endtime="20210730 17:42:53.248"/>
</for>
<status status="PASS" starttime="20210730 17:42:53.244" endtime="20210730 17:42:53.249"/>
</branch>
<status status="PASS" starttime="20210730 17:42:53.244" endtime="20210730 17:42:53.249"/>
</if>
<status status="PASS" starttime="20210730 17:42:53.229" endtime="20210730 17:42:53.249"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:53.250" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:53.250" endtime="20210730 17:42:53.250"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:53.250" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:53.250" endtime="20210730 17:42:53.250"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:53.251" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:53.251" endtime="20210730 17:42:53.251"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:53.251" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:53.251" endtime="20210730 17:42:53.251"/>
</kw>
<msg timestamp="20210730 17:42:53.254" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:53.250" endtime="20210730 17:42:53.254"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:53.261" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:53.254" endtime="20210730 17:42:53.262"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.249" endtime="20210730 17:42:53.263"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:53.264" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:53.263" endtime="20210730 17:42:53.268"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:54.782" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:53.268" endtime="20210730 17:42:54.782"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.263" endtime="20210730 17:42:54.783"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:54.787" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:54.786" endtime="20210730 17:42:54.787"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:54.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:54.787" endtime="20210730 17:42:54.788"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:54.789" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:54.788" endtime="20210730 17:42:54.789"/>
</kw>
<msg timestamp="20210730 17:42:54.790" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:54.785" endtime="20210730 17:42:54.790"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:54.791" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:54.790" endtime="20210730 17:42:54.792"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.784" endtime="20210730 17:42:54.792"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:54.793" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:54.793" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:54.793" endtime="20210730 17:42:54.793"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.792" endtime="20210730 17:42:54.794"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:54.795" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:54.796" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:54.794" endtime="20210730 17:42:54.796"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:54.796" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:54.796" endtime="20210730 17:42:54.796"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:54.797" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:54.797" endtime="20210730 17:42:54.797"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:54.797" endtime="20210730 17:42:54.799"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:54.799" endtime="20210730 17:42:54.799"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.797" endtime="20210730 17:42:54.799"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:54.800" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:54.800" endtime="20210730 17:42:54.800"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:54.800" endtime="20210730 17:42:54.801"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:54.801" endtime="20210730 17:42:54.802"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.799" endtime="20210730 17:42:54.802"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:54.802" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:54.802" endtime="20210730 17:42:54.802"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:54.803" endtime="20210730 17:42:54.804"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:54.804" endtime="20210730 17:42:54.804"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.802" endtime="20210730 17:42:54.804"/>
</iter>
<status status="PASS" starttime="20210730 17:42:54.796" endtime="20210730 17:42:54.804"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:54.805" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:54.804" endtime="20210730 17:42:54.805"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.794" endtime="20210730 17:42:54.805"/>
</kw>
<status status="PASS" starttime="20210730 17:42:53.228" endtime="20210730 17:42:54.805"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:54.807" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:54.806" endtime="20210730 17:42:54.807"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:54.807" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:54.807" endtime="20210730 17:42:54.807"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:54.817" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:54.817" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:54.808" endtime="20210730 17:42:54.817"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:54.817" endtime="20210730 17:42:54.817"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:54.817" endtime="20210730 17:42:54.817"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:54.807" endtime="20210730 17:42:54.817"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:54.807" endtime="20210730 17:42:54.818"/>
</for>
<status status="FAIL" starttime="20210730 17:42:54.806" endtime="20210730 17:42:54.818"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:54.805" endtime="20210730 17:42:54.818"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:54.819" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:54.818" endtime="20210730 17:42:54.819"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:54.819" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:54.819" endtime="20210730 17:42:54.819"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:54.823" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:54.823" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:54.820" endtime="20210730 17:42:54.823"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:54.823" endtime="20210730 17:42:54.823"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:54.823" endtime="20210730 17:42:54.823"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:54.819" endtime="20210730 17:42:54.824"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:54.819" endtime="20210730 17:42:54.824"/>
</for>
<status status="FAIL" starttime="20210730 17:42:54.818" endtime="20210730 17:42:54.824"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:54.818" endtime="20210730 17:42:54.824"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=ABC!?.01ABC!?.01ABC!?.</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:54.825" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:54.824" endtime="20210730 17:42:54.825"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:54.825" level="INFO">${payload} = {'password': 'ABC!?.01ABC!?.01ABC!?.'}</msg>
<status status="PASS" starttime="20210730 17:42:54.825" endtime="20210730 17:42:54.825"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:54.829" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:54.829" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:54.825" endtime="20210730 17:42:54.829"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:54.829" endtime="20210730 17:42:54.829"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:54.829" endtime="20210730 17:42:54.829"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:54.825" endtime="20210730 17:42:54.829"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:54.825" endtime="20210730 17:42:54.829"/>
</for>
<status status="FAIL" starttime="20210730 17:42:54.824" endtime="20210730 17:42:54.830"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:54.824" endtime="20210730 17:42:54.830"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:54.805" endtime="20210730 17:42:54.830"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:54.835" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:54.846" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:54.846" level="INFO">${pids} = 25050
25057
25061</msg>
<status status="PASS" starttime="20210730 17:42:54.831" endtime="20210730 17:42:54.846"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:54.847" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:54.846" endtime="20210730 17:42:54.847"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:54.847" level="INFO">${pids} = ['25050', '25057', '25061']</msg>
<status status="PASS" starttime="20210730 17:42:54.847" endtime="20210730 17:42:54.847"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25050</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:54.851" level="INFO">Running command 'kill 25050 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:54.848" endtime="20210730 17:42:54.851"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.847" endtime="20210730 17:42:54.851"/>
</iter>
<iter>
<var name="${pid}">25057</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:54.854" level="INFO">Running command 'kill 25057 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:54.852" endtime="20210730 17:42:54.855"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.852" endtime="20210730 17:42:54.855"/>
</iter>
<iter>
<var name="${pid}">25061</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:54.860" level="INFO">Running command 'kill 25061 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:54.855" endtime="20210730 17:42:54.860"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.855" endtime="20210730 17:42:54.861"/>
</iter>
<status status="PASS" starttime="20210730 17:42:54.847" endtime="20210730 17:42:54.861"/>
</for>
<status status="PASS" starttime="20210730 17:42:54.847" endtime="20210730 17:42:54.861"/>
</branch>
<status status="PASS" starttime="20210730 17:42:54.847" endtime="20210730 17:42:54.861"/>
</if>
<status status="PASS" starttime="20210730 17:42:54.830" endtime="20210730 17:42:54.861"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": 'ABC!?.01ABC!?.01ABC!?.'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:53.228" endtime="20210730 17:42:54.861">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t96" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aa Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:54.871" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:54.878" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:54.878" level="INFO">${pids} = 25090</msg>
<status status="PASS" starttime="20210730 17:42:54.863" endtime="20210730 17:42:54.878"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:54.879" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:54.878" endtime="20210730 17:42:54.879"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:54.879" level="INFO">${pids} = ['25090']</msg>
<status status="PASS" starttime="20210730 17:42:54.879" endtime="20210730 17:42:54.880"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25090</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:54.885" level="INFO">Running command 'kill 25090 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:54.880" endtime="20210730 17:42:54.885"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.880" endtime="20210730 17:42:54.885"/>
</iter>
<status status="PASS" starttime="20210730 17:42:54.880" endtime="20210730 17:42:54.886"/>
</for>
<status status="PASS" starttime="20210730 17:42:54.879" endtime="20210730 17:42:54.886"/>
</branch>
<status status="PASS" starttime="20210730 17:42:54.879" endtime="20210730 17:42:54.886"/>
</if>
<status status="PASS" starttime="20210730 17:42:54.862" endtime="20210730 17:42:54.886"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:54.887" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:54.887" endtime="20210730 17:42:54.887"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:54.888" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:54.887" endtime="20210730 17:42:54.888"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:54.888" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:54.888" endtime="20210730 17:42:54.888"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:54.889" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:54.888" endtime="20210730 17:42:54.889"/>
</kw>
<msg timestamp="20210730 17:42:54.889" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:54.887" endtime="20210730 17:42:54.889"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:54.899" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:54.889" endtime="20210730 17:42:54.901"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.886" endtime="20210730 17:42:54.902"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:54.903" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:54.902" endtime="20210730 17:42:54.907"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:56.414" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:54.908" endtime="20210730 17:42:56.414"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.902" endtime="20210730 17:42:56.415"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:56.416" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:56.415" endtime="20210730 17:42:56.416"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:56.416" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:56.416" endtime="20210730 17:42:56.416"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:56.416" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:56.416" endtime="20210730 17:42:56.416"/>
</kw>
<msg timestamp="20210730 17:42:56.417" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:56.415" endtime="20210730 17:42:56.417"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:56.417" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:56.417" endtime="20210730 17:42:56.417"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.415" endtime="20210730 17:42:56.418"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:56.418" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:56.418" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:56.418" endtime="20210730 17:42:56.418"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.418" endtime="20210730 17:42:56.418"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:56.419" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:56.419" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:56.419" endtime="20210730 17:42:56.419"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:56.419" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:56.419" endtime="20210730 17:42:56.419"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:56.420" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:56.420" endtime="20210730 17:42:56.420"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:56.420" endtime="20210730 17:42:56.421"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:56.421" endtime="20210730 17:42:56.421"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.420" endtime="20210730 17:42:56.421"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:56.422" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:56.421" endtime="20210730 17:42:56.422"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:56.422" endtime="20210730 17:42:56.422"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:56.422" endtime="20210730 17:42:56.423"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.421" endtime="20210730 17:42:56.423"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:56.423" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:56.423" endtime="20210730 17:42:56.423"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:56.423" endtime="20210730 17:42:56.424"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:56.424" endtime="20210730 17:42:56.424"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.423" endtime="20210730 17:42:56.424"/>
</iter>
<status status="PASS" starttime="20210730 17:42:56.420" endtime="20210730 17:42:56.424"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:56.424" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:56.424" endtime="20210730 17:42:56.424"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.418" endtime="20210730 17:42:56.425"/>
</kw>
<status status="PASS" starttime="20210730 17:42:54.862" endtime="20210730 17:42:56.425"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:56.426" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:56.426" endtime="20210730 17:42:56.426"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:56.426" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210730 17:42:56.426" endtime="20210730 17:42:56.426"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:56.435" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:56.435" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:56.427" endtime="20210730 17:42:56.436"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:56.436" endtime="20210730 17:42:56.436"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:56.436" endtime="20210730 17:42:56.436"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:56.427" endtime="20210730 17:42:56.436"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:56.426" endtime="20210730 17:42:56.436"/>
</for>
<status status="FAIL" starttime="20210730 17:42:56.425" endtime="20210730 17:42:56.436"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:56.425" endtime="20210730 17:42:56.436"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:56.438" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:56.438" endtime="20210730 17:42:56.438"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:56.438" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210730 17:42:56.438" endtime="20210730 17:42:56.438"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:56.442" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:56.443" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:56.439" endtime="20210730 17:42:56.443"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:56.443" endtime="20210730 17:42:56.443"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:56.443" endtime="20210730 17:42:56.443"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:56.439" endtime="20210730 17:42:56.443"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:56.439" endtime="20210730 17:42:56.443"/>
</for>
<status status="FAIL" starttime="20210730 17:42:56.437" endtime="20210730 17:42:56.443"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:56.436" endtime="20210730 17:42:56.443"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aa</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:56.444" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:56.444" endtime="20210730 17:42:56.444"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:56.444" level="INFO">${payload} = {'password': '012!.Aa'}</msg>
<status status="PASS" starttime="20210730 17:42:56.444" endtime="20210730 17:42:56.444"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:56.448" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:56.448" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:56.445" endtime="20210730 17:42:56.448"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:56.449" endtime="20210730 17:42:56.449"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:56.449" endtime="20210730 17:42:56.449"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:56.445" endtime="20210730 17:42:56.449"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:56.444" endtime="20210730 17:42:56.449"/>
</for>
<status status="FAIL" starttime="20210730 17:42:56.443" endtime="20210730 17:42:56.449"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:56.443" endtime="20210730 17:42:56.449"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:56.425" endtime="20210730 17:42:56.449"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:56.453" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:56.464" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:56.465" level="INFO">${pids} = 25113
25120
25125</msg>
<status status="PASS" starttime="20210730 17:42:56.450" endtime="20210730 17:42:56.465"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:56.466" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:56.465" endtime="20210730 17:42:56.466"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:56.466" level="INFO">${pids} = ['25113', '25120', '25125']</msg>
<status status="PASS" starttime="20210730 17:42:56.466" endtime="20210730 17:42:56.466"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25113</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:56.470" level="INFO">Running command 'kill 25113 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:56.467" endtime="20210730 17:42:56.470"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.466" endtime="20210730 17:42:56.470"/>
</iter>
<iter>
<var name="${pid}">25120</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:56.473" level="INFO">Running command 'kill 25120 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:56.470" endtime="20210730 17:42:56.474"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.470" endtime="20210730 17:42:56.474"/>
</iter>
<iter>
<var name="${pid}">25125</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:56.477" level="INFO">Running command 'kill 25125 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:56.474" endtime="20210730 17:42:56.478"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.474" endtime="20210730 17:42:56.478"/>
</iter>
<status status="PASS" starttime="20210730 17:42:56.466" endtime="20210730 17:42:56.478"/>
</for>
<status status="PASS" starttime="20210730 17:42:56.466" endtime="20210730 17:42:56.478"/>
</branch>
<status status="PASS" starttime="20210730 17:42:56.466" endtime="20210730 17:42:56.478"/>
</if>
<status status="PASS" starttime="20210730 17:42:56.449" endtime="20210730 17:42:56.478"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aa'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:54.861" endtime="20210730 17:42:56.478">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t97" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aab Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:56.490" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:56.499" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:56.499" level="INFO">${pids} = 25154</msg>
<status status="PASS" starttime="20210730 17:42:56.481" endtime="20210730 17:42:56.499"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:56.500" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:56.500" endtime="20210730 17:42:56.500"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:56.501" level="INFO">${pids} = ['25154']</msg>
<status status="PASS" starttime="20210730 17:42:56.501" endtime="20210730 17:42:56.501"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25154</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:56.515" level="INFO">Running command 'kill 25154 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:56.503" endtime="20210730 17:42:56.516"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.503" endtime="20210730 17:42:56.516"/>
</iter>
<status status="PASS" starttime="20210730 17:42:56.501" endtime="20210730 17:42:56.516"/>
</for>
<status status="PASS" starttime="20210730 17:42:56.500" endtime="20210730 17:42:56.516"/>
</branch>
<status status="PASS" starttime="20210730 17:42:56.500" endtime="20210730 17:42:56.516"/>
</if>
<status status="PASS" starttime="20210730 17:42:56.480" endtime="20210730 17:42:56.517"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:56.518" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:56.518" endtime="20210730 17:42:56.518"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:56.519" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:56.519" endtime="20210730 17:42:56.519"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:56.519" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:56.519" endtime="20210730 17:42:56.519"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:56.520" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:56.519" endtime="20210730 17:42:56.520"/>
</kw>
<msg timestamp="20210730 17:42:56.520" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:56.518" endtime="20210730 17:42:56.520"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:56.523" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:56.520" endtime="20210730 17:42:56.524"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.517" endtime="20210730 17:42:56.525"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:56.526" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:56.526" endtime="20210730 17:42:56.531"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:58.041" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:56.531" endtime="20210730 17:42:58.041"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.525" endtime="20210730 17:42:58.043"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:58.046" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:58.046" endtime="20210730 17:42:58.046"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:58.046" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:58.046" endtime="20210730 17:42:58.046"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:58.047" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:58.047" endtime="20210730 17:42:58.047"/>
</kw>
<msg timestamp="20210730 17:42:58.047" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:58.045" endtime="20210730 17:42:58.047"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:58.048" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:58.047" endtime="20210730 17:42:58.048"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.045" endtime="20210730 17:42:58.048"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:58.048" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:58.049" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:58.048" endtime="20210730 17:42:58.049"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.048" endtime="20210730 17:42:58.049"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:58.050" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:58.050" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:58.049" endtime="20210730 17:42:58.050"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:58.050" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:58.050" endtime="20210730 17:42:58.050"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:58.051" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:58.050" endtime="20210730 17:42:58.051"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:58.051" endtime="20210730 17:42:58.052"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:58.052" endtime="20210730 17:42:58.052"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.050" endtime="20210730 17:42:58.052"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:58.052" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:58.052" endtime="20210730 17:42:58.052"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:58.052" endtime="20210730 17:42:58.053"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:58.053" endtime="20210730 17:42:58.053"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.052" endtime="20210730 17:42:58.053"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:58.054" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:58.054" endtime="20210730 17:42:58.054"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:58.054" endtime="20210730 17:42:58.055"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:58.055" endtime="20210730 17:42:58.055"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.053" endtime="20210730 17:42:58.055"/>
</iter>
<status status="PASS" starttime="20210730 17:42:58.050" endtime="20210730 17:42:58.055"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:58.055" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:58.055" endtime="20210730 17:42:58.055"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.049" endtime="20210730 17:42:58.055"/>
</kw>
<status status="PASS" starttime="20210730 17:42:56.480" endtime="20210730 17:42:58.056"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:58.057" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:58.056" endtime="20210730 17:42:58.057"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:58.057" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210730 17:42:58.057" endtime="20210730 17:42:58.057"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:58.066" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:58.066" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:58.057" endtime="20210730 17:42:58.066"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:58.067" endtime="20210730 17:42:58.067"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:58.067" endtime="20210730 17:42:58.067"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:58.057" endtime="20210730 17:42:58.067"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:58.057" endtime="20210730 17:42:58.067"/>
</for>
<status status="FAIL" starttime="20210730 17:42:58.056" endtime="20210730 17:42:58.067"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:58.056" endtime="20210730 17:42:58.067"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:58.068" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:58.068" endtime="20210730 17:42:58.068"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:58.068" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210730 17:42:58.068" endtime="20210730 17:42:58.069"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:58.072" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:58.072" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:58.069" endtime="20210730 17:42:58.072"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:58.073" endtime="20210730 17:42:58.073"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:58.073" endtime="20210730 17:42:58.073"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:58.069" endtime="20210730 17:42:58.073"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:58.069" endtime="20210730 17:42:58.073"/>
</for>
<status status="FAIL" starttime="20210730 17:42:58.067" endtime="20210730 17:42:58.073"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:58.067" endtime="20210730 17:42:58.073"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:58.074" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:58.074" endtime="20210730 17:42:58.074"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:58.074" level="INFO">${payload} = {'password': '012!.Aab'}</msg>
<status status="PASS" starttime="20210730 17:42:58.074" endtime="20210730 17:42:58.074"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:58.078" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:58.078" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:58.075" endtime="20210730 17:42:58.078"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:58.078" endtime="20210730 17:42:58.078"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:58.079" endtime="20210730 17:42:58.079"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:58.074" endtime="20210730 17:42:58.079"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:58.074" endtime="20210730 17:42:58.079"/>
</for>
<status status="FAIL" starttime="20210730 17:42:58.073" endtime="20210730 17:42:58.079"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:58.073" endtime="20210730 17:42:58.079"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:58.056" endtime="20210730 17:42:58.079"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:58.084" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:58.095" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:58.095" level="INFO">${pids} = 25177
25184
25188</msg>
<status status="PASS" starttime="20210730 17:42:58.080" endtime="20210730 17:42:58.095"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:58.096" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:58.096" endtime="20210730 17:42:58.096"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:58.097" level="INFO">${pids} = ['25177', '25184', '25188']</msg>
<status status="PASS" starttime="20210730 17:42:58.096" endtime="20210730 17:42:58.097"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25177</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:58.100" level="INFO">Running command 'kill 25177 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:58.097" endtime="20210730 17:42:58.101"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.097" endtime="20210730 17:42:58.101"/>
</iter>
<iter>
<var name="${pid}">25184</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:58.103" level="INFO">Running command 'kill 25184 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:58.101" endtime="20210730 17:42:58.104"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.101" endtime="20210730 17:42:58.104"/>
</iter>
<iter>
<var name="${pid}">25188</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:58.108" level="INFO">Running command 'kill 25188 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:58.104" endtime="20210730 17:42:58.109"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.104" endtime="20210730 17:42:58.109"/>
</iter>
<status status="PASS" starttime="20210730 17:42:58.097" endtime="20210730 17:42:58.109"/>
</for>
<status status="PASS" starttime="20210730 17:42:58.096" endtime="20210730 17:42:58.109"/>
</branch>
<status status="PASS" starttime="20210730 17:42:58.096" endtime="20210730 17:42:58.109"/>
</if>
<status status="PASS" starttime="20210730 17:42:58.079" endtime="20210730 17:42:58.110"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aab'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:56.479" endtime="20210730 17:42:58.110">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t98" name="With Each Valid Token, Updating Password Of Each System User With 012!.Aab012!.Aab012!.A Results In &quot;Field update not allowed&quot;">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:58.122" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:58.132" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:58.132" level="INFO">${pids} = 25218</msg>
<status status="PASS" starttime="20210730 17:42:58.112" endtime="20210730 17:42:58.132"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:58.132" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:58.132" endtime="20210730 17:42:58.133"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:58.133" level="INFO">${pids} = ['25218']</msg>
<status status="PASS" starttime="20210730 17:42:58.133" endtime="20210730 17:42:58.133"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25218</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:58.149" level="INFO">Running command 'kill 25218 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:58.133" endtime="20210730 17:42:58.149"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.133" endtime="20210730 17:42:58.150"/>
</iter>
<status status="PASS" starttime="20210730 17:42:58.133" endtime="20210730 17:42:58.150"/>
</for>
<status status="PASS" starttime="20210730 17:42:58.133" endtime="20210730 17:42:58.150"/>
</branch>
<status status="PASS" starttime="20210730 17:42:58.133" endtime="20210730 17:42:58.150"/>
</if>
<status status="PASS" starttime="20210730 17:42:58.112" endtime="20210730 17:42:58.150"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:58.151" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:58.151" endtime="20210730 17:42:58.151"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:58.152" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:58.152" endtime="20210730 17:42:58.152"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:58.153" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:58.153" endtime="20210730 17:42:58.153"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:58.153" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:58.153" endtime="20210730 17:42:58.153"/>
</kw>
<msg timestamp="20210730 17:42:58.154" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:58.152" endtime="20210730 17:42:58.154"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:58.157" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:58.154" endtime="20210730 17:42:58.159"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.150" endtime="20210730 17:42:58.159"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:58.161" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:58.160" endtime="20210730 17:42:58.165"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:42:59.667" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:58.166" endtime="20210730 17:42:59.668"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.160" endtime="20210730 17:42:59.668"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:59.669" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:59.669" endtime="20210730 17:42:59.669"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:59.670" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:59.669" endtime="20210730 17:42:59.670"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:59.670" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:59.670" endtime="20210730 17:42:59.670"/>
</kw>
<msg timestamp="20210730 17:42:59.670" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:59.668" endtime="20210730 17:42:59.670"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:42:59.671" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:42:59.671" endtime="20210730 17:42:59.671"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.668" endtime="20210730 17:42:59.672"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:42:59.672" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:42:59.672" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:42:59.672" endtime="20210730 17:42:59.672"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.672" endtime="20210730 17:42:59.673"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:42:59.674" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:42:59.674" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:42:59.673" endtime="20210730 17:42:59.674"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:42:59.674" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:42:59.674" endtime="20210730 17:42:59.674"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:59.675" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:59.674" endtime="20210730 17:42:59.675"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:59.675" endtime="20210730 17:42:59.676"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:59.676" endtime="20210730 17:42:59.676"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.674" endtime="20210730 17:42:59.676"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:59.677" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:59.677" endtime="20210730 17:42:59.677"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:59.677" endtime="20210730 17:42:59.678"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:59.678" endtime="20210730 17:42:59.678"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.676" endtime="20210730 17:42:59.678"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:59.679" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:42:59.678" endtime="20210730 17:42:59.679"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:42:59.679" endtime="20210730 17:42:59.680"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:42:59.680" endtime="20210730 17:42:59.680"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.678" endtime="20210730 17:42:59.680"/>
</iter>
<status status="PASS" starttime="20210730 17:42:59.674" endtime="20210730 17:42:59.680"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:42:59.681" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:42:59.680" endtime="20210730 17:42:59.681"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.673" endtime="20210730 17:42:59.681"/>
</kw>
<status status="PASS" starttime="20210730 17:42:58.112" endtime="20210730 17:42:59.681"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:59.682" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:42:59.682" endtime="20210730 17:42:59.682"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:59.682" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210730 17:42:59.682" endtime="20210730 17:42:59.682"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:59.691" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:59.691" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:59.683" endtime="20210730 17:42:59.691"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:59.691" endtime="20210730 17:42:59.691"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:59.691" endtime="20210730 17:42:59.692"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:59.683" endtime="20210730 17:42:59.692"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:59.682" endtime="20210730 17:42:59.692"/>
</for>
<status status="FAIL" starttime="20210730 17:42:59.681" endtime="20210730 17:42:59.692"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:59.681" endtime="20210730 17:42:59.692"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser2', 'password': 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'firstname': 'Hakan', 'lastname': 'Holm', 'phone': '0407563...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:59.694" level="INFO">${headers} = {'Token': 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY4'}</msg>
<status status="PASS" starttime="20210730 17:42:59.693" endtime="20210730 17:42:59.694"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:59.694" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210730 17:42:59.694" endtime="20210730 17:42:59.694"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:59.699" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:59.699" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:59.695" endtime="20210730 17:42:59.699"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:59.699" endtime="20210730 17:42:59.699"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:59.700" endtime="20210730 17:42:59.700"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:59.695" endtime="20210730 17:42:59.700"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:59.694" endtime="20210730 17:42:59.700"/>
</for>
<status status="FAIL" starttime="20210730 17:42:59.692" endtime="20210730 17:42:59.700"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:59.692" endtime="20210730 17:42:59.700"/>
</iter>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser3', 'password': 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'firstname': 'John', 'lastname': 'Brown', 'phone': '0508094...</var>
<kw name="With Valid Token, Attempt to Set Password To All System Users">
<arg>token=${api_user}[token]</arg>
<arg>password=012!.Aab012!.Aab012!.A</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:59.701" level="INFO">${headers} = {'Token': 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA3'}</msg>
<status status="PASS" starttime="20210730 17:42:59.701" endtime="20210730 17:42:59.701"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>password=${password}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:42:59.701" level="INFO">${payload} = {'password': '012!.Aab012!.Aab012!.A'}</msg>
<status status="PASS" starttime="20210730 17:42:59.701" endtime="20210730 17:42:59.701"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:42:59.705" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:42:59.706" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:42:59.702" endtime="20210730 17:42:59.706"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Field update not allowed</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:42:59.706" endtime="20210730 17:42:59.706"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:42:59.706" endtime="20210730 17:42:59.706"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:59.702" endtime="20210730 17:42:59.706"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:59.701" endtime="20210730 17:42:59.706"/>
</for>
<status status="FAIL" starttime="20210730 17:42:59.700" endtime="20210730 17:42:59.706"/>
</kw>
<status status="FAIL" starttime="20210730 17:42:59.700" endtime="20210730 17:42:59.706"/>
</iter>
<status status="FAIL" starttime="20210730 17:42:59.681" endtime="20210730 17:42:59.706"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:59.711" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:59.722" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:59.722" level="INFO">${pids} = 25241
25248
25252</msg>
<status status="PASS" starttime="20210730 17:42:59.707" endtime="20210730 17:42:59.722"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:59.723" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:59.722" endtime="20210730 17:42:59.723"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:59.723" level="INFO">${pids} = ['25241', '25248', '25252']</msg>
<status status="PASS" starttime="20210730 17:42:59.723" endtime="20210730 17:42:59.723"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25241</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:59.728" level="INFO">Running command 'kill 25241 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:59.724" endtime="20210730 17:42:59.729"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.724" endtime="20210730 17:42:59.729"/>
</iter>
<iter>
<var name="${pid}">25248</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:59.732" level="INFO">Running command 'kill 25248 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:59.729" endtime="20210730 17:42:59.733"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.729" endtime="20210730 17:42:59.733"/>
</iter>
<iter>
<var name="${pid}">25252</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:59.738" level="INFO">Running command 'kill 25252 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:59.733" endtime="20210730 17:42:59.738"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.733" endtime="20210730 17:42:59.739"/>
</iter>
<status status="PASS" starttime="20210730 17:42:59.724" endtime="20210730 17:42:59.739"/>
</for>
<status status="PASS" starttime="20210730 17:42:59.723" endtime="20210730 17:42:59.739"/>
</branch>
<status status="PASS" starttime="20210730 17:42:59.723" endtime="20210730 17:42:59.739"/>
</if>
<status status="PASS" starttime="20210730 17:42:59.707" endtime="20210730 17:42:59.739"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
password as such:
{
"password": '012!.Aab012!.Aab012!.A'
}
Then, each request should fail with the following response body:
{
"message": "Field update not allowed",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:58.111" endtime="20210730 17:42:59.739">Several failures occurred:

1) We expected a JSON, but received text/html

2) We expected a JSON, but received text/html

3) We expected a JSON, but received text/html</status>
</test>
<test id="s1-t99" name="With Each Valid Token, Updating First Name Of Each System User With '' Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:42:59.746" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:42:59.756" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:42:59.756" level="INFO">${pids} = 25281</msg>
<status status="PASS" starttime="20210730 17:42:59.741" endtime="20210730 17:42:59.756"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:59.757" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:42:59.756" endtime="20210730 17:42:59.757"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:42:59.758" level="INFO">${pids} = ['25281']</msg>
<status status="PASS" starttime="20210730 17:42:59.757" endtime="20210730 17:42:59.758"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25281</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:59.762" level="INFO">Running command 'kill 25281 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:59.758" endtime="20210730 17:42:59.762"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.758" endtime="20210730 17:42:59.762"/>
</iter>
<status status="PASS" starttime="20210730 17:42:59.758" endtime="20210730 17:42:59.762"/>
</for>
<status status="PASS" starttime="20210730 17:42:59.757" endtime="20210730 17:42:59.762"/>
</branch>
<status status="PASS" starttime="20210730 17:42:59.757" endtime="20210730 17:42:59.762"/>
</if>
<status status="PASS" starttime="20210730 17:42:59.741" endtime="20210730 17:42:59.763"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:59.763" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:59.763" endtime="20210730 17:42:59.764"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:59.764" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:42:59.764" endtime="20210730 17:42:59.764"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:42:59.764" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:42:59.764" endtime="20210730 17:42:59.764"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:42:59.765" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:59.764" endtime="20210730 17:42:59.765"/>
</kw>
<msg timestamp="20210730 17:42:59.765" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:42:59.764" endtime="20210730 17:42:59.765"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:42:59.768" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:42:59.765" endtime="20210730 17:42:59.771"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.763" endtime="20210730 17:42:59.771"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:42:59.773" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:42:59.772" endtime="20210730 17:42:59.791"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:01.294" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:42:59.791" endtime="20210730 17:43:01.295"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.772" endtime="20210730 17:43:01.296"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:01.299" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:01.299" endtime="20210730 17:43:01.299"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:01.300" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:01.299" endtime="20210730 17:43:01.300"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:01.300" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:01.300" endtime="20210730 17:43:01.300"/>
</kw>
<msg timestamp="20210730 17:43:01.301" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:01.299" endtime="20210730 17:43:01.301"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:01.301" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:01.301" endtime="20210730 17:43:01.302"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.297" endtime="20210730 17:43:01.302"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:01.302" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:01.302" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:01.302" endtime="20210730 17:43:01.302"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.302" endtime="20210730 17:43:01.303"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:01.303" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:01.304" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:01.303" endtime="20210730 17:43:01.304"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:01.304" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:01.304" endtime="20210730 17:43:01.304"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:01.305" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:01.304" endtime="20210730 17:43:01.305"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:01.305" endtime="20210730 17:43:01.305"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:01.306" endtime="20210730 17:43:01.306"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.304" endtime="20210730 17:43:01.306"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:01.306" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:01.306" endtime="20210730 17:43:01.306"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:01.306" endtime="20210730 17:43:01.307"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:01.307" endtime="20210730 17:43:01.307"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.306" endtime="20210730 17:43:01.307"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:01.308" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:01.308" endtime="20210730 17:43:01.308"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:01.308" endtime="20210730 17:43:01.309"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:01.309" endtime="20210730 17:43:01.309"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.307" endtime="20210730 17:43:01.309"/>
</iter>
<status status="PASS" starttime="20210730 17:43:01.304" endtime="20210730 17:43:01.309"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:01.309" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:01.309" endtime="20210730 17:43:01.309"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.303" endtime="20210730 17:43:01.310"/>
</kw>
<status status="PASS" starttime="20210730 17:42:59.740" endtime="20210730 17:43:01.310"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:01.312" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:01.310" endtime="20210730 17:43:01.313"/>
</kw>
<msg timestamp="20210730 17:43:01.313" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:01.310" endtime="20210730 17:43:01.313"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>An empty first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:01.313" endtime="20210730 17:43:01.318"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.313" endtime="20210730 17:43:01.318"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:01.320" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:01.319" endtime="20210730 17:43:01.320"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:01.321" level="INFO">${payload} = {'firstname': ''}</msg>
<status status="PASS" starttime="20210730 17:43:01.320" endtime="20210730 17:43:01.321"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:01.330" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:01.330" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:01.321" endtime="20210730 17:43:01.330"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:01.330" endtime="20210730 17:43:01.330"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:01.330" endtime="20210730 17:43:01.330"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:01.321" endtime="20210730 17:43:01.330"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:01.321" endtime="20210730 17:43:01.330"/>
</for>
<status status="FAIL" starttime="20210730 17:43:01.319" endtime="20210730 17:43:01.330"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:01.319" endtime="20210730 17:43:01.330"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:01.318" endtime="20210730 17:43:01.331"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:01.334" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:01.345" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:01.345" level="INFO">${pids} = 25304
25311
25314</msg>
<status status="PASS" starttime="20210730 17:43:01.331" endtime="20210730 17:43:01.345"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:01.346" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:01.345" endtime="20210730 17:43:01.346"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:01.347" level="INFO">${pids} = ['25304', '25311', '25314']</msg>
<status status="PASS" starttime="20210730 17:43:01.346" endtime="20210730 17:43:01.347"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25304</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:01.350" level="INFO">Running command 'kill 25304 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:01.347" endtime="20210730 17:43:01.351"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.347" endtime="20210730 17:43:01.351"/>
</iter>
<iter>
<var name="${pid}">25311</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:01.354" level="INFO">Running command 'kill 25311 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:01.351" endtime="20210730 17:43:01.354"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.351" endtime="20210730 17:43:01.355"/>
</iter>
<iter>
<var name="${pid}">25314</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:01.358" level="INFO">Running command 'kill 25314 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:01.355" endtime="20210730 17:43:01.359"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.355" endtime="20210730 17:43:01.359"/>
</iter>
<status status="PASS" starttime="20210730 17:43:01.347" endtime="20210730 17:43:01.359"/>
</for>
<status status="PASS" starttime="20210730 17:43:01.346" endtime="20210730 17:43:01.359"/>
</branch>
<status status="PASS" starttime="20210730 17:43:01.346" endtime="20210730 17:43:01.359"/>
</if>
<status status="PASS" starttime="20210730 17:43:01.331" endtime="20210730 17:43:01.359"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": ''
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:42:59.740" endtime="20210730 17:43:01.359">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t100" name="With Each Valid Token, Updating First Name Of Each System User With Hakan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:01.364" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:01.375" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:01.375" level="INFO">${pids} = 25343</msg>
<status status="PASS" starttime="20210730 17:43:01.361" endtime="20210730 17:43:01.375"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:01.376" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:01.375" endtime="20210730 17:43:01.376"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:01.377" level="INFO">${pids} = ['25343']</msg>
<status status="PASS" starttime="20210730 17:43:01.376" endtime="20210730 17:43:01.377"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25343</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:01.395" level="INFO">Running command 'kill 25343 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:01.377" endtime="20210730 17:43:01.396"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.377" endtime="20210730 17:43:01.396"/>
</iter>
<status status="PASS" starttime="20210730 17:43:01.377" endtime="20210730 17:43:01.396"/>
</for>
<status status="PASS" starttime="20210730 17:43:01.376" endtime="20210730 17:43:01.396"/>
</branch>
<status status="PASS" starttime="20210730 17:43:01.376" endtime="20210730 17:43:01.396"/>
</if>
<status status="PASS" starttime="20210730 17:43:01.361" endtime="20210730 17:43:01.397"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:01.398" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:01.398" endtime="20210730 17:43:01.398"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:01.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:01.399" endtime="20210730 17:43:01.399"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:01.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:01.399" endtime="20210730 17:43:01.399"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:01.400" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:01.399" endtime="20210730 17:43:01.400"/>
</kw>
<msg timestamp="20210730 17:43:01.400" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:01.398" endtime="20210730 17:43:01.400"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:01.403" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:01.400" endtime="20210730 17:43:01.405"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.397" endtime="20210730 17:43:01.405"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:01.407" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:01.406" endtime="20210730 17:43:01.411"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:02.913" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:01.412" endtime="20210730 17:43:02.914"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.406" endtime="20210730 17:43:02.915"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:02.919" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:02.918" endtime="20210730 17:43:02.919"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:02.920" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:02.919" endtime="20210730 17:43:02.920"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:02.921" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:02.921" endtime="20210730 17:43:02.922"/>
</kw>
<msg timestamp="20210730 17:43:02.922" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:02.917" endtime="20210730 17:43:02.922"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:02.923" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:02.922" endtime="20210730 17:43:02.924"/>
</kw>
<status status="PASS" starttime="20210730 17:43:02.916" endtime="20210730 17:43:02.924"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:02.925" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:02.925" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:02.925" endtime="20210730 17:43:02.926"/>
</kw>
<status status="PASS" starttime="20210730 17:43:02.924" endtime="20210730 17:43:02.926"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:02.927" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:02.927" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:02.927" endtime="20210730 17:43:02.927"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:02.928" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:02.928" endtime="20210730 17:43:02.928"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:02.929" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:02.929" endtime="20210730 17:43:02.929"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:02.929" endtime="20210730 17:43:02.930"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:02.931" endtime="20210730 17:43:02.931"/>
</kw>
<status status="PASS" starttime="20210730 17:43:02.928" endtime="20210730 17:43:02.931"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:02.932" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:02.932" endtime="20210730 17:43:02.932"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:02.932" endtime="20210730 17:43:02.933"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:02.933" endtime="20210730 17:43:02.934"/>
</kw>
<status status="PASS" starttime="20210730 17:43:02.932" endtime="20210730 17:43:02.934"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:02.934" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:02.934" endtime="20210730 17:43:02.934"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:02.935" endtime="20210730 17:43:02.936"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:02.936" endtime="20210730 17:43:02.936"/>
</kw>
<status status="PASS" starttime="20210730 17:43:02.934" endtime="20210730 17:43:02.936"/>
</iter>
<status status="PASS" starttime="20210730 17:43:02.928" endtime="20210730 17:43:02.936"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:02.937" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:02.936" endtime="20210730 17:43:02.937"/>
</kw>
<status status="PASS" starttime="20210730 17:43:02.926" endtime="20210730 17:43:02.937"/>
</kw>
<status status="PASS" starttime="20210730 17:43:01.360" endtime="20210730 17:43:02.937"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:02.941" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:02.938" endtime="20210730 17:43:02.941"/>
</kw>
<msg timestamp="20210730 17:43:02.941" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:02.937" endtime="20210730 17:43:02.941"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A first name containing more than 2 characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:02.941" endtime="20210730 17:43:02.942"/>
</kw>
<status status="PASS" starttime="20210730 17:43:02.941" endtime="20210730 17:43:02.942"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:02.944" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:02.943" endtime="20210730 17:43:02.944"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:02.944" level="INFO">${payload} = {'firstname': 'Hakan'}</msg>
<status status="PASS" starttime="20210730 17:43:02.944" endtime="20210730 17:43:02.944"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:02.953" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:02.954" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:02.945" endtime="20210730 17:43:02.954"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:02.954" endtime="20210730 17:43:02.954"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:02.954" endtime="20210730 17:43:02.954"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:02.945" endtime="20210730 17:43:02.954"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:02.944" endtime="20210730 17:43:02.954"/>
</for>
<status status="FAIL" starttime="20210730 17:43:02.942" endtime="20210730 17:43:02.954"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:02.942" endtime="20210730 17:43:02.954"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:02.942" endtime="20210730 17:43:02.954"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:02.959" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:02.970" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:02.970" level="INFO">${pids} = 25366
25373
25375</msg>
<status status="PASS" starttime="20210730 17:43:02.955" endtime="20210730 17:43:02.970"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:02.971" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:02.971" endtime="20210730 17:43:02.971"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:02.972" level="INFO">${pids} = ['25366', '25373', '25375']</msg>
<status status="PASS" starttime="20210730 17:43:02.972" endtime="20210730 17:43:02.972"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25366</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:02.976" level="INFO">Running command 'kill 25366 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:02.973" endtime="20210730 17:43:02.977"/>
</kw>
<status status="PASS" starttime="20210730 17:43:02.973" endtime="20210730 17:43:02.977"/>
</iter>
<iter>
<var name="${pid}">25373</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:02.981" level="INFO">Running command 'kill 25373 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:02.978" endtime="20210730 17:43:02.981"/>
</kw>
<status status="PASS" starttime="20210730 17:43:02.977" endtime="20210730 17:43:02.981"/>
</iter>
<iter>
<var name="${pid}">25375</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:02.986" level="INFO">Running command 'kill 25375 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:02.982" endtime="20210730 17:43:02.987"/>
</kw>
<status status="PASS" starttime="20210730 17:43:02.982" endtime="20210730 17:43:02.987"/>
</iter>
<status status="PASS" starttime="20210730 17:43:02.972" endtime="20210730 17:43:02.987"/>
</for>
<status status="PASS" starttime="20210730 17:43:02.972" endtime="20210730 17:43:02.987"/>
</branch>
<status status="PASS" starttime="20210730 17:43:02.971" endtime="20210730 17:43:02.987"/>
</if>
<status status="PASS" starttime="20210730 17:43:02.955" endtime="20210730 17:43:02.987"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Hakan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:01.360" endtime="20210730 17:43:02.987">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t101" name="With Each Valid Token, Updating First Name Of Each System User With Hakan123!?. Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:02.992" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:03.005" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:03.005" level="INFO">${pids} = 25404</msg>
<status status="PASS" starttime="20210730 17:43:02.989" endtime="20210730 17:43:03.005"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:03.006" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:03.006" endtime="20210730 17:43:03.006"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:03.008" level="INFO">${pids} = ['25404']</msg>
<status status="PASS" starttime="20210730 17:43:03.006" endtime="20210730 17:43:03.008"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25404</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:03.012" level="INFO">Running command 'kill 25404 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:03.008" endtime="20210730 17:43:03.012"/>
</kw>
<status status="PASS" starttime="20210730 17:43:03.008" endtime="20210730 17:43:03.012"/>
</iter>
<status status="PASS" starttime="20210730 17:43:03.008" endtime="20210730 17:43:03.012"/>
</for>
<status status="PASS" starttime="20210730 17:43:03.006" endtime="20210730 17:43:03.013"/>
</branch>
<status status="PASS" starttime="20210730 17:43:03.006" endtime="20210730 17:43:03.013"/>
</if>
<status status="PASS" starttime="20210730 17:43:02.989" endtime="20210730 17:43:03.013"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:03.014" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:03.014" endtime="20210730 17:43:03.014"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:03.015" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:03.014" endtime="20210730 17:43:03.016"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:03.017" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:03.016" endtime="20210730 17:43:03.017"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:03.017" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:03.017" endtime="20210730 17:43:03.017"/>
</kw>
<msg timestamp="20210730 17:43:03.018" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:03.014" endtime="20210730 17:43:03.019"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:03.033" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:03.019" endtime="20210730 17:43:03.034"/>
</kw>
<status status="PASS" starttime="20210730 17:43:03.013" endtime="20210730 17:43:03.035"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:03.036" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:03.035" endtime="20210730 17:43:03.040"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:04.543" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:03.040" endtime="20210730 17:43:04.544"/>
</kw>
<status status="PASS" starttime="20210730 17:43:03.035" endtime="20210730 17:43:04.545"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:04.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:04.548" endtime="20210730 17:43:04.548"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:04.548" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:04.548" endtime="20210730 17:43:04.548"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:04.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:04.548" endtime="20210730 17:43:04.549"/>
</kw>
<msg timestamp="20210730 17:43:04.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:04.547" endtime="20210730 17:43:04.549"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:04.549" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:04.549" endtime="20210730 17:43:04.550"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.546" endtime="20210730 17:43:04.550"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:04.550" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:04.550" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:04.550" endtime="20210730 17:43:04.550"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.550" endtime="20210730 17:43:04.551"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:04.551" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:04.551" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:04.551" endtime="20210730 17:43:04.551"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:04.551" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:04.551" endtime="20210730 17:43:04.551"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:04.552" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:04.552" endtime="20210730 17:43:04.552"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:04.552" endtime="20210730 17:43:04.553"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:04.553" endtime="20210730 17:43:04.553"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.552" endtime="20210730 17:43:04.553"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:04.553" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:04.553" endtime="20210730 17:43:04.554"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:04.554" endtime="20210730 17:43:04.554"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:04.554" endtime="20210730 17:43:04.555"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.553" endtime="20210730 17:43:04.555"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:04.555" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:04.555" endtime="20210730 17:43:04.555"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:04.555" endtime="20210730 17:43:04.556"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:04.556" endtime="20210730 17:43:04.556"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.555" endtime="20210730 17:43:04.556"/>
</iter>
<status status="PASS" starttime="20210730 17:43:04.552" endtime="20210730 17:43:04.556"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:04.557" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:04.556" endtime="20210730 17:43:04.557"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.551" endtime="20210730 17:43:04.557"/>
</kw>
<status status="PASS" starttime="20210730 17:43:02.989" endtime="20210730 17:43:04.557"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:04.560" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:04.557" endtime="20210730 17:43:04.560"/>
</kw>
<msg timestamp="20210730 17:43:04.560" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:04.557" endtime="20210730 17:43:04.560"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A name containing numbers and non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:04.561" endtime="20210730 17:43:04.561"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.560" endtime="20210730 17:43:04.561"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:04.562" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:04.562" endtime="20210730 17:43:04.562"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:04.563" level="INFO">${payload} = {'firstname': 'Hakan123!?.'}</msg>
<status status="PASS" starttime="20210730 17:43:04.563" endtime="20210730 17:43:04.563"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:04.572" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:04.572" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:04.563" endtime="20210730 17:43:04.572"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:04.572" endtime="20210730 17:43:04.572"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:04.572" endtime="20210730 17:43:04.572"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:04.563" endtime="20210730 17:43:04.572"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:04.563" endtime="20210730 17:43:04.573"/>
</for>
<status status="FAIL" starttime="20210730 17:43:04.562" endtime="20210730 17:43:04.573"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:04.562" endtime="20210730 17:43:04.573"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:04.561" endtime="20210730 17:43:04.573"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:04.577" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:04.587" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:04.587" level="INFO">${pids} = 25427
25434
25439</msg>
<status status="PASS" starttime="20210730 17:43:04.574" endtime="20210730 17:43:04.587"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:04.588" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:04.588" endtime="20210730 17:43:04.588"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:04.589" level="INFO">${pids} = ['25427', '25434', '25439']</msg>
<status status="PASS" starttime="20210730 17:43:04.589" endtime="20210730 17:43:04.589"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25427</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:04.595" level="INFO">Running command 'kill 25427 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:04.589" endtime="20210730 17:43:04.596"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.589" endtime="20210730 17:43:04.596"/>
</iter>
<iter>
<var name="${pid}">25434</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:04.600" level="INFO">Running command 'kill 25434 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:04.596" endtime="20210730 17:43:04.601"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.596" endtime="20210730 17:43:04.601"/>
</iter>
<iter>
<var name="${pid}">25439</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:04.605" level="INFO">Running command 'kill 25439 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:04.601" endtime="20210730 17:43:04.605"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.601" endtime="20210730 17:43:04.605"/>
</iter>
<status status="PASS" starttime="20210730 17:43:04.589" endtime="20210730 17:43:04.605"/>
</for>
<status status="PASS" starttime="20210730 17:43:04.589" endtime="20210730 17:43:04.605"/>
</branch>
<status status="PASS" starttime="20210730 17:43:04.588" endtime="20210730 17:43:04.605"/>
</if>
<status status="PASS" starttime="20210730 17:43:04.573" endtime="20210730 17:43:04.606"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Hakan123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:02.988" endtime="20210730 17:43:04.606">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t102" name="With Each Valid Token, Updating First Name Of Each System User With Ha Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:04.611" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:04.630" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:04.630" level="INFO">${pids} = 25468</msg>
<status status="PASS" starttime="20210730 17:43:04.607" endtime="20210730 17:43:04.630"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:04.631" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:04.631" endtime="20210730 17:43:04.631"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:04.632" level="INFO">${pids} = ['25468']</msg>
<status status="PASS" starttime="20210730 17:43:04.631" endtime="20210730 17:43:04.632"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25468</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:04.644" level="INFO">Running command 'kill 25468 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:04.632" endtime="20210730 17:43:04.644"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.632" endtime="20210730 17:43:04.644"/>
</iter>
<status status="PASS" starttime="20210730 17:43:04.632" endtime="20210730 17:43:04.644"/>
</for>
<status status="PASS" starttime="20210730 17:43:04.631" endtime="20210730 17:43:04.644"/>
</branch>
<status status="PASS" starttime="20210730 17:43:04.631" endtime="20210730 17:43:04.644"/>
</if>
<status status="PASS" starttime="20210730 17:43:04.607" endtime="20210730 17:43:04.645"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:04.646" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:04.646" endtime="20210730 17:43:04.646"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:04.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:04.647" endtime="20210730 17:43:04.647"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:04.647" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:04.647" endtime="20210730 17:43:04.647"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:04.648" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:04.647" endtime="20210730 17:43:04.648"/>
</kw>
<msg timestamp="20210730 17:43:04.648" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:04.646" endtime="20210730 17:43:04.648"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:04.651" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:04.648" endtime="20210730 17:43:04.652"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.645" endtime="20210730 17:43:04.653"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:04.654" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:04.654" endtime="20210730 17:43:04.658"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:06.160" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:04.659" endtime="20210730 17:43:06.160"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.653" endtime="20210730 17:43:06.160"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:06.162" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:06.161" endtime="20210730 17:43:06.162"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:06.162" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:06.162" endtime="20210730 17:43:06.162"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:06.162" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:06.162" endtime="20210730 17:43:06.163"/>
</kw>
<msg timestamp="20210730 17:43:06.163" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:06.161" endtime="20210730 17:43:06.163"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:06.163" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:06.163" endtime="20210730 17:43:06.164"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.161" endtime="20210730 17:43:06.164"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:06.164" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:06.164" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:06.164" endtime="20210730 17:43:06.164"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.164" endtime="20210730 17:43:06.165"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:06.165" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:06.165" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:06.165" endtime="20210730 17:43:06.165"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:06.166" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:06.166" endtime="20210730 17:43:06.166"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:06.166" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:06.166" endtime="20210730 17:43:06.166"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:06.167" endtime="20210730 17:43:06.167"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:06.167" endtime="20210730 17:43:06.168"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.166" endtime="20210730 17:43:06.168"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:06.168" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:06.168" endtime="20210730 17:43:06.168"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:06.168" endtime="20210730 17:43:06.169"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:06.169" endtime="20210730 17:43:06.169"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.168" endtime="20210730 17:43:06.169"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:06.169" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:06.169" endtime="20210730 17:43:06.169"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:06.170" endtime="20210730 17:43:06.170"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:06.170" endtime="20210730 17:43:06.171"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.169" endtime="20210730 17:43:06.171"/>
</iter>
<status status="PASS" starttime="20210730 17:43:06.166" endtime="20210730 17:43:06.171"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:06.171" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:06.171" endtime="20210730 17:43:06.171"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.165" endtime="20210730 17:43:06.171"/>
</kw>
<status status="PASS" starttime="20210730 17:43:04.607" endtime="20210730 17:43:06.171"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:06.174" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:06.172" endtime="20210730 17:43:06.174"/>
</kw>
<msg timestamp="20210730 17:43:06.174" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:06.171" endtime="20210730 17:43:06.174"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>A minimum 2 characters first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:06.175" endtime="20210730 17:43:06.175"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.174" endtime="20210730 17:43:06.175"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:06.176" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:06.176" endtime="20210730 17:43:06.176"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:06.177" level="INFO">${payload} = {'firstname': 'Ha'}</msg>
<status status="PASS" starttime="20210730 17:43:06.177" endtime="20210730 17:43:06.177"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:06.186" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:06.187" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:06.178" endtime="20210730 17:43:06.187"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:06.187" endtime="20210730 17:43:06.187"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:06.187" endtime="20210730 17:43:06.187"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:06.178" endtime="20210730 17:43:06.187"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:06.177" endtime="20210730 17:43:06.187"/>
</for>
<status status="FAIL" starttime="20210730 17:43:06.176" endtime="20210730 17:43:06.188"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:06.175" endtime="20210730 17:43:06.188"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:06.175" endtime="20210730 17:43:06.188"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:06.192" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:06.208" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:06.208" level="INFO">${pids} = 25491
25498
25502</msg>
<status status="PASS" starttime="20210730 17:43:06.188" endtime="20210730 17:43:06.208"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:06.209" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:06.208" endtime="20210730 17:43:06.209"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:06.209" level="INFO">${pids} = ['25491', '25498', '25502']</msg>
<status status="PASS" starttime="20210730 17:43:06.209" endtime="20210730 17:43:06.209"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25491</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:06.213" level="INFO">Running command 'kill 25491 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:06.210" endtime="20210730 17:43:06.213"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.210" endtime="20210730 17:43:06.213"/>
</iter>
<iter>
<var name="${pid}">25498</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:06.216" level="INFO">Running command 'kill 25498 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:06.214" endtime="20210730 17:43:06.217"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.214" endtime="20210730 17:43:06.217"/>
</iter>
<iter>
<var name="${pid}">25502</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:06.222" level="INFO">Running command 'kill 25502 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:06.217" endtime="20210730 17:43:06.222"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.217" endtime="20210730 17:43:06.222"/>
</iter>
<status status="PASS" starttime="20210730 17:43:06.210" endtime="20210730 17:43:06.222"/>
</for>
<status status="PASS" starttime="20210730 17:43:06.209" endtime="20210730 17:43:06.222"/>
</branch>
<status status="PASS" starttime="20210730 17:43:06.209" endtime="20210730 17:43:06.222"/>
</if>
<status status="PASS" starttime="20210730 17:43:06.188" endtime="20210730 17:43:06.222"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha'
}
Then, each request should fail with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:04.606" endtime="20210730 17:43:06.223">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t103" name="With Each Valid Token, Updating First Name Of Each System User With Ha Xu Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:06.227" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:06.238" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:06.238" level="INFO">${pids} = 25531</msg>
<status status="PASS" starttime="20210730 17:43:06.224" endtime="20210730 17:43:06.238"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:06.239" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:06.238" endtime="20210730 17:43:06.239"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:06.239" level="INFO">${pids} = ['25531']</msg>
<status status="PASS" starttime="20210730 17:43:06.239" endtime="20210730 17:43:06.239"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25531</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:06.243" level="INFO">Running command 'kill 25531 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:06.240" endtime="20210730 17:43:06.243"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.240" endtime="20210730 17:43:06.244"/>
</iter>
<status status="PASS" starttime="20210730 17:43:06.239" endtime="20210730 17:43:06.244"/>
</for>
<status status="PASS" starttime="20210730 17:43:06.239" endtime="20210730 17:43:06.244"/>
</branch>
<status status="PASS" starttime="20210730 17:43:06.239" endtime="20210730 17:43:06.244"/>
</if>
<status status="PASS" starttime="20210730 17:43:06.224" endtime="20210730 17:43:06.244"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:06.245" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:06.244" endtime="20210730 17:43:06.245"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:06.245" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:06.245" endtime="20210730 17:43:06.245"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:06.246" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:06.246" endtime="20210730 17:43:06.246"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:06.246" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:06.246" endtime="20210730 17:43:06.246"/>
</kw>
<msg timestamp="20210730 17:43:06.246" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:06.245" endtime="20210730 17:43:06.246"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:06.263" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:06.247" endtime="20210730 17:43:06.267"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.244" endtime="20210730 17:43:06.268"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:06.269" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:06.269" endtime="20210730 17:43:06.273"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:07.774" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:06.273" endtime="20210730 17:43:07.774"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.268" endtime="20210730 17:43:07.775"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:07.776" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:07.776" endtime="20210730 17:43:07.776"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:07.776" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:07.776" endtime="20210730 17:43:07.777"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:07.777" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:07.777" endtime="20210730 17:43:07.777"/>
</kw>
<msg timestamp="20210730 17:43:07.777" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:07.776" endtime="20210730 17:43:07.777"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:07.778" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:07.777" endtime="20210730 17:43:07.778"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.775" endtime="20210730 17:43:07.778"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:07.779" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:07.779" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:07.778" endtime="20210730 17:43:07.779"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.778" endtime="20210730 17:43:07.779"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:07.780" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:07.780" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:07.779" endtime="20210730 17:43:07.780"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:07.780" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:07.780" endtime="20210730 17:43:07.780"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:07.781" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:07.780" endtime="20210730 17:43:07.781"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:07.781" endtime="20210730 17:43:07.781"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:07.781" endtime="20210730 17:43:07.782"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.780" endtime="20210730 17:43:07.782"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:07.782" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:07.782" endtime="20210730 17:43:07.782"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:07.782" endtime="20210730 17:43:07.783"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:07.783" endtime="20210730 17:43:07.783"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.782" endtime="20210730 17:43:07.783"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:07.783" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:07.783" endtime="20210730 17:43:07.784"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:07.784" endtime="20210730 17:43:07.784"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:07.784" endtime="20210730 17:43:07.785"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.783" endtime="20210730 17:43:07.785"/>
</iter>
<status status="PASS" starttime="20210730 17:43:07.780" endtime="20210730 17:43:07.785"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:07.785" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:07.785" endtime="20210730 17:43:07.785"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.779" endtime="20210730 17:43:07.785"/>
</kw>
<status status="PASS" starttime="20210730 17:43:06.224" endtime="20210730 17:43:07.785"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:07.788" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:07.786" endtime="20210730 17:43:07.788"/>
</kw>
<msg timestamp="20210730 17:43:07.788" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:07.785" endtime="20210730 17:43:07.788"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>minimum 2 characters first names for each first name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:07.789" endtime="20210730 17:43:07.789"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.788" endtime="20210730 17:43:07.789"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:07.790" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:07.790" endtime="20210730 17:43:07.790"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:07.791" level="INFO">${payload} = {'firstname': 'Ha Xu'}</msg>
<status status="PASS" starttime="20210730 17:43:07.791" endtime="20210730 17:43:07.791"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:07.800" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:07.801" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:07.791" endtime="20210730 17:43:07.801"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:07.801" endtime="20210730 17:43:07.801"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:07.801" endtime="20210730 17:43:07.801"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:07.791" endtime="20210730 17:43:07.801"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:07.791" endtime="20210730 17:43:07.801"/>
</for>
<status status="FAIL" starttime="20210730 17:43:07.789" endtime="20210730 17:43:07.801"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:07.789" endtime="20210730 17:43:07.802"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:07.789" endtime="20210730 17:43:07.802"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:07.806" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:07.819" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:07.819" level="INFO">${pids} = 25554
25561
25563</msg>
<status status="PASS" starttime="20210730 17:43:07.802" endtime="20210730 17:43:07.819"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:07.820" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:07.820" endtime="20210730 17:43:07.820"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:07.821" level="INFO">${pids} = ['25554', '25561', '25563']</msg>
<status status="PASS" starttime="20210730 17:43:07.821" endtime="20210730 17:43:07.821"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25554</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:07.825" level="INFO">Running command 'kill 25554 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:07.821" endtime="20210730 17:43:07.825"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.821" endtime="20210730 17:43:07.826"/>
</iter>
<iter>
<var name="${pid}">25561</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:07.830" level="INFO">Running command 'kill 25561 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:07.826" endtime="20210730 17:43:07.830"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.826" endtime="20210730 17:43:07.830"/>
</iter>
<iter>
<var name="${pid}">25563</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:07.835" level="INFO">Running command 'kill 25563 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:07.831" endtime="20210730 17:43:07.836"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.830" endtime="20210730 17:43:07.836"/>
</iter>
<status status="PASS" starttime="20210730 17:43:07.821" endtime="20210730 17:43:07.836"/>
</for>
<status status="PASS" starttime="20210730 17:43:07.820" endtime="20210730 17:43:07.836"/>
</branch>
<status status="PASS" starttime="20210730 17:43:07.820" endtime="20210730 17:43:07.836"/>
</if>
<status status="PASS" starttime="20210730 17:43:07.802" endtime="20210730 17:43:07.836"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha Xu'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:06.223" endtime="20210730 17:43:07.836">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t104" name="With Each Valid Token, Updating First Name Of Each System User With H Xu Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:07.841" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:07.852" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:07.852" level="INFO">${pids} = 25592</msg>
<status status="PASS" starttime="20210730 17:43:07.838" endtime="20210730 17:43:07.852"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:07.853" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:07.853" endtime="20210730 17:43:07.853"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:07.854" level="INFO">${pids} = ['25592']</msg>
<status status="PASS" starttime="20210730 17:43:07.854" endtime="20210730 17:43:07.854"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25592</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:07.858" level="INFO">Running command 'kill 25592 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:07.854" endtime="20210730 17:43:07.858"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.854" endtime="20210730 17:43:07.859"/>
</iter>
<status status="PASS" starttime="20210730 17:43:07.854" endtime="20210730 17:43:07.859"/>
</for>
<status status="PASS" starttime="20210730 17:43:07.854" endtime="20210730 17:43:07.859"/>
</branch>
<status status="PASS" starttime="20210730 17:43:07.853" endtime="20210730 17:43:07.859"/>
</if>
<status status="PASS" starttime="20210730 17:43:07.838" endtime="20210730 17:43:07.859"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:07.860" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:07.860" endtime="20210730 17:43:07.860"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:07.860" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:07.860" endtime="20210730 17:43:07.860"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:07.861" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:07.861" endtime="20210730 17:43:07.861"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:07.861" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:07.861" endtime="20210730 17:43:07.863"/>
</kw>
<msg timestamp="20210730 17:43:07.863" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:07.860" endtime="20210730 17:43:07.863"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:07.878" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:07.863" endtime="20210730 17:43:07.880"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.859" endtime="20210730 17:43:07.880"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:07.882" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:07.881" endtime="20210730 17:43:07.893"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:09.396" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:07.893" endtime="20210730 17:43:09.396"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.881" endtime="20210730 17:43:09.396"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:09.397" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:09.397" endtime="20210730 17:43:09.397"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:09.398" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:09.398" endtime="20210730 17:43:09.398"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:09.398" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:09.398" endtime="20210730 17:43:09.398"/>
</kw>
<msg timestamp="20210730 17:43:09.398" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:09.397" endtime="20210730 17:43:09.398"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:09.399" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:09.399" endtime="20210730 17:43:09.399"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.396" endtime="20210730 17:43:09.399"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:09.400" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:09.400" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:09.400" endtime="20210730 17:43:09.400"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.399" endtime="20210730 17:43:09.400"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:09.401" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:09.401" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:09.400" endtime="20210730 17:43:09.401"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:09.401" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:09.401" endtime="20210730 17:43:09.401"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:09.402" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:09.402" endtime="20210730 17:43:09.402"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:09.402" endtime="20210730 17:43:09.403"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:09.403" endtime="20210730 17:43:09.404"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.401" endtime="20210730 17:43:09.404"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:09.404" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:09.404" endtime="20210730 17:43:09.404"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:09.404" endtime="20210730 17:43:09.405"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:09.405" endtime="20210730 17:43:09.405"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.404" endtime="20210730 17:43:09.405"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:09.405" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:09.405" endtime="20210730 17:43:09.405"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:09.406" endtime="20210730 17:43:09.406"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:09.406" endtime="20210730 17:43:09.407"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.405" endtime="20210730 17:43:09.407"/>
</iter>
<status status="PASS" starttime="20210730 17:43:09.401" endtime="20210730 17:43:09.407"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:09.407" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:09.407" endtime="20210730 17:43:09.407"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.400" endtime="20210730 17:43:09.407"/>
</kw>
<status status="PASS" starttime="20210730 17:43:07.837" endtime="20210730 17:43:09.407"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:09.410" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:09.408" endtime="20210730 17:43:09.410"/>
</kw>
<msg timestamp="20210730 17:43:09.410" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:09.407" endtime="20210730 17:43:09.410"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The first first name is invalid with only 1 letter, the second first name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:09.411" endtime="20210730 17:43:09.411"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.410" endtime="20210730 17:43:09.411"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:09.412" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:09.412" endtime="20210730 17:43:09.412"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:09.413" level="INFO">${payload} = {'firstname': 'H Xu'}</msg>
<status status="PASS" starttime="20210730 17:43:09.412" endtime="20210730 17:43:09.413"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:09.422" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:09.422" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:09.413" endtime="20210730 17:43:09.422"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:09.422" endtime="20210730 17:43:09.422"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:09.422" endtime="20210730 17:43:09.422"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:09.413" endtime="20210730 17:43:09.423"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:09.413" endtime="20210730 17:43:09.423"/>
</for>
<status status="FAIL" starttime="20210730 17:43:09.411" endtime="20210730 17:43:09.423"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:09.411" endtime="20210730 17:43:09.423"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:09.411" endtime="20210730 17:43:09.423"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:09.427" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:09.440" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:09.440" level="INFO">${pids} = 25616
25623
25625</msg>
<status status="PASS" starttime="20210730 17:43:09.423" endtime="20210730 17:43:09.440"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:09.441" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:09.441" endtime="20210730 17:43:09.441"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:09.442" level="INFO">${pids} = ['25616', '25623', '25625']</msg>
<status status="PASS" starttime="20210730 17:43:09.442" endtime="20210730 17:43:09.442"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25616</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:09.446" level="INFO">Running command 'kill 25616 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:09.442" endtime="20210730 17:43:09.447"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.442" endtime="20210730 17:43:09.447"/>
</iter>
<iter>
<var name="${pid}">25623</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:09.450" level="INFO">Running command 'kill 25623 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:09.447" endtime="20210730 17:43:09.452"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.447" endtime="20210730 17:43:09.452"/>
</iter>
<iter>
<var name="${pid}">25625</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:09.456" level="INFO">Running command 'kill 25625 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:09.453" endtime="20210730 17:43:09.456"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.452" endtime="20210730 17:43:09.456"/>
</iter>
<status status="PASS" starttime="20210730 17:43:09.442" endtime="20210730 17:43:09.456"/>
</for>
<status status="PASS" starttime="20210730 17:43:09.441" endtime="20210730 17:43:09.456"/>
</branch>
<status status="PASS" starttime="20210730 17:43:09.441" endtime="20210730 17:43:09.456"/>
</if>
<status status="PASS" starttime="20210730 17:43:09.423" endtime="20210730 17:43:09.456"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'H Xu'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:07.837" endtime="20210730 17:43:09.457">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t105" name="With Each Valid Token, Updating First Name Of Each System User With Ha X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:09.462" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:09.475" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:09.475" level="INFO">${pids} = 25654</msg>
<status status="PASS" starttime="20210730 17:43:09.458" endtime="20210730 17:43:09.475"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:09.476" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:09.475" endtime="20210730 17:43:09.476"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:09.477" level="INFO">${pids} = ['25654']</msg>
<status status="PASS" starttime="20210730 17:43:09.476" endtime="20210730 17:43:09.477"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25654</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:09.481" level="INFO">Running command 'kill 25654 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:09.478" endtime="20210730 17:43:09.481"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.478" endtime="20210730 17:43:09.482"/>
</iter>
<status status="PASS" starttime="20210730 17:43:09.478" endtime="20210730 17:43:09.482"/>
</for>
<status status="PASS" starttime="20210730 17:43:09.476" endtime="20210730 17:43:09.482"/>
</branch>
<status status="PASS" starttime="20210730 17:43:09.476" endtime="20210730 17:43:09.482"/>
</if>
<status status="PASS" starttime="20210730 17:43:09.458" endtime="20210730 17:43:09.482"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:09.483" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:09.483" endtime="20210730 17:43:09.483"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:09.483" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:09.483" endtime="20210730 17:43:09.483"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:09.485" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:09.484" endtime="20210730 17:43:09.485"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:09.486" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:09.485" endtime="20210730 17:43:09.486"/>
</kw>
<msg timestamp="20210730 17:43:09.486" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:09.483" endtime="20210730 17:43:09.486"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:09.501" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:09.486" endtime="20210730 17:43:09.503"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.482" endtime="20210730 17:43:09.503"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:09.504" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:09.504" endtime="20210730 17:43:09.508"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:11.010" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:09.509" endtime="20210730 17:43:11.010"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.503" endtime="20210730 17:43:11.011"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:11.014" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:11.013" endtime="20210730 17:43:11.014"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:11.015" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:11.014" endtime="20210730 17:43:11.015"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:11.015" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:11.015" endtime="20210730 17:43:11.015"/>
</kw>
<msg timestamp="20210730 17:43:11.015" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:11.012" endtime="20210730 17:43:11.015"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:11.016" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:11.015" endtime="20210730 17:43:11.016"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.011" endtime="20210730 17:43:11.016"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:11.017" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:11.017" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:11.017" endtime="20210730 17:43:11.017"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.016" endtime="20210730 17:43:11.017"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:11.017" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:11.018" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:11.017" endtime="20210730 17:43:11.018"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:11.018" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:11.018" endtime="20210730 17:43:11.018"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:11.018" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:11.018" endtime="20210730 17:43:11.019"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:11.019" endtime="20210730 17:43:11.019"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:11.019" endtime="20210730 17:43:11.020"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.018" endtime="20210730 17:43:11.020"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:11.020" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:11.020" endtime="20210730 17:43:11.020"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:11.020" endtime="20210730 17:43:11.021"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:11.021" endtime="20210730 17:43:11.021"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.020" endtime="20210730 17:43:11.021"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:11.021" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:11.021" endtime="20210730 17:43:11.021"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:11.022" endtime="20210730 17:43:11.022"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:11.022" endtime="20210730 17:43:11.022"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.021" endtime="20210730 17:43:11.022"/>
</iter>
<status status="PASS" starttime="20210730 17:43:11.018" endtime="20210730 17:43:11.023"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:11.023" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:11.023" endtime="20210730 17:43:11.023"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.017" endtime="20210730 17:43:11.023"/>
</kw>
<status status="PASS" starttime="20210730 17:43:09.458" endtime="20210730 17:43:11.023"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:11.026" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:11.024" endtime="20210730 17:43:11.026"/>
</kw>
<msg timestamp="20210730 17:43:11.026" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:11.023" endtime="20210730 17:43:11.026"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The second first name is invalid with only 1 letter, the first first name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:11.027" endtime="20210730 17:43:11.028"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.027" endtime="20210730 17:43:11.028"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:11.029" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:11.029" endtime="20210730 17:43:11.029"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:11.030" level="INFO">${payload} = {'firstname': 'Ha X'}</msg>
<status status="PASS" starttime="20210730 17:43:11.029" endtime="20210730 17:43:11.030"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:11.039" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:11.039" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:11.030" endtime="20210730 17:43:11.039"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:11.039" endtime="20210730 17:43:11.039"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:11.039" endtime="20210730 17:43:11.039"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:11.030" endtime="20210730 17:43:11.039"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:11.030" endtime="20210730 17:43:11.039"/>
</for>
<status status="FAIL" starttime="20210730 17:43:11.028" endtime="20210730 17:43:11.040"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:11.028" endtime="20210730 17:43:11.040"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:11.028" endtime="20210730 17:43:11.040"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:11.044" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:11.060" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:11.060" level="INFO">${pids} = 25677
25684
25687</msg>
<status status="PASS" starttime="20210730 17:43:11.040" endtime="20210730 17:43:11.060"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:11.061" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:11.060" endtime="20210730 17:43:11.061"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:11.062" level="INFO">${pids} = ['25677', '25684', '25687']</msg>
<status status="PASS" starttime="20210730 17:43:11.061" endtime="20210730 17:43:11.062"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25677</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:11.065" level="INFO">Running command 'kill 25677 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:11.062" endtime="20210730 17:43:11.066"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.062" endtime="20210730 17:43:11.066"/>
</iter>
<iter>
<var name="${pid}">25684</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:11.069" level="INFO">Running command 'kill 25684 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:11.066" endtime="20210730 17:43:11.070"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.066" endtime="20210730 17:43:11.070"/>
</iter>
<iter>
<var name="${pid}">25687</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:11.073" level="INFO">Running command 'kill 25687 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:11.070" endtime="20210730 17:43:11.074"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.070" endtime="20210730 17:43:11.074"/>
</iter>
<status status="PASS" starttime="20210730 17:43:11.062" endtime="20210730 17:43:11.074"/>
</for>
<status status="PASS" starttime="20210730 17:43:11.061" endtime="20210730 17:43:11.074"/>
</branch>
<status status="PASS" starttime="20210730 17:43:11.061" endtime="20210730 17:43:11.074"/>
</if>
<status status="PASS" starttime="20210730 17:43:11.040" endtime="20210730 17:43:11.074"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Ha X'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:09.457" endtime="20210730 17:43:11.075">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t106" name="With Each Valid Token, Updating First Name Of Each System User With H X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:11.080" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:11.095" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:11.095" level="INFO">${pids} = 25716</msg>
<status status="PASS" starttime="20210730 17:43:11.077" endtime="20210730 17:43:11.095"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:11.096" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:11.095" endtime="20210730 17:43:11.096"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:11.096" level="INFO">${pids} = ['25716']</msg>
<status status="PASS" starttime="20210730 17:43:11.096" endtime="20210730 17:43:11.096"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25716</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:11.100" level="INFO">Running command 'kill 25716 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:11.097" endtime="20210730 17:43:11.100"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.097" endtime="20210730 17:43:11.100"/>
</iter>
<status status="PASS" starttime="20210730 17:43:11.096" endtime="20210730 17:43:11.100"/>
</for>
<status status="PASS" starttime="20210730 17:43:11.096" endtime="20210730 17:43:11.100"/>
</branch>
<status status="PASS" starttime="20210730 17:43:11.096" endtime="20210730 17:43:11.100"/>
</if>
<status status="PASS" starttime="20210730 17:43:11.076" endtime="20210730 17:43:11.101"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:11.102" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:11.101" endtime="20210730 17:43:11.102"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:11.102" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:11.102" endtime="20210730 17:43:11.102"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:11.103" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:11.103" endtime="20210730 17:43:11.103"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:11.103" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:11.103" endtime="20210730 17:43:11.103"/>
</kw>
<msg timestamp="20210730 17:43:11.103" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:11.102" endtime="20210730 17:43:11.103"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:11.119" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:11.103" endtime="20210730 17:43:11.121"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.101" endtime="20210730 17:43:11.121"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:11.123" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:11.123" endtime="20210730 17:43:11.128"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:12.629" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:11.129" endtime="20210730 17:43:12.630"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.122" endtime="20210730 17:43:12.630"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:12.631" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:12.631" endtime="20210730 17:43:12.631"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:12.632" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:12.631" endtime="20210730 17:43:12.632"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:12.632" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:12.632" endtime="20210730 17:43:12.632"/>
</kw>
<msg timestamp="20210730 17:43:12.632" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:12.631" endtime="20210730 17:43:12.632"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:12.633" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:12.632" endtime="20210730 17:43:12.633"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.630" endtime="20210730 17:43:12.633"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:12.634" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:12.634" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:12.633" endtime="20210730 17:43:12.634"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.633" endtime="20210730 17:43:12.634"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:12.634" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:12.634" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:12.634" endtime="20210730 17:43:12.634"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:12.635" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:12.635" endtime="20210730 17:43:12.635"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:12.635" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:12.635" endtime="20210730 17:43:12.635"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:12.635" endtime="20210730 17:43:12.636"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:12.636" endtime="20210730 17:43:12.636"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.635" endtime="20210730 17:43:12.636"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:12.637" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:12.637" endtime="20210730 17:43:12.637"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:12.637" endtime="20210730 17:43:12.640"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:12.640" endtime="20210730 17:43:12.641"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.636" endtime="20210730 17:43:12.641"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:12.641" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:12.641" endtime="20210730 17:43:12.642"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:12.642" endtime="20210730 17:43:12.643"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:12.643" endtime="20210730 17:43:12.643"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.641" endtime="20210730 17:43:12.643"/>
</iter>
<status status="PASS" starttime="20210730 17:43:12.635" endtime="20210730 17:43:12.643"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:12.644" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:12.643" endtime="20210730 17:43:12.644"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.634" endtime="20210730 17:43:12.644"/>
</kw>
<status status="PASS" starttime="20210730 17:43:11.076" endtime="20210730 17:43:12.644"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:12.647" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:12.644" endtime="20210730 17:43:12.647"/>
</kw>
<msg timestamp="20210730 17:43:12.647" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:12.644" endtime="20210730 17:43:12.647"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>The both first names are invalid with only 1 letter</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:12.648" endtime="20210730 17:43:12.648"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.647" endtime="20210730 17:43:12.648"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:12.649" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:12.649" endtime="20210730 17:43:12.649"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:12.650" level="INFO">${payload} = {'firstname': 'H X'}</msg>
<status status="PASS" starttime="20210730 17:43:12.649" endtime="20210730 17:43:12.650"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:12.659" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:12.659" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:12.650" endtime="20210730 17:43:12.659"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:12.659" endtime="20210730 17:43:12.660"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:12.660" endtime="20210730 17:43:12.660"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:12.650" endtime="20210730 17:43:12.660"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:12.650" endtime="20210730 17:43:12.660"/>
</for>
<status status="FAIL" starttime="20210730 17:43:12.648" endtime="20210730 17:43:12.660"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:12.648" endtime="20210730 17:43:12.660"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:12.648" endtime="20210730 17:43:12.660"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:12.665" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:12.679" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:12.679" level="INFO">${pids} = 25739
25746
25756</msg>
<status status="PASS" starttime="20210730 17:43:12.661" endtime="20210730 17:43:12.679"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:12.680" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:12.680" endtime="20210730 17:43:12.680"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:12.681" level="INFO">${pids} = ['25739', '25746', '25756']</msg>
<status status="PASS" starttime="20210730 17:43:12.680" endtime="20210730 17:43:12.681"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25739</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:12.684" level="INFO">Running command 'kill 25739 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:12.681" endtime="20210730 17:43:12.685"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.681" endtime="20210730 17:43:12.685"/>
</iter>
<iter>
<var name="${pid}">25746</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:12.688" level="INFO">Running command 'kill 25746 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:12.685" endtime="20210730 17:43:12.689"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.685" endtime="20210730 17:43:12.689"/>
</iter>
<iter>
<var name="${pid}">25756</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:12.695" level="INFO">Running command 'kill 25756 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:12.689" endtime="20210730 17:43:12.695"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.689" endtime="20210730 17:43:12.695"/>
</iter>
<status status="PASS" starttime="20210730 17:43:12.681" endtime="20210730 17:43:12.695"/>
</for>
<status status="PASS" starttime="20210730 17:43:12.680" endtime="20210730 17:43:12.695"/>
</branch>
<status status="PASS" starttime="20210730 17:43:12.680" endtime="20210730 17:43:12.696"/>
</if>
<status status="PASS" starttime="20210730 17:43:12.660" endtime="20210730 17:43:12.696"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'H X'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:11.075" endtime="20210730 17:43:12.696">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t107" name="With Each Valid Token, Updating First Name Of Each System User With Helena123 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:12.701" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:12.713" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:12.713" level="INFO">${pids} = 25785</msg>
<status status="PASS" starttime="20210730 17:43:12.698" endtime="20210730 17:43:12.713"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:12.714" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:12.713" endtime="20210730 17:43:12.714"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:12.714" level="INFO">${pids} = ['25785']</msg>
<status status="PASS" starttime="20210730 17:43:12.714" endtime="20210730 17:43:12.715"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25785</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:12.718" level="INFO">Running command 'kill 25785 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:12.715" endtime="20210730 17:43:12.718"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.715" endtime="20210730 17:43:12.718"/>
</iter>
<status status="PASS" starttime="20210730 17:43:12.715" endtime="20210730 17:43:12.719"/>
</for>
<status status="PASS" starttime="20210730 17:43:12.714" endtime="20210730 17:43:12.719"/>
</branch>
<status status="PASS" starttime="20210730 17:43:12.714" endtime="20210730 17:43:12.719"/>
</if>
<status status="PASS" starttime="20210730 17:43:12.698" endtime="20210730 17:43:12.719"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:12.720" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:12.719" endtime="20210730 17:43:12.720"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:12.720" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:12.720" endtime="20210730 17:43:12.720"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:12.721" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:12.720" endtime="20210730 17:43:12.721"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:12.721" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:12.721" endtime="20210730 17:43:12.721"/>
</kw>
<msg timestamp="20210730 17:43:12.721" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:12.720" endtime="20210730 17:43:12.721"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:12.738" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:12.722" endtime="20210730 17:43:12.739"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.719" endtime="20210730 17:43:12.739"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:12.741" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:12.740" endtime="20210730 17:43:12.746"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:14.248" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:12.746" endtime="20210730 17:43:14.249"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.740" endtime="20210730 17:43:14.250"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:14.253" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:14.253" endtime="20210730 17:43:14.253"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:14.253" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:14.253" endtime="20210730 17:43:14.253"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:14.254" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:14.253" endtime="20210730 17:43:14.254"/>
</kw>
<msg timestamp="20210730 17:43:14.254" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:14.252" endtime="20210730 17:43:14.254"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:14.254" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:14.254" endtime="20210730 17:43:14.255"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.251" endtime="20210730 17:43:14.255"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:14.256" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:14.256" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:14.255" endtime="20210730 17:43:14.256"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.255" endtime="20210730 17:43:14.256"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:14.257" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:14.257" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:14.257" endtime="20210730 17:43:14.257"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:14.257" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:14.257" endtime="20210730 17:43:14.257"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:14.258" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:14.258" endtime="20210730 17:43:14.258"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:14.258" endtime="20210730 17:43:14.259"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:14.259" endtime="20210730 17:43:14.259"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.258" endtime="20210730 17:43:14.259"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:14.260" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:14.259" endtime="20210730 17:43:14.260"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:14.260" endtime="20210730 17:43:14.260"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:14.261" endtime="20210730 17:43:14.261"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.259" endtime="20210730 17:43:14.261"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:14.261" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:14.261" endtime="20210730 17:43:14.261"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:14.261" endtime="20210730 17:43:14.262"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:14.262" endtime="20210730 17:43:14.262"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.261" endtime="20210730 17:43:14.262"/>
</iter>
<status status="PASS" starttime="20210730 17:43:14.257" endtime="20210730 17:43:14.262"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:14.263" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:14.262" endtime="20210730 17:43:14.263"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.256" endtime="20210730 17:43:14.263"/>
</kw>
<status status="PASS" starttime="20210730 17:43:12.697" endtime="20210730 17:43:14.263"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:14.266" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:14.263" endtime="20210730 17:43:14.266"/>
</kw>
<msg timestamp="20210730 17:43:14.266" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:14.263" endtime="20210730 17:43:14.266"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>First name does contain numbers, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:14.266" endtime="20210730 17:43:14.267"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.266" endtime="20210730 17:43:14.267"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:14.268" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:14.268" endtime="20210730 17:43:14.268"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:14.268" level="INFO">${payload} = {'firstname': 'Helena123'}</msg>
<status status="PASS" starttime="20210730 17:43:14.268" endtime="20210730 17:43:14.268"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:14.278" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:14.278" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:14.269" endtime="20210730 17:43:14.278"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:14.278" endtime="20210730 17:43:14.278"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:14.278" endtime="20210730 17:43:14.278"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:14.268" endtime="20210730 17:43:14.278"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:14.268" endtime="20210730 17:43:14.278"/>
</for>
<status status="FAIL" starttime="20210730 17:43:14.267" endtime="20210730 17:43:14.279"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:14.267" endtime="20210730 17:43:14.279"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:14.267" endtime="20210730 17:43:14.279"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:14.283" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:14.299" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:14.299" level="INFO">${pids} = 25808
25815
25818</msg>
<status status="PASS" starttime="20210730 17:43:14.279" endtime="20210730 17:43:14.299"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:14.300" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:14.300" endtime="20210730 17:43:14.300"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:14.301" level="INFO">${pids} = ['25808', '25815', '25818']</msg>
<status status="PASS" starttime="20210730 17:43:14.300" endtime="20210730 17:43:14.301"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25808</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:14.305" level="INFO">Running command 'kill 25808 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:14.301" endtime="20210730 17:43:14.305"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.301" endtime="20210730 17:43:14.305"/>
</iter>
<iter>
<var name="${pid}">25815</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:14.308" level="INFO">Running command 'kill 25815 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:14.306" endtime="20210730 17:43:14.309"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.305" endtime="20210730 17:43:14.309"/>
</iter>
<iter>
<var name="${pid}">25818</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:14.314" level="INFO">Running command 'kill 25818 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:14.310" endtime="20210730 17:43:14.315"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.309" endtime="20210730 17:43:14.315"/>
</iter>
<status status="PASS" starttime="20210730 17:43:14.301" endtime="20210730 17:43:14.315"/>
</for>
<status status="PASS" starttime="20210730 17:43:14.300" endtime="20210730 17:43:14.315"/>
</branch>
<status status="PASS" starttime="20210730 17:43:14.300" endtime="20210730 17:43:14.315"/>
</if>
<status status="PASS" starttime="20210730 17:43:14.279" endtime="20210730 17:43:14.315"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena123'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:12.697" endtime="20210730 17:43:14.316">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t108" name="With Each Valid Token, Updating First Name Of Each System User With Helena!.? Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:14.320" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:14.336" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:14.336" level="INFO">${pids} = 25847</msg>
<status status="PASS" starttime="20210730 17:43:14.317" endtime="20210730 17:43:14.336"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:14.337" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:14.337" endtime="20210730 17:43:14.337"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:14.338" level="INFO">${pids} = ['25847']</msg>
<status status="PASS" starttime="20210730 17:43:14.337" endtime="20210730 17:43:14.338"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25847</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:14.343" level="INFO">Running command 'kill 25847 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:14.338" endtime="20210730 17:43:14.344"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.338" endtime="20210730 17:43:14.344"/>
</iter>
<status status="PASS" starttime="20210730 17:43:14.338" endtime="20210730 17:43:14.344"/>
</for>
<status status="PASS" starttime="20210730 17:43:14.337" endtime="20210730 17:43:14.344"/>
</branch>
<status status="PASS" starttime="20210730 17:43:14.337" endtime="20210730 17:43:14.344"/>
</if>
<status status="PASS" starttime="20210730 17:43:14.317" endtime="20210730 17:43:14.345"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:14.346" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:14.345" endtime="20210730 17:43:14.346"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:14.346" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:14.346" endtime="20210730 17:43:14.346"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:14.354" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:14.346" endtime="20210730 17:43:14.354"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:14.354" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:14.354" endtime="20210730 17:43:14.355"/>
</kw>
<msg timestamp="20210730 17:43:14.355" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:14.346" endtime="20210730 17:43:14.355"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:14.361" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:14.355" endtime="20210730 17:43:14.363"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.345" endtime="20210730 17:43:14.363"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:14.364" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:14.364" endtime="20210730 17:43:14.368"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:15.870" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:14.369" endtime="20210730 17:43:15.870"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.363" endtime="20210730 17:43:15.870"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:15.871" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:15.871" endtime="20210730 17:43:15.871"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:15.872" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:15.871" endtime="20210730 17:43:15.872"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:15.872" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:15.872" endtime="20210730 17:43:15.872"/>
</kw>
<msg timestamp="20210730 17:43:15.872" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:15.871" endtime="20210730 17:43:15.872"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:15.873" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:15.872" endtime="20210730 17:43:15.873"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.870" endtime="20210730 17:43:15.873"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:15.874" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:15.874" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:15.873" endtime="20210730 17:43:15.874"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.873" endtime="20210730 17:43:15.874"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:15.875" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:15.875" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:15.874" endtime="20210730 17:43:15.875"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:15.875" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:15.875" endtime="20210730 17:43:15.875"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:15.876" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:15.875" endtime="20210730 17:43:15.876"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:15.876" endtime="20210730 17:43:15.877"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:15.877" endtime="20210730 17:43:15.878"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.875" endtime="20210730 17:43:15.878"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:15.878" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:15.878" endtime="20210730 17:43:15.878"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:15.878" endtime="20210730 17:43:15.879"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:15.879" endtime="20210730 17:43:15.879"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.878" endtime="20210730 17:43:15.879"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:15.880" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:15.880" endtime="20210730 17:43:15.880"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:15.880" endtime="20210730 17:43:15.881"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:15.881" endtime="20210730 17:43:15.881"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.880" endtime="20210730 17:43:15.881"/>
</iter>
<status status="PASS" starttime="20210730 17:43:15.875" endtime="20210730 17:43:15.881"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:15.881" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:15.881" endtime="20210730 17:43:15.881"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.874" endtime="20210730 17:43:15.882"/>
</kw>
<status status="PASS" starttime="20210730 17:43:14.317" endtime="20210730 17:43:15.882"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:15.884" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:15.882" endtime="20210730 17:43:15.884"/>
</kw>
<msg timestamp="20210730 17:43:15.885" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:15.882" endtime="20210730 17:43:15.885"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>First name does contain non alphanumeric characters, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:15.885" endtime="20210730 17:43:15.886"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.885" endtime="20210730 17:43:15.886"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:15.887" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:15.887" endtime="20210730 17:43:15.887"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:15.887" level="INFO">${payload} = {'firstname': 'Helena!.?'}</msg>
<status status="PASS" starttime="20210730 17:43:15.887" endtime="20210730 17:43:15.887"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:15.897" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:15.898" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:15.888" endtime="20210730 17:43:15.898"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:15.898" endtime="20210730 17:43:15.898"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:15.898" endtime="20210730 17:43:15.898"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:15.888" endtime="20210730 17:43:15.898"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:15.887" endtime="20210730 17:43:15.898"/>
</for>
<status status="FAIL" starttime="20210730 17:43:15.886" endtime="20210730 17:43:15.898"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:15.886" endtime="20210730 17:43:15.898"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:15.886" endtime="20210730 17:43:15.898"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:15.902" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:15.915" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:15.915" level="INFO">${pids} = 25870
25877
25881</msg>
<status status="PASS" starttime="20210730 17:43:15.899" endtime="20210730 17:43:15.915"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:15.916" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:15.916" endtime="20210730 17:43:15.916"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:15.917" level="INFO">${pids} = ['25870', '25877', '25881']</msg>
<status status="PASS" starttime="20210730 17:43:15.917" endtime="20210730 17:43:15.917"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25870</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:15.921" level="INFO">Running command 'kill 25870 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:15.917" endtime="20210730 17:43:15.922"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.917" endtime="20210730 17:43:15.922"/>
</iter>
<iter>
<var name="${pid}">25877</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:15.925" level="INFO">Running command 'kill 25877 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:15.922" endtime="20210730 17:43:15.925"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.922" endtime="20210730 17:43:15.926"/>
</iter>
<iter>
<var name="${pid}">25881</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:15.930" level="INFO">Running command 'kill 25881 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:15.926" endtime="20210730 17:43:15.930"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.926" endtime="20210730 17:43:15.930"/>
</iter>
<status status="PASS" starttime="20210730 17:43:15.917" endtime="20210730 17:43:15.930"/>
</for>
<status status="PASS" starttime="20210730 17:43:15.916" endtime="20210730 17:43:15.930"/>
</branch>
<status status="PASS" starttime="20210730 17:43:15.916" endtime="20210730 17:43:15.930"/>
</if>
<status status="PASS" starttime="20210730 17:43:15.899" endtime="20210730 17:43:15.931"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena!.?'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:14.316" endtime="20210730 17:43:15.931">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t109" name="With Each Valid Token, Updating First Name Of Each System User With Helena Margaretha Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:15.937" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:15.959" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:15.959" level="INFO">${pids} = 25910</msg>
<status status="PASS" starttime="20210730 17:43:15.934" endtime="20210730 17:43:15.959"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:15.972" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:15.971" endtime="20210730 17:43:15.972"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:15.973" level="INFO">${pids} = ['25910']</msg>
<status status="PASS" starttime="20210730 17:43:15.972" endtime="20210730 17:43:15.973"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25910</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:15.987" level="INFO">Running command 'kill 25910 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:15.974" endtime="20210730 17:43:15.988"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.974" endtime="20210730 17:43:15.988"/>
</iter>
<status status="PASS" starttime="20210730 17:43:15.973" endtime="20210730 17:43:15.988"/>
</for>
<status status="PASS" starttime="20210730 17:43:15.972" endtime="20210730 17:43:15.988"/>
</branch>
<status status="PASS" starttime="20210730 17:43:15.972" endtime="20210730 17:43:15.988"/>
</if>
<status status="PASS" starttime="20210730 17:43:15.933" endtime="20210730 17:43:15.988"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:15.989" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:15.989" endtime="20210730 17:43:15.989"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:15.990" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:15.990" endtime="20210730 17:43:15.990"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:15.990" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:15.990" endtime="20210730 17:43:15.990"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:15.997" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:15.991" endtime="20210730 17:43:15.997"/>
</kw>
<msg timestamp="20210730 17:43:15.997" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:15.990" endtime="20210730 17:43:15.997"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:16.006" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:15.998" endtime="20210730 17:43:16.007"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.989" endtime="20210730 17:43:16.007"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:16.008" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:16.008" endtime="20210730 17:43:16.013"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:17.515" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:16.013" endtime="20210730 17:43:17.515"/>
</kw>
<status status="PASS" starttime="20210730 17:43:16.007" endtime="20210730 17:43:17.516"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:17.523" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:17.521" endtime="20210730 17:43:17.523"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:17.524" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:17.523" endtime="20210730 17:43:17.524"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:17.525" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:17.524" endtime="20210730 17:43:17.526"/>
</kw>
<msg timestamp="20210730 17:43:17.526" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:17.520" endtime="20210730 17:43:17.526"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:17.527" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:17.527" endtime="20210730 17:43:17.528"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.518" endtime="20210730 17:43:17.529"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:17.530" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:17.530" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:17.530" endtime="20210730 17:43:17.530"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.529" endtime="20210730 17:43:17.531"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:17.532" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:17.532" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:17.532" endtime="20210730 17:43:17.532"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:17.533" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:17.533" endtime="20210730 17:43:17.533"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:17.534" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:17.534" endtime="20210730 17:43:17.534"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:17.534" endtime="20210730 17:43:17.536"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:17.536" endtime="20210730 17:43:17.536"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.534" endtime="20210730 17:43:17.536"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:17.537" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:17.537" endtime="20210730 17:43:17.537"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:17.537" endtime="20210730 17:43:17.538"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:17.539" endtime="20210730 17:43:17.539"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.537" endtime="20210730 17:43:17.539"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:17.540" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:17.539" endtime="20210730 17:43:17.540"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:17.540" endtime="20210730 17:43:17.541"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:17.541" endtime="20210730 17:43:17.541"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.539" endtime="20210730 17:43:17.541"/>
</iter>
<status status="PASS" starttime="20210730 17:43:17.533" endtime="20210730 17:43:17.542"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:17.542" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:17.542" endtime="20210730 17:43:17.542"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.531" endtime="20210730 17:43:17.542"/>
</kw>
<status status="PASS" starttime="20210730 17:43:15.933" endtime="20210730 17:43:17.542"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:17.546" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:17.543" endtime="20210730 17:43:17.546"/>
</kw>
<msg timestamp="20210730 17:43:17.546" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:17.543" endtime="20210730 17:43:17.546"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>Two valid first names seperated by a single space character</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:17.547" endtime="20210730 17:43:17.548"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.546" endtime="20210730 17:43:17.548"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:17.549" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:17.549" endtime="20210730 17:43:17.549"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:17.550" level="INFO">${payload} = {'firstname': 'Helena Margaretha'}</msg>
<status status="PASS" starttime="20210730 17:43:17.549" endtime="20210730 17:43:17.550"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:17.559" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:17.559" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:17.550" endtime="20210730 17:43:17.559"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:17.559" endtime="20210730 17:43:17.559"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:17.559" endtime="20210730 17:43:17.559"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:17.550" endtime="20210730 17:43:17.559"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:17.550" endtime="20210730 17:43:17.559"/>
</for>
<status status="FAIL" starttime="20210730 17:43:17.548" endtime="20210730 17:43:17.560"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:17.548" endtime="20210730 17:43:17.560"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:17.548" endtime="20210730 17:43:17.560"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:17.564" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:17.575" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:17.575" level="INFO">${pids} = 25933
25940
25942</msg>
<status status="PASS" starttime="20210730 17:43:17.560" endtime="20210730 17:43:17.575"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:17.576" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:17.575" endtime="20210730 17:43:17.576"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:17.576" level="INFO">${pids} = ['25933', '25940', '25942']</msg>
<status status="PASS" starttime="20210730 17:43:17.576" endtime="20210730 17:43:17.576"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25933</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:17.581" level="INFO">Running command 'kill 25933 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:17.577" endtime="20210730 17:43:17.581"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.577" endtime="20210730 17:43:17.581"/>
</iter>
<iter>
<var name="${pid}">25940</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:17.584" level="INFO">Running command 'kill 25940 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:17.582" endtime="20210730 17:43:17.585"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.581" endtime="20210730 17:43:17.585"/>
</iter>
<iter>
<var name="${pid}">25942</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:17.589" level="INFO">Running command 'kill 25942 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:17.585" endtime="20210730 17:43:17.590"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.585" endtime="20210730 17:43:17.590"/>
</iter>
<status status="PASS" starttime="20210730 17:43:17.576" endtime="20210730 17:43:17.590"/>
</for>
<status status="PASS" starttime="20210730 17:43:17.576" endtime="20210730 17:43:17.590"/>
</branch>
<status status="PASS" starttime="20210730 17:43:17.576" endtime="20210730 17:43:17.590"/>
</if>
<status status="PASS" starttime="20210730 17:43:17.560" endtime="20210730 17:43:17.590"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena Margaretha'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:15.932" endtime="20210730 17:43:17.591">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t110" name="With Each Valid Token, Updating First Name Of Each System User With Helena      Margaretha Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:17.596" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:17.611" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:17.611" level="INFO">${pids} = 25971</msg>
<status status="PASS" starttime="20210730 17:43:17.592" endtime="20210730 17:43:17.612"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:17.612" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:17.612" endtime="20210730 17:43:17.612"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:17.613" level="INFO">${pids} = ['25971']</msg>
<status status="PASS" starttime="20210730 17:43:17.613" endtime="20210730 17:43:17.613"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25971</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:17.617" level="INFO">Running command 'kill 25971 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:17.613" endtime="20210730 17:43:17.617"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.613" endtime="20210730 17:43:17.617"/>
</iter>
<status status="PASS" starttime="20210730 17:43:17.613" endtime="20210730 17:43:17.617"/>
</for>
<status status="PASS" starttime="20210730 17:43:17.613" endtime="20210730 17:43:17.617"/>
</branch>
<status status="PASS" starttime="20210730 17:43:17.613" endtime="20210730 17:43:17.617"/>
</if>
<status status="PASS" starttime="20210730 17:43:17.592" endtime="20210730 17:43:17.618"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:17.619" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:17.618" endtime="20210730 17:43:17.619"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:17.619" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:17.619" endtime="20210730 17:43:17.619"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:17.620" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:17.619" endtime="20210730 17:43:17.620"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:17.620" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:17.620" endtime="20210730 17:43:17.620"/>
</kw>
<msg timestamp="20210730 17:43:17.620" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:17.619" endtime="20210730 17:43:17.620"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:17.637" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:17.620" endtime="20210730 17:43:17.639"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.618" endtime="20210730 17:43:17.639"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:17.640" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:17.640" endtime="20210730 17:43:17.648"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:19.151" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:17.648" endtime="20210730 17:43:19.151"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.639" endtime="20210730 17:43:19.153"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:19.156" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:19.155" endtime="20210730 17:43:19.156"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:19.156" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:19.156" endtime="20210730 17:43:19.156"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:19.157" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:19.156" endtime="20210730 17:43:19.157"/>
</kw>
<msg timestamp="20210730 17:43:19.157" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:19.155" endtime="20210730 17:43:19.157"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:19.158" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:19.157" endtime="20210730 17:43:19.158"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.154" endtime="20210730 17:43:19.158"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:19.159" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:19.159" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:19.159" endtime="20210730 17:43:19.159"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.158" endtime="20210730 17:43:19.159"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:19.159" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:19.160" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:19.159" endtime="20210730 17:43:19.160"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:19.160" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:19.160" endtime="20210730 17:43:19.160"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:19.160" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:19.160" endtime="20210730 17:43:19.161"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:19.161" endtime="20210730 17:43:19.161"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:19.161" endtime="20210730 17:43:19.162"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.160" endtime="20210730 17:43:19.162"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:19.162" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:19.162" endtime="20210730 17:43:19.162"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:19.162" endtime="20210730 17:43:19.163"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:19.163" endtime="20210730 17:43:19.163"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.162" endtime="20210730 17:43:19.163"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:19.163" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:19.163" endtime="20210730 17:43:19.163"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:19.164" endtime="20210730 17:43:19.164"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:19.164" endtime="20210730 17:43:19.164"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.163" endtime="20210730 17:43:19.165"/>
</iter>
<status status="PASS" starttime="20210730 17:43:19.160" endtime="20210730 17:43:19.165"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:19.165" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:19.165" endtime="20210730 17:43:19.165"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.159" endtime="20210730 17:43:19.165"/>
</kw>
<status status="PASS" starttime="20210730 17:43:17.592" endtime="20210730 17:43:19.165"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:19.168" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:19.166" endtime="20210730 17:43:19.168"/>
</kw>
<msg timestamp="20210730 17:43:19.168" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:19.165" endtime="20210730 17:43:19.168"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>first_name</arg>
<arg>Two valid first names seperated by multiple space characters making it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:19.169" endtime="20210730 17:43:19.169"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.168" endtime="20210730 17:43:19.169"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=firstname</arg>
<arg>field_data=${user_data}[first_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:19.170" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:19.170" endtime="20210730 17:43:19.170"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:19.171" level="INFO">${payload} = {'firstname': 'Helena      Margaretha'}</msg>
<status status="PASS" starttime="20210730 17:43:19.171" endtime="20210730 17:43:19.171"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:19.179" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:19.180" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:19.171" endtime="20210730 17:43:19.180"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:19.180" endtime="20210730 17:43:19.180"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:19.180" endtime="20210730 17:43:19.180"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:19.171" endtime="20210730 17:43:19.180"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:19.171" endtime="20210730 17:43:19.181"/>
</for>
<status status="FAIL" starttime="20210730 17:43:19.170" endtime="20210730 17:43:19.181"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:19.170" endtime="20210730 17:43:19.181"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:19.169" endtime="20210730 17:43:19.181"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:19.185" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:19.198" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:19.199" level="INFO">${pids} = 25994
26001
26003</msg>
<status status="PASS" starttime="20210730 17:43:19.181" endtime="20210730 17:43:19.199"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:19.199" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:19.199" endtime="20210730 17:43:19.199"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:19.200" level="INFO">${pids} = ['25994', '26001', '26003']</msg>
<status status="PASS" starttime="20210730 17:43:19.200" endtime="20210730 17:43:19.200"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">25994</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:19.204" level="INFO">Running command 'kill 25994 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:19.201" endtime="20210730 17:43:19.204"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.200" endtime="20210730 17:43:19.204"/>
</iter>
<iter>
<var name="${pid}">26001</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:19.208" level="INFO">Running command 'kill 26001 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:19.205" endtime="20210730 17:43:19.210"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.205" endtime="20210730 17:43:19.210"/>
</iter>
<iter>
<var name="${pid}">26003</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:19.213" level="INFO">Running command 'kill 26003 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:19.210" endtime="20210730 17:43:19.213"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.210" endtime="20210730 17:43:19.213"/>
</iter>
<status status="PASS" starttime="20210730 17:43:19.200" endtime="20210730 17:43:19.214"/>
</for>
<status status="PASS" starttime="20210730 17:43:19.200" endtime="20210730 17:43:19.214"/>
</branch>
<status status="PASS" starttime="20210730 17:43:19.200" endtime="20210730 17:43:19.214"/>
</if>
<status status="PASS" starttime="20210730 17:43:19.181" endtime="20210730 17:43:19.214"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
firstname as such:
{
"firstname": 'Helena Margaretha'
}
Then, each request should fail with the following response body:
{
"message": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:17.591" endtime="20210730 17:43:19.214">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t111" name="With Each Valid Token, Updating Last Name Of Each System User With '' Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:19.218" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:19.235" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:19.235" level="INFO">${pids} = 26033</msg>
<status status="PASS" starttime="20210730 17:43:19.216" endtime="20210730 17:43:19.235"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:19.236" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:19.235" endtime="20210730 17:43:19.236"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:19.236" level="INFO">${pids} = ['26033']</msg>
<status status="PASS" starttime="20210730 17:43:19.236" endtime="20210730 17:43:19.236"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26033</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:19.240" level="INFO">Running command 'kill 26033 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:19.237" endtime="20210730 17:43:19.240"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.237" endtime="20210730 17:43:19.240"/>
</iter>
<status status="PASS" starttime="20210730 17:43:19.236" endtime="20210730 17:43:19.240"/>
</for>
<status status="PASS" starttime="20210730 17:43:19.236" endtime="20210730 17:43:19.240"/>
</branch>
<status status="PASS" starttime="20210730 17:43:19.236" endtime="20210730 17:43:19.240"/>
</if>
<status status="PASS" starttime="20210730 17:43:19.216" endtime="20210730 17:43:19.241"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:19.242" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:19.241" endtime="20210730 17:43:19.242"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:19.242" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:19.242" endtime="20210730 17:43:19.242"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:19.243" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:19.242" endtime="20210730 17:43:19.243"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:19.245" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:19.244" endtime="20210730 17:43:19.245"/>
</kw>
<msg timestamp="20210730 17:43:19.245" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:19.242" endtime="20210730 17:43:19.245"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:19.260" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:19.246" endtime="20210730 17:43:19.262"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.241" endtime="20210730 17:43:19.262"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:19.264" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:19.263" endtime="20210730 17:43:19.268"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:20.770" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:19.268" endtime="20210730 17:43:20.770"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.263" endtime="20210730 17:43:20.771"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:20.773" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:20.773" endtime="20210730 17:43:20.774"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:20.774" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:20.774" endtime="20210730 17:43:20.775"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:20.775" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:20.775" endtime="20210730 17:43:20.775"/>
</kw>
<msg timestamp="20210730 17:43:20.775" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:20.772" endtime="20210730 17:43:20.775"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:20.776" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:20.775" endtime="20210730 17:43:20.776"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.771" endtime="20210730 17:43:20.776"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:20.778" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:20.778" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:20.776" endtime="20210730 17:43:20.778"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.776" endtime="20210730 17:43:20.778"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:20.779" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:20.779" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:20.778" endtime="20210730 17:43:20.779"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:20.779" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:20.779" endtime="20210730 17:43:20.779"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:20.779" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:20.779" endtime="20210730 17:43:20.779"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:20.780" endtime="20210730 17:43:20.780"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:20.780" endtime="20210730 17:43:20.780"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.779" endtime="20210730 17:43:20.781"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:20.781" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:20.781" endtime="20210730 17:43:20.781"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:20.781" endtime="20210730 17:43:20.782"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:20.782" endtime="20210730 17:43:20.782"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.781" endtime="20210730 17:43:20.782"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:20.782" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:20.782" endtime="20210730 17:43:20.782"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:20.782" endtime="20210730 17:43:20.783"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:20.783" endtime="20210730 17:43:20.783"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.782" endtime="20210730 17:43:20.783"/>
</iter>
<status status="PASS" starttime="20210730 17:43:20.779" endtime="20210730 17:43:20.783"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:20.784" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:20.784" endtime="20210730 17:43:20.784"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.778" endtime="20210730 17:43:20.784"/>
</kw>
<status status="PASS" starttime="20210730 17:43:19.215" endtime="20210730 17:43:20.784"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:20.787" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:20.785" endtime="20210730 17:43:20.787"/>
</kw>
<msg timestamp="20210730 17:43:20.787" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:20.784" endtime="20210730 17:43:20.787"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>An empty last name</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:20.788" endtime="20210730 17:43:20.792"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.787" endtime="20210730 17:43:20.792"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:20.794" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:20.794" endtime="20210730 17:43:20.794"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:20.794" level="INFO">${payload} = {'lastname': ''}</msg>
<status status="PASS" starttime="20210730 17:43:20.794" endtime="20210730 17:43:20.794"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:20.804" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:20.804" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:20.796" endtime="20210730 17:43:20.804"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:20.804" endtime="20210730 17:43:20.804"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:20.805" endtime="20210730 17:43:20.805"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:20.796" endtime="20210730 17:43:20.805"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:20.795" endtime="20210730 17:43:20.805"/>
</for>
<status status="FAIL" starttime="20210730 17:43:20.793" endtime="20210730 17:43:20.805"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:20.793" endtime="20210730 17:43:20.805"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:20.792" endtime="20210730 17:43:20.805"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:20.809" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:20.820" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:20.820" level="INFO">${pids} = 26056
26063
26066</msg>
<status status="PASS" starttime="20210730 17:43:20.806" endtime="20210730 17:43:20.820"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:20.821" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:20.821" endtime="20210730 17:43:20.821"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:20.822" level="INFO">${pids} = ['26056', '26063', '26066']</msg>
<status status="PASS" starttime="20210730 17:43:20.822" endtime="20210730 17:43:20.822"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26056</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:20.826" level="INFO">Running command 'kill 26056 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:20.822" endtime="20210730 17:43:20.826"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.822" endtime="20210730 17:43:20.826"/>
</iter>
<iter>
<var name="${pid}">26063</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:20.830" level="INFO">Running command 'kill 26063 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:20.827" endtime="20210730 17:43:20.831"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.827" endtime="20210730 17:43:20.831"/>
</iter>
<iter>
<var name="${pid}">26066</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:20.836" level="INFO">Running command 'kill 26066 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:20.831" endtime="20210730 17:43:20.836"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.831" endtime="20210730 17:43:20.836"/>
</iter>
<status status="PASS" starttime="20210730 17:43:20.822" endtime="20210730 17:43:20.837"/>
</for>
<status status="PASS" starttime="20210730 17:43:20.821" endtime="20210730 17:43:20.837"/>
</branch>
<status status="PASS" starttime="20210730 17:43:20.821" endtime="20210730 17:43:20.837"/>
</if>
<status status="PASS" starttime="20210730 17:43:20.805" endtime="20210730 17:43:20.837"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": ''
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:19.215" endtime="20210730 17:43:20.837">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t112" name="With Each Valid Token, Updating Last Name Of Each System User With Cuzdan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:20.842" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:20.857" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:20.857" level="INFO">${pids} = 26095</msg>
<status status="PASS" starttime="20210730 17:43:20.839" endtime="20210730 17:43:20.857"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:20.858" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:20.858" endtime="20210730 17:43:20.858"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:20.859" level="INFO">${pids} = ['26095']</msg>
<status status="PASS" starttime="20210730 17:43:20.859" endtime="20210730 17:43:20.859"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26095</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:20.865" level="INFO">Running command 'kill 26095 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:20.859" endtime="20210730 17:43:20.866"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.859" endtime="20210730 17:43:20.866"/>
</iter>
<status status="PASS" starttime="20210730 17:43:20.859" endtime="20210730 17:43:20.866"/>
</for>
<status status="PASS" starttime="20210730 17:43:20.859" endtime="20210730 17:43:20.866"/>
</branch>
<status status="PASS" starttime="20210730 17:43:20.858" endtime="20210730 17:43:20.866"/>
</if>
<status status="PASS" starttime="20210730 17:43:20.838" endtime="20210730 17:43:20.866"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:20.868" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:20.867" endtime="20210730 17:43:20.868"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:20.868" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:20.868" endtime="20210730 17:43:20.868"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:20.869" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:20.868" endtime="20210730 17:43:20.869"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:20.870" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:20.869" endtime="20210730 17:43:20.870"/>
</kw>
<msg timestamp="20210730 17:43:20.870" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:20.868" endtime="20210730 17:43:20.870"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:20.879" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:20.870" endtime="20210730 17:43:20.881"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.867" endtime="20210730 17:43:20.881"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:20.883" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:20.882" endtime="20210730 17:43:20.887"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:22.388" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:20.887" endtime="20210730 17:43:22.389"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.882" endtime="20210730 17:43:22.389"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:22.390" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:22.390" endtime="20210730 17:43:22.390"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:22.390" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:22.390" endtime="20210730 17:43:22.390"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:22.391" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:22.390" endtime="20210730 17:43:22.391"/>
</kw>
<msg timestamp="20210730 17:43:22.391" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:22.389" endtime="20210730 17:43:22.391"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:22.391" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:22.391" endtime="20210730 17:43:22.392"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.389" endtime="20210730 17:43:22.392"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:22.392" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:22.392" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:22.392" endtime="20210730 17:43:22.393"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.392" endtime="20210730 17:43:22.393"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:22.393" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:22.393" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:22.393" endtime="20210730 17:43:22.393"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:22.394" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:22.394" endtime="20210730 17:43:22.394"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:22.394" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:22.394" endtime="20210730 17:43:22.394"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:22.394" endtime="20210730 17:43:22.395"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:22.395" endtime="20210730 17:43:22.396"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.394" endtime="20210730 17:43:22.396"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:22.396" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:22.396" endtime="20210730 17:43:22.396"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:22.396" endtime="20210730 17:43:22.397"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:22.397" endtime="20210730 17:43:22.397"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.396" endtime="20210730 17:43:22.397"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:22.398" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:22.398" endtime="20210730 17:43:22.398"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:22.398" endtime="20210730 17:43:22.399"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:22.399" endtime="20210730 17:43:22.399"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.397" endtime="20210730 17:43:22.399"/>
</iter>
<status status="PASS" starttime="20210730 17:43:22.394" endtime="20210730 17:43:22.399"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:22.400" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:22.399" endtime="20210730 17:43:22.400"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.393" endtime="20210730 17:43:22.400"/>
</kw>
<status status="PASS" starttime="20210730 17:43:20.838" endtime="20210730 17:43:22.400"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:22.403" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:22.400" endtime="20210730 17:43:22.403"/>
</kw>
<msg timestamp="20210730 17:43:22.403" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:22.400" endtime="20210730 17:43:22.403"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>A last name containing more than 2 characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:22.403" endtime="20210730 17:43:22.404"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.403" endtime="20210730 17:43:22.404"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:22.405" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:22.405" endtime="20210730 17:43:22.405"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:22.405" level="INFO">${payload} = {'lastname': 'Cuzdan'}</msg>
<status status="PASS" starttime="20210730 17:43:22.405" endtime="20210730 17:43:22.406"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:22.414" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:22.415" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:22.406" endtime="20210730 17:43:22.415"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:22.415" endtime="20210730 17:43:22.415"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:22.415" endtime="20210730 17:43:22.415"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:22.406" endtime="20210730 17:43:22.415"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:22.406" endtime="20210730 17:43:22.415"/>
</for>
<status status="FAIL" starttime="20210730 17:43:22.404" endtime="20210730 17:43:22.415"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:22.404" endtime="20210730 17:43:22.416"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:22.404" endtime="20210730 17:43:22.416"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:22.420" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:22.435" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:22.435" level="INFO">${pids} = 26118
26125
26127</msg>
<status status="PASS" starttime="20210730 17:43:22.416" endtime="20210730 17:43:22.435"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:22.436" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:22.435" endtime="20210730 17:43:22.436"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:22.436" level="INFO">${pids} = ['26118', '26125', '26127']</msg>
<status status="PASS" starttime="20210730 17:43:22.436" endtime="20210730 17:43:22.436"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26118</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:22.440" level="INFO">Running command 'kill 26118 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:22.437" endtime="20210730 17:43:22.440"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.437" endtime="20210730 17:43:22.441"/>
</iter>
<iter>
<var name="${pid}">26125</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:22.444" level="INFO">Running command 'kill 26125 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:22.441" endtime="20210730 17:43:22.444"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.441" endtime="20210730 17:43:22.444"/>
</iter>
<iter>
<var name="${pid}">26127</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:22.450" level="INFO">Running command 'kill 26127 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:22.445" endtime="20210730 17:43:22.450"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.445" endtime="20210730 17:43:22.450"/>
</iter>
<status status="PASS" starttime="20210730 17:43:22.436" endtime="20210730 17:43:22.450"/>
</for>
<status status="PASS" starttime="20210730 17:43:22.436" endtime="20210730 17:43:22.450"/>
</branch>
<status status="PASS" starttime="20210730 17:43:22.436" endtime="20210730 17:43:22.450"/>
</if>
<status status="PASS" starttime="20210730 17:43:22.416" endtime="20210730 17:43:22.451"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Cuzdan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:20.838" endtime="20210730 17:43:22.451">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t113" name="With Each Valid Token, Updating Last Name Of Each System User With Cuzdan123!?. Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:22.456" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:22.468" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:22.468" level="INFO">${pids} = 26156</msg>
<status status="PASS" starttime="20210730 17:43:22.453" endtime="20210730 17:43:22.468"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:22.469" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:22.468" endtime="20210730 17:43:22.469"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:22.470" level="INFO">${pids} = ['26156']</msg>
<status status="PASS" starttime="20210730 17:43:22.469" endtime="20210730 17:43:22.470"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26156</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:22.474" level="INFO">Running command 'kill 26156 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:22.470" endtime="20210730 17:43:22.474"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.470" endtime="20210730 17:43:22.474"/>
</iter>
<status status="PASS" starttime="20210730 17:43:22.470" endtime="20210730 17:43:22.474"/>
</for>
<status status="PASS" starttime="20210730 17:43:22.469" endtime="20210730 17:43:22.474"/>
</branch>
<status status="PASS" starttime="20210730 17:43:22.469" endtime="20210730 17:43:22.474"/>
</if>
<status status="PASS" starttime="20210730 17:43:22.452" endtime="20210730 17:43:22.474"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:22.475" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:22.475" endtime="20210730 17:43:22.475"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:22.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:22.476" endtime="20210730 17:43:22.476"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:22.476" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:22.476" endtime="20210730 17:43:22.476"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:22.477" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:22.476" endtime="20210730 17:43:22.477"/>
</kw>
<msg timestamp="20210730 17:43:22.477" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:22.475" endtime="20210730 17:43:22.477"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:22.491" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:22.477" endtime="20210730 17:43:22.494"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.475" endtime="20210730 17:43:22.495"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:22.496" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:22.496" endtime="20210730 17:43:22.500"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:24.002" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:22.500" endtime="20210730 17:43:24.003"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.495" endtime="20210730 17:43:24.004"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:24.009" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:24.008" endtime="20210730 17:43:24.010"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:24.010" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:24.010" endtime="20210730 17:43:24.017"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:24.018" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:24.018" endtime="20210730 17:43:24.018"/>
</kw>
<msg timestamp="20210730 17:43:24.018" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:24.007" endtime="20210730 17:43:24.018"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:24.019" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:24.019" endtime="20210730 17:43:24.019"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.005" endtime="20210730 17:43:24.022"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:24.023" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:24.023" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:24.023" endtime="20210730 17:43:24.023"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.022" endtime="20210730 17:43:24.023"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:24.024" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:24.024" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:24.024" endtime="20210730 17:43:24.024"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:24.024" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:24.024" endtime="20210730 17:43:24.024"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:24.025" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:24.025" endtime="20210730 17:43:24.025"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:24.025" endtime="20210730 17:43:24.026"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:24.026" endtime="20210730 17:43:24.026"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.024" endtime="20210730 17:43:24.026"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:24.027" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:24.027" endtime="20210730 17:43:24.027"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:24.027" endtime="20210730 17:43:24.028"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:24.028" endtime="20210730 17:43:24.028"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.027" endtime="20210730 17:43:24.028"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:24.029" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:24.028" endtime="20210730 17:43:24.029"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:24.029" endtime="20210730 17:43:24.038"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:24.039" endtime="20210730 17:43:24.039"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.028" endtime="20210730 17:43:24.039"/>
</iter>
<status status="PASS" starttime="20210730 17:43:24.024" endtime="20210730 17:43:24.039"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:24.040" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:24.039" endtime="20210730 17:43:24.040"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.023" endtime="20210730 17:43:24.040"/>
</kw>
<status status="PASS" starttime="20210730 17:43:22.452" endtime="20210730 17:43:24.040"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:24.046" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:24.043" endtime="20210730 17:43:24.046"/>
</kw>
<msg timestamp="20210730 17:43:24.046" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:24.042" endtime="20210730 17:43:24.046"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>A last name containing numbers and non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:24.047" endtime="20210730 17:43:24.048"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.047" endtime="20210730 17:43:24.048"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:24.050" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:24.049" endtime="20210730 17:43:24.050"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:24.050" level="INFO">${payload} = {'lastname': 'Cuzdan123!?.'}</msg>
<status status="PASS" starttime="20210730 17:43:24.050" endtime="20210730 17:43:24.050"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:24.060" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:24.060" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:24.050" endtime="20210730 17:43:24.060"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:24.060" endtime="20210730 17:43:24.060"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:24.061" endtime="20210730 17:43:24.061"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:24.050" endtime="20210730 17:43:24.061"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:24.050" endtime="20210730 17:43:24.061"/>
</for>
<status status="FAIL" starttime="20210730 17:43:24.049" endtime="20210730 17:43:24.061"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:24.049" endtime="20210730 17:43:24.061"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:24.048" endtime="20210730 17:43:24.061"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:24.066" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:24.077" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:24.077" level="INFO">${pids} = 26179
26186
26190</msg>
<status status="PASS" starttime="20210730 17:43:24.062" endtime="20210730 17:43:24.077"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:24.078" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:24.077" endtime="20210730 17:43:24.078"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:24.079" level="INFO">${pids} = ['26179', '26186', '26190']</msg>
<status status="PASS" starttime="20210730 17:43:24.078" endtime="20210730 17:43:24.079"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26179</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:24.082" level="INFO">Running command 'kill 26179 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:24.079" endtime="20210730 17:43:24.083"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.079" endtime="20210730 17:43:24.083"/>
</iter>
<iter>
<var name="${pid}">26186</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:24.086" level="INFO">Running command 'kill 26186 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:24.083" endtime="20210730 17:43:24.087"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.083" endtime="20210730 17:43:24.087"/>
</iter>
<iter>
<var name="${pid}">26190</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:24.091" level="INFO">Running command 'kill 26190 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:24.087" endtime="20210730 17:43:24.091"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.087" endtime="20210730 17:43:24.091"/>
</iter>
<status status="PASS" starttime="20210730 17:43:24.079" endtime="20210730 17:43:24.092"/>
</for>
<status status="PASS" starttime="20210730 17:43:24.078" endtime="20210730 17:43:24.092"/>
</branch>
<status status="PASS" starttime="20210730 17:43:24.078" endtime="20210730 17:43:24.092"/>
</if>
<status status="PASS" starttime="20210730 17:43:24.061" endtime="20210730 17:43:24.092"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Cuzdan123!?.'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:22.451" endtime="20210730 17:43:24.092">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t114" name="With Each Valid Token, Updating Last Name Of Each System User With Wi Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:24.098" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:24.111" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:24.111" level="INFO">${pids} = 26219</msg>
<status status="PASS" starttime="20210730 17:43:24.094" endtime="20210730 17:43:24.111"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:24.112" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:24.112" endtime="20210730 17:43:24.112"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:24.113" level="INFO">${pids} = ['26219']</msg>
<status status="PASS" starttime="20210730 17:43:24.112" endtime="20210730 17:43:24.113"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26219</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:24.118" level="INFO">Running command 'kill 26219 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:24.113" endtime="20210730 17:43:24.118"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.113" endtime="20210730 17:43:24.118"/>
</iter>
<status status="PASS" starttime="20210730 17:43:24.113" endtime="20210730 17:43:24.118"/>
</for>
<status status="PASS" starttime="20210730 17:43:24.112" endtime="20210730 17:43:24.119"/>
</branch>
<status status="PASS" starttime="20210730 17:43:24.112" endtime="20210730 17:43:24.119"/>
</if>
<status status="PASS" starttime="20210730 17:43:24.094" endtime="20210730 17:43:24.119"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:24.120" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:24.119" endtime="20210730 17:43:24.120"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:24.120" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:24.120" endtime="20210730 17:43:24.120"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:24.121" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:24.120" endtime="20210730 17:43:24.121"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:24.121" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:24.121" endtime="20210730 17:43:24.121"/>
</kw>
<msg timestamp="20210730 17:43:24.121" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:24.120" endtime="20210730 17:43:24.121"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:24.135" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:24.121" endtime="20210730 17:43:24.140"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.119" endtime="20210730 17:43:24.140"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:24.141" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:24.140" endtime="20210730 17:43:24.146"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:25.650" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:24.146" endtime="20210730 17:43:25.650"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.140" endtime="20210730 17:43:25.651"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:25.654" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:25.654" endtime="20210730 17:43:25.654"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:25.655" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:25.654" endtime="20210730 17:43:25.655"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:25.655" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:25.655" endtime="20210730 17:43:25.655"/>
</kw>
<msg timestamp="20210730 17:43:25.655" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:25.654" endtime="20210730 17:43:25.655"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:25.656" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:25.655" endtime="20210730 17:43:25.656"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.652" endtime="20210730 17:43:25.656"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:25.657" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:25.657" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:25.657" endtime="20210730 17:43:25.657"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.656" endtime="20210730 17:43:25.657"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:25.658" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:25.658" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:25.658" endtime="20210730 17:43:25.658"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:25.658" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:25.658" endtime="20210730 17:43:25.658"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:25.659" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:25.659" endtime="20210730 17:43:25.659"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:25.659" endtime="20210730 17:43:25.661"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:25.661" endtime="20210730 17:43:25.662"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.659" endtime="20210730 17:43:25.662"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:25.662" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:25.662" endtime="20210730 17:43:25.662"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:25.662" endtime="20210730 17:43:25.663"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:25.664" endtime="20210730 17:43:25.664"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.662" endtime="20210730 17:43:25.664"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:25.665" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:25.664" endtime="20210730 17:43:25.665"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:25.665" endtime="20210730 17:43:25.666"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:25.666" endtime="20210730 17:43:25.667"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.664" endtime="20210730 17:43:25.667"/>
</iter>
<status status="PASS" starttime="20210730 17:43:25.658" endtime="20210730 17:43:25.667"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:25.667" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:25.667" endtime="20210730 17:43:25.668"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.657" endtime="20210730 17:43:25.668"/>
</kw>
<status status="PASS" starttime="20210730 17:43:24.093" endtime="20210730 17:43:25.668"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:25.671" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:25.668" endtime="20210730 17:43:25.671"/>
</kw>
<msg timestamp="20210730 17:43:25.671" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:25.668" endtime="20210730 17:43:25.671"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>2 character last name with only one word</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:25.671" endtime="20210730 17:43:25.672"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.671" endtime="20210730 17:43:25.672"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:25.673" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:25.673" endtime="20210730 17:43:25.673"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:25.674" level="INFO">${payload} = {'lastname': 'Wi'}</msg>
<status status="PASS" starttime="20210730 17:43:25.673" endtime="20210730 17:43:25.674"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:25.683" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:25.683" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:25.674" endtime="20210730 17:43:25.683"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:25.683" endtime="20210730 17:43:25.684"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:25.684" endtime="20210730 17:43:25.684"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:25.674" endtime="20210730 17:43:25.684"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:25.674" endtime="20210730 17:43:25.684"/>
</for>
<status status="FAIL" starttime="20210730 17:43:25.672" endtime="20210730 17:43:25.684"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:25.672" endtime="20210730 17:43:25.684"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:25.672" endtime="20210730 17:43:25.684"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:25.688" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:25.699" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:25.699" level="INFO">${pids} = 26242
26249
26251</msg>
<status status="PASS" starttime="20210730 17:43:25.685" endtime="20210730 17:43:25.699"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:25.700" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:25.700" endtime="20210730 17:43:25.700"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:25.701" level="INFO">${pids} = ['26242', '26249', '26251']</msg>
<status status="PASS" starttime="20210730 17:43:25.701" endtime="20210730 17:43:25.701"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26242</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:25.706" level="INFO">Running command 'kill 26242 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:25.701" endtime="20210730 17:43:25.706"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.701" endtime="20210730 17:43:25.706"/>
</iter>
<iter>
<var name="${pid}">26249</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:25.709" level="INFO">Running command 'kill 26249 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:25.707" endtime="20210730 17:43:25.710"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.707" endtime="20210730 17:43:25.710"/>
</iter>
<iter>
<var name="${pid}">26251</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:25.714" level="INFO">Running command 'kill 26251 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:25.711" endtime="20210730 17:43:25.714"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.710" endtime="20210730 17:43:25.715"/>
</iter>
<status status="PASS" starttime="20210730 17:43:25.701" endtime="20210730 17:43:25.715"/>
</for>
<status status="PASS" starttime="20210730 17:43:25.700" endtime="20210730 17:43:25.715"/>
</branch>
<status status="PASS" starttime="20210730 17:43:25.700" endtime="20210730 17:43:25.715"/>
</if>
<status status="PASS" starttime="20210730 17:43:25.685" endtime="20210730 17:43:25.715"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi'
}
Then, each request should fail with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:24.093" endtime="20210730 17:43:25.715">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t115" name="With Each Valid Token, Updating Last Name Of Each System User With Wi Xi Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:25.721" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:25.732" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:25.732" level="INFO">${pids} = 26281</msg>
<status status="PASS" starttime="20210730 17:43:25.718" endtime="20210730 17:43:25.732"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:25.733" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:25.732" endtime="20210730 17:43:25.733"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:25.733" level="INFO">${pids} = ['26281']</msg>
<status status="PASS" starttime="20210730 17:43:25.733" endtime="20210730 17:43:25.733"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26281</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:25.739" level="INFO">Running command 'kill 26281 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:25.734" endtime="20210730 17:43:25.740"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.733" endtime="20210730 17:43:25.740"/>
</iter>
<status status="PASS" starttime="20210730 17:43:25.733" endtime="20210730 17:43:25.740"/>
</for>
<status status="PASS" starttime="20210730 17:43:25.733" endtime="20210730 17:43:25.740"/>
</branch>
<status status="PASS" starttime="20210730 17:43:25.733" endtime="20210730 17:43:25.740"/>
</if>
<status status="PASS" starttime="20210730 17:43:25.717" endtime="20210730 17:43:25.740"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:25.741" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:25.741" endtime="20210730 17:43:25.742"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:25.742" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:25.742" endtime="20210730 17:43:25.742"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:25.743" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:25.742" endtime="20210730 17:43:25.743"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:25.743" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:25.743" endtime="20210730 17:43:25.743"/>
</kw>
<msg timestamp="20210730 17:43:25.743" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:25.742" endtime="20210730 17:43:25.743"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:25.749" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:25.743" endtime="20210730 17:43:25.760"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.740" endtime="20210730 17:43:25.761"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:25.762" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:25.762" endtime="20210730 17:43:25.767"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:27.268" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:25.767" endtime="20210730 17:43:27.268"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.761" endtime="20210730 17:43:27.269"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:27.270" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:27.270" endtime="20210730 17:43:27.270"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:27.270" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:27.270" endtime="20210730 17:43:27.270"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:27.271" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:27.270" endtime="20210730 17:43:27.271"/>
</kw>
<msg timestamp="20210730 17:43:27.271" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:27.269" endtime="20210730 17:43:27.271"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:27.271" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:27.271" endtime="20210730 17:43:27.271"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.269" endtime="20210730 17:43:27.272"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:27.272" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:27.272" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:27.272" endtime="20210730 17:43:27.272"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.272" endtime="20210730 17:43:27.272"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:27.273" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:27.273" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:27.273" endtime="20210730 17:43:27.273"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:27.274" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:27.273" endtime="20210730 17:43:27.274"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:27.274" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:27.274" endtime="20210730 17:43:27.274"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:27.274" endtime="20210730 17:43:27.275"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:27.275" endtime="20210730 17:43:27.275"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.274" endtime="20210730 17:43:27.275"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:27.276" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:27.276" endtime="20210730 17:43:27.276"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:27.276" endtime="20210730 17:43:27.277"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:27.277" endtime="20210730 17:43:27.277"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.275" endtime="20210730 17:43:27.277"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:27.277" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:27.277" endtime="20210730 17:43:27.277"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:27.278" endtime="20210730 17:43:27.278"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:27.278" endtime="20210730 17:43:27.278"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.277" endtime="20210730 17:43:27.278"/>
</iter>
<status status="PASS" starttime="20210730 17:43:27.274" endtime="20210730 17:43:27.279"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:27.279" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:27.279" endtime="20210730 17:43:27.279"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.273" endtime="20210730 17:43:27.279"/>
</kw>
<status status="PASS" starttime="20210730 17:43:25.717" endtime="20210730 17:43:27.279"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:27.282" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:27.280" endtime="20210730 17:43:27.282"/>
</kw>
<msg timestamp="20210730 17:43:27.282" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:27.279" endtime="20210730 17:43:27.282"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>2 characters last name with two words</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:27.283" endtime="20210730 17:43:27.283"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.283" endtime="20210730 17:43:27.283"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:27.285" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:27.284" endtime="20210730 17:43:27.285"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:27.285" level="INFO">${payload} = {'lastname': 'Wi Xi'}</msg>
<status status="PASS" starttime="20210730 17:43:27.285" endtime="20210730 17:43:27.285"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:27.294" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:27.294" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:27.286" endtime="20210730 17:43:27.294"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:27.294" endtime="20210730 17:43:27.294"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:27.294" endtime="20210730 17:43:27.294"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:27.285" endtime="20210730 17:43:27.295"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:27.285" endtime="20210730 17:43:27.295"/>
</for>
<status status="FAIL" starttime="20210730 17:43:27.284" endtime="20210730 17:43:27.295"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:27.284" endtime="20210730 17:43:27.295"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:27.284" endtime="20210730 17:43:27.295"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:27.299" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:27.308" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:27.308" level="INFO">${pids} = 26304
26311
26313</msg>
<status status="PASS" starttime="20210730 17:43:27.296" endtime="20210730 17:43:27.309"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:27.309" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:27.309" endtime="20210730 17:43:27.310"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:27.310" level="INFO">${pids} = ['26304', '26311', '26313']</msg>
<status status="PASS" starttime="20210730 17:43:27.310" endtime="20210730 17:43:27.310"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26304</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:27.316" level="INFO">Running command 'kill 26304 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:27.311" endtime="20210730 17:43:27.316"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.310" endtime="20210730 17:43:27.316"/>
</iter>
<iter>
<var name="${pid}">26311</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:27.320" level="INFO">Running command 'kill 26311 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:27.317" endtime="20210730 17:43:27.320"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.316" endtime="20210730 17:43:27.320"/>
</iter>
<iter>
<var name="${pid}">26313</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:27.324" level="INFO">Running command 'kill 26313 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:27.321" endtime="20210730 17:43:27.325"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.320" endtime="20210730 17:43:27.325"/>
</iter>
<status status="PASS" starttime="20210730 17:43:27.310" endtime="20210730 17:43:27.325"/>
</for>
<status status="PASS" starttime="20210730 17:43:27.310" endtime="20210730 17:43:27.325"/>
</branch>
<status status="PASS" starttime="20210730 17:43:27.310" endtime="20210730 17:43:27.325"/>
</if>
<status status="PASS" starttime="20210730 17:43:27.295" endtime="20210730 17:43:27.325"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi Xi'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:25.716" endtime="20210730 17:43:27.326">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t116" name="With Each Valid Token, Updating Last Name Of Each System User With W Xi Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:27.331" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:27.342" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:27.342" level="INFO">${pids} = 26342</msg>
<status status="PASS" starttime="20210730 17:43:27.328" endtime="20210730 17:43:27.342"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:27.343" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:27.343" endtime="20210730 17:43:27.343"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:27.344" level="INFO">${pids} = ['26342']</msg>
<status status="PASS" starttime="20210730 17:43:27.344" endtime="20210730 17:43:27.344"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26342</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:27.351" level="INFO">Running command 'kill 26342 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:27.344" endtime="20210730 17:43:27.352"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.344" endtime="20210730 17:43:27.352"/>
</iter>
<status status="PASS" starttime="20210730 17:43:27.344" endtime="20210730 17:43:27.352"/>
</for>
<status status="PASS" starttime="20210730 17:43:27.344" endtime="20210730 17:43:27.352"/>
</branch>
<status status="PASS" starttime="20210730 17:43:27.343" endtime="20210730 17:43:27.352"/>
</if>
<status status="PASS" starttime="20210730 17:43:27.327" endtime="20210730 17:43:27.352"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:27.353" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:27.353" endtime="20210730 17:43:27.353"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:27.354" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:27.354" endtime="20210730 17:43:27.354"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:27.354" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:27.354" endtime="20210730 17:43:27.354"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:27.354" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:27.354" endtime="20210730 17:43:27.355"/>
</kw>
<msg timestamp="20210730 17:43:27.355" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:27.353" endtime="20210730 17:43:27.355"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:27.370" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:27.355" endtime="20210730 17:43:27.373"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.352" endtime="20210730 17:43:27.373"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:27.374" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:27.374" endtime="20210730 17:43:27.379"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:28.893" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:27.380" endtime="20210730 17:43:28.894"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.373" endtime="20210730 17:43:28.894"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:28.896" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:28.895" endtime="20210730 17:43:28.896"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:28.896" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:28.896" endtime="20210730 17:43:28.896"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:28.897" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:28.896" endtime="20210730 17:43:28.897"/>
</kw>
<msg timestamp="20210730 17:43:28.897" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:28.895" endtime="20210730 17:43:28.897"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:28.898" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:28.897" endtime="20210730 17:43:28.898"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.895" endtime="20210730 17:43:28.898"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:28.899" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:28.899" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:28.898" endtime="20210730 17:43:28.899"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.898" endtime="20210730 17:43:28.899"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:28.899" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:28.899" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:28.899" endtime="20210730 17:43:28.899"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:28.900" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:28.900" endtime="20210730 17:43:28.900"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:28.900" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:28.900" endtime="20210730 17:43:28.900"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:28.900" endtime="20210730 17:43:28.901"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:28.901" endtime="20210730 17:43:28.902"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.900" endtime="20210730 17:43:28.902"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:28.902" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:28.902" endtime="20210730 17:43:28.902"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:28.902" endtime="20210730 17:43:28.903"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:28.903" endtime="20210730 17:43:28.903"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.902" endtime="20210730 17:43:28.903"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:28.903" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:28.903" endtime="20210730 17:43:28.903"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:28.903" endtime="20210730 17:43:28.904"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:28.904" endtime="20210730 17:43:28.904"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.903" endtime="20210730 17:43:28.904"/>
</iter>
<status status="PASS" starttime="20210730 17:43:28.900" endtime="20210730 17:43:28.904"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:28.905" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:28.905" endtime="20210730 17:43:28.905"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.899" endtime="20210730 17:43:28.905"/>
</kw>
<status status="PASS" starttime="20210730 17:43:27.327" endtime="20210730 17:43:28.905"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:28.908" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:28.906" endtime="20210730 17:43:28.908"/>
</kw>
<msg timestamp="20210730 17:43:28.908" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:28.905" endtime="20210730 17:43:28.908"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The first last name is invalid with only 1 letter, the second last name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:28.909" endtime="20210730 17:43:28.909"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.908" endtime="20210730 17:43:28.909"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:28.910" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:28.910" endtime="20210730 17:43:28.911"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:28.911" level="INFO">${payload} = {'lastname': 'W Xi'}</msg>
<status status="PASS" starttime="20210730 17:43:28.911" endtime="20210730 17:43:28.911"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:28.921" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:28.921" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:28.911" endtime="20210730 17:43:28.921"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:28.922" endtime="20210730 17:43:28.922"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:28.922" endtime="20210730 17:43:28.922"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:28.911" endtime="20210730 17:43:28.922"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:28.911" endtime="20210730 17:43:28.922"/>
</for>
<status status="FAIL" starttime="20210730 17:43:28.910" endtime="20210730 17:43:28.922"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:28.910" endtime="20210730 17:43:28.922"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:28.909" endtime="20210730 17:43:28.922"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:28.926" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:28.939" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:28.939" level="INFO">${pids} = 26365
26372
26374</msg>
<status status="PASS" starttime="20210730 17:43:28.923" endtime="20210730 17:43:28.939"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:28.940" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:28.940" endtime="20210730 17:43:28.940"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:28.941" level="INFO">${pids} = ['26365', '26372', '26374']</msg>
<status status="PASS" starttime="20210730 17:43:28.940" endtime="20210730 17:43:28.941"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26365</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:28.944" level="INFO">Running command 'kill 26365 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:28.941" endtime="20210730 17:43:28.945"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.941" endtime="20210730 17:43:28.945"/>
</iter>
<iter>
<var name="${pid}">26372</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:28.949" level="INFO">Running command 'kill 26372 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:28.945" endtime="20210730 17:43:28.949"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.945" endtime="20210730 17:43:28.949"/>
</iter>
<iter>
<var name="${pid}">26374</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:28.955" level="INFO">Running command 'kill 26374 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:28.951" endtime="20210730 17:43:28.956"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.951" endtime="20210730 17:43:28.956"/>
</iter>
<status status="PASS" starttime="20210730 17:43:28.941" endtime="20210730 17:43:28.956"/>
</for>
<status status="PASS" starttime="20210730 17:43:28.940" endtime="20210730 17:43:28.956"/>
</branch>
<status status="PASS" starttime="20210730 17:43:28.940" endtime="20210730 17:43:28.956"/>
</if>
<status status="PASS" starttime="20210730 17:43:28.922" endtime="20210730 17:43:28.956"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'W Xi'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:27.326" endtime="20210730 17:43:28.957">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t117" name="With Each Valid Token, Updating Last Name Of Each System User With Wi X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:28.962" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:28.975" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:28.975" level="INFO">${pids} = 26403</msg>
<status status="PASS" starttime="20210730 17:43:28.958" endtime="20210730 17:43:28.975"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:28.976" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:28.975" endtime="20210730 17:43:28.976"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:28.977" level="INFO">${pids} = ['26403']</msg>
<status status="PASS" starttime="20210730 17:43:28.976" endtime="20210730 17:43:28.977"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26403</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:28.981" level="INFO">Running command 'kill 26403 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:28.977" endtime="20210730 17:43:28.981"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.977" endtime="20210730 17:43:28.981"/>
</iter>
<status status="PASS" starttime="20210730 17:43:28.977" endtime="20210730 17:43:28.981"/>
</for>
<status status="PASS" starttime="20210730 17:43:28.976" endtime="20210730 17:43:28.981"/>
</branch>
<status status="PASS" starttime="20210730 17:43:28.976" endtime="20210730 17:43:28.981"/>
</if>
<status status="PASS" starttime="20210730 17:43:28.958" endtime="20210730 17:43:28.981"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:28.982" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:28.982" endtime="20210730 17:43:28.982"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:28.983" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:28.983" endtime="20210730 17:43:28.983"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:28.983" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:28.983" endtime="20210730 17:43:28.983"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:28.984" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:28.983" endtime="20210730 17:43:28.984"/>
</kw>
<msg timestamp="20210730 17:43:28.984" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:28.982" endtime="20210730 17:43:28.984"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:28.999" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:28.984" endtime="20210730 17:43:29.002"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.982" endtime="20210730 17:43:29.002"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:29.004" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:29.003" endtime="20210730 17:43:29.008"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:30.509" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:29.008" endtime="20210730 17:43:30.509"/>
</kw>
<status status="PASS" starttime="20210730 17:43:29.003" endtime="20210730 17:43:30.510"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:30.511" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:30.511" endtime="20210730 17:43:30.511"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:30.512" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:30.512" endtime="20210730 17:43:30.512"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:30.512" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:30.512" endtime="20210730 17:43:30.512"/>
</kw>
<msg timestamp="20210730 17:43:30.513" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:30.510" endtime="20210730 17:43:30.513"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:30.513" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:30.513" endtime="20210730 17:43:30.513"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.510" endtime="20210730 17:43:30.514"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:30.514" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:30.514" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:30.514" endtime="20210730 17:43:30.515"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.514" endtime="20210730 17:43:30.515"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:30.515" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:30.516" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:30.515" endtime="20210730 17:43:30.516"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:30.516" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:30.516" endtime="20210730 17:43:30.516"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:30.517" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:30.516" endtime="20210730 17:43:30.517"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:30.517" endtime="20210730 17:43:30.517"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:30.518" endtime="20210730 17:43:30.518"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.516" endtime="20210730 17:43:30.518"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:30.518" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:30.518" endtime="20210730 17:43:30.518"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:30.518" endtime="20210730 17:43:30.519"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:30.519" endtime="20210730 17:43:30.520"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.518" endtime="20210730 17:43:30.520"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:30.520" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:30.520" endtime="20210730 17:43:30.520"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:30.521" endtime="20210730 17:43:30.522"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:30.522" endtime="20210730 17:43:30.523"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.520" endtime="20210730 17:43:30.523"/>
</iter>
<status status="PASS" starttime="20210730 17:43:30.516" endtime="20210730 17:43:30.523"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:30.523" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:30.523" endtime="20210730 17:43:30.523"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.515" endtime="20210730 17:43:30.524"/>
</kw>
<status status="PASS" starttime="20210730 17:43:28.958" endtime="20210730 17:43:30.524"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:30.528" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:30.524" endtime="20210730 17:43:30.528"/>
</kw>
<msg timestamp="20210730 17:43:30.528" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:30.524" endtime="20210730 17:43:30.528"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The second last name is invalid with only 1 letter, the first last name is valid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:30.529" endtime="20210730 17:43:30.529"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.528" endtime="20210730 17:43:30.529"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:30.531" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:30.530" endtime="20210730 17:43:30.531"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:30.531" level="INFO">${payload} = {'lastname': 'Wi X'}</msg>
<status status="PASS" starttime="20210730 17:43:30.531" endtime="20210730 17:43:30.531"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:30.540" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:30.540" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:30.531" endtime="20210730 17:43:30.541"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:30.541" endtime="20210730 17:43:30.541"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:30.541" endtime="20210730 17:43:30.541"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:30.531" endtime="20210730 17:43:30.541"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:30.531" endtime="20210730 17:43:30.541"/>
</for>
<status status="FAIL" starttime="20210730 17:43:30.530" endtime="20210730 17:43:30.541"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:30.530" endtime="20210730 17:43:30.541"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:30.529" endtime="20210730 17:43:30.541"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:30.545" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:30.559" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:30.559" level="INFO">${pids} = 26426
26433
26435</msg>
<status status="PASS" starttime="20210730 17:43:30.542" endtime="20210730 17:43:30.559"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:30.561" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:30.560" endtime="20210730 17:43:30.561"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:30.562" level="INFO">${pids} = ['26426', '26433', '26435']</msg>
<status status="PASS" starttime="20210730 17:43:30.562" endtime="20210730 17:43:30.562"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26426</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:30.566" level="INFO">Running command 'kill 26426 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:30.562" endtime="20210730 17:43:30.567"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.562" endtime="20210730 17:43:30.567"/>
</iter>
<iter>
<var name="${pid}">26433</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:30.572" level="INFO">Running command 'kill 26433 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:30.567" endtime="20210730 17:43:30.573"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.567" endtime="20210730 17:43:30.573"/>
</iter>
<iter>
<var name="${pid}">26435</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:30.577" level="INFO">Running command 'kill 26435 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:30.573" endtime="20210730 17:43:30.578"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.573" endtime="20210730 17:43:30.578"/>
</iter>
<status status="PASS" starttime="20210730 17:43:30.562" endtime="20210730 17:43:30.578"/>
</for>
<status status="PASS" starttime="20210730 17:43:30.561" endtime="20210730 17:43:30.578"/>
</branch>
<status status="PASS" starttime="20210730 17:43:30.561" endtime="20210730 17:43:30.578"/>
</if>
<status status="PASS" starttime="20210730 17:43:30.542" endtime="20210730 17:43:30.579"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Wi X'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:28.957" endtime="20210730 17:43:30.579">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t118" name="With Each Valid Token, Updating Last Name Of Each System User With W X Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:30.586" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:30.598" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:30.599" level="INFO">${pids} = 26464</msg>
<status status="PASS" starttime="20210730 17:43:30.581" endtime="20210730 17:43:30.599"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:30.600" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:30.599" endtime="20210730 17:43:30.600"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:30.600" level="INFO">${pids} = ['26464']</msg>
<status status="PASS" starttime="20210730 17:43:30.600" endtime="20210730 17:43:30.600"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26464</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:30.606" level="INFO">Running command 'kill 26464 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:30.601" endtime="20210730 17:43:30.619"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.600" endtime="20210730 17:43:30.619"/>
</iter>
<status status="PASS" starttime="20210730 17:43:30.600" endtime="20210730 17:43:30.619"/>
</for>
<status status="PASS" starttime="20210730 17:43:30.600" endtime="20210730 17:43:30.619"/>
</branch>
<status status="PASS" starttime="20210730 17:43:30.600" endtime="20210730 17:43:30.619"/>
</if>
<status status="PASS" starttime="20210730 17:43:30.581" endtime="20210730 17:43:30.620"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:30.621" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:30.621" endtime="20210730 17:43:30.621"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:30.623" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:30.622" endtime="20210730 17:43:30.623"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:30.624" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:30.623" endtime="20210730 17:43:30.624"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:30.624" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:30.624" endtime="20210730 17:43:30.624"/>
</kw>
<msg timestamp="20210730 17:43:30.625" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:30.621" endtime="20210730 17:43:30.625"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:30.632" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:30.625" endtime="20210730 17:43:30.634"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.620" endtime="20210730 17:43:30.635"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:30.636" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:30.635" endtime="20210730 17:43:30.640"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:32.142" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:30.640" endtime="20210730 17:43:32.142"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.635" endtime="20210730 17:43:32.143"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:32.144" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:32.144" endtime="20210730 17:43:32.144"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:32.144" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:32.144" endtime="20210730 17:43:32.144"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:32.145" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:32.144" endtime="20210730 17:43:32.145"/>
</kw>
<msg timestamp="20210730 17:43:32.145" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:32.143" endtime="20210730 17:43:32.145"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:32.145" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:32.145" endtime="20210730 17:43:32.146"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.143" endtime="20210730 17:43:32.146"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:32.147" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:32.147" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:32.146" endtime="20210730 17:43:32.147"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.146" endtime="20210730 17:43:32.147"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:32.147" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:32.147" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:32.147" endtime="20210730 17:43:32.148"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:32.148" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:32.148" endtime="20210730 17:43:32.148"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:32.148" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:32.148" endtime="20210730 17:43:32.148"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:32.148" endtime="20210730 17:43:32.149"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:32.149" endtime="20210730 17:43:32.150"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.148" endtime="20210730 17:43:32.150"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:32.150" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:32.150" endtime="20210730 17:43:32.150"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:32.150" endtime="20210730 17:43:32.151"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:32.151" endtime="20210730 17:43:32.151"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.150" endtime="20210730 17:43:32.151"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:32.151" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:32.151" endtime="20210730 17:43:32.151"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:32.152" endtime="20210730 17:43:32.152"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:32.152" endtime="20210730 17:43:32.152"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.151" endtime="20210730 17:43:32.153"/>
</iter>
<status status="PASS" starttime="20210730 17:43:32.148" endtime="20210730 17:43:32.153"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:32.153" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:32.153" endtime="20210730 17:43:32.153"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.147" endtime="20210730 17:43:32.153"/>
</kw>
<status status="PASS" starttime="20210730 17:43:30.580" endtime="20210730 17:43:32.153"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:32.156" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:32.154" endtime="20210730 17:43:32.156"/>
</kw>
<msg timestamp="20210730 17:43:32.156" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:32.154" endtime="20210730 17:43:32.156"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>The both last names are invalid because they only have 1 letter</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:32.157" endtime="20210730 17:43:32.157"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.157" endtime="20210730 17:43:32.157"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:32.159" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:32.158" endtime="20210730 17:43:32.159"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:32.159" level="INFO">${payload} = {'lastname': 'W X'}</msg>
<status status="PASS" starttime="20210730 17:43:32.159" endtime="20210730 17:43:32.159"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:32.168" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:32.168" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:32.159" endtime="20210730 17:43:32.168"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:32.168" endtime="20210730 17:43:32.169"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:32.169" endtime="20210730 17:43:32.169"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:32.159" endtime="20210730 17:43:32.169"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:32.159" endtime="20210730 17:43:32.169"/>
</for>
<status status="FAIL" starttime="20210730 17:43:32.158" endtime="20210730 17:43:32.169"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:32.158" endtime="20210730 17:43:32.169"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:32.157" endtime="20210730 17:43:32.169"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:32.174" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:32.186" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:32.186" level="INFO">${pids} = 26487
26494
26497</msg>
<status status="PASS" starttime="20210730 17:43:32.170" endtime="20210730 17:43:32.186"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:32.187" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:32.187" endtime="20210730 17:43:32.187"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:32.188" level="INFO">${pids} = ['26487', '26494', '26497']</msg>
<status status="PASS" starttime="20210730 17:43:32.188" endtime="20210730 17:43:32.188"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26487</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:32.200" level="INFO">Running command 'kill 26487 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:32.188" endtime="20210730 17:43:32.200"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.188" endtime="20210730 17:43:32.200"/>
</iter>
<iter>
<var name="${pid}">26494</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:32.204" level="INFO">Running command 'kill 26494 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:32.201" endtime="20210730 17:43:32.205"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.201" endtime="20210730 17:43:32.206"/>
</iter>
<iter>
<var name="${pid}">26497</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:32.210" level="INFO">Running command 'kill 26497 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:32.206" endtime="20210730 17:43:32.211"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.206" endtime="20210730 17:43:32.211"/>
</iter>
<status status="PASS" starttime="20210730 17:43:32.188" endtime="20210730 17:43:32.211"/>
</for>
<status status="PASS" starttime="20210730 17:43:32.187" endtime="20210730 17:43:32.211"/>
</branch>
<status status="PASS" starttime="20210730 17:43:32.187" endtime="20210730 17:43:32.211"/>
</if>
<status status="PASS" starttime="20210730 17:43:32.169" endtime="20210730 17:43:32.211"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'W X'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:30.579" endtime="20210730 17:43:32.212">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t119" name="With Each Valid Token, Updating Last Name Of Each System User With Holm123 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:32.217" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:32.228" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:32.228" level="INFO">${pids} = 26526</msg>
<status status="PASS" starttime="20210730 17:43:32.214" endtime="20210730 17:43:32.228"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:32.229" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:32.228" endtime="20210730 17:43:32.229"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:32.230" level="INFO">${pids} = ['26526']</msg>
<status status="PASS" starttime="20210730 17:43:32.229" endtime="20210730 17:43:32.230"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26526</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:32.233" level="INFO">Running command 'kill 26526 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:32.230" endtime="20210730 17:43:32.234"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.230" endtime="20210730 17:43:32.234"/>
</iter>
<status status="PASS" starttime="20210730 17:43:32.230" endtime="20210730 17:43:32.234"/>
</for>
<status status="PASS" starttime="20210730 17:43:32.229" endtime="20210730 17:43:32.234"/>
</branch>
<status status="PASS" starttime="20210730 17:43:32.229" endtime="20210730 17:43:32.234"/>
</if>
<status status="PASS" starttime="20210730 17:43:32.213" endtime="20210730 17:43:32.234"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:32.235" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:32.235" endtime="20210730 17:43:32.235"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:32.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:32.236" endtime="20210730 17:43:32.236"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:32.236" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:32.236" endtime="20210730 17:43:32.236"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:32.237" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:32.237" endtime="20210730 17:43:32.237"/>
</kw>
<msg timestamp="20210730 17:43:32.238" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:32.235" endtime="20210730 17:43:32.238"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:32.247" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:32.238" endtime="20210730 17:43:32.248"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.235" endtime="20210730 17:43:32.248"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:32.249" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:32.249" endtime="20210730 17:43:32.253"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:33.755" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:32.254" endtime="20210730 17:43:33.755"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.249" endtime="20210730 17:43:33.756"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:33.759" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:33.759" endtime="20210730 17:43:33.759"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:33.761" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:33.760" endtime="20210730 17:43:33.761"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:33.762" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:33.762" endtime="20210730 17:43:33.763"/>
</kw>
<msg timestamp="20210730 17:43:33.763" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:33.758" endtime="20210730 17:43:33.763"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:33.764" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:33.763" endtime="20210730 17:43:33.765"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.757" endtime="20210730 17:43:33.765"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:33.767" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:33.767" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:33.766" endtime="20210730 17:43:33.767"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.766" endtime="20210730 17:43:33.767"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:33.768" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:33.769" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:33.768" endtime="20210730 17:43:33.769"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:33.769" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:33.769" endtime="20210730 17:43:33.769"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:33.770" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:33.770" endtime="20210730 17:43:33.770"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:33.771" endtime="20210730 17:43:33.772"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:33.772" endtime="20210730 17:43:33.773"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.770" endtime="20210730 17:43:33.773"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:33.773" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:33.773" endtime="20210730 17:43:33.773"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:33.774" endtime="20210730 17:43:33.775"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:33.775" endtime="20210730 17:43:33.775"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.773" endtime="20210730 17:43:33.775"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:33.776" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:33.775" endtime="20210730 17:43:33.776"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:33.776" endtime="20210730 17:43:33.777"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:33.777" endtime="20210730 17:43:33.777"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.775" endtime="20210730 17:43:33.777"/>
</iter>
<status status="PASS" starttime="20210730 17:43:33.769" endtime="20210730 17:43:33.777"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:33.778" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:33.778" endtime="20210730 17:43:33.778"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.767" endtime="20210730 17:43:33.778"/>
</kw>
<status status="PASS" starttime="20210730 17:43:32.213" endtime="20210730 17:43:33.778"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:33.782" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:33.779" endtime="20210730 17:43:33.782"/>
</kw>
<msg timestamp="20210730 17:43:33.782" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:33.778" endtime="20210730 17:43:33.782"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Last name does contain numbers, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:33.783" endtime="20210730 17:43:33.783"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.782" endtime="20210730 17:43:33.783"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:33.784" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:33.784" endtime="20210730 17:43:33.785"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:33.785" level="INFO">${payload} = {'lastname': 'Holm123'}</msg>
<status status="PASS" starttime="20210730 17:43:33.785" endtime="20210730 17:43:33.785"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:33.797" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:33.797" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:33.786" endtime="20210730 17:43:33.798"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:33.798" endtime="20210730 17:43:33.798"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:33.798" endtime="20210730 17:43:33.798"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:33.785" endtime="20210730 17:43:33.798"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:33.785" endtime="20210730 17:43:33.798"/>
</for>
<status status="FAIL" starttime="20210730 17:43:33.784" endtime="20210730 17:43:33.798"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:33.783" endtime="20210730 17:43:33.798"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:33.783" endtime="20210730 17:43:33.798"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:33.803" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:33.817" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:33.817" level="INFO">${pids} = 26549
26556
26558</msg>
<status status="PASS" starttime="20210730 17:43:33.799" endtime="20210730 17:43:33.817"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:33.818" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:33.817" endtime="20210730 17:43:33.818"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:33.819" level="INFO">${pids} = ['26549', '26556', '26558']</msg>
<status status="PASS" starttime="20210730 17:43:33.818" endtime="20210730 17:43:33.819"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26549</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:33.823" level="INFO">Running command 'kill 26549 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:33.819" endtime="20210730 17:43:33.824"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.819" endtime="20210730 17:43:33.824"/>
</iter>
<iter>
<var name="${pid}">26556</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:33.828" level="INFO">Running command 'kill 26556 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:33.824" endtime="20210730 17:43:33.830"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.824" endtime="20210730 17:43:33.830"/>
</iter>
<iter>
<var name="${pid}">26558</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:33.833" level="INFO">Running command 'kill 26558 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:33.830" endtime="20210730 17:43:33.834"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.830" endtime="20210730 17:43:33.834"/>
</iter>
<status status="PASS" starttime="20210730 17:43:33.819" endtime="20210730 17:43:33.834"/>
</for>
<status status="PASS" starttime="20210730 17:43:33.818" endtime="20210730 17:43:33.834"/>
</branch>
<status status="PASS" starttime="20210730 17:43:33.818" endtime="20210730 17:43:33.834"/>
</if>
<status status="PASS" starttime="20210730 17:43:33.799" endtime="20210730 17:43:33.834"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm123'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:32.212" endtime="20210730 17:43:33.835">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t120" name="With Each Valid Token, Updating Last Name Of Each System User With Holm!.? Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:33.848" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:33.875" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:33.875" level="INFO">${pids} = 26587</msg>
<status status="PASS" starttime="20210730 17:43:33.837" endtime="20210730 17:43:33.875"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:33.876" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:33.875" endtime="20210730 17:43:33.876"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:33.877" level="INFO">${pids} = ['26587']</msg>
<status status="PASS" starttime="20210730 17:43:33.876" endtime="20210730 17:43:33.877"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26587</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:33.881" level="INFO">Running command 'kill 26587 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:33.878" endtime="20210730 17:43:33.882"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.877" endtime="20210730 17:43:33.882"/>
</iter>
<status status="PASS" starttime="20210730 17:43:33.877" endtime="20210730 17:43:33.882"/>
</for>
<status status="PASS" starttime="20210730 17:43:33.876" endtime="20210730 17:43:33.882"/>
</branch>
<status status="PASS" starttime="20210730 17:43:33.876" endtime="20210730 17:43:33.882"/>
</if>
<status status="PASS" starttime="20210730 17:43:33.837" endtime="20210730 17:43:33.882"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:33.883" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:33.883" endtime="20210730 17:43:33.883"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:33.884" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:33.883" endtime="20210730 17:43:33.884"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:33.884" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:33.884" endtime="20210730 17:43:33.884"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:33.884" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:33.884" endtime="20210730 17:43:33.884"/>
</kw>
<msg timestamp="20210730 17:43:33.885" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:33.883" endtime="20210730 17:43:33.885"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:33.888" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:33.885" endtime="20210730 17:43:33.889"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.882" endtime="20210730 17:43:33.889"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:33.890" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:33.890" endtime="20210730 17:43:33.896"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:35.397" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:33.896" endtime="20210730 17:43:35.397"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.889" endtime="20210730 17:43:35.397"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:35.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:35.398" endtime="20210730 17:43:35.399"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:35.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:35.399" endtime="20210730 17:43:35.399"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:35.399" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:35.399" endtime="20210730 17:43:35.399"/>
</kw>
<msg timestamp="20210730 17:43:35.400" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:35.398" endtime="20210730 17:43:35.400"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:35.400" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:35.400" endtime="20210730 17:43:35.400"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.398" endtime="20210730 17:43:35.400"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:35.401" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:35.401" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:35.401" endtime="20210730 17:43:35.401"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.401" endtime="20210730 17:43:35.401"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:35.402" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:35.402" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:35.402" endtime="20210730 17:43:35.402"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:35.402" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:35.402" endtime="20210730 17:43:35.402"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:35.403" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:35.403" endtime="20210730 17:43:35.403"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:35.403" endtime="20210730 17:43:35.404"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:35.404" endtime="20210730 17:43:35.404"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.402" endtime="20210730 17:43:35.404"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:35.405" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:35.404" endtime="20210730 17:43:35.405"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:35.405" endtime="20210730 17:43:35.406"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:35.406" endtime="20210730 17:43:35.406"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.404" endtime="20210730 17:43:35.406"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:35.406" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:35.406" endtime="20210730 17:43:35.406"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:35.406" endtime="20210730 17:43:35.407"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:35.407" endtime="20210730 17:43:35.407"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.406" endtime="20210730 17:43:35.407"/>
</iter>
<status status="PASS" starttime="20210730 17:43:35.402" endtime="20210730 17:43:35.407"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:35.408" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:35.407" endtime="20210730 17:43:35.408"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.401" endtime="20210730 17:43:35.408"/>
</kw>
<status status="PASS" starttime="20210730 17:43:33.836" endtime="20210730 17:43:35.408"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:35.411" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:35.408" endtime="20210730 17:43:35.411"/>
</kw>
<msg timestamp="20210730 17:43:35.411" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:35.408" endtime="20210730 17:43:35.411"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Last name does contain non alphanumeric characters, which makes it invalid</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:35.412" endtime="20210730 17:43:35.412"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.411" endtime="20210730 17:43:35.412"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:35.413" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:35.413" endtime="20210730 17:43:35.413"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:35.414" level="INFO">${payload} = {'lastname': 'Holm!.?'}</msg>
<status status="PASS" starttime="20210730 17:43:35.414" endtime="20210730 17:43:35.414"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:35.422" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:35.423" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:35.414" endtime="20210730 17:43:35.423"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:35.423" endtime="20210730 17:43:35.423"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:35.423" endtime="20210730 17:43:35.423"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:35.414" endtime="20210730 17:43:35.423"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:35.414" endtime="20210730 17:43:35.423"/>
</for>
<status status="FAIL" starttime="20210730 17:43:35.413" endtime="20210730 17:43:35.423"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:35.413" endtime="20210730 17:43:35.424"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:35.412" endtime="20210730 17:43:35.424"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:35.429" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:35.440" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:35.440" level="INFO">${pids} = 26610
26617
26619</msg>
<status status="PASS" starttime="20210730 17:43:35.425" endtime="20210730 17:43:35.441"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:35.442" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:35.441" endtime="20210730 17:43:35.442"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:35.442" level="INFO">${pids} = ['26610', '26617', '26619']</msg>
<status status="PASS" starttime="20210730 17:43:35.442" endtime="20210730 17:43:35.442"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26610</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:35.447" level="INFO">Running command 'kill 26610 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:35.443" endtime="20210730 17:43:35.447"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.442" endtime="20210730 17:43:35.447"/>
</iter>
<iter>
<var name="${pid}">26617</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:35.451" level="INFO">Running command 'kill 26617 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:35.448" endtime="20210730 17:43:35.451"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.448" endtime="20210730 17:43:35.451"/>
</iter>
<iter>
<var name="${pid}">26619</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:35.455" level="INFO">Running command 'kill 26619 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:35.452" endtime="20210730 17:43:35.455"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.451" endtime="20210730 17:43:35.455"/>
</iter>
<status status="PASS" starttime="20210730 17:43:35.442" endtime="20210730 17:43:35.455"/>
</for>
<status status="PASS" starttime="20210730 17:43:35.442" endtime="20210730 17:43:35.455"/>
</branch>
<status status="PASS" starttime="20210730 17:43:35.442" endtime="20210730 17:43:35.455"/>
</if>
<status status="PASS" starttime="20210730 17:43:35.424" endtime="20210730 17:43:35.456"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm!.?'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:33.835" endtime="20210730 17:43:35.456">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t121" name="With Each Valid Token, Updating Last Name Of Each System User With Holm Cuzdan Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:35.461" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:35.476" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:35.476" level="INFO">${pids} = 26648</msg>
<status status="PASS" starttime="20210730 17:43:35.458" endtime="20210730 17:43:35.476"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:35.477" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:35.477" endtime="20210730 17:43:35.477"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:35.479" level="INFO">${pids} = ['26648']</msg>
<status status="PASS" starttime="20210730 17:43:35.478" endtime="20210730 17:43:35.479"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26648</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:35.482" level="INFO">Running command 'kill 26648 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:35.479" endtime="20210730 17:43:35.483"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.479" endtime="20210730 17:43:35.483"/>
</iter>
<status status="PASS" starttime="20210730 17:43:35.479" endtime="20210730 17:43:35.483"/>
</for>
<status status="PASS" starttime="20210730 17:43:35.478" endtime="20210730 17:43:35.483"/>
</branch>
<status status="PASS" starttime="20210730 17:43:35.477" endtime="20210730 17:43:35.483"/>
</if>
<status status="PASS" starttime="20210730 17:43:35.457" endtime="20210730 17:43:35.483"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:35.484" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:35.484" endtime="20210730 17:43:35.484"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:35.484" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:35.484" endtime="20210730 17:43:35.484"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:35.485" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:35.484" endtime="20210730 17:43:35.485"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:35.485" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:35.485" endtime="20210730 17:43:35.485"/>
</kw>
<msg timestamp="20210730 17:43:35.485" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:35.484" endtime="20210730 17:43:35.485"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:35.491" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:35.485" endtime="20210730 17:43:35.504"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.483" endtime="20210730 17:43:35.504"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:35.506" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:35.505" endtime="20210730 17:43:35.513"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:37.014" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:35.513" endtime="20210730 17:43:37.015"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.505" endtime="20210730 17:43:37.015"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:37.016" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:37.016" endtime="20210730 17:43:37.016"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:37.017" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:37.016" endtime="20210730 17:43:37.017"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:37.017" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:37.017" endtime="20210730 17:43:37.017"/>
</kw>
<msg timestamp="20210730 17:43:37.017" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:37.016" endtime="20210730 17:43:37.017"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:37.018" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:37.017" endtime="20210730 17:43:37.018"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.015" endtime="20210730 17:43:37.018"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:37.019" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:37.019" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:37.019" endtime="20210730 17:43:37.019"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.018" endtime="20210730 17:43:37.019"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:37.020" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:37.020" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:37.019" endtime="20210730 17:43:37.020"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:37.020" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:37.020" endtime="20210730 17:43:37.020"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:37.021" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:37.020" endtime="20210730 17:43:37.021"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:37.021" endtime="20210730 17:43:37.021"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:37.022" endtime="20210730 17:43:37.022"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.020" endtime="20210730 17:43:37.022"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:37.022" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:37.022" endtime="20210730 17:43:37.022"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:37.022" endtime="20210730 17:43:37.023"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:37.023" endtime="20210730 17:43:37.023"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.022" endtime="20210730 17:43:37.023"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:37.024" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:37.024" endtime="20210730 17:43:37.024"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:37.024" endtime="20210730 17:43:37.024"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:37.025" endtime="20210730 17:43:37.025"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.023" endtime="20210730 17:43:37.025"/>
</iter>
<status status="PASS" starttime="20210730 17:43:37.020" endtime="20210730 17:43:37.025"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:37.025" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:37.025" endtime="20210730 17:43:37.025"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.019" endtime="20210730 17:43:37.025"/>
</kw>
<status status="PASS" starttime="20210730 17:43:35.457" endtime="20210730 17:43:37.025"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:37.028" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:37.026" endtime="20210730 17:43:37.028"/>
</kw>
<msg timestamp="20210730 17:43:37.029" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:37.026" endtime="20210730 17:43:37.029"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Two valid last names seperated by a single space character</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:37.029" endtime="20210730 17:43:37.030"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.029" endtime="20210730 17:43:37.030"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:37.031" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:37.031" endtime="20210730 17:43:37.031"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:37.031" level="INFO">${payload} = {'lastname': 'Holm Cuzdan'}</msg>
<status status="PASS" starttime="20210730 17:43:37.031" endtime="20210730 17:43:37.031"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:37.040" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:37.041" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:37.032" endtime="20210730 17:43:37.041"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:37.041" endtime="20210730 17:43:37.041"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:37.041" endtime="20210730 17:43:37.041"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:37.031" endtime="20210730 17:43:37.041"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:37.031" endtime="20210730 17:43:37.041"/>
</for>
<status status="FAIL" starttime="20210730 17:43:37.030" endtime="20210730 17:43:37.041"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:37.030" endtime="20210730 17:43:37.041"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:37.030" endtime="20210730 17:43:37.041"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:37.046" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:37.058" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:37.058" level="INFO">${pids} = 26671
26678
26684</msg>
<status status="PASS" starttime="20210730 17:43:37.042" endtime="20210730 17:43:37.058"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:37.059" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:37.059" endtime="20210730 17:43:37.059"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:37.060" level="INFO">${pids} = ['26671', '26678', '26684']</msg>
<status status="PASS" starttime="20210730 17:43:37.060" endtime="20210730 17:43:37.060"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26671</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:37.064" level="INFO">Running command 'kill 26671 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:37.060" endtime="20210730 17:43:37.064"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.060" endtime="20210730 17:43:37.064"/>
</iter>
<iter>
<var name="${pid}">26678</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:37.067" level="INFO">Running command 'kill 26678 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:37.064" endtime="20210730 17:43:37.069"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.064" endtime="20210730 17:43:37.070"/>
</iter>
<iter>
<var name="${pid}">26684</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:37.073" level="INFO">Running command 'kill 26684 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:37.070" endtime="20210730 17:43:37.073"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.070" endtime="20210730 17:43:37.074"/>
</iter>
<status status="PASS" starttime="20210730 17:43:37.060" endtime="20210730 17:43:37.074"/>
</for>
<status status="PASS" starttime="20210730 17:43:37.060" endtime="20210730 17:43:37.074"/>
</branch>
<status status="PASS" starttime="20210730 17:43:37.059" endtime="20210730 17:43:37.074"/>
</if>
<status status="PASS" starttime="20210730 17:43:37.042" endtime="20210730 17:43:37.074"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm Cuzdan'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:35.456" endtime="20210730 17:43:37.074">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t122" name="With Each Valid Token, Updating Last Name Of Each System User With Holm      Cuzdan Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:37.080" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:37.097" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:37.097" level="INFO">${pids} = 26713</msg>
<status status="PASS" starttime="20210730 17:43:37.076" endtime="20210730 17:43:37.097"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:37.098" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:37.098" endtime="20210730 17:43:37.098"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:37.099" level="INFO">${pids} = ['26713']</msg>
<status status="PASS" starttime="20210730 17:43:37.099" endtime="20210730 17:43:37.099"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26713</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:37.120" level="INFO">Running command 'kill 26713 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:37.099" endtime="20210730 17:43:37.120"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.099" endtime="20210730 17:43:37.120"/>
</iter>
<status status="PASS" starttime="20210730 17:43:37.099" endtime="20210730 17:43:37.121"/>
</for>
<status status="PASS" starttime="20210730 17:43:37.098" endtime="20210730 17:43:37.121"/>
</branch>
<status status="PASS" starttime="20210730 17:43:37.098" endtime="20210730 17:43:37.121"/>
</if>
<status status="PASS" starttime="20210730 17:43:37.076" endtime="20210730 17:43:37.121"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:37.122" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:37.122" endtime="20210730 17:43:37.122"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:37.123" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:37.123" endtime="20210730 17:43:37.123"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:37.123" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:37.123" endtime="20210730 17:43:37.123"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:37.124" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:37.123" endtime="20210730 17:43:37.124"/>
</kw>
<msg timestamp="20210730 17:43:37.124" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:37.122" endtime="20210730 17:43:37.124"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:37.127" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:37.124" endtime="20210730 17:43:37.129"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.121" endtime="20210730 17:43:37.130"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:37.131" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:37.131" endtime="20210730 17:43:37.135"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:38.637" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:37.136" endtime="20210730 17:43:38.637"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.130" endtime="20210730 17:43:38.637"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:38.638" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:38.638" endtime="20210730 17:43:38.639"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:38.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:38.639" endtime="20210730 17:43:38.639"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:38.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:38.639" endtime="20210730 17:43:38.639"/>
</kw>
<msg timestamp="20210730 17:43:38.639" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:38.638" endtime="20210730 17:43:38.639"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:38.640" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:38.640" endtime="20210730 17:43:38.640"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.637" endtime="20210730 17:43:38.640"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:38.641" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:38.641" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:38.641" endtime="20210730 17:43:38.641"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.640" endtime="20210730 17:43:38.641"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:38.642" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:38.642" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:38.641" endtime="20210730 17:43:38.642"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:38.642" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:38.642" endtime="20210730 17:43:38.642"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:38.643" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:38.642" endtime="20210730 17:43:38.643"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:38.643" endtime="20210730 17:43:38.643"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:38.643" endtime="20210730 17:43:38.644"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.642" endtime="20210730 17:43:38.644"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:38.644" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:38.644" endtime="20210730 17:43:38.644"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:38.644" endtime="20210730 17:43:38.645"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:38.645" endtime="20210730 17:43:38.645"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.644" endtime="20210730 17:43:38.645"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:38.645" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:38.645" endtime="20210730 17:43:38.645"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:38.646" endtime="20210730 17:43:38.646"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:38.646" endtime="20210730 17:43:38.646"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.645" endtime="20210730 17:43:38.646"/>
</iter>
<status status="PASS" starttime="20210730 17:43:38.642" endtime="20210730 17:43:38.646"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:38.647" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:38.647" endtime="20210730 17:43:38.647"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.641" endtime="20210730 17:43:38.647"/>
</kw>
<status status="PASS" starttime="20210730 17:43:37.076" endtime="20210730 17:43:38.647"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:38.650" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:38.647" endtime="20210730 17:43:38.650"/>
</kw>
<msg timestamp="20210730 17:43:38.650" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:38.647" endtime="20210730 17:43:38.650"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>last_name</arg>
<arg>Two valid last names seperated by many space characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:38.650" endtime="20210730 17:43:38.651"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.650" endtime="20210730 17:43:38.651"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=lastname</arg>
<arg>field_data=${user_data}[last_name]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:38.652" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:38.652" endtime="20210730 17:43:38.652"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:38.652" level="INFO">${payload} = {'lastname': 'Holm      Cuzdan'}</msg>
<status status="PASS" starttime="20210730 17:43:38.652" endtime="20210730 17:43:38.652"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:38.662" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:38.662" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:38.653" endtime="20210730 17:43:38.662"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:38.663" endtime="20210730 17:43:38.663"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:38.663" endtime="20210730 17:43:38.663"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:38.653" endtime="20210730 17:43:38.663"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:38.652" endtime="20210730 17:43:38.663"/>
</for>
<status status="FAIL" starttime="20210730 17:43:38.651" endtime="20210730 17:43:38.663"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:38.651" endtime="20210730 17:43:38.663"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:38.651" endtime="20210730 17:43:38.663"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:38.667" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:38.683" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:38.683" level="INFO">${pids} = 26736
26743
26745</msg>
<status status="PASS" starttime="20210730 17:43:38.664" endtime="20210730 17:43:38.683"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:38.684" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:38.683" endtime="20210730 17:43:38.684"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:38.685" level="INFO">${pids} = ['26736', '26743', '26745']</msg>
<status status="PASS" starttime="20210730 17:43:38.684" endtime="20210730 17:43:38.685"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26736</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:38.688" level="INFO">Running command 'kill 26736 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:38.685" endtime="20210730 17:43:38.689"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.685" endtime="20210730 17:43:38.689"/>
</iter>
<iter>
<var name="${pid}">26743</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:38.693" level="INFO">Running command 'kill 26743 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:38.689" endtime="20210730 17:43:38.696"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.689" endtime="20210730 17:43:38.696"/>
</iter>
<iter>
<var name="${pid}">26745</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:38.700" level="INFO">Running command 'kill 26745 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:38.696" endtime="20210730 17:43:38.700"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.696" endtime="20210730 17:43:38.701"/>
</iter>
<status status="PASS" starttime="20210730 17:43:38.685" endtime="20210730 17:43:38.701"/>
</for>
<status status="PASS" starttime="20210730 17:43:38.684" endtime="20210730 17:43:38.701"/>
</branch>
<status status="PASS" starttime="20210730 17:43:38.684" endtime="20210730 17:43:38.701"/>
</if>
<status status="PASS" starttime="20210730 17:43:38.663" endtime="20210730 17:43:38.701"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
lastname as such:
{
"lastname": 'Holm Cuzdan'
}
Then, each request should fail with the following response body:
{
"message": "Each last name must contain only characters from the set [a-zA-Z]. Last names must be seperated by a a single space. Last names must have at least 2 characters",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:37.075" endtime="20210730 17:43:38.701">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t123" name="With Each Valid Token, Updating Phone Number Of Each System User With Empty String Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:38.705" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:38.721" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:38.721" level="INFO">${pids} = 26774</msg>
<status status="PASS" starttime="20210730 17:43:38.703" endtime="20210730 17:43:38.721"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:38.722" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:38.722" endtime="20210730 17:43:38.722"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:38.723" level="INFO">${pids} = ['26774']</msg>
<status status="PASS" starttime="20210730 17:43:38.723" endtime="20210730 17:43:38.723"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26774</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:38.730" level="INFO">Running command 'kill 26774 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:38.723" endtime="20210730 17:43:38.731"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.723" endtime="20210730 17:43:38.731"/>
</iter>
<status status="PASS" starttime="20210730 17:43:38.723" endtime="20210730 17:43:38.731"/>
</for>
<status status="PASS" starttime="20210730 17:43:38.723" endtime="20210730 17:43:38.731"/>
</branch>
<status status="PASS" starttime="20210730 17:43:38.723" endtime="20210730 17:43:38.731"/>
</if>
<status status="PASS" starttime="20210730 17:43:38.703" endtime="20210730 17:43:38.732"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:38.733" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:38.732" endtime="20210730 17:43:38.733"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:38.733" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:38.733" endtime="20210730 17:43:38.733"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:38.734" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:38.733" endtime="20210730 17:43:38.734"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:38.734" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:38.734" endtime="20210730 17:43:38.734"/>
</kw>
<msg timestamp="20210730 17:43:38.734" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:38.733" endtime="20210730 17:43:38.734"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:38.750" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:38.734" endtime="20210730 17:43:38.752"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.732" endtime="20210730 17:43:38.752"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:38.754" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:38.753" endtime="20210730 17:43:38.758"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:40.278" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:38.758" endtime="20210730 17:43:40.279"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.753" endtime="20210730 17:43:40.280"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:40.287" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:40.286" endtime="20210730 17:43:40.288"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:40.290" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:40.289" endtime="20210730 17:43:40.290"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:40.292" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:40.291" endtime="20210730 17:43:40.292"/>
</kw>
<msg timestamp="20210730 17:43:40.292" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:40.284" endtime="20210730 17:43:40.292"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:40.294" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:40.293" endtime="20210730 17:43:40.295"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.282" endtime="20210730 17:43:40.295"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:40.297" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:40.297" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:40.296" endtime="20210730 17:43:40.297"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.295" endtime="20210730 17:43:40.298"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:40.299" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:40.299" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:40.298" endtime="20210730 17:43:40.299"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:40.300" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:40.299" endtime="20210730 17:43:40.300"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:40.301" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:40.300" endtime="20210730 17:43:40.301"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:40.301" endtime="20210730 17:43:40.302"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:40.302" endtime="20210730 17:43:40.303"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.300" endtime="20210730 17:43:40.303"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:40.304" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:40.303" endtime="20210730 17:43:40.304"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:40.304" endtime="20210730 17:43:40.305"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:40.305" endtime="20210730 17:43:40.306"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.303" endtime="20210730 17:43:40.306"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:40.306" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:40.306" endtime="20210730 17:43:40.306"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:40.307" endtime="20210730 17:43:40.308"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:40.308" endtime="20210730 17:43:40.308"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.306" endtime="20210730 17:43:40.308"/>
</iter>
<status status="PASS" starttime="20210730 17:43:40.300" endtime="20210730 17:43:40.308"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:40.309" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:40.308" endtime="20210730 17:43:40.309"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.298" endtime="20210730 17:43:40.309"/>
</kw>
<status status="PASS" starttime="20210730 17:43:38.702" endtime="20210730 17:43:40.309"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:40.313" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:40.310" endtime="20210730 17:43:40.313"/>
</kw>
<msg timestamp="20210730 17:43:40.313" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:40.309" endtime="20210730 17:43:40.313"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An empty phone number</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:40.314" endtime="20210730 17:43:40.318"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.313" endtime="20210730 17:43:40.318"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:40.320" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:40.320" endtime="20210730 17:43:40.320"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:40.320" level="INFO">${payload} = {'phone': ''}</msg>
<status status="PASS" starttime="20210730 17:43:40.320" endtime="20210730 17:43:40.321"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:40.330" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:40.330" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:40.321" endtime="20210730 17:43:40.330"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:40.330" endtime="20210730 17:43:40.330"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:40.330" endtime="20210730 17:43:40.330"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:40.321" endtime="20210730 17:43:40.330"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:40.321" endtime="20210730 17:43:40.330"/>
</for>
<status status="FAIL" starttime="20210730 17:43:40.319" endtime="20210730 17:43:40.331"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:40.319" endtime="20210730 17:43:40.331"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:40.318" endtime="20210730 17:43:40.331"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:40.335" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:40.348" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:40.348" level="INFO">${pids} = 26797
26804
26806</msg>
<status status="PASS" starttime="20210730 17:43:40.331" endtime="20210730 17:43:40.348"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:40.349" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:40.348" endtime="20210730 17:43:40.349"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:40.349" level="INFO">${pids} = ['26797', '26804', '26806']</msg>
<status status="PASS" starttime="20210730 17:43:40.349" endtime="20210730 17:43:40.350"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26797</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:40.354" level="INFO">Running command 'kill 26797 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:40.350" endtime="20210730 17:43:40.355"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.350" endtime="20210730 17:43:40.355"/>
</iter>
<iter>
<var name="${pid}">26804</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:40.358" level="INFO">Running command 'kill 26804 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:40.355" endtime="20210730 17:43:40.358"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.355" endtime="20210730 17:43:40.359"/>
</iter>
<iter>
<var name="${pid}">26806</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:40.362" level="INFO">Running command 'kill 26806 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:40.359" endtime="20210730 17:43:40.363"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.359" endtime="20210730 17:43:40.363"/>
</iter>
<status status="PASS" starttime="20210730 17:43:40.350" endtime="20210730 17:43:40.363"/>
</for>
<status status="PASS" starttime="20210730 17:43:40.349" endtime="20210730 17:43:40.363"/>
</branch>
<status status="PASS" starttime="20210730 17:43:40.349" endtime="20210730 17:43:40.363"/>
</if>
<status status="PASS" starttime="20210730 17:43:40.331" endtime="20210730 17:43:40.363"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": ''
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:38.702" endtime="20210730 17:43:40.364">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t124" name="With Each Valid Token, Updating Phone Number Of Each System User With +358506662712 Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:40.376" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:40.398" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:40.398" level="INFO">${pids} = 26835</msg>
<status status="PASS" starttime="20210730 17:43:40.365" endtime="20210730 17:43:40.398"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:40.399" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:40.399" endtime="20210730 17:43:40.399"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:40.400" level="INFO">${pids} = ['26835']</msg>
<status status="PASS" starttime="20210730 17:43:40.400" endtime="20210730 17:43:40.400"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26835</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:40.409" level="INFO">Running command 'kill 26835 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:40.400" endtime="20210730 17:43:40.411"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.400" endtime="20210730 17:43:40.411"/>
</iter>
<status status="PASS" starttime="20210730 17:43:40.400" endtime="20210730 17:43:40.411"/>
</for>
<status status="PASS" starttime="20210730 17:43:40.399" endtime="20210730 17:43:40.411"/>
</branch>
<status status="PASS" starttime="20210730 17:43:40.399" endtime="20210730 17:43:40.411"/>
</if>
<status status="PASS" starttime="20210730 17:43:40.365" endtime="20210730 17:43:40.411"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:40.413" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:40.412" endtime="20210730 17:43:40.413"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:40.414" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:40.414" endtime="20210730 17:43:40.414"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:40.415" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:40.414" endtime="20210730 17:43:40.415"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:40.415" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:40.415" endtime="20210730 17:43:40.415"/>
</kw>
<msg timestamp="20210730 17:43:40.415" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:40.414" endtime="20210730 17:43:40.415"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:40.418" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:40.415" endtime="20210730 17:43:40.420"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.412" endtime="20210730 17:43:40.420"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:40.421" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:40.421" endtime="20210730 17:43:40.425"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:41.927" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:40.425" endtime="20210730 17:43:41.927"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.420" endtime="20210730 17:43:41.928"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:41.932" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:41.931" endtime="20210730 17:43:41.932"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:41.932" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:41.932" endtime="20210730 17:43:41.932"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:41.933" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:41.932" endtime="20210730 17:43:41.933"/>
</kw>
<msg timestamp="20210730 17:43:41.933" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:41.930" endtime="20210730 17:43:41.933"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:41.933" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:41.933" endtime="20210730 17:43:41.934"/>
</kw>
<status status="PASS" starttime="20210730 17:43:41.929" endtime="20210730 17:43:41.934"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:41.934" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:41.934" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:41.934" endtime="20210730 17:43:41.934"/>
</kw>
<status status="PASS" starttime="20210730 17:43:41.934" endtime="20210730 17:43:41.935"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:41.935" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:41.935" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:41.935" endtime="20210730 17:43:41.935"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:41.935" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:41.935" endtime="20210730 17:43:41.935"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:41.936" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:41.936" endtime="20210730 17:43:41.936"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:41.936" endtime="20210730 17:43:41.937"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:41.937" endtime="20210730 17:43:41.938"/>
</kw>
<status status="PASS" starttime="20210730 17:43:41.936" endtime="20210730 17:43:41.938"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:41.938" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:41.938" endtime="20210730 17:43:41.938"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:41.938" endtime="20210730 17:43:41.939"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:41.939" endtime="20210730 17:43:41.939"/>
</kw>
<status status="PASS" starttime="20210730 17:43:41.938" endtime="20210730 17:43:41.939"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:41.939" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:41.939" endtime="20210730 17:43:41.939"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:41.939" endtime="20210730 17:43:41.940"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:41.940" endtime="20210730 17:43:41.940"/>
</kw>
<status status="PASS" starttime="20210730 17:43:41.939" endtime="20210730 17:43:41.940"/>
</iter>
<status status="PASS" starttime="20210730 17:43:41.936" endtime="20210730 17:43:41.940"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:41.941" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:41.941" endtime="20210730 17:43:41.941"/>
</kw>
<status status="PASS" starttime="20210730 17:43:41.935" endtime="20210730 17:43:41.941"/>
</kw>
<status status="PASS" starttime="20210730 17:43:40.365" endtime="20210730 17:43:41.941"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:41.944" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:41.942" endtime="20210730 17:43:41.944"/>
</kw>
<msg timestamp="20210730 17:43:41.944" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:41.942" endtime="20210730 17:43:41.944"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>A valid phone number with a country code +358</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:41.945" endtime="20210730 17:43:41.945"/>
</kw>
<status status="PASS" starttime="20210730 17:43:41.945" endtime="20210730 17:43:41.945"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:41.947" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:41.946" endtime="20210730 17:43:41.947"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:41.948" level="INFO">${payload} = {'phone': '+358506662712'}</msg>
<status status="PASS" starttime="20210730 17:43:41.947" endtime="20210730 17:43:41.948"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:41.957" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:41.957" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:41.948" endtime="20210730 17:43:41.957"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:41.957" endtime="20210730 17:43:41.957"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:41.957" endtime="20210730 17:43:41.957"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:41.948" endtime="20210730 17:43:41.957"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:41.948" endtime="20210730 17:43:41.957"/>
</for>
<status status="FAIL" starttime="20210730 17:43:41.946" endtime="20210730 17:43:41.958"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:41.946" endtime="20210730 17:43:41.958"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:41.945" endtime="20210730 17:43:41.958"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:41.962" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:41.976" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:41.976" level="INFO">${pids} = 26858
26865
26868</msg>
<status status="PASS" starttime="20210730 17:43:41.958" endtime="20210730 17:43:41.976"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:41.977" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:41.977" endtime="20210730 17:43:41.977"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:41.978" level="INFO">${pids} = ['26858', '26865', '26868']</msg>
<status status="PASS" starttime="20210730 17:43:41.978" endtime="20210730 17:43:41.978"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26858</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:41.982" level="INFO">Running command 'kill 26858 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:41.978" endtime="20210730 17:43:41.982"/>
</kw>
<status status="PASS" starttime="20210730 17:43:41.978" endtime="20210730 17:43:41.982"/>
</iter>
<iter>
<var name="${pid}">26865</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:41.985" level="INFO">Running command 'kill 26865 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:41.983" endtime="20210730 17:43:41.986"/>
</kw>
<status status="PASS" starttime="20210730 17:43:41.982" endtime="20210730 17:43:41.986"/>
</iter>
<iter>
<var name="${pid}">26868</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:41.990" level="INFO">Running command 'kill 26868 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:41.986" endtime="20210730 17:43:41.990"/>
</kw>
<status status="PASS" starttime="20210730 17:43:41.986" endtime="20210730 17:43:41.990"/>
</iter>
<status status="PASS" starttime="20210730 17:43:41.978" endtime="20210730 17:43:41.990"/>
</for>
<status status="PASS" starttime="20210730 17:43:41.978" endtime="20210730 17:43:41.990"/>
</branch>
<status status="PASS" starttime="20210730 17:43:41.977" endtime="20210730 17:43:41.990"/>
</if>
<status status="PASS" starttime="20210730 17:43:41.958" endtime="20210730 17:43:41.991"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358506662712'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:40.364" endtime="20210730 17:43:41.991">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t125" name="With Each Valid Token, Updating Phone Number Of Each System User With +358+50666+2712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:41.996" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:42.007" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:42.007" level="INFO">${pids} = 26897</msg>
<status status="PASS" starttime="20210730 17:43:41.993" endtime="20210730 17:43:42.007"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:42.008" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:42.007" endtime="20210730 17:43:42.008"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:42.010" level="INFO">${pids} = ['26897']</msg>
<status status="PASS" starttime="20210730 17:43:42.008" endtime="20210730 17:43:42.010"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26897</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:42.014" level="INFO">Running command 'kill 26897 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:42.011" endtime="20210730 17:43:42.014"/>
</kw>
<status status="PASS" starttime="20210730 17:43:42.010" endtime="20210730 17:43:42.014"/>
</iter>
<status status="PASS" starttime="20210730 17:43:42.010" endtime="20210730 17:43:42.014"/>
</for>
<status status="PASS" starttime="20210730 17:43:42.008" endtime="20210730 17:43:42.014"/>
</branch>
<status status="PASS" starttime="20210730 17:43:42.008" endtime="20210730 17:43:42.014"/>
</if>
<status status="PASS" starttime="20210730 17:43:41.992" endtime="20210730 17:43:42.015"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:42.016" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:42.015" endtime="20210730 17:43:42.016"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:42.016" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:42.016" endtime="20210730 17:43:42.016"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:42.017" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:42.016" endtime="20210730 17:43:42.017"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:42.017" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:42.017" endtime="20210730 17:43:42.017"/>
</kw>
<msg timestamp="20210730 17:43:42.017" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:42.016" endtime="20210730 17:43:42.017"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:42.020" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:42.017" endtime="20210730 17:43:42.022"/>
</kw>
<status status="PASS" starttime="20210730 17:43:42.015" endtime="20210730 17:43:42.022"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:42.023" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:42.023" endtime="20210730 17:43:42.042"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:43.544" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:42.042" endtime="20210730 17:43:43.544"/>
</kw>
<status status="PASS" starttime="20210730 17:43:42.022" endtime="20210730 17:43:43.545"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:43.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:43.548" endtime="20210730 17:43:43.549"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:43.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:43.549" endtime="20210730 17:43:43.549"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:43.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:43.549" endtime="20210730 17:43:43.549"/>
</kw>
<msg timestamp="20210730 17:43:43.549" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:43.547" endtime="20210730 17:43:43.549"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:43.550" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:43.550" endtime="20210730 17:43:43.550"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.546" endtime="20210730 17:43:43.550"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:43.551" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:43.551" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:43.551" endtime="20210730 17:43:43.551"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.551" endtime="20210730 17:43:43.551"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:43.552" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:43.552" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:43.552" endtime="20210730 17:43:43.552"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:43.552" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:43.552" endtime="20210730 17:43:43.552"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:43.553" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:43.553" endtime="20210730 17:43:43.553"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:43.553" endtime="20210730 17:43:43.554"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:43.554" endtime="20210730 17:43:43.554"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.553" endtime="20210730 17:43:43.554"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:43.554" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:43.554" endtime="20210730 17:43:43.555"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:43.555" endtime="20210730 17:43:43.555"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:43.555" endtime="20210730 17:43:43.556"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.554" endtime="20210730 17:43:43.556"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:43.556" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:43.556" endtime="20210730 17:43:43.556"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:43.556" endtime="20210730 17:43:43.557"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:43.557" endtime="20210730 17:43:43.557"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.556" endtime="20210730 17:43:43.557"/>
</iter>
<status status="PASS" starttime="20210730 17:43:43.552" endtime="20210730 17:43:43.557"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:43.558" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:43.558" endtime="20210730 17:43:43.558"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.551" endtime="20210730 17:43:43.558"/>
</kw>
<status status="PASS" starttime="20210730 17:43:41.992" endtime="20210730 17:43:43.558"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:43.561" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:43.558" endtime="20210730 17:43:43.561"/>
</kw>
<msg timestamp="20210730 17:43:43.561" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:43.558" endtime="20210730 17:43:43.561"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number with a country code with second and third + signs misplaced</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:43.562" endtime="20210730 17:43:43.562"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.561" endtime="20210730 17:43:43.562"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:43.564" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:43.563" endtime="20210730 17:43:43.564"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:43.564" level="INFO">${payload} = {'phone': '+358+50666+2712'}</msg>
<status status="PASS" starttime="20210730 17:43:43.564" endtime="20210730 17:43:43.564"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:43.573" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:43.574" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:43.564" endtime="20210730 17:43:43.574"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:43.574" endtime="20210730 17:43:43.574"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:43.574" endtime="20210730 17:43:43.574"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:43.564" endtime="20210730 17:43:43.574"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:43.564" endtime="20210730 17:43:43.574"/>
</for>
<status status="FAIL" starttime="20210730 17:43:43.563" endtime="20210730 17:43:43.574"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:43.563" endtime="20210730 17:43:43.574"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:43.562" endtime="20210730 17:43:43.574"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:43.579" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:43.591" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:43.591" level="INFO">${pids} = 26920
26927
26930</msg>
<status status="PASS" starttime="20210730 17:43:43.575" endtime="20210730 17:43:43.591"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:43.592" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:43.591" endtime="20210730 17:43:43.592"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:43.593" level="INFO">${pids} = ['26920', '26927', '26930']</msg>
<status status="PASS" starttime="20210730 17:43:43.592" endtime="20210730 17:43:43.593"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26920</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:43.597" level="INFO">Running command 'kill 26920 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:43.593" endtime="20210730 17:43:43.597"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.593" endtime="20210730 17:43:43.597"/>
</iter>
<iter>
<var name="${pid}">26927</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:43.600" level="INFO">Running command 'kill 26927 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:43.598" endtime="20210730 17:43:43.601"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.597" endtime="20210730 17:43:43.601"/>
</iter>
<iter>
<var name="${pid}">26930</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:43.607" level="INFO">Running command 'kill 26930 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:43.601" endtime="20210730 17:43:43.608"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.601" endtime="20210730 17:43:43.608"/>
</iter>
<status status="PASS" starttime="20210730 17:43:43.593" endtime="20210730 17:43:43.608"/>
</for>
<status status="PASS" starttime="20210730 17:43:43.592" endtime="20210730 17:43:43.608"/>
</branch>
<status status="PASS" starttime="20210730 17:43:43.592" endtime="20210730 17:43:43.608"/>
</if>
<status status="PASS" starttime="20210730 17:43:43.575" endtime="20210730 17:43:43.608"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358+50666+2712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:41.991" endtime="20210730 17:43:43.608">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t126" name="With Each Valid Token, Updating Phone Number Of Each System User With 0+506662712+ Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:43.614" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:43.626" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:43.626" level="INFO">${pids} = 26959</msg>
<status status="PASS" starttime="20210730 17:43:43.611" endtime="20210730 17:43:43.626"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:43.627" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:43.627" endtime="20210730 17:43:43.627"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:43.628" level="INFO">${pids} = ['26959']</msg>
<status status="PASS" starttime="20210730 17:43:43.628" endtime="20210730 17:43:43.628"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26959</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:43.632" level="INFO">Running command 'kill 26959 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:43.628" endtime="20210730 17:43:43.632"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.628" endtime="20210730 17:43:43.632"/>
</iter>
<status status="PASS" starttime="20210730 17:43:43.628" endtime="20210730 17:43:43.632"/>
</for>
<status status="PASS" starttime="20210730 17:43:43.628" endtime="20210730 17:43:43.632"/>
</branch>
<status status="PASS" starttime="20210730 17:43:43.628" endtime="20210730 17:43:43.632"/>
</if>
<status status="PASS" starttime="20210730 17:43:43.611" endtime="20210730 17:43:43.633"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:43.634" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:43.633" endtime="20210730 17:43:43.634"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:43.634" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:43.634" endtime="20210730 17:43:43.634"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:43.634" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:43.634" endtime="20210730 17:43:43.634"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:43.635" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:43.635" endtime="20210730 17:43:43.635"/>
</kw>
<msg timestamp="20210730 17:43:43.635" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:43.634" endtime="20210730 17:43:43.635"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:43.640" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:43.635" endtime="20210730 17:43:43.654"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.633" endtime="20210730 17:43:43.655"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:43.657" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:43.656" endtime="20210730 17:43:43.662"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:45.167" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:43.663" endtime="20210730 17:43:45.167"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.655" endtime="20210730 17:43:45.169"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:45.172" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:45.171" endtime="20210730 17:43:45.172"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:45.172" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:45.172" endtime="20210730 17:43:45.172"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:45.172" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:45.172" endtime="20210730 17:43:45.172"/>
</kw>
<msg timestamp="20210730 17:43:45.173" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:45.171" endtime="20210730 17:43:45.173"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:45.173" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:45.173" endtime="20210730 17:43:45.174"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.170" endtime="20210730 17:43:45.174"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:45.174" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:45.174" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:45.174" endtime="20210730 17:43:45.174"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.174" endtime="20210730 17:43:45.175"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:45.175" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:45.176" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:45.175" endtime="20210730 17:43:45.176"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:45.176" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:45.176" endtime="20210730 17:43:45.176"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:45.177" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:45.176" endtime="20210730 17:43:45.177"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:45.177" endtime="20210730 17:43:45.177"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:45.178" endtime="20210730 17:43:45.178"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.176" endtime="20210730 17:43:45.178"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:45.178" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:45.178" endtime="20210730 17:43:45.178"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:45.178" endtime="20210730 17:43:45.179"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:45.179" endtime="20210730 17:43:45.179"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.178" endtime="20210730 17:43:45.179"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:45.180" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:45.179" endtime="20210730 17:43:45.180"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:45.180" endtime="20210730 17:43:45.180"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:45.180" endtime="20210730 17:43:45.181"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.179" endtime="20210730 17:43:45.181"/>
</iter>
<status status="PASS" starttime="20210730 17:43:45.176" endtime="20210730 17:43:45.181"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:45.181" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:45.181" endtime="20210730 17:43:45.181"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.175" endtime="20210730 17:43:45.181"/>
</kw>
<status status="PASS" starttime="20210730 17:43:43.609" endtime="20210730 17:43:45.181"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:45.184" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:45.182" endtime="20210730 17:43:45.184"/>
</kw>
<msg timestamp="20210730 17:43:45.184" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:45.182" endtime="20210730 17:43:45.184"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number with two + signs misplaced</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:45.185" endtime="20210730 17:43:45.185"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.184" endtime="20210730 17:43:45.185"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:45.187" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:45.186" endtime="20210730 17:43:45.187"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:45.187" level="INFO">${payload} = {'phone': '0+506662712+'}</msg>
<status status="PASS" starttime="20210730 17:43:45.187" endtime="20210730 17:43:45.187"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:45.196" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:45.196" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:45.187" endtime="20210730 17:43:45.196"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:45.197" endtime="20210730 17:43:45.197"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:45.197" endtime="20210730 17:43:45.197"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:45.187" endtime="20210730 17:43:45.197"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:45.187" endtime="20210730 17:43:45.197"/>
</for>
<status status="FAIL" starttime="20210730 17:43:45.186" endtime="20210730 17:43:45.197"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:45.186" endtime="20210730 17:43:45.197"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:45.186" endtime="20210730 17:43:45.197"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:45.202" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:45.215" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:45.215" level="INFO">${pids} = 26982
26989
26991</msg>
<status status="PASS" starttime="20210730 17:43:45.198" endtime="20210730 17:43:45.215"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:45.217" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:45.216" endtime="20210730 17:43:45.217"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:45.217" level="INFO">${pids} = ['26982', '26989', '26991']</msg>
<status status="PASS" starttime="20210730 17:43:45.217" endtime="20210730 17:43:45.217"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">26982</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:45.221" level="INFO">Running command 'kill 26982 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:45.218" endtime="20210730 17:43:45.221"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.217" endtime="20210730 17:43:45.221"/>
</iter>
<iter>
<var name="${pid}">26989</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:45.224" level="INFO">Running command 'kill 26989 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:45.222" endtime="20210730 17:43:45.225"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.221" endtime="20210730 17:43:45.225"/>
</iter>
<iter>
<var name="${pid}">26991</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:45.231" level="INFO">Running command 'kill 26991 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:45.225" endtime="20210730 17:43:45.231"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.225" endtime="20210730 17:43:45.231"/>
</iter>
<status status="PASS" starttime="20210730 17:43:45.217" endtime="20210730 17:43:45.231"/>
</for>
<status status="PASS" starttime="20210730 17:43:45.217" endtime="20210730 17:43:45.231"/>
</branch>
<status status="PASS" starttime="20210730 17:43:45.217" endtime="20210730 17:43:45.231"/>
</if>
<status status="PASS" starttime="20210730 17:43:45.198" endtime="20210730 17:43:45.231"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '0+506662712+'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:43.609" endtime="20210730 17:43:45.232">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t127" name="With Each Valid Token, Updating Phone Number Of Each System User With 0506662712 Results In Success">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:45.236" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:45.251" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:45.251" level="INFO">${pids} = 27020</msg>
<status status="PASS" starttime="20210730 17:43:45.233" endtime="20210730 17:43:45.251"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:45.252" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:45.251" endtime="20210730 17:43:45.252"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:45.252" level="INFO">${pids} = ['27020']</msg>
<status status="PASS" starttime="20210730 17:43:45.252" endtime="20210730 17:43:45.252"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27020</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:45.267" level="INFO">Running command 'kill 27020 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:45.253" endtime="20210730 17:43:45.267"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.253" endtime="20210730 17:43:45.267"/>
</iter>
<status status="PASS" starttime="20210730 17:43:45.253" endtime="20210730 17:43:45.268"/>
</for>
<status status="PASS" starttime="20210730 17:43:45.252" endtime="20210730 17:43:45.268"/>
</branch>
<status status="PASS" starttime="20210730 17:43:45.252" endtime="20210730 17:43:45.268"/>
</if>
<status status="PASS" starttime="20210730 17:43:45.233" endtime="20210730 17:43:45.268"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:45.269" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:45.269" endtime="20210730 17:43:45.269"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:45.270" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:45.270" endtime="20210730 17:43:45.270"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:45.270" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:45.270" endtime="20210730 17:43:45.270"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:45.271" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:45.270" endtime="20210730 17:43:45.271"/>
</kw>
<msg timestamp="20210730 17:43:45.271" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:45.269" endtime="20210730 17:43:45.271"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:45.274" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:45.271" endtime="20210730 17:43:45.276"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.268" endtime="20210730 17:43:45.276"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:45.278" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:45.277" endtime="20210730 17:43:45.282"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:46.784" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:45.283" endtime="20210730 17:43:46.784"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.277" endtime="20210730 17:43:46.785"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:46.787" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:46.787" endtime="20210730 17:43:46.787"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:46.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:46.787" endtime="20210730 17:43:46.788"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:46.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:46.788" endtime="20210730 17:43:46.788"/>
</kw>
<msg timestamp="20210730 17:43:46.788" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:46.786" endtime="20210730 17:43:46.788"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:46.789" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:46.788" endtime="20210730 17:43:46.789"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.785" endtime="20210730 17:43:46.789"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:46.790" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:46.790" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:46.790" endtime="20210730 17:43:46.790"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.789" endtime="20210730 17:43:46.790"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:46.791" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:46.791" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:46.791" endtime="20210730 17:43:46.791"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:46.791" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:46.791" endtime="20210730 17:43:46.791"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:46.792" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:46.792" endtime="20210730 17:43:46.792"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:46.792" endtime="20210730 17:43:46.793"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:46.793" endtime="20210730 17:43:46.793"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.791" endtime="20210730 17:43:46.793"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:46.793" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:46.793" endtime="20210730 17:43:46.793"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:46.794" endtime="20210730 17:43:46.794"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:46.794" endtime="20210730 17:43:46.795"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.793" endtime="20210730 17:43:46.795"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:46.795" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:46.795" endtime="20210730 17:43:46.795"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:46.795" endtime="20210730 17:43:46.796"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:46.796" endtime="20210730 17:43:46.796"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.795" endtime="20210730 17:43:46.796"/>
</iter>
<status status="PASS" starttime="20210730 17:43:46.791" endtime="20210730 17:43:46.796"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:46.797" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:46.796" endtime="20210730 17:43:46.797"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.790" endtime="20210730 17:43:46.797"/>
</kw>
<status status="PASS" starttime="20210730 17:43:45.233" endtime="20210730 17:43:46.797"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:46.800" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:46.797" endtime="20210730 17:43:46.800"/>
</kw>
<msg timestamp="20210730 17:43:46.800" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:46.797" endtime="20210730 17:43:46.800"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>A valid phone number without a country code. This assumes Finland</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:46.801" endtime="20210730 17:43:46.801"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.800" endtime="20210730 17:43:46.801"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:46.802" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:46.802" endtime="20210730 17:43:46.802"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:46.803" level="INFO">${payload} = {'phone': '0506662712'}</msg>
<status status="PASS" starttime="20210730 17:43:46.802" endtime="20210730 17:43:46.803"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:46.813" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:46.813" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:46.803" endtime="20210730 17:43:46.813"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:46.814" endtime="20210730 17:43:46.814"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:46.814" endtime="20210730 17:43:46.814"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:46.803" endtime="20210730 17:43:46.814"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:46.803" endtime="20210730 17:43:46.814"/>
</for>
<status status="FAIL" starttime="20210730 17:43:46.801" endtime="20210730 17:43:46.814"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:46.801" endtime="20210730 17:43:46.814"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:46.801" endtime="20210730 17:43:46.814"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:46.818" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:46.833" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:46.833" level="INFO">${pids} = 27043
27050
27053</msg>
<status status="PASS" starttime="20210730 17:43:46.815" endtime="20210730 17:43:46.833"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:46.834" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:46.833" endtime="20210730 17:43:46.834"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:46.835" level="INFO">${pids} = ['27043', '27050', '27053']</msg>
<status status="PASS" starttime="20210730 17:43:46.834" endtime="20210730 17:43:46.835"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27043</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:46.838" level="INFO">Running command 'kill 27043 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:46.835" endtime="20210730 17:43:46.839"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.835" endtime="20210730 17:43:46.839"/>
</iter>
<iter>
<var name="${pid}">27050</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:46.842" level="INFO">Running command 'kill 27050 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:46.839" endtime="20210730 17:43:46.845"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.839" endtime="20210730 17:43:46.845"/>
</iter>
<iter>
<var name="${pid}">27053</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:46.850" level="INFO">Running command 'kill 27053 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:46.845" endtime="20210730 17:43:46.851"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.845" endtime="20210730 17:43:46.851"/>
</iter>
<status status="PASS" starttime="20210730 17:43:46.835" endtime="20210730 17:43:46.851"/>
</for>
<status status="PASS" starttime="20210730 17:43:46.834" endtime="20210730 17:43:46.851"/>
</branch>
<status status="PASS" starttime="20210730 17:43:46.834" endtime="20210730 17:43:46.851"/>
</if>
<status status="PASS" starttime="20210730 17:43:46.814" endtime="20210730 17:43:46.851"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '0506662712'
}
Then, each request should succeed with the following response body:
{
"message": "Updated",
"status": "SUCCESS"
}
This test not only verifies message and status but also verifies that the &lt;username&gt;'s data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:45.232" endtime="20210730 17:43:46.851">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t128" name="With Each Valid Token, Updating Phone Number Of Each System User With +358506abc!#662712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:46.864" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:46.877" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:46.877" level="INFO">${pids} = 27082</msg>
<status status="PASS" starttime="20210730 17:43:46.853" endtime="20210730 17:43:46.877"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:46.878" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:46.877" endtime="20210730 17:43:46.878"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:46.879" level="INFO">${pids} = ['27082']</msg>
<status status="PASS" starttime="20210730 17:43:46.878" endtime="20210730 17:43:46.879"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27082</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:46.896" level="INFO">Running command 'kill 27082 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:46.879" endtime="20210730 17:43:46.897"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.879" endtime="20210730 17:43:46.897"/>
</iter>
<status status="PASS" starttime="20210730 17:43:46.879" endtime="20210730 17:43:46.897"/>
</for>
<status status="PASS" starttime="20210730 17:43:46.878" endtime="20210730 17:43:46.897"/>
</branch>
<status status="PASS" starttime="20210730 17:43:46.878" endtime="20210730 17:43:46.897"/>
</if>
<status status="PASS" starttime="20210730 17:43:46.853" endtime="20210730 17:43:46.897"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:46.898" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:46.898" endtime="20210730 17:43:46.898"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:46.899" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:46.899" endtime="20210730 17:43:46.899"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:46.899" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:46.899" endtime="20210730 17:43:46.899"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:46.900" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:46.899" endtime="20210730 17:43:46.900"/>
</kw>
<msg timestamp="20210730 17:43:46.900" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:46.898" endtime="20210730 17:43:46.900"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:46.903" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:46.900" endtime="20210730 17:43:46.905"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.897" endtime="20210730 17:43:46.905"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:46.906" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:46.906" endtime="20210730 17:43:46.910"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:48.414" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:46.911" endtime="20210730 17:43:48.414"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.905" endtime="20210730 17:43:48.415"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:48.416" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:48.416" endtime="20210730 17:43:48.416"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:48.416" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:48.416" endtime="20210730 17:43:48.416"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:48.417" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:48.417" endtime="20210730 17:43:48.417"/>
</kw>
<msg timestamp="20210730 17:43:48.417" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:48.415" endtime="20210730 17:43:48.417"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:48.417" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:48.417" endtime="20210730 17:43:48.418"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.415" endtime="20210730 17:43:48.418"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:48.418" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:48.418" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:48.418" endtime="20210730 17:43:48.419"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.418" endtime="20210730 17:43:48.419"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:48.419" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:48.419" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:48.419" endtime="20210730 17:43:48.419"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:48.420" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:48.420" endtime="20210730 17:43:48.420"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:48.420" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:48.420" endtime="20210730 17:43:48.420"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:48.420" endtime="20210730 17:43:48.421"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:48.421" endtime="20210730 17:43:48.422"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.420" endtime="20210730 17:43:48.422"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:48.422" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:48.422" endtime="20210730 17:43:48.422"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:48.422" endtime="20210730 17:43:48.423"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:48.423" endtime="20210730 17:43:48.423"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.422" endtime="20210730 17:43:48.423"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:48.423" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:48.423" endtime="20210730 17:43:48.423"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:48.423" endtime="20210730 17:43:48.424"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:48.424" endtime="20210730 17:43:48.424"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.423" endtime="20210730 17:43:48.424"/>
</iter>
<status status="PASS" starttime="20210730 17:43:48.420" endtime="20210730 17:43:48.424"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:48.425" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:48.425" endtime="20210730 17:43:48.425"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.419" endtime="20210730 17:43:48.425"/>
</kw>
<status status="PASS" starttime="20210730 17:43:46.852" endtime="20210730 17:43:48.425"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:48.428" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:48.426" endtime="20210730 17:43:48.428"/>
</kw>
<msg timestamp="20210730 17:43:48.428" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:48.425" endtime="20210730 17:43:48.428"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing letters, non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:48.429" endtime="20210730 17:43:48.429"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.429" endtime="20210730 17:43:48.429"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:48.431" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:48.430" endtime="20210730 17:43:48.431"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:48.431" level="INFO">${payload} = {'phone': '+358506abc!#662712'}</msg>
<status status="PASS" starttime="20210730 17:43:48.431" endtime="20210730 17:43:48.431"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:48.440" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:48.440" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:48.431" endtime="20210730 17:43:48.440"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:48.441" endtime="20210730 17:43:48.441"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:48.441" endtime="20210730 17:43:48.441"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:48.431" endtime="20210730 17:43:48.441"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:48.431" endtime="20210730 17:43:48.441"/>
</for>
<status status="FAIL" starttime="20210730 17:43:48.430" endtime="20210730 17:43:48.441"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:48.430" endtime="20210730 17:43:48.441"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:48.430" endtime="20210730 17:43:48.441"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:48.445" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:48.456" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:48.456" level="INFO">${pids} = 27105
27112
27114</msg>
<status status="PASS" starttime="20210730 17:43:48.442" endtime="20210730 17:43:48.456"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:48.457" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:48.456" endtime="20210730 17:43:48.457"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:48.458" level="INFO">${pids} = ['27105', '27112', '27114']</msg>
<status status="PASS" starttime="20210730 17:43:48.458" endtime="20210730 17:43:48.458"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27105</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:48.462" level="INFO">Running command 'kill 27105 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:48.459" endtime="20210730 17:43:48.463"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.458" endtime="20210730 17:43:48.463"/>
</iter>
<iter>
<var name="${pid}">27112</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:48.466" level="INFO">Running command 'kill 27112 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:48.463" endtime="20210730 17:43:48.468"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.463" endtime="20210730 17:43:48.468"/>
</iter>
<iter>
<var name="${pid}">27114</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:48.472" level="INFO">Running command 'kill 27114 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:48.468" endtime="20210730 17:43:48.473"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.468" endtime="20210730 17:43:48.473"/>
</iter>
<status status="PASS" starttime="20210730 17:43:48.458" endtime="20210730 17:43:48.473"/>
</for>
<status status="PASS" starttime="20210730 17:43:48.458" endtime="20210730 17:43:48.473"/>
</branch>
<status status="PASS" starttime="20210730 17:43:48.457" endtime="20210730 17:43:48.473"/>
</if>
<status status="PASS" starttime="20210730 17:43:48.441" endtime="20210730 17:43:48.473"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358506abc!#662712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:46.852" endtime="20210730 17:43:48.473">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t129" name="With Each Valid Token, Updating Phone Number Of Each System User With 050!?.#662712 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:48.479" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:48.490" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:48.491" level="INFO">${pids} = 27143</msg>
<status status="PASS" starttime="20210730 17:43:48.476" endtime="20210730 17:43:48.491"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:48.492" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:48.491" endtime="20210730 17:43:48.492"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:48.493" level="INFO">${pids} = ['27143']</msg>
<status status="PASS" starttime="20210730 17:43:48.492" endtime="20210730 17:43:48.493"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27143</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:48.497" level="INFO">Running command 'kill 27143 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:48.493" endtime="20210730 17:43:48.497"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.493" endtime="20210730 17:43:48.497"/>
</iter>
<status status="PASS" starttime="20210730 17:43:48.493" endtime="20210730 17:43:48.498"/>
</for>
<status status="PASS" starttime="20210730 17:43:48.492" endtime="20210730 17:43:48.498"/>
</branch>
<status status="PASS" starttime="20210730 17:43:48.492" endtime="20210730 17:43:48.498"/>
</if>
<status status="PASS" starttime="20210730 17:43:48.475" endtime="20210730 17:43:48.498"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:48.499" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:48.499" endtime="20210730 17:43:48.499"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:48.499" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:48.499" endtime="20210730 17:43:48.499"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:48.500" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:48.500" endtime="20210730 17:43:48.500"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:48.500" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:48.500" endtime="20210730 17:43:48.500"/>
</kw>
<msg timestamp="20210730 17:43:48.500" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:48.499" endtime="20210730 17:43:48.500"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:48.505" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:48.500" endtime="20210730 17:43:48.514"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.498" endtime="20210730 17:43:48.515"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:48.516" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:48.515" endtime="20210730 17:43:48.524"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:50.026" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:48.524" endtime="20210730 17:43:50.026"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.515" endtime="20210730 17:43:50.026"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:50.028" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:50.028" endtime="20210730 17:43:50.028"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:50.028" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:50.028" endtime="20210730 17:43:50.028"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:50.029" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:50.028" endtime="20210730 17:43:50.029"/>
</kw>
<msg timestamp="20210730 17:43:50.029" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:50.027" endtime="20210730 17:43:50.029"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:50.030" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:50.029" endtime="20210730 17:43:50.030"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.027" endtime="20210730 17:43:50.030"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:50.031" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:50.031" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:50.031" endtime="20210730 17:43:50.031"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.030" endtime="20210730 17:43:50.031"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:50.032" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:50.032" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:50.031" endtime="20210730 17:43:50.032"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:50.032" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:50.032" endtime="20210730 17:43:50.032"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:50.033" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:50.032" endtime="20210730 17:43:50.033"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:50.033" endtime="20210730 17:43:50.034"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:50.034" endtime="20210730 17:43:50.034"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.032" endtime="20210730 17:43:50.034"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:50.034" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:50.034" endtime="20210730 17:43:50.034"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:50.034" endtime="20210730 17:43:50.035"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:50.035" endtime="20210730 17:43:50.035"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.034" endtime="20210730 17:43:50.036"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:50.036" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:50.036" endtime="20210730 17:43:50.036"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:50.036" endtime="20210730 17:43:50.037"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:50.037" endtime="20210730 17:43:50.037"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.036" endtime="20210730 17:43:50.037"/>
</iter>
<status status="PASS" starttime="20210730 17:43:50.032" endtime="20210730 17:43:50.037"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:50.037" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:50.037" endtime="20210730 17:43:50.037"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.031" endtime="20210730 17:43:50.038"/>
</kw>
<status status="PASS" starttime="20210730 17:43:48.475" endtime="20210730 17:43:50.038"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:50.040" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:50.038" endtime="20210730 17:43:50.040"/>
</kw>
<msg timestamp="20210730 17:43:50.041" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:50.038" endtime="20210730 17:43:50.041"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing non-alphanumeric characters</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:50.041" endtime="20210730 17:43:50.042"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.041" endtime="20210730 17:43:50.042"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:50.043" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:50.043" endtime="20210730 17:43:50.043"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:50.043" level="INFO">${payload} = {'phone': '050!?.#662712'}</msg>
<status status="PASS" starttime="20210730 17:43:50.043" endtime="20210730 17:43:50.043"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:50.053" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:50.053" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:50.044" endtime="20210730 17:43:50.053"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:50.053" endtime="20210730 17:43:50.054"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:50.054" endtime="20210730 17:43:50.054"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:50.044" endtime="20210730 17:43:50.054"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:50.043" endtime="20210730 17:43:50.054"/>
</for>
<status status="FAIL" starttime="20210730 17:43:50.042" endtime="20210730 17:43:50.054"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:50.042" endtime="20210730 17:43:50.054"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:50.042" endtime="20210730 17:43:50.054"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:50.059" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:50.073" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:50.074" level="INFO">${pids} = 27166
27173
27175</msg>
<status status="PASS" starttime="20210730 17:43:50.055" endtime="20210730 17:43:50.074"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:50.075" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:50.074" endtime="20210730 17:43:50.075"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:50.075" level="INFO">${pids} = ['27166', '27173', '27175']</msg>
<status status="PASS" starttime="20210730 17:43:50.075" endtime="20210730 17:43:50.075"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27166</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:50.079" level="INFO">Running command 'kill 27166 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:50.075" endtime="20210730 17:43:50.079"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.075" endtime="20210730 17:43:50.079"/>
</iter>
<iter>
<var name="${pid}">27173</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:50.083" level="INFO">Running command 'kill 27173 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:50.080" endtime="20210730 17:43:50.085"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.080" endtime="20210730 17:43:50.085"/>
</iter>
<iter>
<var name="${pid}">27175</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:50.089" level="INFO">Running command 'kill 27175 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:50.085" endtime="20210730 17:43:50.089"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.085" endtime="20210730 17:43:50.089"/>
</iter>
<status status="PASS" starttime="20210730 17:43:50.075" endtime="20210730 17:43:50.089"/>
</for>
<status status="PASS" starttime="20210730 17:43:50.075" endtime="20210730 17:43:50.089"/>
</branch>
<status status="PASS" starttime="20210730 17:43:50.075" endtime="20210730 17:43:50.089"/>
</if>
<status status="PASS" starttime="20210730 17:43:50.054" endtime="20210730 17:43:50.090"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '050!?.#662712'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:48.474" endtime="20210730 17:43:50.090">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t130" name="With Each Valid Token, Updating Phone Number Of Each System User With +358abc662712xyz Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:50.094" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:50.105" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:50.106" level="INFO">${pids} = 27204</msg>
<status status="PASS" starttime="20210730 17:43:50.092" endtime="20210730 17:43:50.106"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:50.106" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:50.106" endtime="20210730 17:43:50.106"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:50.107" level="INFO">${pids} = ['27204']</msg>
<status status="PASS" starttime="20210730 17:43:50.107" endtime="20210730 17:43:50.107"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27204</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:50.111" level="INFO">Running command 'kill 27204 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:50.107" endtime="20210730 17:43:50.111"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.107" endtime="20210730 17:43:50.111"/>
</iter>
<status status="PASS" starttime="20210730 17:43:50.107" endtime="20210730 17:43:50.112"/>
</for>
<status status="PASS" starttime="20210730 17:43:50.107" endtime="20210730 17:43:50.112"/>
</branch>
<status status="PASS" starttime="20210730 17:43:50.107" endtime="20210730 17:43:50.112"/>
</if>
<status status="PASS" starttime="20210730 17:43:50.091" endtime="20210730 17:43:50.112"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:50.113" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:50.112" endtime="20210730 17:43:50.113"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:50.114" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:50.113" endtime="20210730 17:43:50.114"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:50.114" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:50.114" endtime="20210730 17:43:50.114"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:50.115" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:50.114" endtime="20210730 17:43:50.115"/>
</kw>
<msg timestamp="20210730 17:43:50.115" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:50.113" endtime="20210730 17:43:50.115"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:50.123" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:50.115" endtime="20210730 17:43:50.132"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.112" endtime="20210730 17:43:50.133"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:50.135" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:50.134" endtime="20210730 17:43:50.141"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:51.644" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:50.142" endtime="20210730 17:43:51.645"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.133" endtime="20210730 17:43:51.645"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:51.649" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:51.648" endtime="20210730 17:43:51.650"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:51.651" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:51.650" endtime="20210730 17:43:51.651"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:51.652" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:51.651" endtime="20210730 17:43:51.652"/>
</kw>
<msg timestamp="20210730 17:43:51.653" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:51.647" endtime="20210730 17:43:51.653"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:51.655" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:51.653" endtime="20210730 17:43:51.656"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.646" endtime="20210730 17:43:51.656"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:51.657" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:51.657" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:51.657" endtime="20210730 17:43:51.658"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.656" endtime="20210730 17:43:51.658"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:51.659" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:51.660" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:51.659" endtime="20210730 17:43:51.660"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:51.661" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:51.660" endtime="20210730 17:43:51.661"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:51.662" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:51.661" endtime="20210730 17:43:51.662"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:51.662" endtime="20210730 17:43:51.664"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:51.664" endtime="20210730 17:43:51.664"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.661" endtime="20210730 17:43:51.665"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:51.665" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:51.665" endtime="20210730 17:43:51.665"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:51.665" endtime="20210730 17:43:51.667"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:51.667" endtime="20210730 17:43:51.667"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.665" endtime="20210730 17:43:51.667"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:51.668" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:51.668" endtime="20210730 17:43:51.668"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:51.668" endtime="20210730 17:43:51.669"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:51.669" endtime="20210730 17:43:51.670"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.667" endtime="20210730 17:43:51.670"/>
</iter>
<status status="PASS" starttime="20210730 17:43:51.661" endtime="20210730 17:43:51.670"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:51.670" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:51.670" endtime="20210730 17:43:51.670"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.658" endtime="20210730 17:43:51.671"/>
</kw>
<status status="PASS" starttime="20210730 17:43:50.091" endtime="20210730 17:43:51.671"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:51.675" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:51.672" endtime="20210730 17:43:51.675"/>
</kw>
<msg timestamp="20210730 17:43:51.675" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:51.671" endtime="20210730 17:43:51.675"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing letters in between</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:51.676" endtime="20210730 17:43:51.677"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.676" endtime="20210730 17:43:51.677"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:51.678" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:51.678" endtime="20210730 17:43:51.678"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:51.679" level="INFO">${payload} = {'phone': '+358abc662712xyz'}</msg>
<status status="PASS" starttime="20210730 17:43:51.678" endtime="20210730 17:43:51.679"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:51.688" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:51.688" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:51.679" endtime="20210730 17:43:51.688"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:51.688" endtime="20210730 17:43:51.688"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:51.689" endtime="20210730 17:43:51.689"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:51.679" endtime="20210730 17:43:51.689"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:51.679" endtime="20210730 17:43:51.689"/>
</for>
<status status="FAIL" starttime="20210730 17:43:51.677" endtime="20210730 17:43:51.689"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:51.677" endtime="20210730 17:43:51.689"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:51.677" endtime="20210730 17:43:51.689"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:51.693" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:51.710" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:51.710" level="INFO">${pids} = 27227
27234
27237</msg>
<status status="PASS" starttime="20210730 17:43:51.690" endtime="20210730 17:43:51.710"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:51.711" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:51.710" endtime="20210730 17:43:51.711"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:51.712" level="INFO">${pids} = ['27227', '27234', '27237']</msg>
<status status="PASS" starttime="20210730 17:43:51.711" endtime="20210730 17:43:51.712"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27227</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:51.715" level="INFO">Running command 'kill 27227 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:51.712" endtime="20210730 17:43:51.716"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.712" endtime="20210730 17:43:51.716"/>
</iter>
<iter>
<var name="${pid}">27234</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:51.722" level="INFO">Running command 'kill 27234 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:51.717" endtime="20210730 17:43:51.723"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.716" endtime="20210730 17:43:51.723"/>
</iter>
<iter>
<var name="${pid}">27237</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:51.727" level="INFO">Running command 'kill 27237 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:51.723" endtime="20210730 17:43:51.728"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.723" endtime="20210730 17:43:51.728"/>
</iter>
<status status="PASS" starttime="20210730 17:43:51.712" endtime="20210730 17:43:51.728"/>
</for>
<status status="PASS" starttime="20210730 17:43:51.711" endtime="20210730 17:43:51.728"/>
</branch>
<status status="PASS" starttime="20210730 17:43:51.711" endtime="20210730 17:43:51.728"/>
</if>
<status status="PASS" starttime="20210730 17:43:51.689" endtime="20210730 17:43:51.728"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+358abc662712xyz'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:50.090" endtime="20210730 17:43:51.729">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t131" name="With Each Valid Token, Updating Phone Number Of Each System User With +35840 687 54 53 Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:51.741" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:51.751" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:51.752" level="INFO">${pids} = 27266</msg>
<status status="PASS" starttime="20210730 17:43:51.731" endtime="20210730 17:43:51.752"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:51.753" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:51.752" endtime="20210730 17:43:51.753"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:51.753" level="INFO">${pids} = ['27266']</msg>
<status status="PASS" starttime="20210730 17:43:51.753" endtime="20210730 17:43:51.753"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27266</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:51.775" level="INFO">Running command 'kill 27266 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:51.754" endtime="20210730 17:43:51.775"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.754" endtime="20210730 17:43:51.775"/>
</iter>
<status status="PASS" starttime="20210730 17:43:51.753" endtime="20210730 17:43:51.775"/>
</for>
<status status="PASS" starttime="20210730 17:43:51.753" endtime="20210730 17:43:51.775"/>
</branch>
<status status="PASS" starttime="20210730 17:43:51.753" endtime="20210730 17:43:51.775"/>
</if>
<status status="PASS" starttime="20210730 17:43:51.731" endtime="20210730 17:43:51.776"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:51.777" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:51.777" endtime="20210730 17:43:51.777"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:51.778" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:51.778" endtime="20210730 17:43:51.778"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:51.778" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:51.778" endtime="20210730 17:43:51.778"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:51.779" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:51.779" endtime="20210730 17:43:51.779"/>
</kw>
<msg timestamp="20210730 17:43:51.779" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:51.777" endtime="20210730 17:43:51.779"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:51.784" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:51.779" endtime="20210730 17:43:51.786"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.776" endtime="20210730 17:43:51.786"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:51.787" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:51.787" endtime="20210730 17:43:51.791"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:53.303" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:51.791" endtime="20210730 17:43:53.303"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.786" endtime="20210730 17:43:53.304"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:53.307" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:53.307" endtime="20210730 17:43:53.307"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:53.308" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:53.307" endtime="20210730 17:43:53.308"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:53.308" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:53.308" endtime="20210730 17:43:53.308"/>
</kw>
<msg timestamp="20210730 17:43:53.308" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:53.307" endtime="20210730 17:43:53.308"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:53.309" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:53.308" endtime="20210730 17:43:53.309"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.305" endtime="20210730 17:43:53.309"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:53.310" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:53.310" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:53.310" endtime="20210730 17:43:53.310"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.309" endtime="20210730 17:43:53.311"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:53.311" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:53.311" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:53.311" endtime="20210730 17:43:53.311"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:53.312" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:53.311" endtime="20210730 17:43:53.312"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:53.312" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:53.312" endtime="20210730 17:43:53.312"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:53.312" endtime="20210730 17:43:53.313"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:53.313" endtime="20210730 17:43:53.313"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.312" endtime="20210730 17:43:53.313"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:53.314" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:53.314" endtime="20210730 17:43:53.314"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:53.314" endtime="20210730 17:43:53.315"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:53.315" endtime="20210730 17:43:53.315"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.313" endtime="20210730 17:43:53.315"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:53.315" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:53.315" endtime="20210730 17:43:53.315"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:53.315" endtime="20210730 17:43:53.316"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:53.316" endtime="20210730 17:43:53.316"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.315" endtime="20210730 17:43:53.316"/>
</iter>
<status status="PASS" starttime="20210730 17:43:53.312" endtime="20210730 17:43:53.316"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:53.317" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:53.317" endtime="20210730 17:43:53.317"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.311" endtime="20210730 17:43:53.317"/>
</kw>
<status status="PASS" starttime="20210730 17:43:51.730" endtime="20210730 17:43:53.317"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:53.320" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:53.318" endtime="20210730 17:43:53.320"/>
</kw>
<msg timestamp="20210730 17:43:53.320" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:53.317" endtime="20210730 17:43:53.320"/>
</kw>
<kw name="Manipulate" library="DataManager">
<arg>${user_data}</arg>
<arg>phone_number</arg>
<arg>An invalid phone number containing spaces in between digits</arg>
<kw name="Do Manipulate" library="RegistrationFormDataReader">
<arg>${registration_form_data}</arg>
<arg>${key}</arg>
<arg>${description}</arg>
<doc>Given a valid registration_form_data instance, if we are to change one of its fields (e.g. username)
     then we provide the key to be the string "username". We also provide a description as a string,
     which must match with one of the description fields in TestData/Usernames.json file. The username (in the file),
     whose description is matching description parameter we provide, is used to replace the username
     of the instance. This way, we can quickly create a new instance matching the requirements of the test case
    (e.g. An Empty Username Is Not Accepted)</doc>
<status status="PASS" starttime="20210730 17:43:53.321" endtime="20210730 17:43:53.321"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.320" endtime="20210730 17:43:53.321"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set A Field For All System Users">
<arg>token=${api_user}[token]</arg>
<arg>field_name=phone</arg>
<arg>field_data=${user_data}[phone_number]</arg>
<doc>A field_data is a dictionary. An example:
{
"value": "Helena!.?",
"isValid": false,
"description": "First name does contain non alphanumeric characters, which makes it invalid",
"expected_error": "Each first name must contain only characters from the set [a-zA-Z]. First names must be seperated by a a single space. First names must have at least 2 characters"
}
With the above field_data, say we want to change a system_user's firstname field.
To indicate that we are to change the firstname field, we set field_name argument to firstname</doc>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:53.323" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:53.322" endtime="20210730 17:43:53.323"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>${field_name}=${field_data}[value]</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:53.323" level="INFO">${payload} = {'phone': '+35840 687 54 53'}</msg>
<status status="PASS" starttime="20210730 17:43:53.323" endtime="20210730 17:43:53.323"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:53.332" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:53.332" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:53.323" endtime="20210730 17:43:53.332"/>
</kw>
<kw name="Verify Response Based On Field Data">
<arg>${response}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:53.332" endtime="20210730 17:43:53.333"/>
</kw>
<kw name="Verify System User's Data In Database">
<arg>${system_user}</arg>
<arg>${field_name}</arg>
<arg>${field_data}</arg>
<status status="NOT RUN" starttime="20210730 17:43:53.333" endtime="20210730 17:43:53.333"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:53.323" endtime="20210730 17:43:53.333"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:53.323" endtime="20210730 17:43:53.333"/>
</for>
<status status="FAIL" starttime="20210730 17:43:53.322" endtime="20210730 17:43:53.333"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:53.322" endtime="20210730 17:43:53.333"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:53.321" endtime="20210730 17:43:53.333"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:53.338" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:53.350" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:53.350" level="INFO">${pids} = 27289
27296
27298</msg>
<status status="PASS" starttime="20210730 17:43:53.334" endtime="20210730 17:43:53.350"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:53.351" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:53.351" endtime="20210730 17:43:53.351"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:53.352" level="INFO">${pids} = ['27289', '27296', '27298']</msg>
<status status="PASS" starttime="20210730 17:43:53.351" endtime="20210730 17:43:53.352"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27289</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:53.357" level="INFO">Running command 'kill 27289 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:53.352" endtime="20210730 17:43:53.358"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.352" endtime="20210730 17:43:53.358"/>
</iter>
<iter>
<var name="${pid}">27296</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:53.361" level="INFO">Running command 'kill 27296 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:53.358" endtime="20210730 17:43:53.361"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.358" endtime="20210730 17:43:53.361"/>
</iter>
<iter>
<var name="${pid}">27298</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:53.366" level="INFO">Running command 'kill 27298 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:53.362" endtime="20210730 17:43:53.366"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.362" endtime="20210730 17:43:53.366"/>
</iter>
<status status="PASS" starttime="20210730 17:43:53.352" endtime="20210730 17:43:53.366"/>
</for>
<status status="PASS" starttime="20210730 17:43:53.351" endtime="20210730 17:43:53.366"/>
</branch>
<status status="PASS" starttime="20210730 17:43:53.351" endtime="20210730 17:43:53.367"/>
</if>
<status status="PASS" starttime="20210730 17:43:53.333" endtime="20210730 17:43:53.367"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set an empty
phone number as such:
{
"phone": '+35840 687 54 53'
}
Then, each request should fail with the following response body:
{
"message": "mandatory phone number can only contain numbers [0-9] and optionally a single plus sign at the beginning indicating the country code",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:51.729" endtime="20210730 17:43:53.367">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t132" name="With Each Valid Token, Updating Each System User With Unknown Field Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:53.372" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:53.387" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:53.387" level="INFO">${pids} = 27327</msg>
<status status="PASS" starttime="20210730 17:43:53.369" endtime="20210730 17:43:53.387"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:53.388" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:53.387" endtime="20210730 17:43:53.388"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:53.388" level="INFO">${pids} = ['27327']</msg>
<status status="PASS" starttime="20210730 17:43:53.388" endtime="20210730 17:43:53.388"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27327</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:53.392" level="INFO">Running command 'kill 27327 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:53.389" endtime="20210730 17:43:53.393"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.388" endtime="20210730 17:43:53.393"/>
</iter>
<status status="PASS" starttime="20210730 17:43:53.388" endtime="20210730 17:43:53.393"/>
</for>
<status status="PASS" starttime="20210730 17:43:53.388" endtime="20210730 17:43:53.393"/>
</branch>
<status status="PASS" starttime="20210730 17:43:53.388" endtime="20210730 17:43:53.393"/>
</if>
<status status="PASS" starttime="20210730 17:43:53.368" endtime="20210730 17:43:53.393"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:53.394" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:53.394" endtime="20210730 17:43:53.394"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:53.395" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:53.395" endtime="20210730 17:43:53.395"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:53.395" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:53.395" endtime="20210730 17:43:53.395"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:53.396" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:53.396" endtime="20210730 17:43:53.396"/>
</kw>
<msg timestamp="20210730 17:43:53.396" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:53.394" endtime="20210730 17:43:53.396"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:53.415" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:53.396" endtime="20210730 17:43:53.417"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.393" endtime="20210730 17:43:53.417"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:53.419" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:53.418" endtime="20210730 17:43:53.422"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:54.924" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:53.423" endtime="20210730 17:43:54.924"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.418" endtime="20210730 17:43:54.926"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:54.932" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:54.930" endtime="20210730 17:43:54.932"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:54.934" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:54.932" endtime="20210730 17:43:54.934"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:54.935" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:54.934" endtime="20210730 17:43:54.935"/>
</kw>
<msg timestamp="20210730 17:43:54.936" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:54.928" endtime="20210730 17:43:54.936"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:54.938" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:54.936" endtime="20210730 17:43:54.938"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.927" endtime="20210730 17:43:54.939"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:54.940" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:54.940" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:54.940" endtime="20210730 17:43:54.940"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.939" endtime="20210730 17:43:54.941"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:54.942" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:54.942" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:54.941" endtime="20210730 17:43:54.942"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:54.943" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:54.942" endtime="20210730 17:43:54.943"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:54.944" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:54.943" endtime="20210730 17:43:54.944"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:54.944" endtime="20210730 17:43:54.946"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:54.946" endtime="20210730 17:43:54.947"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.943" endtime="20210730 17:43:54.947"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:54.948" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:54.947" endtime="20210730 17:43:54.948"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:54.948" endtime="20210730 17:43:54.949"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:54.949" endtime="20210730 17:43:54.950"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.947" endtime="20210730 17:43:54.950"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:54.950" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:54.950" endtime="20210730 17:43:54.950"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:54.950" endtime="20210730 17:43:54.951"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:54.952" endtime="20210730 17:43:54.952"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.950" endtime="20210730 17:43:54.952"/>
</iter>
<status status="PASS" starttime="20210730 17:43:54.943" endtime="20210730 17:43:54.952"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:54.953" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:54.952" endtime="20210730 17:43:54.953"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.941" endtime="20210730 17:43:54.953"/>
</kw>
<status status="PASS" starttime="20210730 17:43:53.368" endtime="20210730 17:43:54.953"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:54.956" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:54.953" endtime="20210730 17:43:54.956"/>
</kw>
<msg timestamp="20210730 17:43:54.957" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:54.953" endtime="20210730 17:43:54.957"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${user_data}[first_name]</arg>
<arg>value=Hakan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:54.957" endtime="20210730 17:43:54.957"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${user_data}[last_name]</arg>
<arg>value=Cuzdan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:54.957" endtime="20210730 17:43:54.958"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${user_data}[phone_number]</arg>
<arg>value=+358406875453</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:54.958" endtime="20210730 17:43:54.958"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${user_data}</arg>
<arg>alien_field_one=some value</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:54.958" endtime="20210730 17:43:54.958"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${user_data}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:54.959" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:54.959" endtime="20210730 17:43:54.959"/>
</kw>
<kw name="Create Payload">
<var>${payload}</var>
<var>${first_unknown_field}</var>
<arg>${user_data}</arg>
<kw name="Get Dictionary Keys" library="Collections">
<var>${fields}</var>
<arg>${user_data}</arg>
<arg>sort_keys=False</arg>
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<msg timestamp="20210730 17:43:54.960" level="INFO">${fields} = ['username', 'password', 'first_name', 'last_name', 'phone_number', 'alien_field_one']</msg>
<status status="PASS" starttime="20210730 17:43:54.960" endtime="20210730 17:43:54.960"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:54.961" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210730 17:43:54.960" endtime="20210730 17:43:54.961"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:54.961" level="INFO">${first_unknown_field} = </msg>
<status status="PASS" starttime="20210730 17:43:54.961" endtime="20210730 17:43:54.961"/>
</kw>
<for flavor="IN">
<var>${field}</var>
<value>@{fields}</value>
<iter>
<var name="${field}">username</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.962" endtime="20210730 17:43:54.962"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.962" endtime="20210730 17:43:54.962"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.962" endtime="20210730 17:43:54.962"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.962" endtime="20210730 17:43:54.962"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.962" endtime="20210730 17:43:54.962"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.962" endtime="20210730 17:43:54.962"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="PASS" starttime="20210730 17:43:54.963" endtime="20210730 17:43:54.963"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.963" endtime="20210730 17:43:54.963"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.963" endtime="20210730 17:43:54.963"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.963" endtime="20210730 17:43:54.963"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.963" endtime="20210730 17:43:54.963"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.963" endtime="20210730 17:43:54.963"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.963" endtime="20210730 17:43:54.963"/>
</branch>
<status status="NOT RUN" starttime="20210730 17:43:54.963" endtime="20210730 17:43:54.963"/>
</if>
<status status="NOT RUN" starttime="20210730 17:43:54.963" endtime="20210730 17:43:54.963"/>
</branch>
<status status="PASS" starttime="20210730 17:43:54.962" endtime="20210730 17:43:54.963"/>
</if>
<status status="PASS" starttime="20210730 17:43:54.961" endtime="20210730 17:43:54.963"/>
</iter>
<iter>
<var name="${field}">password</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.964" endtime="20210730 17:43:54.964"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.964" endtime="20210730 17:43:54.964"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.964" endtime="20210730 17:43:54.964"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.964" endtime="20210730 17:43:54.964"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.964" endtime="20210730 17:43:54.964"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.964" endtime="20210730 17:43:54.965"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.965" endtime="20210730 17:43:54.965"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.965" endtime="20210730 17:43:54.965"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="PASS" starttime="20210730 17:43:54.965" endtime="20210730 17:43:54.965"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.965" endtime="20210730 17:43:54.965"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.965" endtime="20210730 17:43:54.965"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.966" endtime="20210730 17:43:54.966"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.965" endtime="20210730 17:43:54.966"/>
</branch>
<status status="NOT RUN" starttime="20210730 17:43:54.965" endtime="20210730 17:43:54.966"/>
</if>
<status status="NOT RUN" starttime="20210730 17:43:54.965" endtime="20210730 17:43:54.966"/>
</branch>
<status status="PASS" starttime="20210730 17:43:54.963" endtime="20210730 17:43:54.966"/>
</if>
<status status="PASS" starttime="20210730 17:43:54.963" endtime="20210730 17:43:54.966"/>
</iter>
<iter>
<var name="${field}">first_name</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:54.966" endtime="20210730 17:43:54.966"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.966" endtime="20210730 17:43:54.967"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.967" endtime="20210730 17:43:54.967"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.967" endtime="20210730 17:43:54.967"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.967" endtime="20210730 17:43:54.967"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.967" endtime="20210730 17:43:54.967"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.967" endtime="20210730 17:43:54.967"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.967" endtime="20210730 17:43:54.967"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.967" endtime="20210730 17:43:54.967"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.967" endtime="20210730 17:43:54.967"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.967" endtime="20210730 17:43:54.967"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.968" endtime="20210730 17:43:54.968"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.968" endtime="20210730 17:43:54.968"/>
</branch>
<status status="NOT RUN" starttime="20210730 17:43:54.968" endtime="20210730 17:43:54.968"/>
</if>
<status status="NOT RUN" starttime="20210730 17:43:54.967" endtime="20210730 17:43:54.968"/>
</branch>
<status status="PASS" starttime="20210730 17:43:54.966" endtime="20210730 17:43:54.968"/>
</if>
<status status="PASS" starttime="20210730 17:43:54.966" endtime="20210730 17:43:54.968"/>
</iter>
<iter>
<var name="${field}">last_name</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.968" endtime="20210730 17:43:54.968"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.968" endtime="20210730 17:43:54.968"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:54.968" endtime="20210730 17:43:54.969"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.968" endtime="20210730 17:43:54.969"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.969" endtime="20210730 17:43:54.969"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.969" endtime="20210730 17:43:54.969"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.969" endtime="20210730 17:43:54.969"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.969" endtime="20210730 17:43:54.969"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.969" endtime="20210730 17:43:54.969"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.969" endtime="20210730 17:43:54.969"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.969" endtime="20210730 17:43:54.969"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.970" endtime="20210730 17:43:54.970"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.969" endtime="20210730 17:43:54.970"/>
</branch>
<status status="NOT RUN" starttime="20210730 17:43:54.969" endtime="20210730 17:43:54.970"/>
</if>
<status status="NOT RUN" starttime="20210730 17:43:54.969" endtime="20210730 17:43:54.970"/>
</branch>
<status status="PASS" starttime="20210730 17:43:54.968" endtime="20210730 17:43:54.970"/>
</if>
<status status="PASS" starttime="20210730 17:43:54.968" endtime="20210730 17:43:54.970"/>
</iter>
<iter>
<var name="${field}">phone_number</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.970" endtime="20210730 17:43:54.970"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.970" endtime="20210730 17:43:54.970"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.970" endtime="20210730 17:43:54.970"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.970" endtime="20210730 17:43:54.970"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:54.971" endtime="20210730 17:43:54.971"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.970" endtime="20210730 17:43:54.971"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.971" endtime="20210730 17:43:54.971"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.971" endtime="20210730 17:43:54.971"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.971" endtime="20210730 17:43:54.971"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.971" endtime="20210730 17:43:54.971"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.971" endtime="20210730 17:43:54.971"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.971" endtime="20210730 17:43:54.971"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.971" endtime="20210730 17:43:54.971"/>
</branch>
<status status="NOT RUN" starttime="20210730 17:43:54.971" endtime="20210730 17:43:54.971"/>
</if>
<status status="NOT RUN" starttime="20210730 17:43:54.971" endtime="20210730 17:43:54.971"/>
</branch>
<status status="PASS" starttime="20210730 17:43:54.970" endtime="20210730 17:43:54.971"/>
</if>
<status status="PASS" starttime="20210730 17:43:54.970" endtime="20210730 17:43:54.971"/>
</iter>
<iter>
<var name="${field}">alien_field_one</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.972" endtime="20210730 17:43:54.972"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.972" endtime="20210730 17:43:54.972"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.972" endtime="20210730 17:43:54.972"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.972" endtime="20210730 17:43:54.972"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.972" endtime="20210730 17:43:54.972"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.972" endtime="20210730 17:43:54.972"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.972" endtime="20210730 17:43:54.972"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.972" endtime="20210730 17:43:54.972"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:54.973" endtime="20210730 17:43:54.973"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:54.972" endtime="20210730 17:43:54.973"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:54.973" endtime="20210730 17:43:54.973"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:54.973" level="INFO">${first_unknown_field} = alien_field_one</msg>
<status status="PASS" starttime="20210730 17:43:54.973" endtime="20210730 17:43:54.973"/>
</kw>
<status status="PASS" starttime="20210730 17:43:54.973" endtime="20210730 17:43:54.973"/>
</branch>
<status status="PASS" starttime="20210730 17:43:54.973" endtime="20210730 17:43:54.974"/>
</if>
<status status="PASS" starttime="20210730 17:43:54.973" endtime="20210730 17:43:54.974"/>
</branch>
<status status="PASS" starttime="20210730 17:43:54.972" endtime="20210730 17:43:54.974"/>
</if>
<status status="PASS" starttime="20210730 17:43:54.972" endtime="20210730 17:43:54.974"/>
</iter>
<status status="PASS" starttime="20210730 17:43:54.961" endtime="20210730 17:43:54.974"/>
</for>
<msg timestamp="20210730 17:43:54.974" level="INFO">${payload} = {'firstname': 'Hakan', 'lastname': 'Cuzdan', 'phone': '+358406875453', 'alien_field_one': 'some value'}</msg>
<msg timestamp="20210730 17:43:54.974" level="INFO">${first_unknown_field} = alien_field_one</msg>
<status status="PASS" starttime="20210730 17:43:54.960" endtime="20210730 17:43:54.974"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:54.982" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:54.983" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:54.974" endtime="20210730 17:43:54.983"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Unknown field ${first_unknown_field}</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:43:54.983" endtime="20210730 17:43:54.983"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:43:54.983" endtime="20210730 17:43:54.983"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:54.974" endtime="20210730 17:43:54.983"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:54.974" endtime="20210730 17:43:54.983"/>
</for>
<status status="FAIL" starttime="20210730 17:43:54.959" endtime="20210730 17:43:54.984"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:54.959" endtime="20210730 17:43:54.984"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:54.958" endtime="20210730 17:43:54.984"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:54.988" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:54.999" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:54.999" level="INFO">${pids} = 27350
27357
27359</msg>
<status status="PASS" starttime="20210730 17:43:54.985" endtime="20210730 17:43:54.999"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:55.000" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:54.999" endtime="20210730 17:43:55.000"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:55.000" level="INFO">${pids} = ['27350', '27357', '27359']</msg>
<status status="PASS" starttime="20210730 17:43:55.000" endtime="20210730 17:43:55.000"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27350</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:55.004" level="INFO">Running command 'kill 27350 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:55.001" endtime="20210730 17:43:55.005"/>
</kw>
<status status="PASS" starttime="20210730 17:43:55.000" endtime="20210730 17:43:55.005"/>
</iter>
<iter>
<var name="${pid}">27357</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:55.008" level="INFO">Running command 'kill 27357 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:55.005" endtime="20210730 17:43:55.009"/>
</kw>
<status status="PASS" starttime="20210730 17:43:55.005" endtime="20210730 17:43:55.009"/>
</iter>
<iter>
<var name="${pid}">27359</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:55.014" level="INFO">Running command 'kill 27359 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:55.009" endtime="20210730 17:43:55.015"/>
</kw>
<status status="PASS" starttime="20210730 17:43:55.009" endtime="20210730 17:43:55.015"/>
</iter>
<status status="PASS" starttime="20210730 17:43:55.000" endtime="20210730 17:43:55.015"/>
</for>
<status status="PASS" starttime="20210730 17:43:55.000" endtime="20210730 17:43:55.015"/>
</branch>
<status status="PASS" starttime="20210730 17:43:55.000" endtime="20210730 17:43:55.015"/>
</if>
<status status="PASS" starttime="20210730 17:43:54.984" endtime="20210730 17:43:55.016"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"firstname": "Hakan",
"lastname": "Cuzdan",
"phone": '+358406875453',
"alien_field_one": "some value"
}
Note that firstname, lastname and phone are valid, and alien_field_one is not available in user table in SUT.
Then, each request should fail with the following response body:
{
"message": "unknown field alien_field_one",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:53.367" endtime="20210730 17:43:55.016">We expected a JSON, but received text/html</status>
</test>
<test id="s1-t133" name="With Each Valid Token, Updating Each System User With Multiple Unknown Fields Results In Failure Status With Right Error Message">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Kill Web Application</arg>
<arg>AND</arg>
<arg>Replace Database With New Database Having Users</arg>
<arg>AND</arg>
<arg>Start Web Application With No Init Procedure</arg>
<arg>AND</arg>
<arg>Initialize Database Connection</arg>
<arg>AND</arg>
<arg>Verify Tables</arg>
<arg>AND</arg>
<arg>Fetch All System Users From Db</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Kill Web Application" library="Common">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:55.022" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:55.032" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:55.032" level="INFO">${pids} = 27388</msg>
<status status="PASS" starttime="20210730 17:43:55.018" endtime="20210730 17:43:55.032"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:55.033" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:55.032" endtime="20210730 17:43:55.033"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:55.033" level="INFO">${pids} = ['27388']</msg>
<status status="PASS" starttime="20210730 17:43:55.033" endtime="20210730 17:43:55.033"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27388</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:55.037" level="INFO">Running command 'kill 27388 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:55.034" endtime="20210730 17:43:55.038"/>
</kw>
<status status="PASS" starttime="20210730 17:43:55.033" endtime="20210730 17:43:55.038"/>
</iter>
<status status="PASS" starttime="20210730 17:43:55.033" endtime="20210730 17:43:55.038"/>
</for>
<status status="PASS" starttime="20210730 17:43:55.033" endtime="20210730 17:43:55.038"/>
</branch>
<status status="PASS" starttime="20210730 17:43:55.033" endtime="20210730 17:43:55.038"/>
</if>
<status status="PASS" starttime="20210730 17:43:55.018" endtime="20210730 17:43:55.038"/>
</kw>
<kw name="Replace Database With New Database Having Users" library="DbManager">
<kw name="Set Variable" library="BuiltIn">
<var>${source}</var>
<arg>${EXECDIR}${/}TestData${/}demo_app_with_users.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:55.039" level="INFO">${source} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:55.039" endtime="20210730 17:43:55.039"/>
</kw>
<kw name="Get Path To App Database" library="DbManager">
<var>${target}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:55.040" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:55.039" endtime="20210730 17:43:55.040"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:55.040" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:55.040" endtime="20210730 17:43:55.040"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:55.041" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:55.040" endtime="20210730 17:43:55.041"/>
</kw>
<msg timestamp="20210730 17:43:55.041" level="INFO">${target} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:55.039" endtime="20210730 17:43:55.041"/>
</kw>
<kw name="Run" library="OperatingSystem">
<arg>cp ${source} ${target}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:55.044" level="INFO">Running command 'cp /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject/TestData/demo_app_with_users.sqlite /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:55.041" endtime="20210730 17:43:55.052"/>
</kw>
<status status="PASS" starttime="20210730 17:43:55.038" endtime="20210730 17:43:55.052"/>
</kw>
<kw name="Start Web Application With No Init Procedure" library="Common">
<kw name="Start Process" library="Process">
<arg>export FLASK_APP\=demo_app;flask run --host\=0.0.0.0 --port\=8080</arg>
<arg>shell=True</arg>
<arg>alias=flasky</arg>
<arg>cwd=${EXECDIR}${/}..${/}Flasky</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20210730 17:43:55.054" level="INFO">Starting process:
export FLASK_APP=demo_app;flask run --host=0.0.0.0 --port=8080</msg>
<status status="PASS" starttime="20210730 17:43:55.053" endtime="20210730 17:43:55.058"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1.5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20210730 17:43:56.565" level="INFO">Slept 1 second 500 milliseconds</msg>
<status status="PASS" starttime="20210730 17:43:55.058" endtime="20210730 17:43:56.566"/>
</kw>
<status status="PASS" starttime="20210730 17:43:55.053" endtime="20210730 17:43:56.567"/>
</kw>
<kw name="Initialize Database Connection" library="DbManager">
<kw name="Get Path To App Database" library="DbManager">
<var>${path_to_database}</var>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${EXECDIR}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:56.568" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/TestProject</msg>
<status status="PASS" starttime="20210730 17:43:56.568" endtime="20210730 17:43:56.568"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${path_to_database}</var>
<arg>${path_to_database}</arg>
<arg>TestProject</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20210730 17:43:56.569" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/</msg>
<status status="PASS" starttime="20210730 17:43:56.569" endtime="20210730 17:43:56.569"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${path_to_database}</var>
<arg>${path_to_database}Flasky${/}instance${/}demo_app.sqlite</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:56.569" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:56.569" endtime="20210730 17:43:56.569"/>
</kw>
<msg timestamp="20210730 17:43:56.570" level="INFO">${path_to_database} = /home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite</msg>
<status status="PASS" starttime="20210730 17:43:56.568" endtime="20210730 17:43:56.570"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>database='${path_to_database}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20210730 17:43:56.570" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect(database='/home/hakan/Python/Robot/CRF_Demo_Solution/Flasky/instance/demo_app.sqlite')) </msg>
<status status="PASS" starttime="20210730 17:43:56.570" endtime="20210730 17:43:56.571"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.567" endtime="20210730 17:43:56.571"/>
</kw>
<kw name="Verify Tables" library="DbManager">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>user</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20210730 17:43:56.571" level="INFO">Executing : Table Must Exist  |  user </msg>
<msg timestamp="20210730 17:43:56.571" level="INFO">Executing : Row Count  |  SELECT name FROM sqlite_master WHERE type='table' AND name='user' COLLATE NOCASE </msg>
<status status="PASS" starttime="20210730 17:43:56.571" endtime="20210730 17:43:56.572"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.571" endtime="20210730 17:43:56.572"/>
</kw>
<kw name="Fetch All System Users From Db" library="DbManager">
<kw name="Query" library="DatabaseLibrary">
<var>${users}</var>
<arg>${QUERY_ALL_USERS}</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20210730 17:43:56.572" level="INFO">Executing : Query  |  select username, password, firstname, lastname, phone, token from user; </msg>
<msg timestamp="20210730 17:43:56.572" level="INFO">${users} = [('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzND...</msg>
<status status="PASS" starttime="20210730 17:43:56.572" endtime="20210730 17:43:56.572"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${SYSTEM_USERS}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20210730 17:43:56.573" level="INFO">${SYSTEM_USERS} = []</msg>
<status status="PASS" starttime="20210730 17:43:56.573" endtime="20210730 17:43:56.573"/>
</kw>
<for flavor="IN">
<var>${user}</var>
<value>@{users}</value>
<iter>
<var name="${user}">('SuperDuperUser1', 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'David', 'Holm', '0506627124', 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:56.574" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:56.573" endtime="20210730 17:43:56.574"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.574" endtime="20210730 17:43:56.575"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:56.575" endtime="20210730 17:43:56.575"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.573" endtime="20210730 17:43:56.575"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser2', 'pbkdf2:sha256:50000$xCMyMcA4$08c69b9646632c448d7d9dcfc6cf4c6f148c90261d4e7db585e6848e5c8920e0', 'Hakan', 'Holm', '0407563452', 'MzI2MTg2NjIyMDY0OTk3NTc1ODcxMjEwNDQ2OTUxMTUzMTQxOTY...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:56.575" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:56.575" endtime="20210730 17:43:56.575"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.576" endtime="20210730 17:43:56.576"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:56.576" endtime="20210730 17:43:56.577"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.575" endtime="20210730 17:43:56.577"/>
</iter>
<iter>
<var name="${user}">('SuperDuperUser3', 'pbkdf2:sha256:50000$sQmYnzhL$19df239ec550fe9919d6b33bc1781583d11f7e9ea054b578ded8c356b2a1f008', 'John', 'Brown', '0508094677', 'MTgxMjcxNDM1OTIzNTUzNjMyMzIxNTgzNjY0MTg1MzU4MTg0MTA...</var>
<kw name="Create Dictionary" library="BuiltIn">
<var>&amp;{new_user}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:56.577" level="INFO">&amp;{new_user} = { }</msg>
<status status="PASS" starttime="20210730 17:43:56.577" endtime="20210730 17:43:56.577"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${new_user}</arg>
<arg>username=${user}[0]</arg>
<arg>password=${user}[1]</arg>
<arg>firstname=${user}[2]</arg>
<arg>lastname=${user}[3]</arg>
<arg>phone=${user}[4]</arg>
<arg>token=${user}[5]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.577" endtime="20210730 17:43:56.578"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${SYSTEM_USERS}</arg>
<arg>${new_user}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20210730 17:43:56.578" endtime="20210730 17:43:56.578"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.577" endtime="20210730 17:43:56.578"/>
</iter>
<status status="PASS" starttime="20210730 17:43:56.573" endtime="20210730 17:43:56.579"/>
</for>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>@{SYSTEM_USERS}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20210730 17:43:56.579" level="INFO">@{SYSTEM_USERS} = [ {'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '05066...</msg>
<status status="PASS" starttime="20210730 17:43:56.579" endtime="20210730 17:43:56.579"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.572" endtime="20210730 17:43:56.579"/>
</kw>
<status status="PASS" starttime="20210730 17:43:55.018" endtime="20210730 17:43:56.579"/>
</kw>
<kw name="Get Valid User's Registration Form Data" library="DataManager">
<var>${user_data}</var>
<kw name="Read One Valid Users Registration Form Data" library="RegistrationFormDataReader">
<var>${valid_user_registration_form_data}</var>
<doc>Returns a registration_form_data instance, whose fields are all valid. The data source file for the instances
     is located in TestProject/TestData/ManyValidUsers.json. It reads the file in a cyclic fashion one
     registration_form_data instance at a time. When end of file is reached, it returns to the begining of the file
     and repeats the process.</doc>
<msg timestamp="20210730 17:43:56.582" level="INFO">${valid_user_registration_form_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:56.580" endtime="20210730 17:43:56.582"/>
</kw>
<msg timestamp="20210730 17:43:56.582" level="INFO">${user_data} = {'username': {'value': 'SuperDuperUser1', 'isValid': True}, 'password': {'value': '012!.Aab', 'isValid': True}, 'first_name': {'value': 'David', 'isValid': True}, 'last_name': {'value': 'Holm', 'isVal...</msg>
<status status="PASS" starttime="20210730 17:43:56.579" endtime="20210730 17:43:56.582"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${user_data}[first_name]</arg>
<arg>value=Hakan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.582" endtime="20210730 17:43:56.583"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${user_data}[last_name]</arg>
<arg>value=Cuzdan</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.583" endtime="20210730 17:43:56.583"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${user_data}[phone_number]</arg>
<arg>value=+358406875453</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.583" endtime="20210730 17:43:56.583"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${user_data}</arg>
<arg>alien_field_one=some value</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.583" endtime="20210730 17:43:56.584"/>
</kw>
<kw name="Set To Dictionary" library="Collections">
<arg>${user_data}</arg>
<arg>alien_field_two=some other value</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.584" endtime="20210730 17:43:56.584"/>
</kw>
<for flavor="IN">
<var>${api_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${api_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="With Valid Token, Attempt to Set Given Fields For All System Users">
<arg>${api_user}[token]</arg>
<arg>${user_data}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Token=${token}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:56.585" level="INFO">${headers} = {'Token': 'MTczNzAyNjc5NDg4Mzc1MzcwNDIwODAyOTM1NTExMjU4NzkzNDM2'}</msg>
<status status="PASS" starttime="20210730 17:43:56.585" endtime="20210730 17:43:56.585"/>
</kw>
<kw name="Create Payload">
<var>${payload}</var>
<var>${first_unknown_field}</var>
<arg>${user_data}</arg>
<kw name="Get Dictionary Keys" library="Collections">
<var>${fields}</var>
<arg>${user_data}</arg>
<arg>sort_keys=False</arg>
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<msg timestamp="20210730 17:43:56.586" level="INFO">${fields} = ['username', 'password', 'first_name', 'last_name', 'phone_number', 'alien_field_one', 'alien_field_two']</msg>
<status status="PASS" starttime="20210730 17:43:56.586" endtime="20210730 17:43:56.586"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20210730 17:43:56.586" level="INFO">${payload} = {}</msg>
<status status="PASS" starttime="20210730 17:43:56.586" endtime="20210730 17:43:56.586"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:56.587" level="INFO">${first_unknown_field} = </msg>
<status status="PASS" starttime="20210730 17:43:56.586" endtime="20210730 17:43:56.587"/>
</kw>
<for flavor="IN">
<var>${field}</var>
<value>@{fields}</value>
<iter>
<var name="${field}">username</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.587" endtime="20210730 17:43:56.587"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.587" endtime="20210730 17:43:56.587"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.587" endtime="20210730 17:43:56.588"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.587" endtime="20210730 17:43:56.588"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.588" endtime="20210730 17:43:56.588"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.588" endtime="20210730 17:43:56.588"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="PASS" starttime="20210730 17:43:56.588" endtime="20210730 17:43:56.588"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.588" endtime="20210730 17:43:56.588"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.588" endtime="20210730 17:43:56.588"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.588" endtime="20210730 17:43:56.588"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.588" endtime="20210730 17:43:56.588"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.589" endtime="20210730 17:43:56.589"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.589" endtime="20210730 17:43:56.589"/>
</branch>
<status status="NOT RUN" starttime="20210730 17:43:56.588" endtime="20210730 17:43:56.589"/>
</if>
<status status="NOT RUN" starttime="20210730 17:43:56.588" endtime="20210730 17:43:56.589"/>
</branch>
<status status="PASS" starttime="20210730 17:43:56.587" endtime="20210730 17:43:56.589"/>
</if>
<status status="PASS" starttime="20210730 17:43:56.587" endtime="20210730 17:43:56.589"/>
</iter>
<iter>
<var name="${field}">password</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.589" endtime="20210730 17:43:56.589"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.589" endtime="20210730 17:43:56.589"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.589" endtime="20210730 17:43:56.589"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.589" endtime="20210730 17:43:56.589"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.590" endtime="20210730 17:43:56.590"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.589" endtime="20210730 17:43:56.590"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.590" endtime="20210730 17:43:56.590"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.590" endtime="20210730 17:43:56.590"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="PASS" starttime="20210730 17:43:56.590" endtime="20210730 17:43:56.590"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.590" endtime="20210730 17:43:56.590"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.590" endtime="20210730 17:43:56.591"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.591" endtime="20210730 17:43:56.591"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.591" endtime="20210730 17:43:56.591"/>
</branch>
<status status="NOT RUN" starttime="20210730 17:43:56.591" endtime="20210730 17:43:56.591"/>
</if>
<status status="NOT RUN" starttime="20210730 17:43:56.590" endtime="20210730 17:43:56.591"/>
</branch>
<status status="PASS" starttime="20210730 17:43:56.589" endtime="20210730 17:43:56.591"/>
</if>
<status status="PASS" starttime="20210730 17:43:56.589" endtime="20210730 17:43:56.591"/>
</iter>
<iter>
<var name="${field}">first_name</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.591" endtime="20210730 17:43:56.592"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.591" endtime="20210730 17:43:56.592"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.592" endtime="20210730 17:43:56.592"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.592" endtime="20210730 17:43:56.592"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.592" endtime="20210730 17:43:56.592"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.592" endtime="20210730 17:43:56.592"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.592" endtime="20210730 17:43:56.592"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.592" endtime="20210730 17:43:56.592"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.592" endtime="20210730 17:43:56.592"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.592" endtime="20210730 17:43:56.592"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.592" endtime="20210730 17:43:56.592"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.593" endtime="20210730 17:43:56.593"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.593" endtime="20210730 17:43:56.593"/>
</branch>
<status status="NOT RUN" starttime="20210730 17:43:56.593" endtime="20210730 17:43:56.593"/>
</if>
<status status="NOT RUN" starttime="20210730 17:43:56.592" endtime="20210730 17:43:56.593"/>
</branch>
<status status="PASS" starttime="20210730 17:43:56.591" endtime="20210730 17:43:56.593"/>
</if>
<status status="PASS" starttime="20210730 17:43:56.591" endtime="20210730 17:43:56.593"/>
</iter>
<iter>
<var name="${field}">last_name</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.593" endtime="20210730 17:43:56.593"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.593" endtime="20210730 17:43:56.593"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.593" endtime="20210730 17:43:56.594"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.593" endtime="20210730 17:43:56.594"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.594" endtime="20210730 17:43:56.594"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.594" endtime="20210730 17:43:56.594"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.594" endtime="20210730 17:43:56.594"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.594" endtime="20210730 17:43:56.594"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.594" endtime="20210730 17:43:56.594"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.594" endtime="20210730 17:43:56.594"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.594" endtime="20210730 17:43:56.594"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.595" endtime="20210730 17:43:56.595"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.594" endtime="20210730 17:43:56.595"/>
</branch>
<status status="NOT RUN" starttime="20210730 17:43:56.594" endtime="20210730 17:43:56.595"/>
</if>
<status status="NOT RUN" starttime="20210730 17:43:56.594" endtime="20210730 17:43:56.595"/>
</branch>
<status status="PASS" starttime="20210730 17:43:56.593" endtime="20210730 17:43:56.595"/>
</if>
<status status="PASS" starttime="20210730 17:43:56.593" endtime="20210730 17:43:56.595"/>
</iter>
<iter>
<var name="${field}">phone_number</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.595" endtime="20210730 17:43:56.595"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.595" endtime="20210730 17:43:56.595"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.595" endtime="20210730 17:43:56.595"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.595" endtime="20210730 17:43:56.595"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.596" endtime="20210730 17:43:56.596"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.595" endtime="20210730 17:43:56.596"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.596" endtime="20210730 17:43:56.596"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.596" endtime="20210730 17:43:56.596"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.596" endtime="20210730 17:43:56.596"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.596" endtime="20210730 17:43:56.596"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.597" endtime="20210730 17:43:56.597"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.597" endtime="20210730 17:43:56.597"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.597" endtime="20210730 17:43:56.597"/>
</branch>
<status status="NOT RUN" starttime="20210730 17:43:56.597" endtime="20210730 17:43:56.597"/>
</if>
<status status="NOT RUN" starttime="20210730 17:43:56.596" endtime="20210730 17:43:56.597"/>
</branch>
<status status="PASS" starttime="20210730 17:43:56.595" endtime="20210730 17:43:56.597"/>
</if>
<status status="PASS" starttime="20210730 17:43:56.595" endtime="20210730 17:43:56.597"/>
</iter>
<iter>
<var name="${field}">alien_field_one</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.597" endtime="20210730 17:43:56.597"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.597" endtime="20210730 17:43:56.597"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.597" endtime="20210730 17:43:56.597"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.597" endtime="20210730 17:43:56.597"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.598" endtime="20210730 17:43:56.598"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.598" endtime="20210730 17:43:56.598"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.598" endtime="20210730 17:43:56.598"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.598" endtime="20210730 17:43:56.598"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.598" endtime="20210730 17:43:56.598"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.598" endtime="20210730 17:43:56.598"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.598" endtime="20210730 17:43:56.599"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20210730 17:43:56.599" level="INFO">${first_unknown_field} = alien_field_one</msg>
<status status="PASS" starttime="20210730 17:43:56.599" endtime="20210730 17:43:56.599"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.599" endtime="20210730 17:43:56.599"/>
</branch>
<status status="PASS" starttime="20210730 17:43:56.599" endtime="20210730 17:43:56.599"/>
</if>
<status status="PASS" starttime="20210730 17:43:56.598" endtime="20210730 17:43:56.599"/>
</branch>
<status status="PASS" starttime="20210730 17:43:56.597" endtime="20210730 17:43:56.599"/>
</if>
<status status="PASS" starttime="20210730 17:43:56.597" endtime="20210730 17:43:56.599"/>
</iter>
<iter>
<var name="${field}">alien_field_two</var>
<if>
<branch type="IF" condition="$field=='first_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>firstname=${user_data}[first_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.600" endtime="20210730 17:43:56.600"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.600" endtime="20210730 17:43:56.600"/>
</branch>
<branch type="ELSE IF" condition="$field=='last_name'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>lastname=${user_data}[last_name][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.600" endtime="20210730 17:43:56.600"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.600" endtime="20210730 17:43:56.600"/>
</branch>
<branch type="ELSE IF" condition="$field=='phone_number'">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>phone=${user_data}[phone_number][value]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.600" endtime="20210730 17:43:56.600"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.600" endtime="20210730 17:43:56.600"/>
</branch>
<branch type="ELSE IF" condition="$field=='username'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.600" endtime="20210730 17:43:56.600"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.600" endtime="20210730 17:43:56.600"/>
</branch>
<branch type="ELSE IF" condition="$field=='password'">
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.601" endtime="20210730 17:43:56.601"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.601" endtime="20210730 17:43:56.601"/>
</branch>
<branch type="ELSE">
<kw name="Set To Dictionary" library="Collections">
<arg>${payload}</arg>
<arg>${field}=${user_data}[${field}]</arg>
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<status status="PASS" starttime="20210730 17:43:56.601" endtime="20210730 17:43:56.601"/>
</kw>
<if>
<branch type="IF" condition="not $first_unknown_field">
<kw name="Set Variable" library="BuiltIn">
<var>${first_unknown_field}</var>
<arg>${field}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20210730 17:43:56.601" endtime="20210730 17:43:56.601"/>
</kw>
<status status="NOT RUN" starttime="20210730 17:43:56.601" endtime="20210730 17:43:56.601"/>
</branch>
<status status="PASS" starttime="20210730 17:43:56.601" endtime="20210730 17:43:56.602"/>
</if>
<status status="PASS" starttime="20210730 17:43:56.601" endtime="20210730 17:43:56.602"/>
</branch>
<status status="PASS" starttime="20210730 17:43:56.599" endtime="20210730 17:43:56.602"/>
</if>
<status status="PASS" starttime="20210730 17:43:56.599" endtime="20210730 17:43:56.602"/>
</iter>
<status status="PASS" starttime="20210730 17:43:56.587" endtime="20210730 17:43:56.602"/>
</for>
<msg timestamp="20210730 17:43:56.602" level="INFO">${payload} = {'firstname': 'Hakan', 'lastname': 'Cuzdan', 'phone': '+358406875453', 'alien_field_one': 'some value', 'alien_field_two': 'some other value'}</msg>
<msg timestamp="20210730 17:43:56.602" level="INFO">${first_unknown_field} = alien_field_one</msg>
<status status="PASS" starttime="20210730 17:43:56.585" endtime="20210730 17:43:56.602"/>
</kw>
<for flavor="IN">
<var>${system_user}</var>
<value>@{SYSTEM_USERS}</value>
<iter>
<var name="${system_user}">{'username': 'SuperDuperUser1', 'password': 'pbkdf2:sha256:50000$IZNImqKL$11594e182d842a475cd5df093fad1acba9478b39de5aff07a8cc97cb993074c2', 'firstname': 'David', 'lastname': 'Holm', 'phone': '0506627...</var>
<kw name="PUT" library="CRUD_Library">
<var>${response}</var>
<arg>/users/${system_user}[username]</arg>
<arg>headers=${headers}</arg>
<arg>body=${payload}</arg>
<doc>Sends a PUT request to the endpoint.
    The endpoint is joined with the base_url given on library init.</doc>
<msg timestamp="20210730 17:43:56.614" level="INFO">HTTP error occurred: 400 Client Error: BAD REQUEST for url: http://0.0.0.0:8080/api/users/SuperDuperUser1</msg>
<msg timestamp="20210730 17:43:56.614" level="FAIL">We expected a JSON, but received text/html</msg>
<status status="FAIL" starttime="20210730 17:43:56.602" endtime="20210730 17:43:56.614"/>
</kw>
<kw name="Verify Response">
<arg>${response}</arg>
<arg>message=Unknown field ${first_unknown_field}</arg>
<arg>status=FAILURE</arg>
<status status="NOT RUN" starttime="20210730 17:43:56.614" endtime="20210730 17:43:56.614"/>
</kw>
<kw name="Verify System Users In Database Are Intact">
<status status="NOT RUN" starttime="20210730 17:43:56.614" endtime="20210730 17:43:56.614"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:56.602" endtime="20210730 17:43:56.614"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:56.602" endtime="20210730 17:43:56.615"/>
</for>
<status status="FAIL" starttime="20210730 17:43:56.584" endtime="20210730 17:43:56.615"/>
</kw>
<status status="FAIL" starttime="20210730 17:43:56.584" endtime="20210730 17:43:56.615"/>
</iter>
<status status="FAIL" starttime="20210730 17:43:56.584" endtime="20210730 17:43:56.615"/>
</for>
<kw name="Kill Web Application" library="Common" type="TEARDOWN">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${pids}</var>
<arg>pgrep -f 'flask run --host=0.0.0.0 --port=8080'</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20210730 17:43:56.619" level="INFO">Running command 'pgrep -f 'flask run --host=0.0.0.0 --port=8080' 2&gt;&amp;1'.</msg>
<msg timestamp="20210730 17:43:56.629" level="INFO">${rc} = 0</msg>
<msg timestamp="20210730 17:43:56.629" level="INFO">${pids} = 27411
27418
27421</msg>
<status status="PASS" starttime="20210730 17:43:56.615" endtime="20210730 17:43:56.629"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${is_not_empty}</var>
<arg>$pids!=''</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:56.630" level="INFO">${is_not_empty} = True</msg>
<status status="PASS" starttime="20210730 17:43:56.630" endtime="20210730 17:43:56.630"/>
</kw>
<if>
<branch type="IF" condition="${is_not_empty}">
<kw name="Evaluate" library="BuiltIn">
<var>${pids}</var>
<arg>$pids.split('\\n')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20210730 17:43:56.631" level="INFO">${pids} = ['27411', '27418', '27421']</msg>
<status status="PASS" starttime="20210730 17:43:56.631" endtime="20210730 17:43:56.631"/>
</kw>
<for flavor="IN">
<var>${pid}</var>
<value>@{pids}</value>
<iter>
<var name="${pid}">27411</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:56.635" level="INFO">Running command 'kill 27411 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:56.631" endtime="20210730 17:43:56.635"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.631" endtime="20210730 17:43:56.636"/>
</iter>
<iter>
<var name="${pid}">27418</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:56.642" level="INFO">Running command 'kill 27418 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:56.636" endtime="20210730 17:43:56.644"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.636" endtime="20210730 17:43:56.644"/>
</iter>
<iter>
<var name="${pid}">27421</var>
<kw name="Run" library="OperatingSystem">
<arg>kill ${pid}</arg>
<doc>Runs the given command in the system and returns the output.</doc>
<msg timestamp="20210730 17:43:56.649" level="INFO">Running command 'kill 27421 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20210730 17:43:56.645" endtime="20210730 17:43:56.649"/>
</kw>
<status status="PASS" starttime="20210730 17:43:56.644" endtime="20210730 17:43:56.649"/>
</iter>
<status status="PASS" starttime="20210730 17:43:56.631" endtime="20210730 17:43:56.649"/>
</for>
<status status="PASS" starttime="20210730 17:43:56.631" endtime="20210730 17:43:56.649"/>
</branch>
<status status="PASS" starttime="20210730 17:43:56.630" endtime="20210730 17:43:56.649"/>
</if>
<status status="PASS" starttime="20210730 17:43:56.615" endtime="20210730 17:43:56.650"/>
</kw>
<doc>Imagine we have three system &amp; api users X, Y, Z, each of whom makes multiple PUT requests to /api/users/&lt;username&gt;
where &lt;username&gt; is replaced with each system user's username. In the requests' body, we set:
{
"firstname": "Hakan",
"lastname": "Cuzdan",
"phone": '+358406875453',
"alien_field_one": "some value",
"alien_field_two": "some other value"
}
Note that firstname, lastname and phone are valid, and alien_field_one is not available in user table in SUT.
Then, each request should fail with the following response body:
{
"message": "unknown field alien_field_one",
"status": "FAILURE"
}
This test not only verifies message and status but also verifies that no data in the database has changed.</doc>
<status status="FAIL" starttime="20210730 17:43:55.017" endtime="20210730 17:43:56.650">We expected a JSON, but received text/html</status>
</test>
<doc>This test suite contains test cases for CRF Demo API.
Documentation for the API can be found:
https://github.com/Interview-demoapp/Flasky
The acceptance criteria we verify here is
"3: As an API Consumer, if authenticated, I can update personal information of users"
Definitions
(1) System User: The user, who is registered to the system under test with a valid token
(2) API User: The user, who calls the API to update personal information of the system user</doc>
<status status="FAIL" starttime="20210730 17:40:20.122" endtime="20210730 17:43:56.654"/>
</suite>
<statistics>
<total>
<stat pass="0" fail="133" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="0" fail="133" skip="0" id="s1" name="3-Updating-Personal-Information">3-Updating-Personal-Information</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20210730 17:41:36.748" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFG Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210730 17:41:38.366" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFGH Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210730 17:41:39.981" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCDEFGHJKLMNPRSTOÖUÜVYZ Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210730 17:42:05.928" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD012 Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210730 17:42:07.553" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD0123 Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
<msg timestamp="20210730 17:42:10.782" level="WARN">Multiple test cases with name 'With Each Valid Token, Updating Password Of Each System User With ABCD!?. Results In "Field update not allowed"' executed in test suite '3-Updating-Personal-Information'.</msg>
</errors>
</robot>
